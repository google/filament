#/usr/bin/env/bash

set -e

# Compile resources.

# The hello-pbr app requires four resources:
# 1. The material sphere mesh
# 2. The Filament material definition
# 3. The IBL image
# 4. The skybox image
# These will be compiled into the final binary via the resgen tool.

filamesh_path="../../../out/release/filament/bin/filamesh"
matc_path="../../../out/release/filament/bin/matc"
resgen_path="../../../out/release/filament/bin/resgen"
cmgen_path="../../../out/release/filament/bin/cmgen"

# Ensure that the required tools are present in the out/ directory.
# These can be built by running ./build.sh -p desktop -i release at Filament's root directory.

if [[ ! -e "${filamesh_path}" ]]; then
  echo "No filamesh binary could be found in ../../../out/release/filament/bin/."
  echo "Ensure Filament has been built/installed before building this app."
  exit 1
fi

if [[ ! -e "${matc_path}" ]]; then
  echo "No matc binary could be found in ../../../out/release/filament/bin/."
  echo "Ensure Filament has been built/installed before building this app."
  exit 1
fi

if [[ ! -e "${resgen_path}" ]]; then
  echo "No resgen binary could be found in ../../../out/release/filament/bin/."
  echo "Ensure Filament has been built/installed before building this app."
  exit 1
fi

if [[ ! -e "${cmgen_path}" ]]; then
  echo "No cmgen binary could be found in ../../../out/release/filament/bin/."
  echo "Ensure Filament has been built/installed before building this app."
  exit 1
fi

# The filamesh tool converts the .obj file into a Filament-specific filamesh file that has been
# optimized for loading into Filament.
mkdir -p "${PROJECT_DIR}/generated/"
"${filamesh_path}" \
    "${PROJECT_DIR}/../../../assets/models/material_sphere/material_sphere.obj" \
    "${PROJECT_DIR}/generated/material_sphere.filamesh"

# The matc tool compiles the clear_coat.mat material into a Filament material BLOB.
"${matc_path}" \
    --api all \
    --platform mobile \
    -o "${PROJECT_DIR}/generated/clear_coat.filamat" \
    "${PROJECT_DIR}/Materials/clear_coat.mat"

# cmgen consumes an HDR environment map and generates two mipmapped KTX files (IBL and skybox)
"${cmgen_path}" \
    --deploy="${PROJECT_DIR}/generated" \
    --format=ktx --size=256 --extract-blur=0.1 \
    "${PROJECT_DIR}/../../../third_party/environments/venetian_crossroads_2k.hdr"

# The resgen tool generates an assembly file, resources.apple.S that gets compiled and linked
# into the final binary. It contains all the resources consumed by the app.
"${resgen_path}" \
    --deploy="${PROJECT_DIR}/generated" \
    "${PROJECT_DIR}/generated/material_sphere.filamesh" \
    "${PROJECT_DIR}/generated/clear_coat.filamat" \
    "${PROJECT_DIR}/generated/venetian_crossroads_2k/venetian_crossroads_2k_ibl.ktx" \
    "${PROJECT_DIR}/generated/venetian_crossroads_2k/venetian_crossroads_2k_skybox.ktx"

# FilamentApp.cpp and Resources.S include files generated by resgen.
# Touch them to force Xcode to recompile.
touch "${PROJECT_DIR}/hello-pbr/FilamentApp.cpp"
touch "${PROJECT_DIR}/hello-pbr/Resources.S"
