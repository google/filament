material {
    name : equirectToCube,
    parameters : [
        {
            type : sampler2d,
            name : equirect,
            precision: medium
        },
        {
            type : float,
            name : side,
            precision: medium
        },
        {
            type : float,
            name : mirror,
            precision: medium
        }
    ],
    outputs : [
        {
            name : outx,
            target : color,
            type : float3
        },
        {
            name : outy,
            target : color,
            type : float3
        },
        {
            name : outz,
            target : color,
            type : float3
        }
    ],
    variables : [
        vertex
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = uvToRenderTargetUV(postProcess.normalizedUV);
    }
}

fragment {

void dummy() {}

highp vec2 toEquirect(const highp vec3 s) {
    highp float xf = atan(s.x, s.z) * (1.0 / PI);   // range [-1.0, 1.0]
    highp float yf = asin(s.y) * (2.0 / PI);        // range [-1.0, 1.0]
    xf = (xf + 1.0) * 0.5;                          // range [0, 1.0]
    yf = (1.0 - yf) * 0.5;                          // range [0, 1.0]
    return vec2(xf, yf);
}

mediump vec3 sampleEquirect(mediump sampler2D equirect, const highp vec3 r) {
    mediump vec3 c = texture(equirect, toEquirect(r)).rgb;
    return clamp(c, 0.0, 65536.0); // clamp to get rid of possible +inf
}

void postProcess(inout PostProcessInputs postProcess) {
    highp vec2 uv = variable_vertex.xy; // interpolated at pixel's center
    highp vec2 p = vec2(
        uv.x * 2.0 - 1.0,
        1.0 - uv.y * 2.0);

    float side = materialParams.side;
    float mirror = materialParams.mirror;
    highp float l = inversesqrt(p.x * p.x + p.y * p.y + 1.0);

    // compute the view (and normal, since v = n) direction for each face
    highp vec3 rx = vec3(      side * mirror,  p.y,  side * -p.x);
    highp vec3 ry = vec3(       p.x * mirror,  side, side * -p.y);
    highp vec3 rz = vec3(side * p.x * mirror,  p.y,  side);

    postProcess.outx = sampleEquirect(materialParams_equirect, rx * l);
    postProcess.outy = sampleEquirect(materialParams_equirect, ry * l);
    postProcess.outz = sampleEquirect(materialParams_equirect, rz * l);
}

}
