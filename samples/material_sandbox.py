#!/usr/bin/env python3

import os
import sys
import argparse
out_dir = 'out/cmake-release/samples'
sys.path.append(os.path.abspath(out_dir))
import pyfilament as filament


# res = filament.add(1, 2)

# print(res)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='sample_material is an example of clear coat materials')
    parser.add_argument('mesh', nargs='+', help='<mesh files (.obj, .fbx, COLLADA)>')
    parser.add_argument('-a', '--api', dest='api', help='Specify the backend API: opengl (default) or vulkan', type=str, default='OPENGL')
    parser.add_argument('-i', '--ibl', dest='ibl', help='Applies an IBL generated by cmgen\'s deploy option', type=str, required=True)
    parser.add_argument('-v', '--split-view', dest='split_view', help='Splits the window into 4 views', action='store_false')
    parser.add_argument('-p', '--shadow-plane', dest='shadow_plane', help='Enable shadow plane', action='store_false')
    parser.add_argument('-debug', '--debug', action='store_true')
    args = parser.parse_args()

    config = filament.Config()
    config.title = "Material Sandbox"
    config.ibl_dir = os.path.abspath(args.ibl)
    config.backend = args.api
    print(config.title, config.backend)
    models = [os.path.abspath(mesh) for mesh in args.mesh]
    filament.set_mesh(models)
    app = filament.Filament_App.get()
    app.run(config, filament.setup, filament.cleanup, filament.gui)
