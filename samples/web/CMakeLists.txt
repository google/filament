cmake_minimum_required(VERSION 3.1)
project(web-samples)

# ==================================================================================================
# To fetch materials, the web samples can either: (1) use #include or (2) download filamat files.
# For simplicity, we generate both types of files for each material.
# ==================================================================================================

set(MATERIAL_NAMES
        sandboxCloth
        sandboxLit
        sandboxLitFade
        sandboxLitTransparent
        sandboxSubsurface
        sandboxUnlit
        texturedLit
        bakedColor)

if (CMAKE_CROSSCOMPILING)
    include(${IMPORT_EXECUTABLES})
endif()

set(MATC_FLAGS -a opengl -m material -p mobile)
if (CMAKE_BUILD_TYPE MATCHES Release)
    set(MATC_FLAGS -O ${MATC_FLAGS})
endif()

set(GENERATION_ROOT ${CMAKE_CURRENT_BINARY_DIR})
file(MAKE_DIRECTORY "${GENERATION_ROOT}/generated/material/")
file(MAKE_DIRECTORY "public/material/")

set(MATERIAL_BINS)
foreach (NAME ${MATERIAL_NAMES})
    set(mat_src "../materials/${NAME}.mat")
    get_filename_component(localname "${mat_src}" NAME_WE)
    get_filename_component(fullname "${mat_src}" ABSOLUTE)
    set(output_inc "${GENERATION_ROOT}/generated/material/${localname}.inc")
    set(output_bin "public/material/${localname}.filamat")
    add_custom_command(
            OUTPUT ${output_inc} ${output_bin}
            COMMAND matc ${MATC_FLAGS} -f header -o ${output_inc} ${fullname}
            COMMAND matc ${MATC_FLAGS} -o ${output_bin} ${fullname}
            MAIN_DEPENDENCY ${mat_src}
            DEPENDS matc
            COMMENT "Compiling material ${mat_src} to ${output_path}")
    list(APPEND MATERIAL_BINS ${output_inc} ${output_bin})
endforeach()

add_custom_target(sample_materials DEPENDS ${MATERIAL_BINS})

# ==================================================================================================
# Build Assets.
#
# The goal is to create a "public" folder that can be the root of a simple file server:
#
#    /suzanne.js                   built by em++
#    /suzanne.wasm                 built by em++
#    /suzanne.html                 copied from REPO/samples/web
#    /filaweb.js                   copied from REPO/samples/web
#    /favicon.png                  copied from REPO/samples/web
#    /monkey/*.ktx                 generated by mipgen from REPO/assets/models
#    /monkey/*.filamesh            built by filamesh
#    /syferfontein_18d_clear_2k/*  built by cmgen
#
# ==================================================================================================

function(copy_assets PATH NAME)
    file(COPY ${PATH}/${NAME} DESTINATION ${PROJECT_BINARY_DIR}/public)
    add_custom_target(${NAME} ALL DEPENDS ${NAME})
    add_dependencies(filament ${NAME})
endfunction()

copy_assets("." filaweb.js)
copy_assets("." favicon.png)

# Generate mipmapped KTX files from various PNG files using mipgen.
function(add_ktxfiles SOURCE TARGET EXTRA_ARGS)
    set(source_path "${CMAKE_CURRENT_SOURCE_DIR}/../../${SOURCE}")
    set(target_path "public/${TARGET}")
    set(target_ktxfiles ${target_ktxfiles} ${target_path} PARENT_SCOPE)
    add_custom_command(
        OUTPUT ${target_path}
        COMMAND mipgen --strip-alpha ${EXTRA_ARGS} ${source_path} ${target_path}
        MAIN_DEPENDENCY ${source_path}
        DEPENDS mipgen)
endfunction()

set(ETC_R11_ARGS "--grayscale;--compression=etc_r11_numeric_40")

# TODO: Instead of "rgb8" we should be using "rg11", but that causes an assertion in etc2comp.
set(ETC_NORMALS_ARGS "--kernel=NORMALS;--linear;--compression=etc_rgb8_normalxyz_40")

add_ktxfiles("assets/models/monkey/albedo.png" "monkey/albedo.ktx" "")
add_ktxfiles("assets/models/monkey/albedo.png" "monkey/albedo_astc.ktx" "--compression=astc_fast_ldr_4x4")
add_ktxfiles("assets/models/monkey/albedo.png" "monkey/albedo_s3tc.ktx" "--compression=s3tc_rgb_dxt1")
add_ktxfiles("assets/models/monkey/normal.png" "monkey/normal.ktx" "--kernel=NORMALS;--linear")
add_ktxfiles("assets/models/monkey/normal.png" "monkey/normal_etc.ktx" "${ETC_NORMALS_ARGS}")
add_ktxfiles("assets/models/monkey/roughness.png" "monkey/roughness.ktx" "--grayscale")
add_ktxfiles("assets/models/monkey/roughness.png" "monkey/roughness_etc.ktx" "${ETC_R11_ARGS}")
add_ktxfiles("assets/models/monkey/metallic.png" "monkey/metallic.ktx" "--grayscale")
add_ktxfiles("assets/models/monkey/metallic.png" "monkey/metallic_etc.ktx" "${ETC_R11_ARGS}")
add_ktxfiles("assets/models/monkey/ao.png" "monkey/ao.ktx" "--grayscale")
add_ktxfiles("assets/models/monkey/ao.png" "monkey/ao_etc.ktx" "${ETC_R11_ARGS}")

# Convert OBJ files into filamesh files.
function(add_mesh SOURCE TARGET)
    set(source_mesh "${CMAKE_CURRENT_SOURCE_DIR}/../../${SOURCE}")
    set(target_mesh "public/${TARGET}")
    set(target_meshes ${target_meshes} ${target_mesh} PARENT_SCOPE)
    add_custom_command(
        OUTPUT ${target_mesh}
        COMMAND filamesh ${source_mesh} ${target_mesh}
        MAIN_DEPENDENCY ${source_mesh}
        DEPENDS filamesh)
endfunction()

add_mesh("assets/models/monkey/monkey.obj" "monkey/mesh.filamesh")
add_mesh("third_party/shader_ball/shader_ball.obj" "shaderball/mesh.filamesh")

# Generate IBL and skybox images using cmgen.
set(CMGEN_ARGS -x public --format=ktx --size=256 --extract-blur=0.1)
set(CMGEN_ARGS_S3TC ${CMGEN_ARGS} --compression=s3tc_rgba_dxt5)
set(CMGEN_ARGS_ETC ${CMGEN_ARGS} --compression=etc_rgba8_rgba_40)
function(add_envmap SOURCE TARGET)
    set(source_envmap "${CMAKE_CURRENT_SOURCE_DIR}/../../${SOURCE}")

    file(MAKE_DIRECTORY "public/${TARGET}")

    set(target_skybox "public/${TARGET}/${TARGET}_skybox.ktx")
    set(target_envmap "public/${TARGET}/${TARGET}_ibl.ktx")

    set(target_envmap_etc "public/${TARGET}/${TARGET}_ibl_etc.ktx")
    set(target_envmap_s3tc "public/${TARGET}/${TARGET}_ibl_s3tc.ktx")

    set(target_skyboxes ${target_skyboxes} ${target_skybox} PARENT_SCOPE)

    set(target_envmaps ${target_envmaps}
            ${target_envmap} ${target_envmap_etc} ${target_envmap_s3tc} PARENT_SCOPE)

    add_custom_command(OUTPUT ${target_skybox}
                ${target_envmap} ${target_envmap_etc} ${target_envmap_s3tc}

        # First create an S3TC-encoded envmap, then rename it.
        COMMAND cmgen ${CMGEN_ARGS_S3TC} ${source_envmap}
        COMMAND mv ${target_envmap} ${target_envmap_s3tc}

        # Now create an ETC-encoded envmap, then rename it.
        COMMAND cmgen ${CMGEN_ARGS_ETC} ${source_envmap}
        COMMAND mv ${target_envmap} ${target_envmap_etc}

        # Finally, create KTX files for the uncompressed envmap.
        COMMAND cmgen ${CMGEN_ARGS} ${source_envmap}

        MAIN_DEPENDENCY ${source_envmap}
        DEPENDS cmgen)
endfunction()

add_envmap("third_party/environments/syferfontein_18d_clear_2k.hdr" "syferfontein_18d_clear_2k")
add_envmap("third_party/environments/pillars_2k.hdr" "pillars_2k")

add_custom_target(sample_assets DEPENDS
    ${target_ktxfiles}
    ${target_meshes}
    ${target_envmaps}
    ${target_skyboxes})

# ==================================================================================================
# For each demo, build a pair of wasm/js files and copy over an HTML file.
# ==================================================================================================

set(EXPORTS "'_launch','_main','_render','_resize','_mouse'")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s EXPORTED_FUNCTIONS=[${EXPORTS}]")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s ALLOW_MEMORY_GROWTH=1")
if (CMAKE_BUILD_TYPE MATCHES Debug)
    # Note that emcc offers a SAFE_HEAP=1 option to perform extra memory checks. Ideally we would
    # enable it for debug builds, but currently it triggers an abort due to the custom memory
    # alignments that Filament uses for various objects. This merits further investigation.
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s ASSERTIONS=2")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s DEMANGLE_SUPPORT=1")
endif()

function(add_demo NAME)
    include_directories(${GENERATION_ROOT})
    add_executable(${NAME} ${NAME}.cpp
            ../app/CameraManipulator.cpp
            filaweb.h
            filaweb.cpp)
    add_dependencies(${NAME} sample_materials sample_assets)
    target_link_libraries(${NAME} PRIVATE filament filagui filameshio image math utils)

    # Copy the generated js and wasm files into the public folder, as well as the app-specific
    # manually-written HTML file.
    add_custom_command(
        OUTPUT ${PROJECT_BINARY_DIR}/public/${NAME}.js
        DEPENDS ${NAME} ${PROJECT_BINARY_DIR}/${NAME}.js ${CMAKE_CURRENT_SOURCE_DIR}/${NAME}.html
        COMMAND cmake -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${NAME}.html ${PROJECT_BINARY_DIR}/public
        COMMAND cmake -E copy ${PROJECT_BINARY_DIR}/${NAME}.* ${PROJECT_BINARY_DIR}/public)
    add_custom_target(${NAME}_public ALL DEPENDS ${PROJECT_BINARY_DIR}/public/${NAME}.js)

endfunction()

add_demo(suzanne)
add_demo(triangle)
add_demo(sandbox)
