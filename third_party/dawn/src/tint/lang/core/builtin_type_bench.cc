// Copyright 2022 The Dawn & Tint Authors
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

////////////////////////////////////////////////////////////////////////////////
// File generated by 'tools/src/cmd/gen' using the template:
//   src/tint/lang/core/builtin_type_bench.cc.tmpl
//
// To regenerate run: './tools/run gen'
//
//                       Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include "src/tint/lang/core/builtin_type.h"

#include <array>

#include "benchmark/benchmark.h"

namespace tint::core {
namespace {

void BuiltinTypeParser(::benchmark::State& state) {
    const char* kStrings[] = {
        "__atomic_compareexchangeccresult_i32",
        "__atoml3_compare_exchane_resulti2",
        "__atomic_compare_Vxchange_result_i32",
        "__atomic_compare_exchange_result_i32",
        "__atomic_com1are_exchange_result_i32",
        "__atomic_qqompare_exchage_resulJ_i32",
        "__atllmic_compare_exchange_result_i377",
        "__atomicppcompareqqexchange_reslt_uHH2",
        "__atomi_compare_exchavge_cesult_3",
        "__atomic_copare_eGbhange_result_u32",
        "__atomic_compare_exchange_result_u32",
        "__atomic_coiipare_exvhange_result_u32",
        "__atomic_compaWWe_excha8ge_result_u32",
        "__atomic_comparxxMexchage_result_u32",
        "__fXexp_resgglt_bstract",
        "V_frexp_resul_abuXrct",
        "__frexp_result_abstra3t",
        "__frexp_result_abstract",
        "__frexp_resElt_abstract",
        "__frexTT_Pesult_abstract",
        "__frexp_resulxxddabstrct",
        "44_frexp_result_f16",
        "_VVfrexp_resulSS_f16",
        "__frexp_reRult_fR6",
        "__frexp_result_f16",
        "__frFxp_re9ut_f16",
        "__frep_result_f16",
        "__frRRVH_rOOsultf16",
        "__frepyresult_f32",
        "_nrr77rexp_result_fGll",
        "__4rex00_result_f32",
        "__frexp_result_f32",
        "__oorep_reult_f2",
        "__fzzexp_result_3",
        "__iir11x_respplt_f3",
        "__frexp_resuXXt_vec2_abstract",
        "55n99frexp_result_vec2_abstraIIt",
        "__fHHexpSSaresrrlt_Yec2_abstract",
        "__frexp_result_vec2_abstract",
        "__freHp_resutve2_abstkkact",
        "jfrexpgresult_veRR2_abstrac",
        "__frexp_resul_vec2_absbrac",
        "_jfrexp_result_vec2_f16",
        "__frexp_resultvec2_f16",
        "__freqpresultvec2_f16",
        "__frexp_result_vec2_f16",
        "__frexNN_result_vec_f16",
        "__frexp_resvvlt_vc2_f1",
        "__frexp_esult_vec2_f1QQ",
        "__rerp_result_ffec2_f2",
        "__frexp_result_vjc2_f32",
        "__frewwp_reul2_vec2_NN82",
        "__frexp_result_vec2_f32",
        "__frexpresult_vec2_f32",
        "__frexp_result_vec2_frr2",
        "_Gfrexp_result_vec2_f32",
        "__frexp_resulFF_vec3_abstract",
        "_frexp_resultvec3_Estract",
        "__fexp_result_vec3_abstrract",
        "__frexp_result_vec3_abstract",
        "frexp_result_vec3_abstract",
        "D_rexp_resXlt_veJJ3_abstract",
        "_frexp_resut_v8c_abstract",
        "_frexp_rsl1k_vec3_f16",
        "__frexp_reslt_vec3_f16",
        "__frexJ_reult_vec3_f16",
        "__frexp_result_vec3_f16",
        "c_frexp_result_vec3_f16",
        "__frexp_result_vec3Of16",
        "___frexp_reKKultvvvec3_f1tt",
        "8_frexp_reult_vxxc3_f32",
        "_frexp_resul___veFqqf32",
        "_qqfrexp_result_vec_f32",
        "__frexp_result_vec3_f32",
        "33_fOexp_result_ve3_6632",
        "__oorexQQ_rttsult_ve639f32",
        "__rexp_result_vec3_f662",
        "__frexp_reszzlt_Oc4xabstrac66",
        "__frexp_resyylt_vec4_abstract",
        "__frexp_resut_vecHH_aZsracZ",
        "__frexp_result_vec4_abstract",
        "_WWfrex44_resulq_vec4_astract",
        "__frexp_rsult_veOO4_abstract",
        "__frexp_resultoovc4_abstYct",
        "_frexp_esultvec4_f16",
        "__Frexp_result_ec4_f16",
        "__frewp_resut_vec4_f16",
        "__frexp_result_vec4_f16",
        "__frexp_reslt_veK4fG16",
        "__fqexp_result_veKK4_f16",
        "_F3rexp_result_vec4_f1mm",
        "__frexp_result_ec4_f32",
        "__frexp_result_qe4_f32",
        "__frbbxp_result_vec4_b2",
        "__frexp_result_vec4_f32",
        "__frexp_reslt_iiec4_f2",
        "__frexO_resulq_vec4_f32",
        "__frexp_resulTT_vec4vvf32",
        "__modf_resulFF_abstract",
        "fm00df_rePult_abstraQt",
        "__modf_result_abstPact",
        "__modf_result_abstract",
        "_modf_result_abstssac77",
        "__modf_resulC_bbRbstract",
        "__modf_result_abstracXX",
        "__OOofCCresuOOt_f16",
        "_smodf_resuutfL6",
        "__modX_result_f16",
        "__modf_result_f16",
        "__modf_reult_f16",
        "__modf_resqqO16",
        "__modf22result_f16",
        "__modf_X0eszzlt_fy",
        "_VVmPf_result_f3i",
        "__monnfCresultf32",
        "__modf_result_f32",
        "_HHAmodf_resqltf32",
        "__modf_resut_f32",
        "__modresuft_f3KK",
        "__modlPrsultggvec2_astract",
        "__odf_result_vec2_abstract",
        "__mocTf_result_vNc2_abstra4t",
        "__modf_result_vec2_abstract",
        "__modf77result_vec2_plbtract",
        "__mdf_resultNNvec2zabstgact",
        "_modf_bbesult_vuuc2_abtraXXt",
        "__modf_esult_vec2_f16",
        "__mQdf_esuKt_vec_8816",
        "q_m9dfresult_vec2_f16",
        "__modf_result_vec2_f16",
        "__11odf_result_vec2_f16",
        "_iimodf_result_vF222f16",
        "_77modf_result_vec2f16",
        "__odfNNr2sult_vec2_f32",
        "__modf_rVVsult_vec2_f32",
        "__modf_Fesult_vewW2_f311",
        "__modf_result_vec2_f32",
        "__modf_rwwsult_vec_f32",
        "__modf_result_Dec2_f32",
        "__modf_result_ec2_f3K",
        "__modf_resul1PP_vech_abstfact",
        "__modf_result_vec_abstract",
        "__YYodf_result_vec3_abstract",
        "__modf_result_vec3_abstract",
        "__mHHdfresult_kkec3_abstract",
        "__modf_result_vec3rrabstract",
        "__modf_ssesulWW_vec_abstract",
        "__mYdf_reslt_vec3_f16",
        "q_modLrfsult_vec3_f16",
        "uu_vvo22f_rfsult_ec3_f16",
        "__modf_result_vec3_f16",
        "__mdf_reslt_vec3_f16",
        "__modfYYresult_ve3f16",
        "__modfEr77sult_vec3_yY16",
        "__odf_desuMot_vec3_f32",
        "__mMMf_result_vec3_f32",
        "__modf_result_vec3_f355",
        "__modf_result_vec3_f32",
        "__modf_rest_vec3Nf32",
        "_m33df_result_Oec3_f32",
        "__modf_re3ult_vec3_f32",
        "__momf_esult_Iec4_abstract",
        "__modf_resultrvec4_absnnracK",
        "__modf_eslt_ve4_absXXact",
        "__modf_result_vec4_abstract",
        "__modf_rsult_pLLI4_abstract",
        "_modf_resflt_vec4_bstract",
        "_Ymodf_resultURDec4_abtract",
        "__hodf_result_vec4_f16",
        "__moquu_rslt_vec4_f1II",
        "__modf_result_vecH_f16",
        "__modf_result_vec4_f16",
        "__oQQf_resultvvvc4_f16",
        "__modf_eeult66ec4_f16",
        "_Omodf_r7sut_vec4_W16",
        "__modf_DDes0lt_v55c4_f32",
        "__modf_rIIsult_Hec4_f32",
        "_modf_result_vec4_f32",
        "__modf_result_vec4_f32",
        "_modf_result_vrc4_f32",
        "_lmodf_result_vec4_f32",
        "tt_modfGeslt_vec4_fJJ2",
        "ryay",
        "aray",
        "IIrBBay",
        "array",
        "TTrr338",
        "arUUSSannd",
        "aZx5CC",
        "aqkomic",
        "5iiop00",
        "annoIIic",
        "atomic",
        "cctKi",
        "aoKK",
        "at66mic",
        "bindPPng_arKK",
        "bixxding_arry",
        "bindiqg_array",
        "binding_array",
        "MMindinSSyyarry",
        "binding_uay",
        "indigSaray",
        "5oFFl",
        "borz4l",
        "WW",
        "bool",
        "ZJJCoX",
        "boPP",
        "bocl",
        "fll66",
        "91yy",
        "f1KK",
        "f16",
        "x_",
        "K",
        "kVz",
        "K3S",
        "f2",
        "fVV",
        "f32",
        "IAU2",
        "j",
        "Y4",
        "i2",
        "1xx",
        "ccm",
        "i32",
        "iJJ",
        "UfCDD",
        "i3g",
        "inCCt_atachmen",
        "iput_attachment",
        "input__attachmenI",
        "input_attachment",
        "inpt_PttttaNment",
        "input_attddc3ment",
        "inKutyyattahment",
        "mtx",
        "mat03nn",
        "mvtnCuuK",
        "mat2x2",
        "lXatx2",
        "matppxo",
        "maw2x2",
        "matguum",
        "mt2ma2",
        "Tat2xZRRf",
        "mat2x2f",
        "ma8T2xOf",
        "m0at2x2f",
        "mBBt2x2f",
        "at2ppM",
        "matOO2h",
        "mGG2x2G",
        "mat2x2h",
        "mHHt2x11h",
        "eat2x6Fh",
        "atx2h",
        "mKl2ii3",
        "at2x3",
        "9IIat2x3",
        "mat2x3",
        "ma2x3",
        "hat2x3",
        "zzPt2xll",
        "t3f",
        "mtffxqqf",
        "mtJJx3dd",
        "mat2x3f",
        "mzz2X3f",
        "matx32",
        "maN2yy3f",
        "mt2O3",
        "uZtrx3h",
        "latdde23h",
        "mat2x3h",
        "matVVh",
        "1IIt2x3",
        "mat2xbh",
        "t7i4",
        "maio2x4",
        "a5x4",
        "mat2x4",
        "St2x4",
        "m22tx",
        "maC7G4",
        "maff284f",
        "t2x4f",
        "SSatJJx4f",
        "mat2x4f",
        "atx9f",
        "maJJbbTT4f",
        "66a2xf",
        "ut2x466",
        "aW2x4h",
        "mtx4h",
        "mat2x4h",
        "mOt2x4",
        "THat2xBB",
        "maRR2xh",
        "VLLa30",
        "at3KOO",
        "awg3x2",
        "mat3x2",
        "maLhhp",
        "iitEx2",
        "at3x2",
        "UUa3882",
        "rrvvt3x2f",
        "m3xwmm",
        "mat3x2f",
        "j443x2f",
        "matXx2f",
        "mat8x2f",
        "mvEE3x2h",
        "mai93zz",
        "mQQJJnxGGh",
        "mat3x2h",
        "mass3x2h",
        "matKxPh",
        "mat3tth",
        "atx3",
        "maMM3x3",
        "mJ0t3x3",
        "mat3x3",
        "V38",
        "hggat3x3",
        "maf3x3",
        "matQ7x3f",
        "mat3YYf",
        "mak3x3",
        "mat3x3f",
        "man3x2",
        "ma3FFf",
        "uGGtIUPP3f",
        "EEvFx3h",
        "ddtBBDDeh",
        "m55tMccE3",
        "mat3x3h",
        "aKKx3",
        "mat3x3R",
        "maDx39",
        "mt3x4",
        "aIt34",
        "mat3x77",
        "mat3x4",
        "matIx4",
        "matd4",
        "mt3x4",
        "mtt4f",
        "ma3XX3x4f",
        "Eat34f",
        "mat3x4f",
        "maXX3x4",
        "matxBx4f",
        "m3x4f",
        "mat3x466",
        "matxv0",
        "txh",
        "mat3x4h",
        "mpt3xh",
        "at114h",
        "EaJ3yBBh",
        "mqIm4x2",
        "ma4F2",
        "aY4x2",
        "mat4x2",
        "matDHh2",
        "24H2",
        "m4x2",
        "matx2f",
        "matx2f",
        "matddx2f",
        "mat4x2f",
        "Oat4x2f",
        "atBbb2",
        "m004x2f",
        "mat4xhh",
        "mgYtx2h",
        "mat4O2h",
        "mat4x2h",
        "ah4xh",
        "fpaEEx2h",
        "mavx2h",
        "at4zz3",
        "mat4x",
        "OiiJt4",
        "mat4x3",
        "mGt4xf",
        "mTT224x3",
        "lat4x3",
        "bat4x3f",
        "BBatx3f",
        "PPIXt4S3f",
        "mat4x3f",
        "mjjt4x3f",
        "_at4xccf",
        "ax6z4xSSf",
        "a4xG",
        "mx44N3v",
        "atAAx00p",
        "mat4x3h",
        "eeytyh",
        "mabWWx0h",
        "ttatMMxmh",
        "4d4",
        "mav_x",
        "mVt4xEE",
        "mat4x4",
        "m4t4x4",
        "mVVtgxX",
        "oat4V4",
        "ma4x4f",
        "KKattxf",
        "G4xf",
        "mat4x4f",
        "ma4x4",
        "mad4x4f",
        "CCat4xPtf",
        "matx4",
        "m5t4x4h",
        "m9jtffx4h",
        "mat4x4h",
        "matRvxXXh",
        "ctx4h",
        "XX8t5x4",
        "t",
        "ppcc",
        "vtr",
        "ptr",
        "EESS",
        "p",
        "",
        "saplwwr",
        "sa99plddr",
        "99amplP",
        "sampler",
        "saKKler",
        "smDDooeM",
        "smlei",
        "samler_comparqon",
        "samplercmparis0LLn",
        "snvvpler_com66arison",
        "sampler_comparison",
        "samplen_comparison",
        "samlercompeerixxon",
        "sONNpler_comparCCson",
        "sbgroup_matrix_left",
        "sub4roup_matrixaleft",
        "subgroup_mtriNNN_left",
        "subgroup_matrix_left",
        "subgrou_matrix_left",
        "suburu_matrix_left",
        "subgroYYp_AStrix_lfEE",
        "subgroup_matrix_r0sult",
        "saabgroup_matrix_result",
        "sqqbgommp_matix_result",
        "subgroup_matrix_result",
        "subgroup_atrix_result",
        "sUEbgroup_matr_result",
        "subgroDDp_mKKtri_esult",
        "subgro__p_matrtx_rig0t",
        "ubproup_matrix_Aght",
        "subMroupmatrix_right",
        "subgroup_matrix_right",
        "subgrBBup_matrix_right",
        "ubg99oubb_mnntrix_ight",
        "subgroupmAAtrix_rEEght",
        "tex66ur5_1d",
        "tHxture_1d",
        "teHHuxe_1d",
        "texture_1d",
        "tzxturny_0d",
        "teture_1d",
        "Hexture1k",
        "tcxture_d",
        "orrxtur_2d",
        "teJJtr_2d",
        "texture_2d",
        "texC0ure_2",
        "tAAtFre_99x",
        "texture_cd",
        "texture_Sd_array",
        "textureo2_arBBay",
        "texture_2d_aray",
        "texture_2d_array",
        "textumme2d_array",
        "toxture_ggdQQaPPay",
        "eture_2d_Brr",
        "tllNrKK_3d",
        "trrure_3d",
        "texprre_3d",
        "texture_3d",
        "PPexyure_3d",
        "tccZtur_3d",
        "textur_3",
        "texture00cube",
        "eJssurBB_cPPbe",
        "tffxtuwwe_JJbf",
        "texture_cube",
        "texXXu1e_cuI",
        "teu_ube",
        "textue_cube",
        "tuxtreKKcube_array",
        "44edture_cubm_aray",
        "pexture_cuoe_array",
        "texture_cube_array",
        "textre_cjbhh_NNrHHay",
        "textu33e_cube_aErwwUU",
        "texture_cue_uuray",
        "texddrrre_eKth_cd",
        "tttture_dePPthr2d",
        "t1xture_desthww2d",
        "texture_depth_2d",
        "textuce_depth_nn11",
        "texture_depth2d",
        "texture_depth_d",
        "t66xture_depaahI2SSarray",
        "tExDure_depth_2d_array",
        "VeRturcc_depth_2d_Irray",
        "texture_depth_2d_array",
        "texte_depth_2d_array",
        "texture_dethaa2d_hrray",
        "texture_epLLh_2d_arraS",
        "txfumm_depth_cubr",
        "txture_deqth_Vu4m",
        "extu__e_dpth_cube",
        "texture_depth_cube",
        "texture_dQph_cub",
        "tddxure_depRRhEcube",
        "textur_de9th_cube",
        "txture_depthCCcub_ar0y",
        "zextureepth_cube_array",
        "texture_depth_cccbe_array",
        "texture_depth_cube_array",
        "textureOdept_cub__aQQray",
        "ttexture_epth_cue_array",
        "Eppx33zzre_depth_cube_aCCray",
        "thhxture_depth_multisampledd_2d",
        "exture_depth_mu66ti77ampled_2d",
        "texture_depth_Pultisampled_2d",
        "texture_depth_multisampled_2d",
        "texture_depth_multisamplew_2d",
        "texue_depuuh_mulisampled_2d",
        "texture_depth_multiXXampled_2d",
        "teturRRxternal",
        "tVVxture_etena",
        "HHGexture_external",
        "texture_external",
        "MFFxture_exte7nal",
        "exture_external",
        "textggre_3xtTra",
        "te1tu_e_PultiQamplKKd_2d",
        "texture_mulEisamped_2d",
        "texturemultisaMpled_d",
        "texture_multisampled_2d",
        "tex77ure_mSSltGGXamled_2d",
        "textFFre_multiKmpled_2tt",
        "tZZUxturss_oultisampled_2d",
        "texturestorage_1d",
        "telture_storage_1d",
        "texture_htorage_1d",
        "texture_storage_1d",
        "texturTTKstorage_d",
        "texturww_storagee1",
        "textureKsjjragvv_1d",
        "teYYtur_storage2d",
        "EIIxture_stoage_2d",
        "texture_storage_2QQ",
        "texture_storage_2d",
        "teturelstoraPe2d",
        "texture_storagffH2d",
        "textune_storage_2d",
        "Fexture_stora66e_g_array",
        "text8re_storage_2d_assrah",
        "texure_storaFFe_2d_allray",
        "texture_storage_2d_array",
        "tjjxte_00torage_2d2array",
        "tegture_storage_2d_array",
        "texture_eorage_2d_array",
        "texture_storaffe_d",
        "exture_strae_3d",
        "texture_sorage_3d",
        "texture_storage_3d",
        "textue_storage_qqd",
        "txtur_stoAAage_d",
        "vxture_storage_3d",
        "jj2",
        "uZZ2",
        "O2II2",
        "u32",
        "u3ZZ",
        "u3nn",
        "kkZ222",
        "vec",
        "eR",
        "v99cqq",
        "vec2",
        "v77c2",
        "3c",
        "ueccc",
        "vRR2f",
        "vc2JJl",
        "MMf",
        "vec2f",
        "v66T7",
        "vQQcJf",
        "Auc2",
        "ve2",
        "yeq3",
        "vec2xx",
        "vec2h",
        "crr",
        "v99ch",
        "vech",
        "ecHl",
        "e_i",
        "uec2",
        "vec2i",
        "vc2i",
        "EEtmec2i",
        "vec",
        "ec2rr",
        "xc2u",
        "vezz",
        "vec2u",
        "vec2e",
        "uc2Zp",
        "00uc7TT",
        "vv3",
        "veQ3",
        "RC3",
        "vec3",
        "",
        "vpPPr",
        "8xxDDc3",
        "lldmYYqqf",
        "vFFc__",
        "rrNNc3f",
        "vec3f",
        "leM3f",
        "c3",
        "xlc3f",
        "ec3h",
        "ae44h",
        "vec3WW",
        "vec3h",
        "vecjj",
        "vjjc3h",
        "vj1h",
        "vc3i",
        "vec399",
        "vyVV3i",
        "vec3i",
        "ec3xZ",
        "v33vvi",
        "vecs9",
        "veF3",
        "uec3u",
        "eIKK",
        "vec3u",
        "ve3J",
        "vSSCCXXu",
        "JecWW6ZZ",
        "5m4",
        "vBBU4",
        "JJ0114",
        "vec4",
        "ttfc4",
        "vtt",
        "Lwc4",
        "v1c4f",
        "veww4f",
        "ece",
        "vec4f",
        "vc4f",
        "vec4NN",
        "vUlRR__f",
        "vecHh",
        "vrCC4h",
        "Wec4",
        "vec4h",
        "vvcIh",
        "Ne4",
        "",
        "vxxqqRGi",
        "vecGSi",
        "qcc4i",
        "vec4i",
        "ec4",
        "veQi",
        "vzzQQi",
        "3c4u",
        "ve4",
        "Oec",
        "vec4u",
        "THHc4",
        "66SSc4O",
        "ddYTT4u",
    };
    for (auto _ : state) {
        for (auto* str : kStrings) {
            auto result = ParseBuiltinType(str);
            benchmark::DoNotOptimize(result);
        }
    }
}  // NOLINT(readability/fn_size)

BENCHMARK(BuiltinTypeParser);

}  // namespace
}  // namespace tint::core
