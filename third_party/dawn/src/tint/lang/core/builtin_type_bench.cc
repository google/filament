// Copyright 2022 The Dawn & Tint Authors
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

////////////////////////////////////////////////////////////////////////////////
// File generated by 'tools/src/cmd/gen' using the template:
//   src/tint/lang/core/builtin_type_bench.cc.tmpl
//
// To regenerate run: './tools/run gen'
//
//                       Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include "src/tint/lang/core/builtin_type.h"

#include <array>

#include "benchmark/benchmark.h"

namespace tint::core {
namespace {

void BuiltinTypeParser(::benchmark::State& state) {
    const char* kStrings[] = {
        "__atomic_compareexchangeccresult_i32",
        "__atoml3_compare_exchane_resulti2",
        "__atomic_compare_Vxchange_result_i32",
        "__atomic_compare_exchange_result_i32",
        "__atomic_com1are_exchange_result_i32",
        "__atomic_qqompare_exchage_resulJ_i32",
        "__atllmic_compare_exchange_result_i377",
        "__atomicppcompareqqexchange_reslt_uHH2",
        "__atomi_compare_exchavge_cesult_3",
        "__atomic_copare_eGbhange_result_u32",
        "__atomic_compare_exchange_result_u32",
        "__atomic_coiipare_exvhange_result_u32",
        "__atomic_compaWWe_excha8ge_result_u32",
        "__atomic_comparxxMexchage_result_u32",
        "__fXexp_resgglt_bstract",
        "V_frexp_resul_abuXrct",
        "__frexp_result_abstra3t",
        "__frexp_result_abstract",
        "__frexp_resElt_abstract",
        "__frexTT_Pesult_abstract",
        "__frexp_resulxxddabstrct",
        "44_frexp_result_f16",
        "_VVfrexp_resulSS_f16",
        "__frexp_reRult_fR6",
        "__frexp_result_f16",
        "__frFxp_re9ut_f16",
        "__frep_result_f16",
        "__frRRVH_rOOsultf16",
        "__frepyresult_f32",
        "_nrr77rexp_result_fGll",
        "__4rex00_result_f32",
        "__frexp_result_f32",
        "__oorep_reult_f2",
        "__fzzexp_result_3",
        "__iir11x_respplt_f3",
        "__frexp_resuXXt_vec2_abstract",
        "55n99frexp_result_vec2_abstraIIt",
        "__fHHexpSSaresrrlt_Yec2_abstract",
        "__frexp_result_vec2_abstract",
        "__freHp_resutve2_abstkkact",
        "jfrexpgresult_veRR2_abstrac",
        "__frexp_resul_vec2_absbrac",
        "_jfrexp_result_vec2_f16",
        "__frexp_resultvec2_f16",
        "__freqpresultvec2_f16",
        "__frexp_result_vec2_f16",
        "__frexNN_result_vec_f16",
        "__frexp_resvvlt_vc2_f1",
        "__frexp_esult_vec2_f1QQ",
        "__rerp_result_ffec2_f2",
        "__frexp_result_vjc2_f32",
        "__frewwp_reul2_vec2_NN82",
        "__frexp_result_vec2_f32",
        "__frexpresult_vec2_f32",
        "__frexp_result_vec2_frr2",
        "_Gfrexp_result_vec2_f32",
        "__frexp_resulFF_vec3_abstract",
        "_frexp_resultvec3_Estract",
        "__fexp_result_vec3_abstrract",
        "__frexp_result_vec3_abstract",
        "frexp_result_vec3_abstract",
        "D_rexp_resXlt_veJJ3_abstract",
        "_frexp_resut_v8c_abstract",
        "_frexp_rsl1k_vec3_f16",
        "__frexp_reslt_vec3_f16",
        "__frexJ_reult_vec3_f16",
        "__frexp_result_vec3_f16",
        "c_frexp_result_vec3_f16",
        "__frexp_result_vec3Of16",
        "___frexp_reKKultvvvec3_f1tt",
        "8_frexp_reult_vxxc3_f32",
        "_frexp_resul___veFqqf32",
        "_qqfrexp_result_vec_f32",
        "__frexp_result_vec3_f32",
        "33_fOexp_result_ve3_6632",
        "__oorexQQ_rttsult_ve639f32",
        "__rexp_result_vec3_f662",
        "__frexp_reszzlt_Oc4xabstrac66",
        "__frexp_resyylt_vec4_abstract",
        "__frexp_resut_vecHH_aZsracZ",
        "__frexp_result_vec4_abstract",
        "_WWfrex44_resulq_vec4_astract",
        "__frexp_rsult_veOO4_abstract",
        "__frexp_resultoovc4_abstYct",
        "_frexp_esultvec4_f16",
        "__Frexp_result_ec4_f16",
        "__frewp_resut_vec4_f16",
        "__frexp_result_vec4_f16",
        "__frexp_reslt_veK4fG16",
        "__fqexp_result_veKK4_f16",
        "_F3rexp_result_vec4_f1mm",
        "__frexp_result_ec4_f32",
        "__frexp_result_qe4_f32",
        "__frbbxp_result_vec4_b2",
        "__frexp_result_vec4_f32",
        "__frexp_reslt_iiec4_f2",
        "__frexO_resulq_vec4_f32",
        "__frexp_resulTT_vec4vvf32",
        "__modf_resulFF_abstract",
        "fm00df_rePult_abstraQt",
        "__modf_result_abstPact",
        "__modf_result_abstract",
        "_modf_result_abstssac77",
        "__modf_resulC_bbRbstract",
        "__modf_result_abstracXX",
        "__OOofCCresuOOt_f16",
        "_smodf_resuutfL6",
        "__modX_result_f16",
        "__modf_result_f16",
        "__modf_reult_f16",
        "__modf_resqqO16",
        "__modf22result_f16",
        "__modf_X0eszzlt_fy",
        "_VVmPf_result_f3i",
        "__monnfCresultf32",
        "__modf_result_f32",
        "_HHAmodf_resqltf32",
        "__modf_resut_f32",
        "__modresuft_f3KK",
        "__modlPrsultggvec2_astract",
        "__odf_result_vec2_abstract",
        "__mocTf_result_vNc2_abstra4t",
        "__modf_result_vec2_abstract",
        "__modf77result_vec2_plbtract",
        "__mdf_resultNNvec2zabstgact",
        "_modf_bbesult_vuuc2_abtraXXt",
        "__modf_esult_vec2_f16",
        "__mQdf_esuKt_vec_8816",
        "q_m9dfresult_vec2_f16",
        "__modf_result_vec2_f16",
        "__11odf_result_vec2_f16",
        "_iimodf_result_vF222f16",
        "_77modf_result_vec2f16",
        "__odfNNr2sult_vec2_f32",
        "__modf_rVVsult_vec2_f32",
        "__modf_Fesult_vewW2_f311",
        "__modf_result_vec2_f32",
        "__modf_rwwsult_vec_f32",
        "__modf_result_Dec2_f32",
        "__modf_result_ec2_f3K",
        "__modf_resul1PP_vech_abstfact",
        "__modf_result_vec_abstract",
        "__YYodf_result_vec3_abstract",
        "__modf_result_vec3_abstract",
        "__mHHdfresult_kkec3_abstract",
        "__modf_result_vec3rrabstract",
        "__modf_ssesulWW_vec_abstract",
        "__mYdf_reslt_vec3_f16",
        "q_modLrfsult_vec3_f16",
        "uu_vvo22f_rfsult_ec3_f16",
        "__modf_result_vec3_f16",
        "__mdf_reslt_vec3_f16",
        "__modfYYresult_ve3f16",
        "__modfEr77sult_vec3_yY16",
        "__odf_desuMot_vec3_f32",
        "__mMMf_result_vec3_f32",
        "__modf_result_vec3_f355",
        "__modf_result_vec3_f32",
        "__modf_rest_vec3Nf32",
        "_m33df_result_Oec3_f32",
        "__modf_re3ult_vec3_f32",
        "__momf_esult_Iec4_abstract",
        "__modf_resultrvec4_absnnracK",
        "__modf_eslt_ve4_absXXact",
        "__modf_result_vec4_abstract",
        "__modf_rsult_pLLI4_abstract",
        "_modf_resflt_vec4_bstract",
        "_Ymodf_resultURDec4_abtract",
        "__hodf_result_vec4_f16",
        "__moquu_rslt_vec4_f1II",
        "__modf_result_vecH_f16",
        "__modf_result_vec4_f16",
        "__oQQf_resultvvvc4_f16",
        "__modf_eeult66ec4_f16",
        "_Omodf_r7sut_vec4_W16",
        "__modf_DDes0lt_v55c4_f32",
        "__modf_rIIsult_Hec4_f32",
        "_modf_result_vec4_f32",
        "__modf_result_vec4_f32",
        "_modf_result_vrc4_f32",
        "_lmodf_result_vec4_f32",
        "tt_modfGeslt_vec4_fJJ2",
        "ryay",
        "aray",
        "IIrBBay",
        "array",
        "TTrr338",
        "arUUSSannd",
        "aZx5CC",
        "aqkomic",
        "5iiop00",
        "annoIIic",
        "atomic",
        "cctKi",
        "aoKK",
        "at66mic",
        "PPEK",
        "xool",
        "booq",
        "bool",
        "rMSyol",
        "ou",
        "o",
        "fF56",
        "rz144",
        "P",
        "f16",
        "foo3f",
        "PP0",
        "lT",
        "553RR",
        "Fff9",
        "f3yy",
        "f32",
        "__D",
        "fU2",
        "fu33",
        "t2",
        "iV",
        "jRb",
        "i32",
        "iA44",
        "A",
        "1xx",
        "inpuccatmmchment",
        "input_aJJtchment",
        "lDnput_atfCCchmenU",
        "input_attachment",
        "ingut_attachment",
        "inCCt_atachmen",
        "iput_attachment",
        "mat2x__",
        "attxPP",
        "mdd32x2",
        "mat2x2",
        "yyK2x2",
        "mtx",
        "mat03nn",
        "KanuuCC2f",
        "mlX2x2f",
        "oat2pp2f",
        "mat2x2f",
        "wwat22f",
        "matguum",
        "mt2ma2",
        "Tat2xZRRh",
        "ma8T2xOh",
        "m0at2x2h",
        "mat2x2h",
        "mBBt2x2h",
        "at2ppM",
        "matOO2h",
        "GGG2x3",
        "mHHt2113",
        "mateF63",
        "mat2x3",
        "matx",
        "mKl2ii3",
        "at2x3",
        "IIvvt2x39",
        "mat23f",
        "mat2h3f",
        "mat2x3f",
        "mllt2xPzz",
        "t3f",
        "mtffxqqf",
        "mtJJx3dd",
        "mzz2X3h",
        "matx32",
        "mat2x3h",
        "maN2yy3h",
        "mt2O3",
        "uZtrx3h",
        "meet22dd",
        "maV92",
        "maI2x1",
        "mat2x4",
        "mab2x4",
        "t7i4",
        "maio2x4",
        "mat45",
        "at2xSf",
        "mat22f",
        "mat2x4f",
        "maG1C4f",
        "maff284f",
        "t2x4f",
        "SSatJJx4h",
        "atx9h",
        "maJJbbTT4h",
        "mat2x4h",
        "66a2xh",
        "ut2x466",
        "aW2x4h",
        "ma32",
        "ma3x2",
        "rat3x2",
        "mat3x2",
        "m2t3xB",
        "BBt3x2",
        "maR3x2",
        "maVV0Lf",
        "a3OOK2f",
        "magw3xf",
        "mat3x2f",
        "hht3L2f",
        "aKii3xf",
        "ma3x2f",
        "UUa3882",
        "rrvvt3x2h",
        "m3xwmm",
        "mat3x2h",
        "j443x2h",
        "matXx2h",
        "mat8x2h",
        "mat3vEE",
        "mzzi3x",
        "maGGQ3JJ3",
        "mat3x3",
        "mat3ss3",
        "maPKx3",
        "atpttx",
        "mt3x3",
        "mMMt3x3f",
        "maJ03x3f",
        "mat3x3f",
        "V8x3",
        "maKggx3hh",
        "maf3x3f",
        "matQ7x3h",
        "mat3YYh",
        "mak3x3",
        "mat3x3h",
        "man3x2",
        "ma3FFh",
        "uGGtIUPP3h",
        "mEEFa4",
        "mBet3dd4",
        "55atExcc",
        "mat3x4",
        "txKK",
        "mRt3x4",
        "Da394",
        "mt3x4f",
        "aaat3I",
        "m77t3x4f",
        "mat3x4f",
        "matIx4f",
        "md3x4f",
        "mat34f",
        "mtt4h",
        "ma3XX3x4h",
        "Eat34h",
        "mat3x4h",
        "maXX3x4",
        "matxBx4h",
        "m3x4h",
        "mat66x2",
        "atTv0",
        "kt",
        "mat4x2",
        "mpt4x",
        "11t42",
        "BBJt4Ey",
        "mqIm4x2f",
        "ma4xFf",
        "Yt4x2f",
        "mat4x2f",
        "mHHtDh2f",
        "Ht22f",
        "matx2",
        "matx2h",
        "matx2h",
        "matddx2h",
        "mat4x2h",
        "Oat4x2h",
        "atBbb2",
        "m004x2h",
        "hat4x3",
        "matgYx",
        "Oat4x3",
        "mat4x3",
        "mhx3",
        "EEfp4x3",
        "mt4v3",
        "mzztx3f",
        "ma4x3f",
        "OOaJxii",
        "mat4x3f",
        "mft4G3f",
        "mat4x322T",
        "datlx3f",
        "bat4x3h",
        "BBatx3h",
        "PPIXt4S3h",
        "mat4x3h",
        "mjjt4x3h",
        "_at4xcch",
        "ax6z4xSSh",
        "mtx",
        "mxxtvN",
        "AA00t44",
        "mat4x4",
        "tyexy",
        "matWWb4",
        "matmtMM4",
        "madf",
        "mat_4f",
        "Vat4EE4f",
        "mat4x4f",
        "mat44f",
        "mRIxaf",
        "ma4mmf",
        "at4x4p",
        "mat4xh",
        "aaxh",
        "mat4x4h",
        "mad4x4h",
        "CCat4xPth",
        "matx4",
        "5tr",
        "ff99j",
        "YYvXR",
        "ptr",
        "r",
        "XX5",
        "t",
        "sccmlppr",
        "sampver",
        "EESSmplr",
        "sampler",
        "smplr",
        "_ame",
        "saplwwr",
        "samplerdd99omparison",
        "ampler_o99paPPison",
        "saplerKKcomparison",
        "sampler_comparison",
        "saMpler_oomDDarison",
        "aBpiir_comprison",
        "samler_comparqon",
        "suLLg00oup_matrx_lef",
        "snbvvroup_matrix_lef66",
        "srrbgroun_mtrix_left",
        "subgroup_matrix_left",
        "sxxgrou_matrix_leeet",
        "NNObgroup_CCatrix_left",
        "sbgroup_matrix_left",
        "subgroup_4atrixaresult",
        "subgroupNNNNtrix_result",
        "subgroup_matrix_rsult",
        "subgroup_matrix_result",
        "subgroup_matrix_rsut",
        "suYYgrAup_EEatri_resSlt",
        "subgroup_matrix_r0sult",
        "subgroup_aaatrix_right",
        "smmqqgrup_matrix_rigt",
        "subgroup_matrixright",
        "subgroup_matrix_right",
        "subgroup_matrix_rEUU",
        "sbgroup_DDatrix_riKKt",
        "subgro__p_matrtx_rig0t",
        "tAtuel1p",
        "textue_1d",
        "texturBB_1d",
        "texture_1d",
        "nnbb99re_1d",
        "tx1EEre_AAd",
        "tex66ur5_1d",
        "tHxture_2d",
        "teHHuxe_2d",
        "tzxturny_0d",
        "texture_2d",
        "teture_2d",
        "Hexture2k",
        "tcxture_d",
        "trrtur_2d_arrooy",
        "JJexture_2d_ray",
        "text0re_2CC_arra",
        "texture_2d_array",
        "99eAAure_2dxarray",
        "textcre_2d_array",
        "texture_Sd_array",
        "toxBure_3d",
        "exture_3d",
        "textureemm",
        "texture_3d",
        "tegPPure_3QQ",
        "teuB_3",
        "tllNrKK_3d",
        "txure_crrbe",
        "exturercuppe",
        "textyre_cuPPe",
        "texture_cube",
        "tZxtucce_ube",
        "teturecube",
        "texture00cube",
        "texPPuBB_cuJe_arrssy",
        "texJJre_cffbww_afray",
        "textIre_cubXX_arra",
        "texture_cube_array",
        "textur_b_arry",
        "textue_cube_array",
        "tuxtreKKcube_array",
        "textu44e_detm_2d",
        "teoture_pepth_2d",
        "textuHe_depthhj2NN",
        "texture_depth_2d",
        "texturewwdeptEU332d",
        "textur_epthuu2d",
        "texddrrre_eKth_cd",
        "tttx2ure_deptPP_2d_aray",
        "sexture_d1pth_2d_arwway",
        "texture_d11pth_2nn_arrac",
        "texture_depth_2d_array",
        "texture_deph_2d_array",
        "texture_depth_d_array",
        "t66xture_depaahI2SSarray",
        "DEExture_dept_cube",
        "texture_deptccIcuRe",
        "textur9_dpt_cube",
        "texture_depth_cube",
        "textureaadept_chbe",
        "textuSeLLdpth_cube",
        "txfumm_depth_cubr",
        "teVturedeqth_cu4e_arram",
        "texture__dept_cbe_array",
        "texture_deth_Qub_array",
        "texture_depth_cube_array",
        "texture_dptRR_cuddeEarray",
        "9exture_dept_cube_array",
        "txture_depthCCcub_ar0y",
        "teture_zepth_multisamled_2d",
        "textucce_depth_multisampled_2d",
        "textuQQe_d_pth_multisampled_O",
        "texture_depth_multisampled_2d",
        "texture_depth_multisampld_2d",
        "texture_deptE_muCCtisampzz33d_2pp",
        "thhxture_depth_multisampledd_2d",
        "te_77re_ex66ernal",
        "tPxture_external",
        "texturewexternal",
        "texture_external",
        "tuuxtxe_exerna",
        "textureXX6xternal",
        "teturRRxternal",
        "exture_mVVltisamped_d",
        "texture_mHHltisGGmpled_2d",
        "te7ture_multisamplMd_FFd",
        "texture_multisampled_2d",
        "textur_multisampled_2d",
        "text3re_mulggisamle_2d",
        "te1tu_e_PultiQamplKKd_2d",
        "textre_storageE1d",
        "tMture_storage_d",
        "t77xture_sGGorSSe_1d",
        "texture_storage_1d",
        "txtttre_storage_1FF",
        "textUUressstoraZZe_1d",
        "texturestorage_1d",
        "telture_storage_2d",
        "texture_htorage_2d",
        "texturTTKstorage_d",
        "texture_storage_2d",
        "texturww_storagee2",
        "textureKsjjragvv_2d",
        "teYYtur_storage2d",
        "EEcxture_storaIIe_2_aray",
        "texture_storage_2d_arraQQ",
        "texlure_stPrage_2daray",
        "texture_storage_2d_array",
        "texture_storagffHH2_array",
        "texture_storage_2n_array",
        "Fexture_stora66e_g_array",
        "t8ssture_storahe_3d",
        "tellture_sFFrage_3d",
        "0extur2_storajje_3",
        "texture_storage_3d",
        "tegture_storage_3d",
        "texure_storage_3d",
        "texture_storaffe_d",
        "",
        "32",
        "qq2",
        "u32",
        "0",
        "8",
        "cc",
        "vII2",
        "veZZ2",
        "vnnc2",
        "vec2",
        "ZZHkk22",
        "vec",
        "eR",
        "vecqq99",
        "vec277",
        "v3f",
        "vec2f",
        "vec2cu",
        "vRR2f",
        "vc2JJl",
        "MMh",
        "v66T7",
        "vQQcJh",
        "vec2h",
        "Auc2",
        "ve2",
        "yeq3",
        "vec2xx",
        "crr",
        "v99ci",
        "vec2i",
        "veci",
        "ecHl",
        "e_i",
        "uec2",
        "vc2u",
        "EEtmec2u",
        "vec2u",
        "vec",
        "ec2rr",
        "xc2u",
        "zz3",
        "vee3",
        "ppcu",
        "vec3",
        "vTT0u7",
        "vv3",
        "veQ3",
        "ve3R",
        "e",
        "veprPP",
        "vec3f",
        "xxeDD88f",
        "lldmYYqqf",
        "vFFc__",
        "rrNNc3h",
        "leM3h",
        "c3",
        "vec3h",
        "xlc3h",
        "ec3h",
        "ae44h",
        "vec3WW",
        "vecjj",
        "vjjc3i",
        "vec3i",
        "vj1i",
        "vc3i",
        "vec399",
        "vyVV3u",
        "ec3xZ",
        "v33vvu",
        "vec3u",
        "vecs9",
        "veF3",
        "uec3u",
        "eKK",
        "vJc",
        "vXXSSC4",
        "vec4",
        "Je66ZWW",
        "5m4",
        "vBBU4",
        "JJ0c411",
        "vecttf",
        "vttc",
        "vec4f",
        "veL4f",
        "v1c4f",
        "veww4f",
        "ece",
        "vc4h",
        "vec4NN",
        "vec4h",
        "vUlRR__h",
        "vecHh",
        "vrCC4h",
        "Wec4",
        "vvcIi",
        "Ne4",
        "vec4i",
        "",
        "vxxqqRGi",
        "vecGSi",
        "qcc4u",
        "ec4",
        "veQu",
        "vec4u",
        "vzzQQu",
        "3c4u",
        "ve4",
    };
    for (auto _ : state) {
        for (auto* str : kStrings) {
            auto result = ParseBuiltinType(str);
            benchmark::DoNotOptimize(result);
        }
    }
}  // NOLINT(readability/fn_size)

BENCHMARK(BuiltinTypeParser);

}  // namespace
}  // namespace tint::core
