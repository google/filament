# Copyright 2023 The Dawn & Tint Authors
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

################################################################################
# File generated by 'tools/src/cmd/gen' using the template:
#   tools/src/cmd/gen/build/BUILD.bazel.tmpl
#
# To regenerate run: './tools/run gen'
#
#                       Do not modify this file directly
################################################################################

load("//src/tint:flags.bzl", "COPTS")
load("@bazel_skylib//lib:selects.bzl", "selects")
cc_library(
  name = "type",
  srcs = [
    "abstract_float.cc",
    "abstract_int.cc",
    "abstract_numeric.cc",
    "array.cc",
    "array_count.cc",
    "atomic.cc",
    "binding_array.cc",
    "bool.cc",
    "builtin_structs.cc",
    "depth_multisampled_texture.cc",
    "depth_texture.cc",
    "external_texture.cc",
    "f16.cc",
    "f32.cc",
    "function.cc",
    "i32.cc",
    "i8.cc",
    "input_attachment.cc",
    "invalid.cc",
    "manager.cc",
    "matrix.cc",
    "memory_view.cc",
    "multisampled_texture.cc",
    "node.cc",
    "numeric_scalar.cc",
    "pointer.cc",
    "reference.cc",
    "sampled_texture.cc",
    "sampler.cc",
    "sampler_kind.cc",
    "scalar.cc",
    "storage_texture.cc",
    "struct.cc",
    "subgroup_matrix.cc",
    "texture.cc",
    "texture_dimension.cc",
    "type.cc",
    "u32.cc",
    "u64.cc",
    "u8.cc",
    "unique_node.cc",
    "vector.cc",
    "void.cc",
  ],
  hdrs = [
    "abstract_float.h",
    "abstract_int.h",
    "abstract_numeric.h",
    "array.h",
    "array_count.h",
    "atomic.h",
    "binding_array.h",
    "bool.h",
    "builtin_structs.h",
    "clone_context.h",
    "depth_multisampled_texture.h",
    "depth_texture.h",
    "external_texture.h",
    "f16.h",
    "f32.h",
    "function.h",
    "i32.h",
    "i8.h",
    "input_attachment.h",
    "invalid.h",
    "manager.h",
    "matrix.h",
    "memory_view.h",
    "multisampled_texture.h",
    "node.h",
    "numeric_scalar.h",
    "pointer.h",
    "reference.h",
    "sampled_texture.h",
    "sampler.h",
    "sampler_kind.h",
    "scalar.h",
    "storage_texture.h",
    "struct.h",
    "subgroup_matrix.h",
    "texture.h",
    "texture_dimension.h",
    "type.h",
    "u32.h",
    "u64.h",
    "u8.h",
    "unique_node.h",
    "vector.h",
    "void.h",
  ],
  deps = [
    "//src/tint/lang/core",
    "//src/tint/utils",
    "//src/tint/utils/containers",
    "//src/tint/utils/diagnostic",
    "//src/tint/utils/ice",
    "//src/tint/utils/macros",
    "//src/tint/utils/math",
    "//src/tint/utils/memory",
    "//src/tint/utils/result",
    "//src/tint/utils/rtti",
    "//src/tint/utils/symbol",
    "//src/tint/utils/text",
    "//src/utils",
  ],
  copts = COPTS,
  visibility = ["//visibility:public"],
)
cc_library(
  name = "test",
  alwayslink = True,
  srcs = [
    "array_test.cc",
    "atomic_test.cc",
    "binding_array_test.cc",
    "bool_test.cc",
    "builtin_structs_test.cc",
    "depth_multisampled_texture_test.cc",
    "depth_texture_test.cc",
    "external_texture_test.cc",
    "f16_test.cc",
    "f32_test.cc",
    "helper_test.h",
    "i32_test.cc",
    "i8_test.cc",
    "input_attachment_test.cc",
    "manager_test.cc",
    "matrix_test.cc",
    "multisampled_texture_test.cc",
    "pointer_test.cc",
    "reference_test.cc",
    "sampled_texture_test.cc",
    "sampler_test.cc",
    "storage_texture_test.cc",
    "struct_test.cc",
    "subgroup_matrix_test.cc",
    "texture_test.cc",
    "type_test.cc",
    "u32_test.cc",
    "u64_test.cc",
    "u8_test.cc",
    "vector_test.cc",
  ],
  deps = [
    "//src/tint/api/common",
    "//src/tint/lang/core",
    "//src/tint/lang/core/constant",
    "//src/tint/lang/core/type",
    "//src/tint/lang/wgsl",
    "//src/tint/lang/wgsl/ast",
    "//src/tint/lang/wgsl/common",
    "//src/tint/lang/wgsl/features",
    "//src/tint/lang/wgsl/program",
    "//src/tint/lang/wgsl/resolver",
    "//src/tint/lang/wgsl/sem",
    "//src/tint/utils",
    "//src/tint/utils/containers",
    "//src/tint/utils/diagnostic",
    "//src/tint/utils/ice",
    "//src/tint/utils/macros",
    "//src/tint/utils/math",
    "//src/tint/utils/memory",
    "//src/tint/utils/result",
    "//src/tint/utils/rtti",
    "//src/tint/utils/symbol",
    "//src/tint/utils/text",
    "@gtest",
    "//src/utils",
  ],
  copts = COPTS,
  visibility = ["//visibility:public"],
)

