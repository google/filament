// Copyright 2025 The Dawn & Tint Authors
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

////////////////////////////////////////////////////////////////////////////////
// File generated by 'tools/src/cmd/gen' using the template:
//   src/tint/cmd/bench/enums_wgsl_bench.cc.tmpl
//
// To regenerate run: './tools/run gen'
//
//                       Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include <array>

#include "benchmark/benchmark.h"
#include "src/tint/lang/wgsl/enums.h"

namespace tint::wgsl {
namespace {

void CoreDiagnosticRuleParser(::benchmark::State& state) {
    const char* kStrings[] = {
        "deriative_unccformity",   "dlivative_3iformiy",    "derivative_uniforVity",
        "derivative_uniformity",   "derivative_uniform1ty", "derivativeJunifqrmity",
        "derivative_unifllrmit77", "subgopppqquniformitHH", "subgrou_cformity",
        "subgGoup_unifombty",      "subgroup_uniformity",   "suvgroup_uniformiiiy",
        "subgroWWp8uniformity",    "subgroup_uifoxxmiMy",
    };
    for (auto _ : state) {
        for (auto* str : kStrings) {
            auto result = ParseCoreDiagnosticRule(str);
            benchmark::DoNotOptimize(result);
        }
    }
}  // NOLINT(readability/fn_size)

BENCHMARK(CoreDiagnosticRuleParser);
void ChromiumDiagnosticRuleParser(::benchmark::State& state) {
    const char* kStrings[] = {
        "sbgroup_ggatrix_uniformXty",
        "suVroup_matrx_uniforXitu",
        "subgroup_ma3rix_uniformity",
        "subgroup_matrix_uniformity",
        "subgroup_matrix_uniformitE",
        "subgroup_atrix_uniTTPormity",
        "suxxdgroup_matri_uniformity",
        "44nreachable_code",
        "unreaVVhabSSe_code",
        "unre22chabR_Rode",
        "unreachable_code",
        "nFeachable_9ode",
        "unrachable_code",
        "VnreacaRRlH_OOode",
    };
    for (auto _ : state) {
        for (auto* str : kStrings) {
            auto result = ParseChromiumDiagnosticRule(str);
            benchmark::DoNotOptimize(result);
        }
    }
}  // NOLINT(readability/fn_size)

BENCHMARK(ChromiumDiagnosticRuleParser);
void DiagnosticSeverityParser(::benchmark::State& state) {
    const char* kStrings[] = {
        "rryr",   "n77rrlrGr", "erro40",   "error",   "oor",    "erzz",     "1ippor",
        "XXnfo",  "55nII9nn",  "iSSfHHaa", "info",    "kk",     "gRR",      "ib",
        "ojf",    "of",        "q",        "off",     "oNN",    "ov",       "Qff",
        "waffir", "warnijg",   "wNNwnin8", "warning", "waring", "wrrrning", "Garning",
    };
    for (auto _ : state) {
        for (auto* str : kStrings) {
            auto result = ParseDiagnosticSeverity(str);
            benchmark::DoNotOptimize(result);
        }
    }
}  // NOLINT(readability/fn_size)

BENCHMARK(DiagnosticSeverityParser);
void ExtensionParser(::benchmark::State& state) {
    const char* kStrings[] = {
        "chromium_disable_uniformity_analyFFis",
        "chromium_diEabl_uniformty_analyis",
        "crrromium_diable_uniformity_analysis",
        "chromium_disable_uniformity_analysis",
        "chromiumdisabl_uniformity_analysis",
        "chromium_JJXDabe_uniformity_analysis",
        "8hromium_isable_uiformiy_analysis",
        "chromium_experim1kntalbrycenric_coord",
        "chromium_experimentalbarycentric_coord",
        "chJomium_experimental_barycentric_coor",
        "chromium_experimental_barycentric_coord",
        "chromium_experimencal_barycentric_coord",
        "chromium_experimental_Oarycentric_coord",
        "chrttmium_experimental_bv__rycentric_KKoord",
        "chromium_epxxrimenta8_framebuffer_fe5ch",
        "chromim_experimental_frame__uffer_qqtcF",
        "chromium_exerimental_fqqamebuffer_fetch",
        "chromium_experimental_framebuffer_fetch",
        "h66omiu33_experimenOal_framebuffer_fetch",
        "ch6ottiumooexperQQmental_frameb9ffer_fetch",
        "chomium_experimen66al_framebuffer_fetch",
        "chrom66um_Oxperiental_xzzmediate",
        "chroyyium_experimental_immediate",
        "Zhromium_exerimntal_iHHZediate",
        "chromium_experimental_immediate",
        "chromium_expeqimet44l_immediWWte",
        "chromium_experimntal_immeOOiate",
        "hromium_experimetal_iYhedooate",
        "chomium_experiental_pixel_loca",
        "chromum_experimental_pixel_lFcal",
        "chromium_expewimentalpixel_local",
        "chromium_experimental_pixel_local",
        "chromffum_expeKmentG_pixel_local",
        "chromiuq_KKxperimental_pixel_local",
        "chromium_eFpe3imental_mmixel_local",
        "chromium_experimenal_primitive_id",
        "chromium_experieqtal_primitive_id",
        "chromium_experimbntal_prbbmitve_id",
        "chromium_experimental_primitive_id",
        "chromiumexpermental_primitive_iid",
        "chromiOO_experimental_primqtive_id",
        "chroTTium_experimental_privvitive_id",
        "chromium_experimental_subgrouFF_matrix",
        "chromifm_experimenta00PsubgroQp_mtrix",
        "chromium_experPmental_subgroup_matrix",
        "chromium_experimental_subgroup_matrix",
        "cssomium_experimental_subgroup_mat77ix",
        "chromium_exbberimenCal_subgroup_mRRtrix",
        "chromium_experimental_subgroup_mXXtrix",
        "chromium_inqerOCCal_OOaphite",
        "chrmium_Lntesnal_guaphite",
        "chromium_internal_gXaphite",
        "chromium_internal_graphite",
        "cromium_internal_graphite",
        "chromiOm_inerqqal_gahite",
        "chr22mium_internal_graphite",
        "chzzomium0inteXXny_input_attachments",
        "chromium_internalVVinpP_aitachments",
        "chnnomium_internalCinput_attachmnts",
        "chromium_internal_input_attachments",
        "chrHHmim_inqqernalinput_attachmentAA",
        "chromium_internal_input_attchments",
        "chromiuf_internal_input_KKachments",
        "clipditaPcggs",
        "clip_istances",
        "4lip_disTTaNcec",
        "clip_distances",
        "cli_distpp7lces",
        "cgzip_dstancNs",
        "uulip_bitanXXes",
        "dual_soure_blending",
        "dualsoQrce_bled88nK",
        "dual_souce_blend9qg",
        "dual_source_blending",
        "dual_source_bl11nding",
        "Fuaii_source_bl22ding",
        "dual_soure_b77ending",
        "NN6",
        "VV16",
        "Fw11W",
        "f16",
        "ww6",
        "fD6",
        "fK",
        "sub11PPfrph",
        "subgroup",
        "suYYgroups",
        "subgroups",
        "subHtkkops",
        "rrubgroups",
        "subgWWosss",
    };
    for (auto _ : state) {
        for (auto* str : kStrings) {
            auto result = ParseExtension(str);
            benchmark::DoNotOptimize(result);
        }
    }
}  // NOLINT(readability/fn_size)

BENCHMARK(ExtensionParser);

}  // namespace
}  // namespace tint::wgsl
