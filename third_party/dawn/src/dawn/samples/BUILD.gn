# Copyright 2020 The Dawn & Tint Authors
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import("../../../scripts/dawn_overrides_with_defaults.gni")

group("samples") {
  deps = [
    ":Animometer",
    ":ComputeBoids",
    ":DawnInfo",
    ":HelloTriangle",
    ":ManualSurfaceTest",
  ]
}

# Static library to contain code and dependencies common to all samples
static_library("utils") {
  sources = [
    "SampleUtils.cpp",
    "SampleUtils.h",
  ]

  # Export all of these as public deps so that `gn check` allows includes
  public_deps = [
    "${dawn_root}/include/dawn:cpp_headers",
    "${dawn_root}/src/dawn/common",
    "${dawn_root}/src/dawn/glfw",
    "${dawn_root}/src/dawn/native",
    "${dawn_root}/src/dawn/utils",
  ]
}

# Template for samples to avoid listing utils as a dep every time
template("sample") {
  executable(target_name) {
    deps = [ ":utils" ]
    forward_variables_from(invoker, "*", [ "deps" ])

    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
  }
}

sample("HelloTriangle") {
  sources = [ "HelloTriangle.cpp" ]
}

sample("ComputeBoids") {
  sources = [ "ComputeBoids.cpp" ]
}

sample("Animometer") {
  sources = [ "Animometer.cpp" ]
}

sample("ManualSurfaceTest") {
  sources = [ "ManualSurfaceTest.cpp" ]
}

sample("DawnInfo") {
  sources = [ "DawnInfo.cpp" ]
}
