<?xml version="1.0" encoding="utf-8"?>
<!--
Visual Studio 2012 Native Debugging Visualizers for LLVM

Put this file into "%USERPROFILE%\Documents\Visual Studio 2015\Visualizers"
or create a symbolic link so it updates automatically.

mklink "%USERPROFILE%\Documents\Visual Studio 2015\Visualizers\llvm.natvis" %HLSL_SRC_DIR%\utils\llvm.natvis

-->
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <Type Name="llvm::SmallVector&lt;*,*&gt;">
    <DisplayString Condition="(($T1*)EndX - ($T1*)BeginX) == 0">empty</DisplayString>
    <DisplayString Condition="(($T1*)EndX - ($T1*)BeginX) != 0">{{ size={($T1*)EndX - ($T1*)BeginX} }}</DisplayString>
    <Expand>
      <Item Name="[size]">($T1*)EndX - ($T1*)BeginX</Item>
      <Item Name="[capacity]">($T1*)CapacityX - ($T1*)BeginX</Item>
      <ArrayItems>
        <Size>($T1*)EndX - ($T1*)BeginX</Size>
        <ValuePointer>($T1*)BeginX</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="llvm::SmallVectorImpl&lt;*&gt;">
    <DisplayString Condition="(($T1*)EndX - ($T1*)BeginX) == 0">empty</DisplayString>
    <DisplayString Condition="(($T1*)EndX - ($T1*)BeginX) != 0">[{($T1*)EndX - ($T1*)BeginX}]</DisplayString>
    <Expand>
      <Item Name="[size]">($T1*)EndX - ($T1*)BeginX</Item>
      <Item Name="[capacity]">($T1*)CapacityX - ($T1*)BeginX</Item>
      <ArrayItems>
        <Size>($T1*)EndX - ($T1*)BeginX</Size>
        <ValuePointer>($T1*)BeginX</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="llvm::SmallString&lt;*&gt;">
    <DisplayString>{BeginX,s}</DisplayString>
    <StringView>BeginX,s</StringView>
    <Expand>
      <Item Name="[size]">(char*)EndX - (char*)BeginX</Item>
      <Item Name="[capacity]">(char*)CapacityX - (char*)BeginX</Item>
      <ArrayItems>
        <Size>(char*)EndX - (char*)BeginX</Size>
        <ValuePointer>(char*)BeginX</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="llvm::StringRef">
    <DisplayString>[{Length}] {Data,s}</DisplayString>
    <StringView>Data,s</StringView>
    <Expand>
      <Item Name="[length]">Length</Item>
      <ArrayItems>
        <Size>Length</Size>
        <ValuePointer>Data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="llvm::PointerIntPair&lt;*,*,*,*&gt;">
    <DisplayString>{Value &amp; PointerBitMask} [{(Value &gt;&gt; IntShift) &amp; IntMask}]</DisplayString>
    <Expand>
      <Item Name="[ptr]">($T1)(Value &amp; PointerBitMask)</Item>
      <Item Name="[int]">(Value &gt;&gt; IntShift) &amp; IntMask</Item>
    </Expand>
  </Type>

  <Type Name="llvm::PointerIntPair&lt;llvm::PointerUnion&lt;*,*&gt;,*,*,*&gt;">
    <DisplayString>TODO - fix this case to avoid expression ambiguity</DisplayString>
    
    <!--<DisplayString>{Value &amp; PointerBitMask} [{(Value &gt;&gt; IntShift) &amp; IntMask}]</DisplayString>
    <Expand>
      <Item Name="[ptr]">($T1)(Value &amp; PointerBitMask)</Item>
      <Item Name="[int]">(Value &gt;&gt; IntShift) &amp; IntMask</Item>
    </Expand>-->
  </Type>

  <Type Name="llvm::PointerUnion&lt;*,*&gt;">
    <DisplayString Condition="((Val.Value &gt;&gt; Val.IntShift) &amp; Val.IntMask) == 0">[P1] {($T1)(Val.Value &amp; Val.PointerBitMask)}</DisplayString>
    <DisplayString Condition="((Val.Value &gt;&gt; Val.IntShift) &amp; Val.IntMask) != 0">[P2] {($T2)(Val.Value &amp; Val.PointerBitMask)}</DisplayString>
    <Expand>
      <Item Name="[ptr]" Condition="((Val.Value &gt;&gt; Val.IntShift) &amp; Val.IntMask) == 0">($T1)(Val.Value &amp; Val.PointerBitMask)</Item>
      <Item Name="[ptr]" Condition="((Val.Value &gt;&gt; Val.IntShift) &amp; Val.IntMask) != 0">($T2)(Val.Value &amp; Val.PointerBitMask)</Item>
    </Expand>
  </Type>

  <Type Name="llvm::PointerUnion3&lt;*,*,*&gt;">
    <DisplayString Condition="(Val.Val.Value &amp; 2) != 2 &amp;&amp; (Val.Val.Value &amp; 1) != 1">[P1] {($T1)((Val.Val.Value &gt;&gt; 2) &lt;&lt; 2)}</DisplayString>
    <DisplayString Condition="(Val.Val.Value &amp; 2) == 2">[P2] {($T2)((Val.Val.Value &gt;&gt; 2) &lt;&lt; 2)}</DisplayString>
    <DisplayString Condition="(Val.Val.Value &amp; 1) == 1">[P3] {($T3)((Val.Val.Value &gt;&gt; 2) &lt;&lt; 2)}</DisplayString>
    <Expand>
      <Item Name="[ptr]" Condition="(Val.Val.Value &amp; 2) != 2 &amp;&amp; (Val.Val.Value &amp; 1) != 1">($T1)((Val.Val.Value &gt;&gt; 2) &lt;&lt; 2)</Item>
      <Item Name="[ptr]" Condition="(Val.Val.Value &amp; 2) == 2">($T2)((Val.Val.Value &gt;&gt; 2) &lt;&lt; 2)</Item>
      <Item Name="[ptr]" Condition="(Val.Val.Value &amp; 1) == 1">($T3)((Val.Val.Value &gt;&gt; 2) &lt;&lt; 2)</Item>
    </Expand>
  </Type>

  <Type Name="llvm::PointerUnion4&lt;*,*,*,*&gt;">
    <DisplayString Condition="(Val.Val.Value &amp; 3) != 3 &amp;&amp; (Val.Val.Value &amp; 2) != 2 &amp;&amp; (Val.Val.Value &amp; 1) != 1">[P1] {($T1)((Val.Val.Value &gt;&gt; 2) &lt;&lt; 2)}</DisplayString>
    <DisplayString Condition="(Val.Val.Value &amp; 3) != 3 &amp;&amp; (Val.Val.Value &amp; 2) == 2">[P2] {($T2)((Val.Val.Value &gt;&gt; 2) &lt;&lt; 2)}</DisplayString>
    <DisplayString Condition="(Val.Val.Value &amp; 3) != 3 &amp;&amp; (Val.Val.Value &amp; 1) == 1">[P3] {($T3)((Val.Val.Value &gt;&gt; 2) &lt;&lt; 2)}</DisplayString>
    <DisplayString Condition="(Val.Val.Value &amp; 3) == 3">[P4] {($T4)((Val.Val.Value &gt;&gt; 2) &lt;&lt; 2)}</DisplayString>
    <Expand>
      <Item Name="[ptr]" Condition="(Val.Val.Value &amp; 3) != 3 &amp;&amp; (Val.Val.Value &amp; 2) != 2 &amp;&amp; (Val.Val.Value &amp; 1) != 1">($T1)((Val.Val.Value &gt;&gt; 2) &lt;&lt; 2)</Item>
      <Item Name="[ptr]" Condition="(Val.Val.Value &amp; 3) != 3 &amp;&amp; (Val.Val.Value &amp; 2) == 2">($T2)((Val.Val.Value &gt;&gt; 2) &lt;&lt; 2)</Item>
      <Item Name="[ptr]" Condition="(Val.Val.Value &amp; 3) != 3 &amp;&amp; (Val.Val.Value &amp; 1) == 1">($T3)((Val.Val.Value &gt;&gt; 2) &lt;&lt; 2)</Item>
      <Item Name="[ptr]" Condition="(Val.Val.Value &amp; 3) == 3">($T4)((Val.Val.Value &gt;&gt; 2) &lt;&lt; 2)</Item>
    </Expand>
  </Type>

  <Type Name="llvm::iplist&lt;*,*&gt;">
    <DisplayString Condition="Head == 0">{{ empty }}</DisplayString>
    <DisplayString Condition="Head != 0">{{ head={Head} }}</DisplayString>
    <Expand>
      <LinkedListItems>
        <HeadPointer>Head</HeadPointer>
        <NextPointer>Next</NextPointer>
        <ValueNode>this</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>

  <Type Name="llvm::IntrusiveRefCntPtr&lt;*&gt;">
    <DisplayString Condition="Obj == 0">empty</DisplayString>
    <DisplayString Condition="(Obj != 0) &amp;&amp; (Obj-&gt;ref_cnt == 1)">RefPtr [1 ref] {*Obj}</DisplayString>
    <DisplayString Condition="(Obj != 0) &amp;&amp; (Obj-&gt;ref_cnt != 1)">RefPtr [{Obj-&gt;ref_cnt} refs] {*Obj}</DisplayString>
    <Expand>
      <Item Condition="Obj != 0" Name="[refs]">Obj-&gt;ref_cnt</Item>
      <Item Condition="Obj != 0" Name="[ptr]">Obj</Item>
    </Expand>
  </Type>

  <Type Name="llvm::OwningPtr&lt;*&gt;">
    <DisplayString Condition="Ptr == 0">empty</DisplayString>
    <DisplayString Condition="Ptr != 0">OwningPtr {*Ptr}</DisplayString>
    <Expand>
      <Item Condition="Ptr != 0" Name="[ptr]">Ptr</Item>
    </Expand>
  </Type>

  <Type Name="llvm::SmallPtrSet&lt;*,*&gt;">
    <DisplayString Condition="CurArray == SmallArray">{{ [Small Mode] elements={NumElements}, arraySize={CurArraySize} }}</DisplayString>
    <DisplayString Condition="CurArray != SmallArray">{{ [Big Mode] elements={NumElements}, arraySize={CurArraySize} }}</DisplayString>
    <Expand>
      <Item Name="[NumElements]">NumElements</Item>
      <Item Name="[CurArraySize]">CurArraySize</Item>
      <IndexListItems>
        <Size>CurArraySize + 1</Size>
        <ValueNode>($T1*)&amp;CurArray[$i]</ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <Type Name="llvm::DenseMap&lt;*,*,*&gt;">
    <DisplayString Condition="NumEntries == 0">empty</DisplayString>
    <DisplayString Condition="NumEntries != 0">{{ entries={NumEntries}, buckets={NumBuckets} }}</DisplayString>
    <Expand>
      <Item Name="[NumEntries]">NumEntries</Item>
      <Item Name="[NumBuckets]">NumBuckets</Item>
      <ArrayItems>
        <Size>NumBuckets</Size>
        <ValuePointer>Buckets</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="llvm::StringMap&lt;*,*&gt;">
    <DisplayString>{{ NumBuckets={NumBuckets}, ItemSize={ItemSize} }}</DisplayString>
    <Expand>
      <Item Name="[NumBuckets]">NumBuckets</Item>
      <Item Name="[ItemSize]">ItemSize</Item>
      <IndexListItems>
        <Size>NumBuckets</Size>
        <ValueNode>(llvm::StringMapEntry&lt;$T1&gt;*)TheTable[$i]</ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <Type Name="llvm::StringMapEntry&lt;*&gt;">
    <DisplayString Condition="StrLen == 0">empty</DisplayString>
    <DisplayString Condition="StrLen != 0">({((llvm::StringMapEntry&lt;$T1&gt;*)this)+1,s}, {second})</DisplayString>
    <Expand>
      <Item Name="[key]">((llvm::StringMapEntry&lt;$T1&gt;*)this)+1,s</Item>
      <Item Name="[value]" Condition="StrLen != 0">second</Item>
    </Expand>
  </Type>

  <Type Name="llvm::Triple">
    <DisplayString>{Data}</DisplayString>
  </Type>
  <!-- HLSL Changes Start -->
  <Type Name="llvm::Value">
    <DisplayString>{(llvm::Value::ValueTy)SubclassID}</DisplayString>
    <Expand>
      <Item Name="[HasName]">HasName</Item>
      <Item Name="[IsUsedByMD]">IsUsedByMD</Item>
      <Item Name="[HasHungOffUses]">HasHungOffUses</Item>
      <!-- User values ... -->
      <!-- Constant values ... -->
      <!-- Global value - alias, variable or function -->
      <Item Name="[Linkage]" Condition="llvm::Value::GlobalAliasVal == (llvm::Value::ValueTy)SubclassID || llvm::Value::FunctionVal == (llvm::Value::ValueTy)SubclassID || llvm::Value::GlobalVariableVal == (llvm::Value::ValueTy)SubclassID">
        ((llvm::GlobalObject*)this)-&gt;Linkage
      </Item>
      <Item Name="[Visibility]" Condition="llvm::Value::GlobalAliasVal == (llvm::Value::ValueTy)SubclassID || llvm::Value::FunctionVal == (llvm::Value::ValueTy)SubclassID || llvm::Value::GlobalVariableVal == (llvm::Value::ValueTy)SubclassID">
        ((llvm::GlobalObject*)this)-&gt;Visibility
      </Item>
      <!-- Global object - variable or function -->
      <Item Name="[section]" Condition="llvm::Value::FunctionVal == (llvm::Value::ValueTy)SubclassID || llvm::Value::GlobalVariableVal == (llvm::Value::ValueTy)SubclassID">
        ((llvm::GlobalObject*)this)-&gt;Section
      </Item>
      <!-- Global variable -->
      <Item Name="[isConstant]" Condition="llvm::Value::GlobalVariableVal == (llvm::Value::ValueTy)SubclassID">((llvm::GlobalVariable *)this)-&gt;isConstantGlobal</Item>
      <Item Name="[isExternallyInitializedConstant]" Condition="llvm::Value::GlobalVariableVal == (llvm::Value::ValueTy)SubclassID">((llvm::GlobalVariable *)this)-&gt;isExternallyInitializedConstant</Item>
    </Expand>
  </Type>
  <Type Name="llvm::ValueSymbolTable">
    <DisplayString>{vmap.NumItems} items</DisplayString>
  </Type>
  <Type Name="llvm::Type">
    <DisplayString>{(llvm::Type::TypeID)(IDAndSubclassData &amp; 0xFF)}</DisplayString>
    <Expand>
      <Item Name="[TypeID]">(llvm::Type::TypeID)(IDAndSubclassData &amp; 0xFF)</Item>
      <Item Name="[BitWidth]" Condition="llvm::Type::TypeID::IntegerTyID == (llvm::Type::TypeID)(IDAndSubclassData &amp; 0xFF)">IDAndSubclassData &gt;&gt; 8</Item>
      <Item Name="[IsVarArg]" Condition="llvm::Type::TypeID::FunctionTyID == (llvm::Type::TypeID)(IDAndSubclassData &amp; 0xFF)">(IDAndSubclassData &amp; 0xFFFFFF00) != 0</Item>
      <Item Name="[NumElements]" Condition="llvm::Type::TypeID::VectorTyID == (llvm::Type::TypeID)(IDAndSubclassData &amp; 0xFF)">((llvm::VectorType *)this)-&gt;NumElements</Item>
      <ArrayItems>
        <Size>NumContainedTys</Size>
        <ValuePointer>ContainedTys</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="llvm::opt::Arg">
    <DisplayString>Arg: {Spelling}</DisplayString>
  </Type>
  <Type Name="llvm::opt::OptTable">
    <Expand>
      <ArrayItems>
        <Size>NumOptionInfos</Size>
        <ValuePointer>OptionInfos</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="llvm::opt::OptTable::Info">
    <DisplayString>{Name} (#{ID})</DisplayString>
  </Type>
  
  <Type Name="hlsl::DxilSignatureElement">
    <DisplayString>{m_Name} : {m_pSemantic->m_Kind} ({m_Kind})</DisplayString>
  </Type>
  <Type Name="hlsl::ShaderModel">
    <DisplayString>{m_pszName}</DisplayString>
  </Type>
  <Type Name="hlsl::Semantic">
    <DisplayString>{m_pszName} : {m_Kind}</DisplayString>
  </Type>
  <!-- HLSL Changes End -->
</AutoVisualizer>
