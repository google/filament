//===- llvm/Support/Dwarf.def - Dwarf definitions ---------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// Macros for running through Dwarf enumerators.
//
//===----------------------------------------------------------------------===//

#if !(defined HANDLE_DW_TAG || defined HANDLE_DW_OP ||                         \
      defined HANDLE_DW_LANG || defined HANDLE_DW_ATE ||                       \
      defined HANDLE_DW_VIRTUALITY)
#error "Missing macro definition of HANDLE_DW*"
#endif

#ifndef HANDLE_DW_TAG
#define HANDLE_DW_TAG(ID, NAME)
#endif

#ifndef HANDLE_DW_OP
#define HANDLE_DW_OP(ID, NAME)
#endif

#ifndef HANDLE_DW_LANG
#define HANDLE_DW_LANG(ID, NAME)
#endif

#ifndef HANDLE_DW_ATE
#define HANDLE_DW_ATE(ID, NAME)
#endif

#ifndef HANDLE_DW_VIRTUALITY
#define HANDLE_DW_VIRTUALITY(ID, NAME)
#endif

HANDLE_DW_TAG(0x0001, array_type)
HANDLE_DW_TAG(0x0002, class_type)
HANDLE_DW_TAG(0x0003, entry_point)
HANDLE_DW_TAG(0x0004, enumeration_type)
HANDLE_DW_TAG(0x0005, formal_parameter)
HANDLE_DW_TAG(0x0008, imported_declaration)
HANDLE_DW_TAG(0x000a, label)
HANDLE_DW_TAG(0x000b, lexical_block)
HANDLE_DW_TAG(0x000d, member)
HANDLE_DW_TAG(0x000f, pointer_type)
HANDLE_DW_TAG(0x0010, reference_type)
HANDLE_DW_TAG(0x0011, compile_unit)
HANDLE_DW_TAG(0x0012, string_type)
HANDLE_DW_TAG(0x0013, structure_type)
HANDLE_DW_TAG(0x0015, subroutine_type)
HANDLE_DW_TAG(0x0016, typedef)
HANDLE_DW_TAG(0x0017, union_type)
HANDLE_DW_TAG(0x0018, unspecified_parameters)
HANDLE_DW_TAG(0x0019, variant)
HANDLE_DW_TAG(0x001a, common_block)
HANDLE_DW_TAG(0x001b, common_inclusion)
HANDLE_DW_TAG(0x001c, inheritance)
HANDLE_DW_TAG(0x001d, inlined_subroutine)
HANDLE_DW_TAG(0x001e, module)
HANDLE_DW_TAG(0x001f, ptr_to_member_type)
HANDLE_DW_TAG(0x0020, set_type)
HANDLE_DW_TAG(0x0021, subrange_type)
HANDLE_DW_TAG(0x0022, with_stmt)
HANDLE_DW_TAG(0x0023, access_declaration)
HANDLE_DW_TAG(0x0024, base_type)
HANDLE_DW_TAG(0x0025, catch_block)
HANDLE_DW_TAG(0x0026, const_type)
HANDLE_DW_TAG(0x0027, constant)
HANDLE_DW_TAG(0x0028, enumerator)
HANDLE_DW_TAG(0x0029, file_type)
HANDLE_DW_TAG(0x002a, friend)
HANDLE_DW_TAG(0x002b, namelist)
HANDLE_DW_TAG(0x002c, namelist_item)
HANDLE_DW_TAG(0x002d, packed_type)
HANDLE_DW_TAG(0x002e, subprogram)
HANDLE_DW_TAG(0x002f, template_type_parameter)
HANDLE_DW_TAG(0x0030, template_value_parameter)
HANDLE_DW_TAG(0x0031, thrown_type)
HANDLE_DW_TAG(0x0032, try_block)
HANDLE_DW_TAG(0x0033, variant_part)
HANDLE_DW_TAG(0x0034, variable)
HANDLE_DW_TAG(0x0035, volatile_type)
HANDLE_DW_TAG(0x0036, dwarf_procedure)
HANDLE_DW_TAG(0x0037, restrict_type)
HANDLE_DW_TAG(0x0038, interface_type)
HANDLE_DW_TAG(0x0039, namespace)
HANDLE_DW_TAG(0x003a, imported_module)
HANDLE_DW_TAG(0x003b, unspecified_type)
HANDLE_DW_TAG(0x003c, partial_unit)
HANDLE_DW_TAG(0x003d, imported_unit)
HANDLE_DW_TAG(0x003f, condition)
HANDLE_DW_TAG(0x0040, shared_type)
HANDLE_DW_TAG(0x0041, type_unit)
HANDLE_DW_TAG(0x0042, rvalue_reference_type)
HANDLE_DW_TAG(0x0043, template_alias)

// Mock tags we use as discriminators.
HANDLE_DW_TAG(0x0100, auto_variable) // Tag for local (auto) variables.
HANDLE_DW_TAG(0x0101, arg_variable)  // Tag for argument variables.

// New in DWARF v5.
HANDLE_DW_TAG(0x0044, coarray_type)
HANDLE_DW_TAG(0x0045, generic_subrange)
HANDLE_DW_TAG(0x0046, dynamic_type)

// User-defined tags.
HANDLE_DW_TAG(0x4081, MIPS_loop)
HANDLE_DW_TAG(0x4101, format_label)
HANDLE_DW_TAG(0x4102, function_template)
HANDLE_DW_TAG(0x4103, class_template)
HANDLE_DW_TAG(0x4106, GNU_template_template_param)
HANDLE_DW_TAG(0x4107, GNU_template_parameter_pack)
HANDLE_DW_TAG(0x4108, GNU_formal_parameter_pack)
HANDLE_DW_TAG(0x4200, APPLE_property)

HANDLE_DW_OP(0x03, addr)
HANDLE_DW_OP(0x06, deref)
HANDLE_DW_OP(0x08, const1u)
HANDLE_DW_OP(0x09, const1s)
HANDLE_DW_OP(0x0a, const2u)
HANDLE_DW_OP(0x0b, const2s)
HANDLE_DW_OP(0x0c, const4u)
HANDLE_DW_OP(0x0d, const4s)
HANDLE_DW_OP(0x0e, const8u)
HANDLE_DW_OP(0x0f, const8s)
HANDLE_DW_OP(0x10, constu)
HANDLE_DW_OP(0x11, consts)
HANDLE_DW_OP(0x12, dup)
HANDLE_DW_OP(0x13, drop)
HANDLE_DW_OP(0x14, over)
HANDLE_DW_OP(0x15, pick)
HANDLE_DW_OP(0x16, swap)
HANDLE_DW_OP(0x17, rot)
HANDLE_DW_OP(0x18, xderef)
HANDLE_DW_OP(0x19, abs)
HANDLE_DW_OP(0x1a, and)
HANDLE_DW_OP(0x1b, div)
HANDLE_DW_OP(0x1c, minus)
HANDLE_DW_OP(0x1d, mod)
HANDLE_DW_OP(0x1e, mul)
HANDLE_DW_OP(0x1f, neg)
HANDLE_DW_OP(0x20, not)
HANDLE_DW_OP(0x21, or )
HANDLE_DW_OP(0x22, plus)
HANDLE_DW_OP(0x23, plus_uconst)
HANDLE_DW_OP(0x24, shl)
HANDLE_DW_OP(0x25, shr)
HANDLE_DW_OP(0x26, shra)
HANDLE_DW_OP(0x27, xor)
HANDLE_DW_OP(0x2f, skip)
HANDLE_DW_OP(0x28, bra)
HANDLE_DW_OP(0x29, eq)
HANDLE_DW_OP(0x2a, ge)
HANDLE_DW_OP(0x2b, gt)
HANDLE_DW_OP(0x2c, le)
HANDLE_DW_OP(0x2d, lt)
HANDLE_DW_OP(0x2e, ne)
HANDLE_DW_OP(0x30, lit0)
HANDLE_DW_OP(0x31, lit1)
HANDLE_DW_OP(0x32, lit2)
HANDLE_DW_OP(0x33, lit3)
HANDLE_DW_OP(0x34, lit4)
HANDLE_DW_OP(0x35, lit5)
HANDLE_DW_OP(0x36, lit6)
HANDLE_DW_OP(0x37, lit7)
HANDLE_DW_OP(0x38, lit8)
HANDLE_DW_OP(0x39, lit9)
HANDLE_DW_OP(0x3a, lit10)
HANDLE_DW_OP(0x3b, lit11)
HANDLE_DW_OP(0x3c, lit12)
HANDLE_DW_OP(0x3d, lit13)
HANDLE_DW_OP(0x3e, lit14)
HANDLE_DW_OP(0x3f, lit15)
HANDLE_DW_OP(0x40, lit16)
HANDLE_DW_OP(0x41, lit17)
HANDLE_DW_OP(0x42, lit18)
HANDLE_DW_OP(0x43, lit19)
HANDLE_DW_OP(0x44, lit20)
HANDLE_DW_OP(0x45, lit21)
HANDLE_DW_OP(0x46, lit22)
HANDLE_DW_OP(0x47, lit23)
HANDLE_DW_OP(0x48, lit24)
HANDLE_DW_OP(0x49, lit25)
HANDLE_DW_OP(0x4a, lit26)
HANDLE_DW_OP(0x4b, lit27)
HANDLE_DW_OP(0x4c, lit28)
HANDLE_DW_OP(0x4d, lit29)
HANDLE_DW_OP(0x4e, lit30)
HANDLE_DW_OP(0x4f, lit31)
HANDLE_DW_OP(0x50, reg0)
HANDLE_DW_OP(0x51, reg1)
HANDLE_DW_OP(0x52, reg2)
HANDLE_DW_OP(0x53, reg3)
HANDLE_DW_OP(0x54, reg4)
HANDLE_DW_OP(0x55, reg5)
HANDLE_DW_OP(0x56, reg6)
HANDLE_DW_OP(0x57, reg7)
HANDLE_DW_OP(0x58, reg8)
HANDLE_DW_OP(0x59, reg9)
HANDLE_DW_OP(0x5a, reg10)
HANDLE_DW_OP(0x5b, reg11)
HANDLE_DW_OP(0x5c, reg12)
HANDLE_DW_OP(0x5d, reg13)
HANDLE_DW_OP(0x5e, reg14)
HANDLE_DW_OP(0x5f, reg15)
HANDLE_DW_OP(0x60, reg16)
HANDLE_DW_OP(0x61, reg17)
HANDLE_DW_OP(0x62, reg18)
HANDLE_DW_OP(0x63, reg19)
HANDLE_DW_OP(0x64, reg20)
HANDLE_DW_OP(0x65, reg21)
HANDLE_DW_OP(0x66, reg22)
HANDLE_DW_OP(0x67, reg23)
HANDLE_DW_OP(0x68, reg24)
HANDLE_DW_OP(0x69, reg25)
HANDLE_DW_OP(0x6a, reg26)
HANDLE_DW_OP(0x6b, reg27)
HANDLE_DW_OP(0x6c, reg28)
HANDLE_DW_OP(0x6d, reg29)
HANDLE_DW_OP(0x6e, reg30)
HANDLE_DW_OP(0x6f, reg31)
HANDLE_DW_OP(0x70, breg0)
HANDLE_DW_OP(0x71, breg1)
HANDLE_DW_OP(0x72, breg2)
HANDLE_DW_OP(0x73, breg3)
HANDLE_DW_OP(0x74, breg4)
HANDLE_DW_OP(0x75, breg5)
HANDLE_DW_OP(0x76, breg6)
HANDLE_DW_OP(0x77, breg7)
HANDLE_DW_OP(0x78, breg8)
HANDLE_DW_OP(0x79, breg9)
HANDLE_DW_OP(0x7a, breg10)
HANDLE_DW_OP(0x7b, breg11)
HANDLE_DW_OP(0x7c, breg12)
HANDLE_DW_OP(0x7d, breg13)
HANDLE_DW_OP(0x7e, breg14)
HANDLE_DW_OP(0x7f, breg15)
HANDLE_DW_OP(0x80, breg16)
HANDLE_DW_OP(0x81, breg17)
HANDLE_DW_OP(0x82, breg18)
HANDLE_DW_OP(0x83, breg19)
HANDLE_DW_OP(0x84, breg20)
HANDLE_DW_OP(0x85, breg21)
HANDLE_DW_OP(0x86, breg22)
HANDLE_DW_OP(0x87, breg23)
HANDLE_DW_OP(0x88, breg24)
HANDLE_DW_OP(0x89, breg25)
HANDLE_DW_OP(0x8a, breg26)
HANDLE_DW_OP(0x8b, breg27)
HANDLE_DW_OP(0x8c, breg28)
HANDLE_DW_OP(0x8d, breg29)
HANDLE_DW_OP(0x8e, breg30)
HANDLE_DW_OP(0x8f, breg31)
HANDLE_DW_OP(0x90, regx)
HANDLE_DW_OP(0x91, fbreg)
HANDLE_DW_OP(0x92, bregx)
HANDLE_DW_OP(0x93, piece)
HANDLE_DW_OP(0x94, deref_size)
HANDLE_DW_OP(0x95, xderef_size)
HANDLE_DW_OP(0x96, nop)
HANDLE_DW_OP(0x97, push_object_address)
HANDLE_DW_OP(0x98, call2)
HANDLE_DW_OP(0x99, call4)
HANDLE_DW_OP(0x9a, call_ref)
HANDLE_DW_OP(0x9b, form_tls_address)
HANDLE_DW_OP(0x9c, call_frame_cfa)
HANDLE_DW_OP(0x9d, bit_piece)
HANDLE_DW_OP(0x9e, implicit_value)
HANDLE_DW_OP(0x9f, stack_value)

// Extensions for GNU-style thread-local storage.
HANDLE_DW_OP(0xe0, GNU_push_tls_address)

// Extensions for Fission proposal.
HANDLE_DW_OP(0xfb, GNU_addr_index)
HANDLE_DW_OP(0xfc, GNU_const_index)

// DWARF languages.
HANDLE_DW_LANG(0x0001, C89)
HANDLE_DW_LANG(0x0002, C)
HANDLE_DW_LANG(0x0003, Ada83)
HANDLE_DW_LANG(0x0004, C_plus_plus)
HANDLE_DW_LANG(0x0005, Cobol74)
HANDLE_DW_LANG(0x0006, Cobol85)
HANDLE_DW_LANG(0x0007, Fortran77)
HANDLE_DW_LANG(0x0008, Fortran90)
HANDLE_DW_LANG(0x0009, Pascal83)
HANDLE_DW_LANG(0x000a, Modula2)
HANDLE_DW_LANG(0x000b, Java)
HANDLE_DW_LANG(0x000c, C99)
HANDLE_DW_LANG(0x000d, Ada95)
HANDLE_DW_LANG(0x000e, Fortran95)
HANDLE_DW_LANG(0x000f, PLI)
HANDLE_DW_LANG(0x0010, ObjC)
HANDLE_DW_LANG(0x0011, ObjC_plus_plus)
HANDLE_DW_LANG(0x0012, UPC)
HANDLE_DW_LANG(0x0013, D)

// New in DWARF 5:
HANDLE_DW_LANG(0x0014, Python)
HANDLE_DW_LANG(0x0015, OpenCL)
HANDLE_DW_LANG(0x0016, Go)
HANDLE_DW_LANG(0x0017, Modula3)
HANDLE_DW_LANG(0x0018, Haskell)
HANDLE_DW_LANG(0x0019, C_plus_plus_03)
HANDLE_DW_LANG(0x001a, C_plus_plus_11)
HANDLE_DW_LANG(0x001b, OCaml)
HANDLE_DW_LANG(0x001c, Rust)
HANDLE_DW_LANG(0x001d, C11)
HANDLE_DW_LANG(0x001e, Swift)
HANDLE_DW_LANG(0x001f, Julia)
HANDLE_DW_LANG(0x0020, Dylan)
HANDLE_DW_LANG(0x0021, C_plus_plus_14)
HANDLE_DW_LANG(0x0022, Fortran03)
HANDLE_DW_LANG(0x0023, Fortran08)
HANDLE_DW_LANG(0x8001, Mips_Assembler)

// DWARF attribute type encodings.
HANDLE_DW_ATE(0x01, address)
HANDLE_DW_ATE(0x02, boolean)
HANDLE_DW_ATE(0x03, complex_float)
HANDLE_DW_ATE(0x04, float)
HANDLE_DW_ATE(0x05, signed)
HANDLE_DW_ATE(0x06, signed_char)
HANDLE_DW_ATE(0x07, unsigned)
HANDLE_DW_ATE(0x08, unsigned_char)
HANDLE_DW_ATE(0x09, imaginary_float)
HANDLE_DW_ATE(0x0a, packed_decimal)
HANDLE_DW_ATE(0x0b, numeric_string)
HANDLE_DW_ATE(0x0c, edited)
HANDLE_DW_ATE(0x0d, signed_fixed)
HANDLE_DW_ATE(0x0e, unsigned_fixed)
HANDLE_DW_ATE(0x0f, decimal_float)
HANDLE_DW_ATE(0x10, UTF)

// DWARF virtuality codes.
HANDLE_DW_VIRTUALITY(0x00, none)
HANDLE_DW_VIRTUALITY(0x01, virtual)
HANDLE_DW_VIRTUALITY(0x02, pure_virtual)

#undef HANDLE_DW_TAG
#undef HANDLE_DW_OP
#undef HANDLE_DW_LANG
#undef HANDLE_DW_ATE
#undef HANDLE_DW_VIRTUALITY
