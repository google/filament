
%dx.types.Handle = type { i8* }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.u32 = type { i32 }

define void @main() {
entry:
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 3, i1 false)
  %1 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %2 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %0, i32 %1, i32 undef)
  %3 = extractvalue %dx.types.ResRet.i32 %2, 0
  %4 = uitofp i32 %3 to float
  %5 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %6 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %0, i32 %5, i32 undef)
  %7 = extractvalue %dx.types.ResRet.i32 %6, 4
  %8 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %7)
  %9 = sext i1 %8 to i32
  %10 = uitofp i32 %9 to float
  %11 = call float @dx.op.tertiary.f32(i32 46, float %10, float 2.000000e+00, float %4)
  %12 = call float @dx.op.tertiary.f32(i32 46, float %10, float 2.000000e+00, float %4)
  %13 = call float @dx.op.tertiary.f32(i32 46, float %10, float 2.000000e+00, float %4)
  %14 = call float @dx.op.tertiary.f32(i32 46, float %10, float 2.000000e+00, float %4)
  %15 = fptoui float %14 to i32
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %11)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %12)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %13)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %14)
  %16 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %0, i32 %16, i32 undef, i32 %15, i32 %15, i32 %15, i32 %15, i8 15)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #2

; Function Attrs: nounwind readonly
declare i1 @dx.op.checkAccessFullyMapped.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #1

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #2

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #1

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!5}
!llvm.ident = !{!14}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{null, !3, null, null}
!3 = !{!4}
!4 = !{i32 0, %dx.types.u32 addrspace(1)* undef, !"U0", i32 0, i32 3, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!5 = !{void ()* @main, !"main", !6, !2, !13}
!6 = !{!7, !11, null}
!7 = !{!8, !10}
!8 = !{i32 0, !"A", i8 5, i8 0, !9, i8 1, i32 1, i8 1, i32 0, i8 0, null}
!9 = !{i32 0}
!10 = !{i32 1, !"B", i8 5, i8 0, !9, i8 1, i32 1, i8 1, i32 0, i8 1, null}
!11 = !{!12}
!12 = !{i32 0, !"SV_Target", i8 9, i8 16, !9, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!13 = !{i32 0, i64 256}
!14 = !{!"dxbc2dxil 1.2"}
