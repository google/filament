
%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.f32 = type { float }

define void @main() {
entry:
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 3, i1 false)
  %1 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)
  %3 = fptoui float %1 to i32
  %4 = fptoui float %2 to i32
  %5 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %0, i32 0, i32 %3, i32 %4, i32 undef, i32 0, i32 0, i32 undef)
  %6 = extractvalue %dx.types.ResRet.f32 %5, 0
  %7 = extractvalue %dx.types.ResRet.f32 %5, 1
  %8 = extractvalue %dx.types.ResRet.f32 %5, 2
  %9 = extractvalue %dx.types.ResRet.f32 %5, 3
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)
  %13 = fptosi float %10 to i32
  %14 = fptosi float %11 to i32
  %15 = fptosi float %12 to i32
  %16 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %0, i32 %15, i32 %13, i32 %14, i32 undef, i32 0, i32 0, i32 undef)
  %17 = extractvalue %dx.types.ResRet.f32 %16, 0
  %18 = extractvalue %dx.types.ResRet.f32 %16, 1
  %19 = extractvalue %dx.types.ResRet.f32 %16, 2
  %20 = extractvalue %dx.types.ResRet.f32 %16, 3
  %21 = fadd fast float %6, %17
  %22 = fadd fast float %7, %18
  %23 = fadd fast float %8, %19
  %24 = fadd fast float %9, %20
  %25 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %0, i32 %15, i32 %13, i32 %14, i32 undef, i32 -5, i32 7, i32 undef)
  %26 = extractvalue %dx.types.ResRet.f32 %25, 0
  %27 = extractvalue %dx.types.ResRet.f32 %25, 1
  %28 = extractvalue %dx.types.ResRet.f32 %25, 2
  %29 = extractvalue %dx.types.ResRet.f32 %25, 3
  %30 = fadd fast float %21, %26
  %31 = fadd fast float %22, %27
  %32 = fadd fast float %23, %28
  %33 = fadd fast float %24, %29
  %34 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %0, i32 %15, i32 %13, i32 %14, i32 undef, i32 -5, i32 7, i32 undef)
  %35 = extractvalue %dx.types.ResRet.f32 %34, 0
  %36 = extractvalue %dx.types.ResRet.f32 %34, 1
  %37 = extractvalue %dx.types.ResRet.f32 %34, 2
  %38 = extractvalue %dx.types.ResRet.f32 %34, 3
  %39 = extractvalue %dx.types.ResRet.f32 %34, 4
  %40 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %0, i32 %15, i32 %13, i32 %14, i32 undef, i32 0, i32 0, i32 undef)
  %41 = extractvalue %dx.types.ResRet.f32 %40, 0
  %42 = extractvalue %dx.types.ResRet.f32 %40, 1
  %43 = extractvalue %dx.types.ResRet.f32 %40, 2
  %44 = extractvalue %dx.types.ResRet.f32 %40, 3
  %45 = extractvalue %dx.types.ResRet.f32 %40, 4
  %46 = fadd fast float %30, %35
  %47 = fadd fast float %31, %36
  %48 = fadd fast float %32, %37
  %49 = fadd fast float %33, %38
  %50 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %39)
  %51 = sext i1 %50 to i32
  %52 = uitofp i32 %51 to float
  %53 = fadd fast float %46, %52
  %54 = fadd fast float %47, %52
  %55 = fadd fast float %48, %52
  %56 = fadd fast float %49, %52
  %57 = fadd fast float %41, %53
  %58 = fadd fast float %42, %54
  %59 = fadd fast float %43, %55
  %60 = fadd fast float %44, %56
  %61 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %45)
  %62 = sext i1 %61 to i32
  %63 = uitofp i32 %62 to float
  %64 = fadd fast float %57, %63
  %65 = fadd fast float %58, %63
  %66 = fadd fast float %59, %63
  %67 = fadd fast float %60, %63
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %64)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %65)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %66)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %67)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #2

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #0

; Function Attrs: nounwind readonly
declare i1 @dx.op.checkAccessFullyMapped.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #1

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!6}
!llvm.ident = !{!15}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{!3, null, null, null}
!3 = !{!4}
!4 = !{i32 0, %dx.types.f32 addrspace(1)* undef, !"T0", i32 0, i32 3, i32 1, i32 2, i32 0, !5}
!5 = !{i32 0, i32 9}
!6 = !{void ()* @main, !"main", !7, !2, !14}
!7 = !{!8, !12, null}
!8 = !{!9, !11}
!9 = !{i32 0, !"A", i8 9, i8 0, !10, i8 2, i32 1, i8 3, i32 0, i8 0, null}
!10 = !{i32 0}
!11 = !{i32 1, !"B", i8 9, i8 0, !10, i8 2, i32 1, i8 2, i32 1, i8 0, null}
!12 = !{!13}
!13 = !{i32 0, !"SV_Target", i8 9, i8 16, !10, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!14 = !{i32 0, i64 256}
!15 = !{!"dxbc2dxil 1.2"}
