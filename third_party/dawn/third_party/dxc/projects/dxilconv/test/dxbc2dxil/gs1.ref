
define void @main() {
entry:
  %0 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 1)
  %1 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 1)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 2)
  %3 = fadd fast float %0, %2
  %4 = fadd fast float %1, %2
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 3)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 3)
  %7 = fadd fast float %3, %5
  %8 = fadd fast float %4, %6
  %9 = fptoui float %8 to i32
  %10 = fptoui float %7 to i32
  %11 = add i32 %9, 2
  %12 = sub i32 %11, 2
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 %12, i8 3, i32 %10)
  %14 = fadd fast float %7, %13
  %15 = fadd fast float %8, %13
  %16 = fptoui float %14 to i32
  %17 = fptoui float %15 to i32
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 %16)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 %16)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 %16)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 %16)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %18)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %19)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %20)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %21)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 %17)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 %17)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %22)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %23)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 %16)
  %25 = fadd fast float 3.000000e+00, %24
  %26 = fptoui float %25 to i32
  call void @dx.op.storeOutput.i32(i32 5, i32 2, i32 0, i8 0, i32 %26)
  call void @dx.op.emitStream(i32 97, i8 0)
  call void @dx.op.cutStream(i32 98, i8 0)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #1

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind
declare void @dx.op.storeOutput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.emitStream(i32, i8) #1

; Function Attrs: nounwind
declare void @dx.op.cutStream(i32, i8) #1

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.entryPoints = !{!2}
!llvm.ident = !{!17}

!0 = !{i32 1, i32 0}
!1 = !{!"gs", i32 6, i32 0}
!2 = !{void ()* @main, !"main", !3, null, !15}
!3 = !{!4, !11, null}
!4 = !{!5, !7, !8, !10}
!5 = !{i32 0, !"AAA", i8 9, i8 0, !6, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!6 = !{i32 0}
!7 = !{i32 1, !"BBB", i8 9, i8 0, !6, i8 0, i32 1, i8 2, i32 1, i8 0, null}
!8 = !{i32 2, !"CCC", i8 9, i8 0, !9, i8 0, i32 3, i8 4, i32 2, i8 0, null}
!9 = !{i32 0, i32 1, i32 2}
!10 = !{i32 3, !"SV_Position", i8 9, i8 3, !6, i8 0, i32 1, i8 4, i32 5, i8 0, null}
!11 = !{!12, !13, !14}
!12 = !{i32 0, !"SV_Position", i8 9, i8 3, !6, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!13 = !{i32 1, !"OUT_AAA", i8 9, i8 0, !6, i8 0, i32 1, i8 2, i32 1, i8 0, null}
!14 = !{i32 2, !"SV_RenderTargetArrayIndex", i8 5, i8 4, !6, i8 0, i32 1, i8 1, i32 2, i8 0, null}
!15 = !{i32 0, i64 256, i32 1, !16}
!16 = !{i32 7, i32 18, i32 1, i32 5, i32 1}
!17 = !{!"dxbc2dxil 1.2"}
