
%dx.types.Handle = type { i8* }
%dx.types.ResRet.i16 = type { i16, i16, i16, i16, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.i32 = type { i32 }

define void @main() {
entry:
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 3, i1 false)
  %1 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %2 = call %dx.types.ResRet.i16 @dx.op.bufferLoad.i16(i32 68, %dx.types.Handle %0, i32 %1, i32 undef)
  %3 = extractvalue %dx.types.ResRet.i16 %2, 0
  %4 = extractvalue %dx.types.ResRet.i16 %2, 1
  %5 = extractvalue %dx.types.ResRet.i16 %2, 2
  %6 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %7 = call %dx.types.ResRet.i16 @dx.op.bufferLoad.i16(i32 68, %dx.types.Handle %0, i32 %6, i32 undef)
  %8 = extractvalue %dx.types.ResRet.i16 %7, 0
  %9 = extractvalue %dx.types.ResRet.i16 %7, 1
  %10 = extractvalue %dx.types.ResRet.i16 %7, 2
  %11 = sext i16 %3 to i32
  %12 = sext i16 %4 to i32
  %13 = sext i16 %5 to i32
  %14 = sext i16 %8 to i32
  %15 = sext i16 %9 to i32
  %16 = sext i16 %10 to i32
  %17 = add i32 %11, %14
  %18 = add i32 %12, %15
  %19 = add i32 %13, %16
  %20 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %21 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %0, i32 %20, i32 undef)
  %22 = extractvalue %dx.types.ResRet.i32 %21, 4
  %23 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %24 = call %dx.types.ResRet.i16 @dx.op.bufferLoad.i16(i32 68, %dx.types.Handle %0, i32 %23, i32 undef)
  %25 = extractvalue %dx.types.ResRet.i16 %24, 3
  %26 = extractvalue %dx.types.ResRet.i16 %24, 1
  %27 = extractvalue %dx.types.ResRet.i16 %24, 2
  %28 = extractvalue %dx.types.ResRet.i16 %24, 4
  %29 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %22)
  %30 = sext i1 %29 to i32
  %31 = add i32 %30, %17
  %32 = add i32 %30, %18
  %33 = add i32 %30, %19
  %34 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %28)
  %35 = sext i1 %34 to i32
  %36 = sext i16 %25 to i32
  %37 = sext i16 %26 to i32
  %38 = sext i16 %27 to i32
  %39 = add i32 %36, %31
  %40 = add i32 %37, %32
  %41 = add i32 %38, %33
  %42 = add i32 %35, %39
  %43 = add i32 %35, %40
  %44 = add i32 %35, %41
  %45 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %0, i32 %45, i32 undef, i32 %42, i32 %43, i32 %44, i32 %42, i8 15)
  call void @dx.op.storeOutput.i32(i32 5, i32 0, i32 0, i8 0, i32 %42)
  call void @dx.op.storeOutput.i32(i32 5, i32 0, i32 0, i8 1, i32 %43)
  call void @dx.op.storeOutput.i32(i32 5, i32 0, i32 0, i8 2, i32 %44)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i16 @dx.op.bufferLoad.i16(i32, %dx.types.Handle, i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i16(i32, i32, i16) #2

; Function Attrs: nounwind readonly
declare i16 @dx.op.tempRegLoad.i16(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #0

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare i1 @dx.op.checkAccessFullyMapped.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #2

; Function Attrs: nounwind
declare void @dx.op.storeOutput.i32(i32, i32, i32, i8, i32) #2

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!6}
!llvm.ident = !{!15}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{null, !3, null, null}
!3 = !{!4}
!4 = !{i32 0, %dx.types.i32 addrspace(1)* undef, !"U0", i32 0, i32 3, i32 1, i32 10, i1 false, i1 false, i1 false, !5}
!5 = !{i32 0, i32 4}
!6 = !{void ()* @main, !"main", !7, !2, !14}
!7 = !{!8, !12, null}
!8 = !{!9, !11}
!9 = !{i32 0, !"A", i8 5, i8 0, !10, i8 1, i32 1, i8 1, i32 0, i8 0, null}
!10 = !{i32 0}
!11 = !{i32 1, !"B", i8 5, i8 0, !10, i8 1, i32 1, i8 1, i32 0, i8 1, null}
!12 = !{!13}
!13 = !{i32 0, !"SV_Target", i8 4, i8 16, !10, i8 0, i32 1, i8 3, i32 0, i8 0, null}
!14 = !{i32 0, i64 288}
!15 = !{!"dxbc2dxil 1.2"}
