
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f64 = type { double, double }
%dx.types.splitdouble = type { i32, i32 }
%dx.types.i8x80 = type { [80 x i8] }

define void @main() {
entry:
  %dx.v32.x0 = alloca [24 x float], align 4
  %dx.v32.x1 = alloca [16 x float], align 4
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)
  %1 = bitcast [24 x float]* %dx.v32.x0 to double*
  %2 = getelementptr double, double* %1, i32 0
  store double 8.000000e+00, double* %2, align 8
  %3 = bitcast [24 x float]* %dx.v32.x0 to double*
  %4 = getelementptr double, double* %3, i32 4
  store double 1.000000e+00, double* %4, align 8
  %5 = bitcast [24 x float]* %dx.v32.x0 to double*
  %6 = getelementptr double, double* %5, i32 8
  store double 2.000000e+00, double* %6, align 8
  %7 = bitcast [24 x float]* %dx.v32.x0 to double*
  %8 = getelementptr double, double* %7, i32 12
  store double 0x400C7AE140000000, double* %8, align 8
  %9 = bitcast [24 x float]* %dx.v32.x0 to double*
  %10 = getelementptr double, double* %9, i32 16
  store double 7.000000e+00, double* %10, align 8
  %11 = bitcast [24 x float]* %dx.v32.x0 to double*
  %12 = getelementptr double, double* %11, i32 20
  store double 3.300000e+01, double* %12, align 8
  %13 = bitcast [16 x float]* %dx.v32.x1 to double*
  %14 = getelementptr double, double* %13, i32 0
  store double 1.000000e+00, double* %14, align 8
  %15 = bitcast [16 x float]* %dx.v32.x1 to double*
  %16 = getelementptr double, double* %15, i32 4
  store double 2.000000e+00, double* %16, align 8
  %17 = bitcast [16 x float]* %dx.v32.x1 to double*
  %18 = getelementptr double, double* %17, i32 8
  store double 0x400C7AE140000000, double* %18, align 8
  %19 = bitcast [16 x float]* %dx.v32.x1 to double*
  %20 = getelementptr double, double* %19, i32 12
  store double 7.000000e+00, double* %20, align 8
  %21 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %0, i32 0)
  %22 = extractvalue %dx.types.CBufRet.i32 %21, 0
  %23 = extractvalue %dx.types.CBufRet.i32 %21, 1
  %24 = mul i32 %22, 4
  %25 = add i32 %24, 0
  %26 = bitcast [16 x float]* %dx.v32.x1 to double*
  %27 = getelementptr double, double* %26, i32 %25
  %28 = load double, double* %27, align 8
  %29 = add i32 %22, 1
  %30 = call %dx.types.CBufRet.f64 @dx.op.cbufferLoadLegacy.f64(i32 59, %dx.types.Handle %0, i32 %29)
  %31 = extractvalue %dx.types.CBufRet.f64 %30, 0
  %32 = fadd fast double %28, %31
  %33 = mul i32 %23, 4
  %34 = add i32 %33, 0
  %35 = bitcast [24 x float]* %dx.v32.x0 to double*
  %36 = getelementptr double, double* %35, i32 %34
  %37 = load double, double* %36, align 8
  %38 = fadd fast double %32, %37
  %39 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %40 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %41 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %42 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)
  %43 = call double @dx.op.makeDouble.f64(i32 101, i32 %41, i32 %42)
  %44 = call double @dx.op.makeDouble.f64(i32 101, i32 %39, i32 %40)
  %45 = fadd fast double %43, %44
  %46 = call i32 @dx.op.loadInput.i32(i32 4, i32 2, i32 0, i8 0, i32 undef)
  %47 = call i32 @dx.op.loadInput.i32(i32 4, i32 2, i32 0, i8 1, i32 undef)
  %48 = call double @dx.op.makeDouble.f64(i32 101, i32 %46, i32 %47)
  %49 = fadd fast double %48, %45
  %50 = fadd fast double %38, %49
  %51 = mul i32 %23, 4
  %52 = add i32 %51, 0
  %53 = bitcast [16 x float]* %dx.v32.x1 to double*
  %54 = getelementptr double, double* %53, i32 %52
  store double %50, double* %54, align 8
  %55 = mul i32 %22, 4
  %56 = add i32 %55, 0
  %57 = bitcast [16 x float]* %dx.v32.x1 to double*
  %58 = getelementptr double, double* %57, i32 %56
  %59 = load double, double* %58, align 8
  %60 = fadd fast double %59, %50
  %61 = call %dx.types.splitdouble @dx.op.splitDouble.f64(i32 102, double %60)
  %62 = extractvalue %dx.types.splitdouble %61, 0
  %63 = extractvalue %dx.types.splitdouble %61, 1
  call void @dx.op.storeOutput.i32(i32 5, i32 0, i32 0, i8 0, i32 %62)
  call void @dx.op.storeOutput.i32(i32 5, i32 0, i32 0, i8 1, i32 %63)
  call void @dx.op.storeOutput.i32(i32 5, i32 0, i32 0, i8 2, i32 %62)
  call void @dx.op.storeOutput.i32(i32 5, i32 0, i32 0, i8 3, i32 %63)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare %dx.types.splitdouble @dx.op.splitDouble.f64(i32, double) #2

; Function Attrs: nounwind readnone
declare double @dx.op.makeDouble.f64(i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f64 @dx.op.cbufferLoadLegacy.f64(i32, %dx.types.Handle, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #2

; Function Attrs: nounwind
declare void @dx.op.storeOutput.i32(i32, i32, i32, i8, i32) #1

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!5}
!llvm.ident = !{!15}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{null, null, !3, null}
!3 = !{!4}
!4 = !{i32 0, %dx.types.i8x80 addrspace(2)* undef, !"CB0", i32 0, i32 0, i32 1, i32 80, null}
!5 = !{void ()* @main, !"main", !6, !2, !14}
!6 = !{!7, !12, null}
!7 = !{!8, !10, !11}
!8 = !{i32 0, !"AAA", i8 5, i8 0, !9, i8 1, i32 1, i8 4, i32 0, i8 0, null}
!9 = !{i32 0}
!10 = !{i32 1, !"BBB", i8 5, i8 0, !9, i8 1, i32 1, i8 4, i32 1, i8 0, null}
!11 = !{i32 2, !"CCC", i8 5, i8 0, !9, i8 1, i32 1, i8 4, i32 2, i8 0, null}
!12 = !{!13}
!13 = !{i32 0, !"SV_Target", i8 5, i8 16, !9, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!14 = !{i32 0, i64 260}
!15 = !{!"dxbc2dxil 1.2"}
