
%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.f32 = type { float }

define void @main() {
entry:
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 3, i1 false)
  %1 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %2 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)
  %3 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %0, i32 undef, i32 %1, i32 %2, i32 undef, i32 undef, i32 undef, i32 undef)
  %4 = extractvalue %dx.types.ResRet.f32 %3, 0
  %5 = extractvalue %dx.types.ResRet.f32 %3, 1
  %6 = extractvalue %dx.types.ResRet.f32 %3, 2
  %7 = extractvalue %dx.types.ResRet.f32 %3, 3
  %8 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %9 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %10 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %0, i32 undef, i32 %8, i32 %9, i32 undef, i32 undef, i32 undef, i32 undef)
  %11 = extractvalue %dx.types.ResRet.f32 %10, 0
  %12 = extractvalue %dx.types.ResRet.f32 %10, 1
  %13 = extractvalue %dx.types.ResRet.f32 %10, 2
  %14 = extractvalue %dx.types.ResRet.f32 %10, 3
  %15 = fadd fast float %4, %11
  %16 = fadd fast float %5, %12
  %17 = fadd fast float %6, %13
  %18 = fadd fast float %7, %14
  %19 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %20 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %21 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %0, i32 undef, i32 %19, i32 %20, i32 undef, i32 undef, i32 undef, i32 undef)
  %22 = extractvalue %dx.types.ResRet.f32 %21, 4
  %23 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %22)
  %24 = sext i1 %23 to i32
  %25 = uitofp i32 %24 to float
  %26 = call float @dx.op.tertiary.f32(i32 46, float %25, float 2.000000e+00, float %15)
  %27 = call float @dx.op.tertiary.f32(i32 46, float %25, float 2.000000e+00, float %16)
  %28 = call float @dx.op.tertiary.f32(i32 46, float %25, float 2.000000e+00, float %17)
  %29 = call float @dx.op.tertiary.f32(i32 46, float %25, float 2.000000e+00, float %18)
  %30 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %31 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %0, i32 %30, i32 %31, i32 undef, float %26, float %27, float %28, float %29, i8 15)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %26)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %27)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %28)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %29)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #2

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare i1 @dx.op.checkAccessFullyMapped.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #1

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!6}
!llvm.ident = !{!15}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{null, !3, null, null}
!3 = !{!4}
!4 = !{i32 0, %dx.types.f32 addrspace(1)* undef, !"U0", i32 0, i32 3, i32 1, i32 2, i1 false, i1 false, i1 false, !5}
!5 = !{i32 0, i32 9}
!6 = !{void ()* @main, !"main", !7, !2, !14}
!7 = !{!8, !12, null}
!8 = !{!9, !11}
!9 = !{i32 0, !"A", i8 5, i8 0, !10, i8 1, i32 1, i8 2, i32 0, i8 0, null}
!10 = !{i32 0}
!11 = !{i32 1, !"B", i8 5, i8 0, !10, i8 1, i32 1, i8 2, i32 0, i8 2, null}
!12 = !{!13}
!13 = !{i32 0, !"SV_Target", i8 9, i8 16, !10, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!14 = !{i32 0, i64 256}
!15 = !{!"dxbc2dxil 1.2"}
