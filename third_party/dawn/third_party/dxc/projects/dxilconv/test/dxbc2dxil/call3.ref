
@dx.v32.r0 = internal global float undef, align 4
@dx.v32.r2 = internal global i32 undef, align 4
@dx.v32.r1 = internal global float undef, align 4

define internal void @dx.label.0() {
entry:
  %0 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)
  %1 = icmp ne i32 %0, 0
  br i1 %1, label %if1.then, label %if1.end

if1.then:                                         ; preds = %entry
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  store float %2, float* @dx.v32.r0
  store i32 -1, i32* @dx.v32.r2
  ret void

if1.end:                                          ; preds = %entry
  %3 = call float @dx.op.bitcastI32toF32(i32 126, i32 1084227584)
  store float %3, float* @dx.v32.r1
  store i32 0, i32* @dx.v32.r2
  ret void
}

define internal void @dx.label.1() {
entry:
  %0 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  store float %0, float* @dx.v32.r1
  store i32 0, i32* @dx.v32.r2
  ret void
}

define internal void @dx.label.2() {
entry:
  %0 = call float @dx.op.bitcastI32toF32(i32 126, i32 1077936128)
  store float %0, float* @dx.v32.r1
  store i32 0, i32* @dx.v32.r2
  ret void
}

define void @main() {
entry:
  %0 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)
  %1 = icmp ne i32 %0, 0
  br i1 %1, label %if0.then, label %if0.end

if0.then:                                         ; preds = %entry
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %2)
  ret void

if0.end:                                          ; preds = %entry
  %3 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  switch i32 %3, label %switch0.default [
    i32 1, label %switch0.casegroup0
    i32 2, label %switch0.casegroup1
  ]

switch0.casegroup0:                               ; preds = %if0.end
  call void @dx.label.0()
  br label %switch0.end

switch0.casegroup1:                               ; preds = %if0.end
  call void @dx.label.1()
  br label %switch0.end

switch0.default:                                  ; preds = %if0.end
  call void @dx.label.2()
  br label %switch0.end

switch0.end:                                      ; preds = %switch0.default, %switch0.casegroup1, %switch0.casegroup0
  %4 = load float, float* @dx.v32.r0
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %4)
  %5 = load i32, i32* @dx.v32.r2
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %label0.callc0.retc0, label %label0.callc0.afterretc0

label0.callc0.retc0:                              ; preds = %switch0.end
  ret void

label0.callc0.afterretc0:                         ; preds = %switch0.end
  %7 = load float, float* @dx.v32.r1
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %7)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #2

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #1

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.entryPoints = !{!2}
!llvm.ident = !{!11}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{void ()* @main, !"main", !3, null, !10}
!3 = !{!4, !8, null}
!4 = !{!5, !7}
!5 = !{i32 0, !"A", i8 9, i8 0, !6, i8 2, i32 1, i8 2, i32 0, i8 0, null}
!6 = !{i32 0}
!7 = !{i32 1, !"B", i8 4, i8 0, !6, i8 1, i32 1, i8 3, i32 1, i8 0, null}
!8 = !{!9}
!9 = !{i32 0, !"SV_Target", i8 9, i8 16, !6, i8 0, i32 1, i8 1, i32 0, i8 0, null}
!10 = !{i32 0, i64 256}
!11 = !{!"dxbc2dxil 1.2"}
