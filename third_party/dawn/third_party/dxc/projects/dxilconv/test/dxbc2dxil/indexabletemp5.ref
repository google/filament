
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.i8x192 = type { [192 x i8] }

define void @main() {
entry:
  %dx.v16.x0 = alloca [16 x half], align 4
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)
  %1 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %2 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %0, i32 %1)
  %3 = extractvalue %dx.types.CBufRet.f32 %2, 0
  %4 = getelementptr [16 x half], [16 x half]* %dx.v16.x0, i32 0, i32 0
  %5 = fptrunc float %3 to half
  store half %5, half* %4, align 2
  %6 = add i32 %1, 4
  %7 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %0, i32 %6)
  %8 = extractvalue %dx.types.CBufRet.f32 %7, 0
  %9 = getelementptr [16 x half], [16 x half]* %dx.v16.x0, i32 0, i32 4
  %10 = fptrunc float %8 to half
  store half %10, half* %9, align 2
  %11 = call i32 @dx.op.loadInput.i32(i32 4, i32 2, i32 0, i8 0, i32 undef)
  %12 = mul i32 %11, 4
  %13 = add i32 %12, 0
  %14 = getelementptr [16 x half], [16 x half]* %dx.v16.x0, i32 0, i32 %13
  %15 = load half, half* %14, align 2
  %16 = fpext half %15 to float
  %17 = fptrunc float %16 to half
  call void @dx.op.storeOutput.f16(i32 5, i32 0, i32 0, i8 0, half %17)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f16(i32, i32, i32, i8, half) #2

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!5}
!llvm.ident = !{!15}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{null, null, !3, null}
!3 = !{!4}
!4 = !{i32 0, %dx.types.i8x192 addrspace(2)* undef, !"CB0", i32 0, i32 0, i32 1, i32 192, null}
!5 = !{void ()* @main, !"main", !6, !2, !14}
!6 = !{!7, !12, null}
!7 = !{!8, !10, !11}
!8 = !{i32 0, !"A", i8 8, i8 0, !9, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!9 = !{i32 0}
!10 = !{i32 1, !"B", i8 4, i8 0, !9, i8 1, i32 1, i8 1, i32 1, i8 0, null}
!11 = !{i32 2, !"C", i8 4, i8 0, !9, i8 1, i32 1, i8 1, i32 1, i8 1, null}
!12 = !{!13}
!13 = !{i32 0, !"SV_Target", i8 8, i8 16, !9, i8 0, i32 1, i8 1, i32 0, i8 0, null}
!14 = !{i32 0, i64 288}
!15 = !{!"dxbc2dxil 1.2"}
