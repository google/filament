
define void @main() {
entry:
  %0 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %1 = call float @dx.op.evalSampleIndex.f32(i32 88, i32 0, i32 0, i8 0, i32 %0)
  %2 = call float @dx.op.evalSampleIndex.f32(i32 88, i32 0, i32 0, i8 1, i32 %0)
  %3 = call float @dx.op.evalSampleIndex.f32(i32 88, i32 0, i32 0, i8 2, i32 %0)
  %4 = call float @dx.op.evalSampleIndex.f32(i32 88, i32 0, i32 0, i8 3, i32 %0)
  %5 = call float @dx.op.evalSampleIndex.f32(i32 88, i32 0, i32 0, i8 0, i32 3)
  %6 = call float @dx.op.evalSampleIndex.f32(i32 88, i32 0, i32 0, i8 1, i32 3)
  %7 = call float @dx.op.evalSampleIndex.f32(i32 88, i32 0, i32 0, i8 2, i32 3)
  %8 = call float @dx.op.evalSampleIndex.f32(i32 88, i32 0, i32 0, i8 3, i32 3)
  %9 = fadd fast float %1, %5
  %10 = fadd fast float %2, %6
  %11 = fadd fast float %3, %7
  %12 = fadd fast float %4, %8
  %13 = call float @dx.op.evalCentroid.f32(i32 89, i32 0, i32 0, i8 0)
  %14 = call float @dx.op.evalCentroid.f32(i32 89, i32 0, i32 0, i8 1)
  %15 = call float @dx.op.evalCentroid.f32(i32 89, i32 0, i32 0, i8 2)
  %16 = call float @dx.op.evalCentroid.f32(i32 89, i32 0, i32 0, i8 3)
  %17 = fadd fast float %9, %13
  %18 = fadd fast float %10, %14
  %19 = fadd fast float %11, %15
  %20 = fadd fast float %12, %16
  %21 = call float @dx.op.evalSnapped.f32(i32 87, i32 0, i32 0, i8 0, i32 -2, i32 5)
  %22 = call float @dx.op.evalSnapped.f32(i32 87, i32 0, i32 0, i8 1, i32 -2, i32 5)
  %23 = call float @dx.op.evalSnapped.f32(i32 87, i32 0, i32 0, i8 2, i32 -2, i32 5)
  %24 = call float @dx.op.evalSnapped.f32(i32 87, i32 0, i32 0, i8 3, i32 -2, i32 5)
  %25 = fadd fast float %17, %21
  %26 = fadd fast float %18, %22
  %27 = fadd fast float %19, %23
  %28 = fadd fast float %20, %24
  %29 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)
  %30 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %31 = add i32 %29, 2
  %32 = sub i32 %31, 2
  %33 = call float @dx.op.evalSampleIndex.f32(i32 88, i32 2, i32 %32, i8 2, i32 %30)
  %34 = sub i32 %31, 2
  %35 = call float @dx.op.evalSampleIndex.f32(i32 88, i32 2, i32 %34, i8 2, i32 %30)
  %36 = sub i32 %31, 2
  %37 = call float @dx.op.evalSampleIndex.f32(i32 88, i32 2, i32 %36, i8 0, i32 %30)
  %38 = sub i32 %31, 2
  %39 = call float @dx.op.evalSampleIndex.f32(i32 88, i32 2, i32 %38, i8 1, i32 %30)
  %40 = fadd fast float %25, %33
  %41 = fadd fast float %26, %35
  %42 = fadd fast float %27, %37
  %43 = fadd fast float %28, %39
  %44 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)
  %45 = add i32 %44, 2
  %46 = sub i32 %45, 2
  %47 = call float @dx.op.evalCentroid.f32(i32 89, i32 2, i32 %46, i8 0)
  %48 = sub i32 %45, 2
  %49 = call float @dx.op.evalCentroid.f32(i32 89, i32 2, i32 %48, i8 1)
  %50 = sub i32 %45, 2
  %51 = call float @dx.op.evalCentroid.f32(i32 89, i32 2, i32 %50, i8 2)
  %52 = sub i32 %45, 2
  %53 = call float @dx.op.evalCentroid.f32(i32 89, i32 2, i32 %52, i8 3)
  %54 = add i32 %44, 2
  %55 = sub i32 %54, 2
  %56 = call float @dx.op.evalSnapped.f32(i32 87, i32 2, i32 %55, i8 0, i32 -2, i32 5)
  %57 = sub i32 %54, 2
  %58 = call float @dx.op.evalSnapped.f32(i32 87, i32 2, i32 %57, i8 1, i32 -2, i32 5)
  %59 = sub i32 %54, 2
  %60 = call float @dx.op.evalSnapped.f32(i32 87, i32 2, i32 %59, i8 2, i32 -2, i32 5)
  %61 = sub i32 %54, 2
  %62 = call float @dx.op.evalSnapped.f32(i32 87, i32 2, i32 %61, i8 3, i32 -2, i32 5)
  %63 = fadd fast float %40, %47
  %64 = fadd fast float %41, %49
  %65 = fadd fast float %42, %51
  %66 = fadd fast float %43, %53
  %67 = fadd fast float %56, %63
  %68 = fadd fast float %58, %64
  %69 = fadd fast float %60, %65
  %70 = fadd fast float %62, %66
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %67)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %68)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %69)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %70)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.evalSampleIndex.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #1

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.evalCentroid.f32(i32, i32, i32, i8) #0

; Function Attrs: nounwind readnone
declare float @dx.op.evalSnapped.f32(i32, i32, i32, i8, i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.entryPoints = !{!2}
!llvm.ident = !{!13}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{void ()* @main, !"main", !3, null, !12}
!3 = !{!4, !10, null}
!4 = !{!5, !7, !8}
!5 = !{i32 0, !"A", i8 9, i8 0, !6, i8 2, i32 1, i8 4, i32 0, i8 0, null}
!6 = !{i32 0}
!7 = !{i32 1, !"B", i8 4, i8 0, !6, i8 1, i32 1, i8 4, i32 1, i8 0, null}
!8 = !{i32 2, !"C", i8 9, i8 0, !9, i8 2, i32 6, i8 4, i32 2, i8 0, null}
!9 = !{i32 0, i32 1, i32 2, i32 3, i32 4, i32 5}
!10 = !{!11}
!11 = !{i32 0, !"SV_Target", i8 9, i8 16, !6, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!12 = !{i32 0, i64 256}
!13 = !{!"dxbc2dxil 1.2"}
