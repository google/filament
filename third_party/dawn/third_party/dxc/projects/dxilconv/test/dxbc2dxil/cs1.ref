
%dx.types.Handle = type { i8* }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.u32 = type { i32 }

define void @main() {
entry:
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)
  %1 = call i32 @dx.op.threadId.i32(i32 93, i32 0)
  %2 = shl i32 %1, 7
  %3 = call i32 @dx.op.groupId.i32(i32 94, i32 1)
  %4 = shl i32 %3, 10
  %5 = add i32 %4, %2
  %6 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 2)
  %7 = add i32 %5, %6
  %8 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)
  %9 = add i32 %7, %8
  %10 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %0, i32 %9, i32 undef)
  %11 = extractvalue %dx.types.ResRet.i32 %10, 0
  %12 = call float @dx.op.bitcastI32toF32(i32 126, i32 %11)
  %13 = fadd fast float %12, 3.000000e+00
  %14 = call i32 @dx.op.bitcastF32toI32(i32 127, float %13)
  call void @dx.op.barrier(i32 80, i32 11)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %0, i32 %9, i32 undef, i32 %14, i32 undef, i32 undef, i32 undef, i8 1)
  call void @dx.op.barrier(i32 80, i32 2)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #1

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadIdInGroup.i32(i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #0

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #2

; Function Attrs: noduplicate nounwind
declare void @dx.op.barrier(i32, i32) #3

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #1

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { noduplicate nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!5}
!llvm.ident = !{!8}

!0 = !{i32 1, i32 0}
!1 = !{!"cs", i32 6, i32 0}
!2 = !{null, !3, null, null}
!3 = !{!4}
!4 = !{i32 0, %dx.types.u32 addrspace(1)* undef, !"U0", i32 0, i32 0, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!5 = !{void ()* @main, !"main", null, !2, !6}
!6 = !{i32 0, i64 256, i32 4, !7}
!7 = !{i32 16, i32 8, i32 3}
!8 = !{!"dxbc2dxil 1.2"}
