
define void @main() {
entry:
  %0 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)
  %1 = call float @dx.op.bitcastI32toF32(i32 126, i32 0)
  br label %loop0

loop0:                                            ; preds = %loop1.end, %entry
  %dx.v32.r5.0 = phi i32 [ 0, %entry ], [ %dx.v32.r7.0, %loop1.end ]
  %dx.v32.r5.01 = phi float [ %1, %entry ], [ %dx.v32.r7.02, %loop1.end ]
  %dx.v32.r2.0 = phi i32 [ 0, %entry ], [ %13, %loop1.end ]
  %dx.v32.r4.0 = phi i32 [ %0, %entry ], [ %dx.v32.r6.0, %loop1.end ]
  %2 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %3 = icmp sge i32 %dx.v32.r2.0, %2
  br i1 %3, label %loop0.end, label %loop0.breakc0

loop0.breakc0:                                    ; preds = %loop0
  %4 = icmp eq i32 %dx.v32.r4.0, 9
  br i1 %4, label %if0.then, label %if0.end

if0.then:                                         ; preds = %loop0.breakc0
  br label %loop0.end

if0.end:                                          ; preds = %loop0.breakc0
  br label %loop1

loop1:                                            ; preds = %if1.end, %if0.end
  %dx.v32.r3.0 = phi i32 [ 0, %if0.end ], [ %12, %if1.end ]
  %dx.v32.r7.0 = phi i32 [ %dx.v32.r5.0, %if0.end ], [ %11, %if1.end ]
  %dx.v32.r7.02 = phi float [ %dx.v32.r5.01, %if0.end ], [ %10, %if1.end ]
  %5 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)
  %6 = icmp sge i32 %dx.v32.r3.0, %5
  br i1 %6, label %loop1.end, label %loop1.breakc0

loop1.breakc0:                                    ; preds = %loop1
  %7 = icmp eq i32 %dx.v32.r4.0, 16
  br i1 %7, label %if1.then, label %if1.end

if1.then:                                         ; preds = %loop1.breakc0
  br label %loop1.end

if1.end:                                          ; preds = %loop1.breakc0
  %8 = call float @dx.op.bitcastI32toF32(i32 126, i32 %dx.v32.r7.0)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %10 = fadd fast float %8, %9
  %11 = call i32 @dx.op.bitcastF32toI32(i32 127, float %10)
  %12 = add i32 %dx.v32.r3.0, 1
  br label %loop1

loop1.end:                                        ; preds = %if1.then, %loop1
  %dx.v32.r6.0 = phi i32 [ %dx.v32.r4.0, %loop1 ], [ 16, %if1.then ]
  %13 = add i32 %dx.v32.r2.0, 1
  br label %loop0

loop0.end:                                        ; preds = %if0.then, %loop0
  %14 = call float @dx.op.bitcastI32toF32(i32 126, i32 %dx.v32.r5.0)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %14)
  ret void
}

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #2

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #1

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.entryPoints = !{!2}
!llvm.ident = !{!11}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{void ()* @main, !"main", !3, null, !10}
!3 = !{!4, !8, null}
!4 = !{!5, !7}
!5 = !{i32 0, !"A", i8 9, i8 0, !6, i8 2, i32 1, i8 2, i32 0, i8 0, null}
!6 = !{i32 0}
!7 = !{i32 1, !"B", i8 4, i8 0, !6, i8 1, i32 1, i8 3, i32 1, i8 0, null}
!8 = !{!9}
!9 = !{i32 0, !"SV_Target", i8 9, i8 16, !6, i8 0, i32 1, i8 1, i32 0, i8 0, null}
!10 = !{i32 0, i64 256}
!11 = !{!"dxbc2dxil 1.2"}
