
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.splitdouble = type { i32, i32 }
%dx.types.i8x16 = type { [16 x i8] }

define void @main() {
entry:
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)
  %1 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %2 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %3 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %4 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)
  %5 = call double @dx.op.makeDouble.f64(i32 101, i32 %3, i32 %4)
  %6 = call double @dx.op.makeDouble.f64(i32 101, i32 %1, i32 %2)
  %7 = fdiv fast double %5, %6
  %8 = call double @dx.op.makeDouble.f64(i32 101, i32 %3, i32 %4)
  %9 = fadd fast double %8, 0.000000e+00
  %10 = call double @dx.op.binary.f64(i32 36, double %7, double 0x3FFC51EB80000000)
  %11 = call double @dx.op.binary.f64(i32 35, double %9, double %10)
  %12 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %0, i32 0)
  %13 = extractvalue %dx.types.CBufRet.i32 %12, 0
  %14 = icmp ne i32 %13, 0
  %15 = call double @dx.op.unary.f64(i32 6, double %11)
  %16 = select i1 %14, double %15, double %11
  %17 = call %dx.types.splitdouble @dx.op.splitDouble.f64(i32 102, double %16)
  %18 = extractvalue %dx.types.splitdouble %17, 0
  %19 = extractvalue %dx.types.splitdouble %17, 1
  call void @dx.op.storeOutput.i32(i32 5, i32 0, i32 0, i8 0, i32 %18)
  call void @dx.op.storeOutput.i32(i32 5, i32 0, i32 0, i8 1, i32 %19)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare double @dx.op.makeDouble.f64(i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.splitdouble @dx.op.splitDouble.f64(i32, double) #1

; Function Attrs: nounwind readnone
declare double @dx.op.binary.f64(i32, double, double) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #0

; Function Attrs: nounwind readnone
declare double @dx.op.unary.f64(i32, double) #1

; Function Attrs: nounwind
declare void @dx.op.storeOutput.i32(i32, i32, i32, i8, i32) #2

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!5}
!llvm.ident = !{!14}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{null, null, !3, null}
!3 = !{!4}
!4 = !{i32 0, %dx.types.i8x16 addrspace(2)* undef, !"CB0", i32 0, i32 0, i32 1, i32 16, null}
!5 = !{void ()* @main, !"main", !6, !2, !13}
!6 = !{!7, !11, null}
!7 = !{!8, !10}
!8 = !{i32 0, !"AAA", i8 5, i8 0, !9, i8 1, i32 1, i8 2, i32 0, i8 0, null}
!9 = !{i32 0}
!10 = !{i32 1, !"BBB", i8 5, i8 0, !9, i8 1, i32 1, i8 2, i32 0, i8 2, null}
!11 = !{!12}
!12 = !{i32 0, !"SV_Target", i8 5, i8 16, !9, i8 0, i32 1, i8 2, i32 0, i8 0, null}
!13 = !{i32 0, i64 324}
!14 = !{!"dxbc2dxil 1.2"}
