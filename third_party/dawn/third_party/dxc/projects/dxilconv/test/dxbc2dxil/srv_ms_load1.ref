
%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.f32 = type { float }

define void @main() {
entry:
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 3, i1 false)
  %1 = call i32 @dx.op.loadInput.i32(i32 4, i32 2, i32 0, i8 0, i32 undef)
  %2 = call i32 @dx.op.loadInput.i32(i32 4, i32 2, i32 0, i8 1, i32 undef)
  %3 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %0, i32 0, i32 %1, i32 %2, i32 undef, i32 0, i32 0, i32 undef)
  %4 = extractvalue %dx.types.ResRet.f32 %3, 0
  %5 = extractvalue %dx.types.ResRet.f32 %3, 1
  %6 = extractvalue %dx.types.ResRet.f32 %3, 2
  %7 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %8 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %9 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %10 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %0, i32 %9, i32 %7, i32 %8, i32 undef, i32 0, i32 0, i32 undef)
  %11 = extractvalue %dx.types.ResRet.f32 %10, 0
  %12 = extractvalue %dx.types.ResRet.f32 %10, 1
  %13 = extractvalue %dx.types.ResRet.f32 %10, 2
  %14 = fadd fast float %4, %11
  %15 = fadd fast float %5, %12
  %16 = fadd fast float %6, %13
  %17 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %18 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %0, i32 %17, i32 %7, i32 %8, i32 undef, i32 -5, i32 7, i32 undef)
  %19 = extractvalue %dx.types.ResRet.f32 %18, 0
  %20 = extractvalue %dx.types.ResRet.f32 %18, 1
  %21 = extractvalue %dx.types.ResRet.f32 %18, 2
  %22 = fadd fast float %14, %19
  %23 = fadd fast float %15, %20
  %24 = fadd fast float %16, %21
  %25 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %26 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %0, i32 %25, i32 %7, i32 %8, i32 undef, i32 -5, i32 7, i32 undef)
  %27 = extractvalue %dx.types.ResRet.f32 %26, 0
  %28 = extractvalue %dx.types.ResRet.f32 %26, 1
  %29 = extractvalue %dx.types.ResRet.f32 %26, 2
  %30 = extractvalue %dx.types.ResRet.f32 %26, 4
  %31 = fadd fast float %22, %27
  %32 = fadd fast float %23, %28
  %33 = fadd fast float %24, %29
  %34 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %30)
  %35 = sext i1 %34 to i32
  %36 = uitofp i32 %35 to float
  %37 = fadd fast float %36, %31
  %38 = fadd fast float %36, %32
  %39 = fadd fast float %36, %33
  %40 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %41 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %0, i32 %40, i32 %7, i32 %8, i32 undef, i32 0, i32 0, i32 undef)
  %42 = extractvalue %dx.types.ResRet.f32 %41, 0
  %43 = extractvalue %dx.types.ResRet.f32 %41, 1
  %44 = extractvalue %dx.types.ResRet.f32 %41, 2
  %45 = extractvalue %dx.types.ResRet.f32 %41, 4
  %46 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %0, i32 13, i32 %7, i32 %8, i32 undef, i32 0, i32 0, i32 undef)
  %47 = extractvalue %dx.types.ResRet.f32 %46, 0
  %48 = extractvalue %dx.types.ResRet.f32 %46, 1
  %49 = extractvalue %dx.types.ResRet.f32 %46, 2
  %50 = fadd fast float %37, %42
  %51 = fadd fast float %38, %43
  %52 = fadd fast float %39, %44
  %53 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %45)
  %54 = sext i1 %53 to i32
  %55 = uitofp i32 %54 to float
  %56 = fadd fast float %55, %50
  %57 = fadd fast float %55, %51
  %58 = fadd fast float %55, %52
  %59 = fadd fast float %47, %56
  %60 = fadd fast float %48, %57
  %61 = fadd fast float %49, %58
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %59)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %60)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %61)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #2

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #0

; Function Attrs: nounwind readonly
declare i1 @dx.op.checkAccessFullyMapped.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #1

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!6}
!llvm.ident = !{!16}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{!3, null, null, null}
!3 = !{!4}
!4 = !{i32 0, %dx.types.f32 addrspace(1)* undef, !"T0", i32 0, i32 3, i32 1, i32 3, i32 0, !5}
!5 = !{i32 0, i32 9}
!6 = !{void ()* @main, !"main", !7, !2, !15}
!7 = !{!8, !13, null}
!8 = !{!9, !11, !12}
!9 = !{i32 0, !"A", i8 4, i8 0, !10, i8 1, i32 1, i8 2, i32 0, i8 0, null}
!10 = !{i32 0}
!11 = !{i32 1, !"C", i8 4, i8 0, !10, i8 1, i32 1, i8 1, i32 0, i8 2, null}
!12 = !{i32 2, !"B", i8 4, i8 0, !10, i8 1, i32 1, i8 2, i32 1, i8 0, null}
!13 = !{!14}
!14 = !{i32 0, !"SV_Target", i8 9, i8 16, !10, i8 0, i32 1, i8 3, i32 0, i8 0, null}
!15 = !{i32 0, i64 256}
!16 = !{!"dxbc2dxil 1.2"}
