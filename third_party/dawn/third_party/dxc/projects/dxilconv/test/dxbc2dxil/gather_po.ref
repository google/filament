
%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.f32 = type { float }
%dx.types.Sampler = type opaque

define void @main() {
entry:
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)
  %7 = fptosi float %3 to i32
  %8 = fptosi float %4 to i32
  %9 = fptosi float %5 to i32
  %10 = fptosi float %6 to i32
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %13 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %0, %dx.types.Handle %2, float %11, float %12, float undef, float undef, i32 %7, i32 %8, i32 0)
  %14 = extractvalue %dx.types.ResRet.f32 %13, 0
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %17 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %0, %dx.types.Handle %2, float %15, float %16, float undef, float undef, i32 %9, i32 %10, i32 0)
  %18 = extractvalue %dx.types.ResRet.f32 %17, 1
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)
  %23 = fptosi float %19 to i32
  %24 = fptosi float %20 to i32
  %25 = fptosi float %21 to i32
  %26 = fptosi float %22 to i32
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %28 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %29 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %0, %dx.types.Handle %2, float %27, float %28, float undef, float undef, i32 %23, i32 %24, i32 0)
  %30 = extractvalue %dx.types.ResRet.f32 %29, 2
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %33 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %0, %dx.types.Handle %2, float %31, float %32, float undef, float undef, i32 %25, i32 %26, i32 0)
  %34 = extractvalue %dx.types.ResRet.f32 %33, 3
  %35 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %36 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %37 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %0, %dx.types.Handle %2, float %35, float %36, float undef, float undef, i32 %7, i32 %8, i32 3)
  %38 = extractvalue %dx.types.ResRet.f32 %37, 0
  %39 = extractvalue %dx.types.ResRet.f32 %37, 4
  %40 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %39)
  %41 = sext i1 %40 to i32
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %44 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %0, %dx.types.Handle %2, float %42, float %43, float undef, float undef, i32 %9, i32 %10, i32 3)
  %45 = extractvalue %dx.types.ResRet.f32 %44, 1
  %46 = extractvalue %dx.types.ResRet.f32 %44, 4
  %47 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %46)
  %48 = sext i1 %47 to i32
  %49 = and i32 %48, %41
  %50 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %51 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %52 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %0, %dx.types.Handle %2, float %50, float %51, float undef, float undef, i32 %23, i32 %24, i32 3)
  %53 = extractvalue %dx.types.ResRet.f32 %52, 2
  %54 = extractvalue %dx.types.ResRet.f32 %52, 4
  %55 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %54)
  %56 = sext i1 %55 to i32
  %57 = and i32 %56, %49
  %58 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %59 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %60 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %0, %dx.types.Handle %2, float %58, float %59, float undef, float undef, i32 %25, i32 %26, i32 3)
  %61 = extractvalue %dx.types.ResRet.f32 %60, 3
  %62 = extractvalue %dx.types.ResRet.f32 %60, 4
  %63 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %62)
  %64 = sext i1 %63 to i32
  %65 = and i32 %64, %57
  %66 = uitofp i32 %65 to float
  %67 = fadd fast float %14, %38
  %68 = fadd fast float %18, %45
  %69 = fadd fast float %30, %53
  %70 = fadd fast float %34, %61
  %71 = fadd fast float %66, %67
  %72 = fadd fast float %66, %68
  %73 = fadd fast float %66, %69
  %74 = fadd fast float %66, %70
  %75 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %76 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %77 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)
  %78 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1, %dx.types.Handle %2, float %75, float %76, float %77, float undef, i32 %7, i32 %8, i32 2)
  %79 = extractvalue %dx.types.ResRet.f32 %78, 0
  %80 = extractvalue %dx.types.ResRet.f32 %78, 4
  %81 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %82 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %83 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)
  %84 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1, %dx.types.Handle %2, float %81, float %82, float %83, float undef, i32 %9, i32 %10, i32 2)
  %85 = extractvalue %dx.types.ResRet.f32 %84, 1
  %86 = extractvalue %dx.types.ResRet.f32 %84, 4
  %87 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %80)
  %88 = sext i1 %87 to i32
  %89 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %86)
  %90 = sext i1 %89 to i32
  %91 = and i32 %90, %88
  %92 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %93 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %94 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)
  %95 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1, %dx.types.Handle %2, float %92, float %93, float %94, float undef, i32 %23, i32 %24, i32 2)
  %96 = extractvalue %dx.types.ResRet.f32 %95, 2
  %97 = extractvalue %dx.types.ResRet.f32 %95, 4
  %98 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %99 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %100 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)
  %101 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1, %dx.types.Handle %2, float %98, float %99, float %100, float undef, i32 %25, i32 %26, i32 2)
  %102 = extractvalue %dx.types.ResRet.f32 %101, 3
  %103 = extractvalue %dx.types.ResRet.f32 %101, 4
  %104 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %97)
  %105 = sext i1 %104 to i32
  %106 = and i32 %105, %91
  %107 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %103)
  %108 = sext i1 %107 to i32
  %109 = and i32 %108, %106
  %110 = uitofp i32 %109 to float
  %111 = fadd fast float %71, %79
  %112 = fadd fast float %72, %85
  %113 = fadd fast float %73, %96
  %114 = fadd fast float %74, %102
  %115 = fadd fast float %110, %111
  %116 = fadd fast float %110, %112
  %117 = fadd fast float %110, %113
  %118 = fadd fast float %110, %114
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %115)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %116)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %117)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %118)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #2

; Function Attrs: nounwind readonly
declare i1 @dx.op.checkAccessFullyMapped.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #1

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!9}
!llvm.ident = !{!18}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{!3, null, null, !7}
!3 = !{!4, !6}
!4 = !{i32 0, %dx.types.f32 addrspace(1)* undef, !"T0", i32 0, i32 0, i32 1, i32 2, i32 0, !5}
!5 = !{i32 0, i32 9}
!6 = !{i32 1, %dx.types.f32 addrspace(1)* undef, !"T1", i32 0, i32 1, i32 1, i32 7, i32 0, !5}
!7 = !{!8}
!8 = !{i32 0, %dx.types.Sampler addrspace(1)* undef, !"S0", i32 0, i32 0, i32 1, i32 0, null}
!9 = !{void ()* @main, !"main", !10, !2, !17}
!10 = !{!11, !15, null}
!11 = !{!12, !14}
!12 = !{i32 0, !"A", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 0, i8 0, null}
!13 = !{i32 0}
!14 = !{i32 1, !"B", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 1, i8 0, null}
!15 = !{!16}
!16 = !{i32 0, !"SV_Target", i8 9, i8 16, !13, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!17 = !{i32 0, i64 256}
!18 = !{!"dxbc2dxil 1.2"}
