
define void @main() {
entry:
  %0 = call i32 @dx.op.outputControlPointID.i32(i32 107)
  %1 = call i32 @dx.op.primitiveID.i32(i32 108)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 %1)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 %1)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 %1)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 %1)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 %0)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 %0)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 %0)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 %0)
  %10 = fadd fast float %2, %6
  %11 = fadd fast float %3, %7
  %12 = fadd fast float %4, %8
  %13 = fadd fast float %5, %9
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %10)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %11)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %12)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %13)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.outputControlPointID.i32(i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.primitiveID.i32(i32) #0

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

define void @pc_main() {
entry:
  br label %hullloop0

hullloop0:                                        ; preds = %afterret, %entry
  %InstanceID.0 = phi i32 [ 0, %entry ], [ %4, %afterret ]
  %0 = call i32 @dx.op.primitiveID.i32(i32 108)
  %1 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 %0)
  %2 = call float @dx.op.binary.f32(i32 36, float 3.000000e+00, float %1)
  %3 = sub i32 %InstanceID.0, 0
  call void @dx.op.storePatchConstant.f32(i32 106, i32 0, i32 %3, i8 0, float %2)
  br label %afterret

afterret:                                         ; preds = %hullloop0
  %4 = add i32 %InstanceID.0, 1
  %5 = icmp ult i32 %4, 4
  br i1 %5, label %hullloop0, label %hullloop0.end

hullloop0.end:                                    ; preds = %afterret
  br label %hullloop1

hullloop1:                                        ; preds = %afterret.1, %hullloop0.end
  %InstanceID.1 = phi i32 [ 0, %hullloop0.end ], [ %29, %afterret.1 ]
  %6 = call float @dx.op.bitcastI32toF32(i32 126, i32 0)
  %7 = call float @dx.op.bitcastI32toF32(i32 126, i32 0)
  %8 = call float @dx.op.bitcastI32toF32(i32 126, i32 0)
  br label %loop0

loop0:                                            ; preds = %loop0.breakc0, %hullloop1
  %dx.v32.r3.0 = phi float [ %8, %hullloop1 ], [ %26, %loop0.breakc0 ]
  %dx.v32.r4.0 = phi i32 [ 0, %hullloop1 ], [ %27, %loop0.breakc0 ]
  %dx.v32.r2.0 = phi float [ %7, %hullloop1 ], [ %25, %loop0.breakc0 ]
  %dx.v32.r1.0 = phi i32 [ 0, %hullloop1 ], [ %24, %loop0.breakc0 ]
  %dx.v32.r0.0 = phi float [ %6, %hullloop1 ], [ %22, %loop0.breakc0 ]
  %9 = icmp sge i32 %dx.v32.r4.0, 32
  br i1 %9, label %loop0.end, label %loop0.breakc0

loop0.breakc0:                                    ; preds = %loop0
  %10 = call i32 @dx.op.primitiveID.i32(i32 108)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 %dx.v32.r4.0)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 %dx.v32.r4.0)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 %10)
  %14 = call float @dx.op.tertiary.f32(i32 46, float %11, float %12, float %13)
  %15 = call float @dx.op.bitcastI32toF32(i32 126, i32 %dx.v32.r1.0)
  %16 = fadd fast float %14, %dx.v32.r0.0
  %17 = fadd fast float %14, %15
  %18 = fadd fast float %14, %dx.v32.r2.0
  %19 = fadd fast float %14, %dx.v32.r3.0
  %20 = lshr i32 %dx.v32.r4.0, 1
  %21 = call float @dx.op.loadOutputControlPoint.f32(i32 103, i32 0, i32 0, i8 0, i32 %20)
  %22 = fadd fast float %16, %21
  %23 = fadd fast float %17, %21
  %24 = call i32 @dx.op.bitcastF32toI32(i32 127, float %23)
  %25 = fadd fast float %18, %21
  %26 = fadd fast float %19, %21
  %27 = add i32 %dx.v32.r4.0, 1
  br label %loop0

loop0.end:                                        ; preds = %loop0
  %28 = call float @dx.op.bitcastI32toF32(i32 126, i32 %dx.v32.r1.0)
  call void @dx.op.storePatchConstant.f32(i32 106, i32 2, i32 0, i8 0, float %dx.v32.r0.0)
  call void @dx.op.storePatchConstant.f32(i32 106, i32 2, i32 0, i8 1, float %28)
  call void @dx.op.storePatchConstant.f32(i32 106, i32 2, i32 0, i8 2, float %dx.v32.r2.0)
  call void @dx.op.storePatchConstant.f32(i32 106, i32 2, i32 0, i8 3, float %dx.v32.r3.0)
  br label %afterret.1

afterret.1:                                       ; preds = %loop0.end
  %29 = add i32 %InstanceID.1, 1
  %30 = icmp ult i32 %29, 1
  br i1 %30, label %hullloop1, label %hullloop1.end

hullloop1.end:                                    ; preds = %afterret.1
  br label %hullloop2

hullloop2:                                        ; preds = %afterret.2, %hullloop1.end
  %InstanceID.2 = phi i32 [ 0, %hullloop1.end ], [ %38, %afterret.2 ]
  %31 = call i32 @dx.op.primitiveID.i32(i32 108)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 %31)
  %33 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 2, i32 0, i8 0)
  %34 = fadd fast float %32, %33
  %35 = call float @dx.op.binary.f32(i32 36, float %34, float 3.000000e+00)
  %36 = add i32 %InstanceID.2, 4
  %37 = sub i32 %36, 4
  call void @dx.op.storePatchConstant.f32(i32 106, i32 1, i32 %37, i8 0, float %35)
  br label %afterret.2

afterret.2:                                       ; preds = %hullloop2
  %38 = add i32 %InstanceID.2, 1
  %39 = icmp ult i32 %38, 2
  br i1 %39, label %hullloop2, label %hullloop2.end

hullloop2.end:                                    ; preds = %afterret.2
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #1

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.storePatchConstant.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.loadOutputControlPoint.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.loadPatchConstant.f32(i32, i32, i32, i8) #0

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.entryPoints = !{!2}
!llvm.ident = !{!17}

!0 = !{i32 1, i32 0}
!1 = !{!"hs", i32 6, i32 0}
!2 = !{void ()* @main, !"main", !3, null, !15}
!3 = !{!4, !7, !9}
!4 = !{!5}
!5 = !{i32 0, !"Sem_HSFoo_Input_qq", i8 9, i8 0, !6, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!6 = !{i32 0}
!7 = !{!8}
!8 = !{i32 0, !"Sem_HSFoo", i8 9, i8 0, !6, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!9 = !{!10, !12, !14}
!10 = !{i32 0, !"SV_TessFactor", i8 9, i8 25, !11, i8 0, i32 4, i8 1, i32 0, i8 0, null}
!11 = !{i32 0, i32 1, i32 2, i32 3}
!12 = !{i32 1, !"SV_InsideTessFactor", i8 9, i8 26, !13, i8 0, i32 2, i8 1, i32 4, i8 0, null}
!13 = !{i32 0, i32 1}
!14 = !{i32 2, !"AAA", i8 9, i8 0, !6, i8 0, i32 1, i8 4, i32 6, i8 0, null}
!15 = !{i32 0, i64 256, i32 3, !16}
!16 = !{void ()* @pc_main, i32 32, i32 16, i32 3, i32 3, i32 3, float 3.000000e+00}
!17 = !{!"dxbc2dxil 1.2"}
