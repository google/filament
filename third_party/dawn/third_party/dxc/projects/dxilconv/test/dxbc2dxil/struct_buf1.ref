
%dx.types.Handle = type { i8* }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.i8x52 = type { [52 x i8] }

define void @main() {
entry:
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 1, i1 false)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %4 = fadd fast float %2, 2.000000e+02
  %5 = fadd fast float %3, 2.000000e+02
  %6 = fptosi float %4 to i32
  %7 = fptosi float %5 to i32
  %8 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %6, i32 0)
  %9 = extractvalue %dx.types.ResRet.i32 %8, 0
  %10 = extractvalue %dx.types.ResRet.i32 %8, 1
  %11 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %6, i32 8)
  %12 = extractvalue %dx.types.ResRet.i32 %11, 0
  %13 = extractvalue %dx.types.ResRet.i32 %11, 1
  %14 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %6, i32 16)
  %15 = extractvalue %dx.types.ResRet.i32 %14, 0
  %16 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %6, i32 20)
  %17 = extractvalue %dx.types.ResRet.i32 %16, 0
  %18 = extractvalue %dx.types.ResRet.i32 %16, 1
  %19 = extractvalue %dx.types.ResRet.i32 %16, 2
  %20 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %6, i32 32)
  %21 = extractvalue %dx.types.ResRet.i32 %20, 0
  %22 = extractvalue %dx.types.ResRet.i32 %20, 1
  %23 = extractvalue %dx.types.ResRet.i32 %20, 2
  %24 = extractvalue %dx.types.ResRet.i32 %20, 3
  %25 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %6, i32 48)
  %26 = extractvalue %dx.types.ResRet.i32 %25, 0
  %27 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %7, i32 0)
  %28 = extractvalue %dx.types.ResRet.i32 %27, 0
  %29 = call float @dx.op.bitcastI32toF32(i32 126, i32 %28)
  %30 = extractvalue %dx.types.ResRet.i32 %27, 1
  %31 = call float @dx.op.bitcastI32toF32(i32 126, i32 %30)
  %32 = extractvalue %dx.types.ResRet.i32 %27, 4
  %33 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %7, i32 0)
  %34 = extractvalue %dx.types.ResRet.i32 %33, 2
  %35 = extractvalue %dx.types.ResRet.i32 %33, 3
  %36 = extractvalue %dx.types.ResRet.i32 %33, 4
  %37 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %7, i32 16)
  %38 = extractvalue %dx.types.ResRet.i32 %37, 0
  %39 = extractvalue %dx.types.ResRet.i32 %37, 4
  %40 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %7, i32 16)
  %41 = extractvalue %dx.types.ResRet.i32 %40, 1
  %42 = extractvalue %dx.types.ResRet.i32 %40, 2
  %43 = extractvalue %dx.types.ResRet.i32 %40, 3
  %44 = extractvalue %dx.types.ResRet.i32 %40, 4
  %45 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %7, i32 32)
  %46 = extractvalue %dx.types.ResRet.i32 %45, 0
  %47 = extractvalue %dx.types.ResRet.i32 %45, 1
  %48 = extractvalue %dx.types.ResRet.i32 %45, 2
  %49 = extractvalue %dx.types.ResRet.i32 %45, 3
  %50 = extractvalue %dx.types.ResRet.i32 %45, 4
  %51 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %7, i32 48)
  %52 = extractvalue %dx.types.ResRet.i32 %51, 0
  %53 = extractvalue %dx.types.ResRet.i32 %51, 4
  %54 = call float @dx.op.bitcastI32toF32(i32 126, i32 0)
  %55 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %56 = fptoui float %55 to i32
  %57 = sub i32 0, %56
  %58 = icmp ult i32 %56, 1
  %59 = icmp ult i32 %56, 2
  %60 = icmp ult i32 %56, 3
  %61 = sext i1 %58 to i32
  %62 = sext i1 %59 to i32
  %63 = sext i1 %60 to i32
  %64 = and i32 %57, %62
  %65 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %66 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %67 = fptosi float %65 to i32
  %68 = fptosi float %66 to i32
  %69 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %0, i32 %67, i32 32)
  %70 = extractvalue %dx.types.ResRet.i32 %69, 3
  %71 = extractvalue %dx.types.ResRet.i32 %69, 0
  %72 = extractvalue %dx.types.ResRet.i32 %69, 1
  %73 = extractvalue %dx.types.ResRet.i32 %69, 2
  %74 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %0, i32 %67, i32 20)
  %75 = extractvalue %dx.types.ResRet.i32 %74, 0
  %76 = extractvalue %dx.types.ResRet.i32 %74, 1
  %77 = extractvalue %dx.types.ResRet.i32 %74, 2
  %78 = and i32 %64, %77
  %79 = and i32 %64, %71
  %80 = and i32 %61, %75
  %81 = and i32 %61, %76
  %82 = or i32 %78, %80
  %83 = or i32 %79, %81
  %84 = add i32 %56, -3
  %85 = shl i32 %56, 3
  %86 = add i32 %85, 20
  %87 = select i1 %59, i32 0, i32 %84
  %88 = and i32 %72, %87
  %89 = and i32 %73, %87
  %90 = or i32 %82, %88
  %91 = or i32 %83, %89
  %92 = icmp eq i32 %63, 0
  %93 = sext i1 %92 to i32
  %94 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %0, i32 %67, i32 48)
  %95 = extractvalue %dx.types.ResRet.i32 %94, 0
  %96 = and i32 %93, %70
  %97 = and i32 %93, %95
  %98 = or i32 %90, %96
  %99 = or i32 %91, %97
  %100 = sitofp i32 %98 to float
  %101 = sitofp i32 %99 to float
  %102 = call float @dx.op.bitcastI32toF32(i32 126, i32 0)
  %103 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %0, i32 %67, i32 0)
  %104 = extractvalue %dx.types.ResRet.i32 %103, 0
  %105 = call float @dx.op.bitcastI32toF32(i32 126, i32 %104)
  %106 = extractvalue %dx.types.ResRet.i32 %103, 1
  %107 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %0, i32 %67, i32 8)
  %108 = extractvalue %dx.types.ResRet.i32 %107, 0
  %109 = extractvalue %dx.types.ResRet.i32 %107, 1
  %110 = extractvalue %dx.types.ResRet.i32 %107, 2
  %111 = call float @dx.op.bitcastI32toF32(i32 126, i32 %110)
  %112 = call float @dx.op.bitcastI32toF32(i32 126, i32 %108)
  %113 = call float @dx.op.bitcastI32toF32(i32 126, i32 %109)
  %114 = call float @dx.op.bitcastI32toF32(i32 126, i32 %106)
  %115 = fadd fast float %112, %105
  %116 = fadd fast float %113, %114
  %117 = fadd fast float %111, %102
  %118 = fadd fast float %101, %116
  %119 = fadd fast float %100, %54
  %120 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %0, i32 %68, i32 0)
  %121 = extractvalue %dx.types.ResRet.i32 %120, 0
  %122 = extractvalue %dx.types.ResRet.i32 %120, 1
  %123 = extractvalue %dx.types.ResRet.i32 %120, 2
  %124 = extractvalue %dx.types.ResRet.i32 %120, 3
  %125 = extractvalue %dx.types.ResRet.i32 %120, 4
  %126 = call float @dx.op.bitcastI32toF32(i32 126, i32 %121)
  %127 = call float @dx.op.bitcastI32toF32(i32 126, i32 %122)
  %128 = fadd fast float %115, %126
  %129 = fadd fast float %118, %127
  %130 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %125)
  %131 = sext i1 %130 to i32
  %132 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %0, i32 %68, i32 16)
  %133 = extractvalue %dx.types.ResRet.i32 %132, 0
  %134 = extractvalue %dx.types.ResRet.i32 %132, 1
  %135 = extractvalue %dx.types.ResRet.i32 %132, 2
  %136 = extractvalue %dx.types.ResRet.i32 %132, 3
  %137 = extractvalue %dx.types.ResRet.i32 %132, 4
  %138 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %137)
  %139 = sext i1 %138 to i32
  %140 = and i32 %131, %139
  %141 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %0, i32 %68, i32 32)
  %142 = extractvalue %dx.types.ResRet.i32 %141, 0
  %143 = extractvalue %dx.types.ResRet.i32 %141, 1
  %144 = extractvalue %dx.types.ResRet.i32 %141, 2
  %145 = extractvalue %dx.types.ResRet.i32 %141, 3
  %146 = extractvalue %dx.types.ResRet.i32 %141, 4
  %147 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %0, i32 %68, i32 48)
  %148 = extractvalue %dx.types.ResRet.i32 %147, 0
  %149 = extractvalue %dx.types.ResRet.i32 %147, 4
  %150 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %146)
  %151 = sext i1 %150 to i32
  %152 = and i32 %140, %151
  %153 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %149)
  %154 = sext i1 %153 to i32
  %155 = and i32 %152, %154
  %156 = uitofp i32 %155 to float
  %157 = fadd fast float %156, %128
  %158 = fadd fast float %156, %129
  %159 = fadd fast float %156, %117
  %160 = fmul fast float %156, 1.000000e+00
  %161 = fmul fast float %156, 2.000000e+00
  %162 = call float @dx.op.bitcastI32toF32(i32 126, i32 %123)
  %163 = call float @dx.op.bitcastI32toF32(i32 126, i32 %124)
  %164 = call float @dx.op.bitcastI32toF32(i32 126, i32 %133)
  %165 = fadd fast float %157, %162
  %166 = fadd fast float %158, %163
  %167 = fadd fast float %159, %164
  %168 = fadd fast float %160, %160
  %169 = fadd fast float %160, %166
  %170 = fadd fast float %119, %161
  %171 = and i32 %61, %135
  %172 = and i32 %61, %134
  %173 = and i32 %64, %142
  %174 = and i32 %64, %136
  %175 = or i32 %171, %173
  %176 = or i32 %172, %174
  %177 = and i32 %87, %144
  %178 = and i32 %87, %143
  %179 = and i32 %93, %148
  %180 = and i32 %93, %145
  %181 = or i32 %175, %177
  %182 = or i32 %176, %178
  %183 = or i32 %181, %179
  %184 = or i32 %182, %180
  %185 = sitofp i32 %183 to float
  %186 = sitofp i32 %184 to float
  %187 = fadd fast float %169, %185
  %188 = fadd fast float %170, %186
  %189 = fadd fast float %165, %168
  %190 = fadd fast float %160, %187
  %191 = fadd fast float %167, %168
  %192 = fadd fast float %160, %188
  %193 = call float @dx.op.bitcastI32toF32(i32 126, i32 %9)
  %194 = call float @dx.op.bitcastI32toF32(i32 126, i32 %10)
  %195 = fadd fast float %193, %189
  %196 = fadd fast float %194, %190
  %197 = call float @dx.op.bitcastI32toF32(i32 126, i32 %12)
  %198 = call float @dx.op.bitcastI32toF32(i32 126, i32 %13)
  %199 = call float @dx.op.bitcastI32toF32(i32 126, i32 %15)
  %200 = fadd fast float %197, %195
  %201 = fadd fast float %198, %196
  %202 = fadd fast float %199, %191
  %203 = and i32 %17, %61
  %204 = and i32 %18, %61
  %205 = and i32 %42, %61
  %206 = and i32 %41, %61
  %207 = and i32 %19, %64
  %208 = and i32 %21, %64
  %209 = or i32 %203, %207
  %210 = or i32 %204, %208
  %211 = and i32 %22, %87
  %212 = and i32 %23, %87
  %213 = and i32 %48, %87
  %214 = and i32 %47, %87
  %215 = and i32 %24, %93
  %216 = and i32 %26, %93
  %217 = or i32 %209, %211
  %218 = or i32 %210, %212
  %219 = or i32 %217, %215
  %220 = or i32 %218, %216
  %221 = sitofp i32 %219 to float
  %222 = sitofp i32 %220 to float
  %223 = fadd fast float %222, %201
  %224 = fadd fast float %221, %192
  %225 = fadd fast float %29, %200
  %226 = fadd fast float %31, %223
  %227 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %32)
  %228 = sext i1 %227 to i32
  %229 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %7, i32 16)
  %230 = extractvalue %dx.types.ResRet.i32 %229, 4
  %231 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %230)
  %232 = sext i1 %231 to i32
  %233 = and i32 %228, %232
  %234 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %7, i32 32)
  %235 = extractvalue %dx.types.ResRet.i32 %234, 4
  %236 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %7, i32 48)
  %237 = extractvalue %dx.types.ResRet.i32 %236, 4
  %238 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %237)
  %239 = sext i1 %238 to i32
  %240 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %235)
  %241 = sext i1 %240 to i32
  %242 = and i32 %233, %241
  %243 = and i32 %242, %239
  %244 = uitofp i32 %243 to float
  %245 = fadd fast float %244, %225
  %246 = fadd fast float %244, %226
  %247 = fadd fast float %244, %202
  %248 = fadd fast float %244, %224
  %249 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %36)
  %250 = sext i1 %249 to i32
  %251 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %39)
  %252 = sext i1 %251 to i32
  %253 = and i32 %250, %252
  %254 = call float @dx.op.bitcastI32toF32(i32 126, i32 %34)
  %255 = call float @dx.op.bitcastI32toF32(i32 126, i32 %35)
  %256 = call float @dx.op.bitcastI32toF32(i32 126, i32 %38)
  %257 = fadd fast float %245, %254
  %258 = fadd fast float %246, %255
  %259 = fadd fast float %247, %256
  %260 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %7, i32 32)
  %261 = extractvalue %dx.types.ResRet.i32 %260, 4
  %262 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %261)
  %263 = sext i1 %262 to i32
  %264 = and i32 %253, %263
  %265 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %7, i32 48)
  %266 = extractvalue %dx.types.ResRet.i32 %265, 4
  %267 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %7, i32 0)
  %268 = extractvalue %dx.types.ResRet.i32 %267, 4
  %269 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %268)
  %270 = sext i1 %269 to i32
  %271 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %266)
  %272 = sext i1 %271 to i32
  %273 = and i32 %264, %272
  %274 = uitofp i32 %273 to float
  %275 = fadd fast float %274, %257
  %276 = fadd fast float %274, %258
  %277 = fadd fast float %274, %259
  %278 = fadd fast float %274, %248
  %279 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %44)
  %280 = sext i1 %279 to i32
  %281 = and i32 %270, %280
  %282 = and i32 %64, %46
  %283 = and i32 %64, %43
  %284 = or i32 %205, %282
  %285 = or i32 %206, %283
  %286 = or i32 %284, %213
  %287 = or i32 %285, %214
  %288 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %50)
  %289 = sext i1 %288 to i32
  %290 = and i32 %281, %289
  %291 = and i32 %93, %52
  %292 = and i32 %93, %49
  %293 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %53)
  %294 = sext i1 %293 to i32
  %295 = and i32 %290, %294
  %296 = uitofp i32 %295 to float
  %297 = or i32 %286, %291
  %298 = or i32 %287, %292
  %299 = sitofp i32 %297 to float
  %300 = sitofp i32 %298 to float
  %301 = fadd fast float %299, %276
  %302 = fadd fast float %300, %278
  %303 = fadd fast float %296, %275
  %304 = call i32 @dx.op.bitcastF32toI32(i32 127, float %303)
  %305 = fadd fast float %296, %301
  %306 = call i32 @dx.op.bitcastF32toI32(i32 127, float %305)
  %307 = fadd fast float %296, %277
  %308 = call i32 @dx.op.bitcastF32toI32(i32 127, float %307)
  %309 = fadd fast float %296, %302
  %310 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %311 = fmul fast float %310, 3.000000e+00
  %312 = fptoui float %311 to i32
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1, i32 %312, i32 0, i32 %304, i32 %306, i32 undef, i32 undef, i8 3)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1, i32 %312, i32 8, i32 %304, i32 %306, i32 %308, i32 undef, i8 7)
  %313 = fptosi float %305 to i32
  %314 = fptosi float %309 to i32
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %303)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %305)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %307)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %309)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1, i32 %312, i32 %86, i32 %313, i32 %314, i32 undef, i32 undef, i8 3)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #2

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #0

; Function Attrs: nounwind readonly
declare i1 @dx.op.checkAccessFullyMapped.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #2

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #1

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!8}
!llvm.ident = !{!19}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{!3, !6, null, null}
!3 = !{!4}
!4 = !{i32 0, %dx.types.i8x52 addrspace(1)* undef, !"T0", i32 0, i32 0, i32 1, i32 12, i32 0, !5}
!5 = !{i32 1, i32 52}
!6 = !{!7}
!7 = !{i32 0, %dx.types.i8x52 addrspace(1)* undef, !"U0", i32 0, i32 1, i32 1, i32 12, i1 false, i1 false, i1 false, !5}
!8 = !{void ()* @main, !"main", !9, !2, !18}
!9 = !{!10, !15, null}
!10 = !{!11, !13}
!11 = !{i32 0, !"Idx", i8 9, i8 0, !12, i8 2, i32 1, i8 1, i32 0, i8 0, null}
!12 = !{i32 1}
!13 = !{i32 1, !"Idx", i8 9, i8 0, !14, i8 2, i32 1, i8 1, i32 0, i8 1, null}
!14 = !{i32 2}
!15 = !{!16}
!16 = !{i32 0, !"SV_Target", i8 9, i8 16, !17, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!17 = !{i32 0}
!18 = !{i32 0, i64 256}
!19 = !{!"dxbc2dxil 1.2"}
