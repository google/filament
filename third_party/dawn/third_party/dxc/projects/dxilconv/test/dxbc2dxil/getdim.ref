
%dx.types.Handle = type { i8* }
%dx.types.Dimensions = type { i32, i32, i32, i32 }
%dx.types.f32 = type { float }

define void @main() {
entry:
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 2, i1 false)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 3, i32 3, i1 false)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 1, i1 false)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)
  %6 = fptoui float %5 to i32
  %7 = call %dx.types.Dimensions @dx.op.getDimensions(i32 72, %dx.types.Handle %0, i32 %6)
  %8 = extractvalue %dx.types.Dimensions %7, 0
  %9 = extractvalue %dx.types.Dimensions %7, 1
  %10 = extractvalue %dx.types.Dimensions %7, 3
  %11 = add i32 %8, %6
  %12 = add i32 %9, %11
  %13 = add i32 %10, %12
  %14 = call %dx.types.Dimensions @dx.op.getDimensions(i32 72, %dx.types.Handle %0, i32 0)
  %15 = extractvalue %dx.types.Dimensions %14, 0
  %16 = extractvalue %dx.types.Dimensions %14, 1
  %17 = add i32 %6, %15
  %18 = add i32 %16, %17
  %19 = add i32 %10, %18
  %20 = uitofp i32 %13 to float
  %21 = uitofp i32 %19 to float
  %22 = fadd fast float %21, %20
  %23 = call %dx.types.Dimensions @dx.op.getDimensions(i32 72, %dx.types.Handle %1, i32 %6)
  %24 = extractvalue %dx.types.Dimensions %23, 0
  %25 = extractvalue %dx.types.Dimensions %23, 1
  %26 = extractvalue %dx.types.Dimensions %23, 2
  %27 = extractvalue %dx.types.Dimensions %23, 3
  %28 = add i32 %6, %24
  %29 = add i32 %25, %28
  %30 = add i32 %26, %29
  %31 = add i32 %27, %30
  %32 = uitofp i32 %31 to float
  %33 = fadd fast float %32, %22
  %34 = call %dx.types.Dimensions @dx.op.getDimensions(i32 72, %dx.types.Handle %2, i32 %6)
  %35 = extractvalue %dx.types.Dimensions %34, 0
  %36 = extractvalue %dx.types.Dimensions %34, 1
  %37 = extractvalue %dx.types.Dimensions %34, 2
  %38 = extractvalue %dx.types.Dimensions %34, 3
  %39 = add i32 %6, %35
  %40 = add i32 %36, %39
  %41 = add i32 %37, %40
  %42 = add i32 %38, %41
  %43 = uitofp i32 %42 to float
  %44 = fadd fast float %43, %33
  %45 = call %dx.types.Dimensions @dx.op.getDimensions(i32 72, %dx.types.Handle %3, i32 0)
  %46 = extractvalue %dx.types.Dimensions %45, 0
  %47 = extractvalue %dx.types.Dimensions %45, 1
  %48 = extractvalue %dx.types.Dimensions %45, 2
  %49 = add i32 %6, %46
  %50 = add i32 %47, %49
  %51 = add i32 %48, %50
  %52 = add i32 %38, %51
  %53 = call %dx.types.Dimensions @dx.op.getDimensions(i32 72, %dx.types.Handle %3, i32 0)
  %54 = extractvalue %dx.types.Dimensions %53, 3
  %55 = add i32 %54, %52
  %56 = uitofp i32 %55 to float
  %57 = fadd fast float %56, %44
  %58 = call %dx.types.Dimensions @dx.op.getDimensions(i32 72, %dx.types.Handle %4, i32 0)
  %59 = extractvalue %dx.types.Dimensions %58, 0
  %60 = extractvalue %dx.types.Dimensions %58, 1
  %61 = add i32 %6, %59
  %62 = add i32 %60, %61
  %63 = add i32 %48, %62
  %64 = add i32 %38, %63
  %65 = add i32 %54, %64
  %66 = uitofp i32 %65 to float
  %67 = fadd fast float %66, %57
  %68 = fadd fast float %66, %57
  %69 = fadd fast float %66, %57
  %70 = fadd fast float %66, %57
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %67)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %68)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %69)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %70)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.Dimensions @dx.op.getDimensions(i32, %dx.types.Handle, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #2

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #1

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!11}
!llvm.ident = !{!19}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{!3, !9, null, null}
!3 = !{!4, !6, !7, !8}
!4 = !{i32 0, %dx.types.f32 addrspace(1)* undef, !"T0", i32 0, i32 0, i32 1, i32 2, i32 0, !5}
!5 = !{i32 0, i32 9}
!6 = !{i32 1, %dx.types.f32 addrspace(1)* undef, !"T1", i32 0, i32 1, i32 1, i32 7, i32 0, !5}
!7 = !{i32 2, %dx.types.f32 addrspace(1)* undef, !"T2", i32 0, i32 2, i32 1, i32 9, i32 0, !5}
!8 = !{i32 3, %dx.types.f32 addrspace(1)* undef, !"T3", i32 0, i32 3, i32 1, i32 8, i32 0, !5}
!9 = !{!10}
!10 = !{i32 0, %dx.types.f32 addrspace(1)* undef, !"U0", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !5}
!11 = !{void ()* @main, !"main", !12, !2, !18}
!12 = !{!13, !16, null}
!13 = !{!14}
!14 = !{i32 0, !"A", i8 9, i8 0, !15, i8 2, i32 1, i8 4, i32 0, i8 0, null}
!15 = !{i32 0}
!16 = !{!17}
!17 = !{i32 0, !"SV_Target", i8 9, i8 16, !15, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!18 = !{i32 0, i64 256}
!19 = !{!"dxbc2dxil 1.2"}
