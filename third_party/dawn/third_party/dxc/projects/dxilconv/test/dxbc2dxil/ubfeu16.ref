
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.i8x16 = type { [16 x i8] }

define void @main() {
entry:
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)
  %1 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %0, i32 0)
  %2 = extractvalue %dx.types.CBufRet.i32 %1, 0
  %3 = call i32 @dx.op.tertiary.i32(i32 52, i32 27, i32 5, i32 %2)
  %4 = trunc i32 %3 to i16
  %5 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %0, i32 0)
  %6 = extractvalue %dx.types.CBufRet.i32 %5, 0
  %7 = trunc i32 %6 to i16
  %8 = and i16 %7, -4
  %9 = xor i16 %4, %8
  %10 = add i16 %9, %8
  call void @dx.op.storeOutput.i16(i32 5, i32 0, i32 0, i8 0, i16 %10)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.tertiary.i32(i32, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i16(i32, i32, i16) #2

; Function Attrs: nounwind readonly
declare i16 @dx.op.tempRegLoad.i16(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.i16(i32, i32, i32, i8, i16) #2

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!5}
!llvm.ident = !{!11}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{null, null, !3, null}
!3 = !{!4}
!4 = !{i32 0, %dx.types.i8x16 addrspace(2)* undef, !"CB0", i32 0, i32 0, i32 1, i32 16, null}
!5 = !{void ()* @main, !"main", !6, !2, !10}
!6 = !{null, !7, null}
!7 = !{!8}
!8 = !{i32 0, !"SV_Target", i8 3, i8 16, !9, i8 0, i32 1, i8 1, i32 0, i8 0, null}
!9 = !{i32 0}
!10 = !{i32 0, i64 288}
!11 = !{!"dxbc2dxil 1.2"}
