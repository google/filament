
%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.f32 = type { float }
%dx.types.Sampler = type opaque

define void @main() {
entry:
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 3, i1 false)
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 5, i1 false)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %4 = fadd fast float %2, %3
  %5 = fptoui float %4 to i32
  %6 = uitofp i32 %5 to float
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %9 = call %dx.types.ResRet.f32 @dx.op.sampleCmp.f32(i32 64, %dx.types.Handle %0, %dx.types.Handle %1, float %7, float %8, float undef, float undef, i32 0, i32 0, i32 undef, float %6, float 0.000000e+00)
  %10 = extractvalue %dx.types.ResRet.f32 %9, 0
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %13 = call %dx.types.ResRet.f32 @dx.op.sampleCmp.f32(i32 64, %dx.types.Handle %0, %dx.types.Handle %1, float %11, float %12, float undef, float undef, i32 -5, i32 7, i32 undef, float %6, float 0.000000e+00)
  %14 = extractvalue %dx.types.ResRet.f32 %13, 0
  %15 = fadd fast float %14, %10
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %18 = call %dx.types.ResRet.f32 @dx.op.sampleCmp.f32(i32 64, %dx.types.Handle %0, %dx.types.Handle %1, float %16, float %17, float undef, float undef, i32 -4, i32 1, i32 undef, float %6, float 5.000000e-01)
  %19 = extractvalue %dx.types.ResRet.f32 %18, 0
  %20 = fadd fast float %15, %19
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %23 = call %dx.types.ResRet.f32 @dx.op.sampleCmp.f32(i32 64, %dx.types.Handle %0, %dx.types.Handle %1, float %21, float %22, float undef, float undef, i32 -3, i32 2, i32 undef, float %6, float 0.000000e+00)
  %24 = extractvalue %dx.types.ResRet.f32 %23, 0
  %25 = extractvalue %dx.types.ResRet.f32 %23, 4
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %28 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %29 = call %dx.types.ResRet.f32 @dx.op.sampleCmp.f32(i32 64, %dx.types.Handle %0, %dx.types.Handle %1, float %26, float %27, float undef, float undef, i32 -3, i32 2, i32 undef, float %6, float %28)
  %30 = extractvalue %dx.types.ResRet.f32 %29, 0
  %31 = extractvalue %dx.types.ResRet.f32 %29, 4
  %32 = fadd fast float %20, %24
  %33 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %25)
  %34 = sext i1 %33 to i32
  %35 = uitofp i32 %34 to float
  %36 = fadd fast float %35, %32
  %37 = fadd fast float %30, %36
  %38 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %31)
  %39 = sext i1 %38 to i32
  %40 = uitofp i32 %39 to float
  %41 = fadd fast float %40, %37
  %42 = fadd fast float %40, %37
  %43 = fadd fast float %40, %37
  %44 = fadd fast float %40, %37
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %41)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %42)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %43)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %44)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #2

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleCmp.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float, float) #0

; Function Attrs: nounwind readonly
declare i1 @dx.op.checkAccessFullyMapped.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #1

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!8}
!llvm.ident = !{!16}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{!3, null, null, !6}
!3 = !{!4}
!4 = !{i32 0, %dx.types.f32 addrspace(1)* undef, !"T0", i32 0, i32 3, i32 1, i32 2, i32 0, !5}
!5 = !{i32 0, i32 9}
!6 = !{!7}
!7 = !{i32 0, %dx.types.Sampler addrspace(1)* undef, !"S0", i32 0, i32 5, i32 1, i32 1, null}
!8 = !{void ()* @main, !"main", !9, !2, !15}
!9 = !{!10, !13, null}
!10 = !{!11}
!11 = !{i32 0, !"A", i8 9, i8 0, !12, i8 2, i32 1, i8 2, i32 0, i8 0, null}
!12 = !{i32 0}
!13 = !{!14}
!14 = !{i32 0, !"SV_Target", i8 9, i8 16, !12, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!15 = !{i32 0, i64 256}
!16 = !{!"dxbc2dxil 1.2"}
