
%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.f32 = type { float }
%dx.types.i8x16 = type { [16 x i8] }
%dx.types.i8x240 = type { [240 x i8] }

define void @main() {
entry:
  %0 = call i32 @dx.op.primitiveID.i32(i32 108)
  %1 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 %0)
  %2 = fptoui float %1 to i32
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 %0)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 %0)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 %0)
  %6 = fptosi float %3 to i32
  %7 = fptosi float %4 to i32
  %8 = fptosi float %5 to i32
  %9 = add i32 %2, 20
  %10 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 %9, i1 false)
  %11 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %10, i32 %8, i32 %6, i32 %7, i32 undef, i32 0, i32 0, i32 undef)
  %12 = extractvalue %dx.types.ResRet.f32 %11, 0
  %13 = extractvalue %dx.types.ResRet.f32 %11, 1
  %14 = extractvalue %dx.types.ResRet.f32 %11, 2
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 %0)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 %0)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 %0)
  %18 = fadd fast float %12, %15
  %19 = fadd fast float %13, %16
  %20 = fadd fast float %14, %17
  %21 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)
  %22 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %21, i32 0)
  %23 = extractvalue %dx.types.CBufRet.i32 %22, 0
  %24 = sitofp i32 %23 to float
  %25 = fadd fast float %24, %18
  %26 = fadd fast float %24, %19
  %27 = fadd fast float %24, %20
  %28 = call i32 @dx.op.outputControlPointID.i32(i32 107)
  %29 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 %28)
  %30 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 %28)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 %28)
  %32 = fadd fast float %25, %29
  %33 = fadd fast float %26, %30
  %34 = fadd fast float %27, %31
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %32)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %33)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %34)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.primitiveID.i32(i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #1

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.outputControlPointID.i32(i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

define void @pc_main() {
entry:
  br label %hullloop0

hullloop0:                                        ; preds = %afterret, %entry
  %InstanceID.0 = phi i32 [ 0, %entry ], [ %2, %afterret ]
  %0 = call i32 @dx.op.primitiveID.i32(i32 108)
  %1 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 %0)
  call void @dx.op.storePatchConstant.f32(i32 106, i32 0, i32 0, i8 0, float %1)
  br label %afterret

afterret:                                         ; preds = %hullloop0
  %2 = add i32 %InstanceID.0, 1
  %3 = icmp ult i32 %2, 1
  br i1 %3, label %hullloop0, label %hullloop0.end

hullloop0.end:                                    ; preds = %afterret
  br label %hullloop1

hullloop1:                                        ; preds = %afterret.1, %hullloop0.end
  %InstanceID.1 = phi i32 [ 0, %hullloop0.end ], [ %6, %afterret.1 ]
  %4 = call i32 @dx.op.primitiveID.i32(i32 108)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 %4)
  call void @dx.op.storePatchConstant.f32(i32 106, i32 1, i32 0, i8 0, float %5)
  br label %afterret.1

afterret.1:                                       ; preds = %hullloop1
  %6 = add i32 %InstanceID.1, 1
  %7 = icmp ult i32 %6, 1
  br i1 %7, label %hullloop1, label %hullloop1.end

hullloop1.end:                                    ; preds = %afterret.1
  br label %hullloop2

hullloop2:                                        ; preds = %afterret.2, %hullloop1.end
  %InstanceID.2 = phi i32 [ 0, %hullloop1.end ], [ %10, %afterret.2 ]
  %8 = call i32 @dx.op.primitiveID.i32(i32 108)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 %8)
  call void @dx.op.storePatchConstant.f32(i32 106, i32 2, i32 0, i8 0, float %9)
  br label %afterret.2

afterret.2:                                       ; preds = %hullloop2
  %10 = add i32 %InstanceID.2, 1
  %11 = icmp ult i32 %10, 1
  br i1 %11, label %hullloop2, label %hullloop2.end

hullloop2.end:                                    ; preds = %afterret.2
  br label %hullloop3

hullloop3:                                        ; preds = %afterret.3, %hullloop2.end
  %InstanceID.3 = phi i32 [ 0, %hullloop2.end ], [ %12, %afterret.3 ]
  call void @dx.op.storePatchConstant.f32(i32 106, i32 3, i32 0, i8 0, float 0.000000e+00)
  br label %afterret.3

afterret.3:                                       ; preds = %hullloop3
  %12 = add i32 %InstanceID.3, 1
  %13 = icmp ult i32 %12, 1
  br i1 %13, label %hullloop3, label %hullloop3.end

hullloop3.end:                                    ; preds = %afterret.3
  br label %hullloop4

hullloop4:                                        ; preds = %afterret.4, %hullloop3.end
  %InstanceID.4 = phi i32 [ 0, %hullloop3.end ], [ %16, %afterret.4 ]
  %14 = call i32 @dx.op.primitiveID.i32(i32 108)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 %14)
  call void @dx.op.storePatchConstant.f32(i32 106, i32 4, i32 0, i8 0, float %15)
  br label %afterret.4

afterret.4:                                       ; preds = %hullloop4
  %16 = add i32 %InstanceID.4, 1
  %17 = icmp ult i32 %16, 1
  br i1 %17, label %hullloop4, label %hullloop4.end

hullloop4.end:                                    ; preds = %afterret.4
  br label %hullloop5

hullloop5:                                        ; preds = %afterret.5, %hullloop4.end
  %InstanceID.5 = phi i32 [ 0, %hullloop4.end ], [ %24, %afterret.5 ]
  %18 = call i32 @dx.op.primitiveID.i32(i32 108)
  %19 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 2, i1 false)
  %20 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 14)
  %21 = extractvalue %dx.types.CBufRet.f32 %20, 2
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 %18)
  %23 = fadd fast float %21, %22
  call void @dx.op.storePatchConstant.f32(i32 106, i32 5, i32 0, i8 0, float %23)
  br label %afterret.5

afterret.5:                                       ; preds = %hullloop5
  %24 = add i32 %InstanceID.5, 1
  %25 = icmp ult i32 %24, 1
  br i1 %25, label %hullloop5, label %hullloop5.end

hullloop5.end:                                    ; preds = %afterret.5
  ret void
}

; Function Attrs: nounwind
declare void @dx.op.storePatchConstant.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!9}
!llvm.ident = !{!26}

!0 = !{i32 1, i32 0}
!1 = !{!"hs", i32 6, i32 0}
!2 = !{!3, null, !6, null}
!3 = !{!4}
!4 = !{i32 0, %dx.types.f32 addrspace(1)* undef, !"T0", i32 10, i32 20, i32 10, i32 2, i32 0, !5}
!5 = !{i32 0, i32 9}
!6 = !{!7, !8}
!7 = !{i32 0, %dx.types.i8x16 addrspace(2)* undef, !"CB0", i32 0, i32 0, i32 1, i32 16, null}
!8 = !{i32 1, %dx.types.i8x240 addrspace(2)* undef, !"CB1", i32 1, i32 0, i32 8, i32 240, null}
!9 = !{void ()* @main, !"main", !10, !2, !24}
!10 = !{!11, !11, !14}
!11 = !{!12}
!12 = !{i32 0, !"POSITION", i8 9, i8 0, !13, i8 0, i32 1, i8 3, i32 0, i8 0, null}
!13 = !{i32 0}
!14 = !{!15, !16, !18, !20, !22, !23}
!15 = !{i32 0, !"SV_TessFactor", i8 9, i8 25, !13, i8 0, i32 1, i8 1, i32 0, i8 0, null}
!16 = !{i32 1, !"SV_TessFactor", i8 9, i8 25, !17, i8 0, i32 1, i8 1, i32 1, i8 0, null}
!17 = !{i32 1}
!18 = !{i32 2, !"SV_TessFactor", i8 9, i8 25, !19, i8 0, i32 1, i8 1, i32 2, i8 0, null}
!19 = !{i32 2}
!20 = !{i32 3, !"SV_TessFactor", i8 9, i8 25, !21, i8 0, i32 1, i8 1, i32 3, i8 0, null}
!21 = !{i32 3}
!22 = !{i32 4, !"SV_InsideTessFactor", i8 9, i8 26, !13, i8 0, i32 1, i8 1, i32 4, i8 0, null}
!23 = !{i32 5, !"SV_InsideTessFactor", i8 9, i8 26, !17, i8 0, i32 1, i8 1, i32 5, i8 0, null}
!24 = !{i32 3, !25}
!25 = !{void ()* @pc_main, i32 16, i32 16, i32 3, i32 3, i32 3, float 0.000000e+00}
!26 = !{!"dxbc2dxil 1.2"}
