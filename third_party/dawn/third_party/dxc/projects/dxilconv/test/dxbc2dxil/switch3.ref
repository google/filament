
define void @main() {
entry:
  %0 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  switch i32 %0, label %switch0.default [
    i32 1, label %switch0.casegroup0
    i32 2, label %switch0.casegroup1
  ]

switch0.casegroup0:                               ; preds = %entry
  %1 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)
  switch i32 %1, label %switch1.default [
    i32 20, label %switch1.casegroup0
  ]

switch1.casegroup0:                               ; preds = %switch0.casegroup0
  %2 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)
  %3 = icmp eq i32 %2, 30
  br i1 %3, label %if0.then, label %if0.end

if0.then:                                         ; preds = %switch1.casegroup0
  br label %switch1.end

if0.end:                                          ; preds = %switch1.casegroup0
  %4 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)
  %5 = icmp eq i32 %4, 31
  br i1 %5, label %switch1.end, label %switch1.break1

switch1.break1:                                   ; preds = %if0.end
  br label %switch1.end

switch1.default:                                  ; preds = %switch0.casegroup0
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %7 = call i32 @dx.op.bitcastF32toI32(i32 127, float %6)
  br label %switch1.end

switch1.end:                                      ; preds = %switch1.default, %switch1.break1, %if0.end, %if0.then
  %dx.v32.r0.0 = phi i32 [ %7, %switch1.default ], [ 1085276160, %if0.then ], [ 1085695590, %if0.end ], [ 1085905306, %switch1.break1 ]
  br label %switch0.end

switch0.casegroup1:                               ; preds = %entry
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %9 = call i32 @dx.op.bitcastF32toI32(i32 127, float %8)
  br label %switch0.end

switch0.default:                                  ; preds = %entry
  br label %switch0.end

switch0.end:                                      ; preds = %switch0.default, %switch0.casegroup1, %switch1.end
  %dx.v32.r0.1 = phi i32 [ 1077936128, %switch0.default ], [ %9, %switch0.casegroup1 ], [ %dx.v32.r0.0, %switch1.end ]
  %10 = call float @dx.op.bitcastI32toF32(i32 126, i32 %dx.v32.r0.1)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %10)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #1

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.entryPoints = !{!2}
!llvm.ident = !{!11}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{void ()* @main, !"main", !3, null, !10}
!3 = !{!4, !8, null}
!4 = !{!5, !7}
!5 = !{i32 0, !"A", i8 9, i8 0, !6, i8 2, i32 1, i8 2, i32 0, i8 0, null}
!6 = !{i32 0}
!7 = !{i32 1, !"B", i8 4, i8 0, !6, i8 1, i32 1, i8 3, i32 1, i8 0, null}
!8 = !{!9}
!9 = !{i32 0, !"SV_Target", i8 9, i8 16, !6, i8 0, i32 1, i8 1, i32 0, i8 0, null}
!10 = !{i32 0, i64 256}
!11 = !{!"dxbc2dxil 1.2"}
