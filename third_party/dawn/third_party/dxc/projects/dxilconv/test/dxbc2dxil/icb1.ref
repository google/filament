
@dx.icb = internal addrspace(5) constant [16 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]

define void @main() {
entry:
  %0 = call i32 @dx.op.loadInput.i32(i32 4, i32 4, i32 0, i8 1, i32 undef)
  %1 = call i32 @dx.op.loadInput.i32(i32 4, i32 4, i32 0, i8 0, i32 undef)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)
  %6 = mul i32 %1, 4
  %7 = add i32 %6, 0
  %8 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %7
  %9 = load float, float addrspace(5)* %8, align 4
  %10 = mul i32 %1, 4
  %11 = add i32 %10, 1
  %12 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %11
  %13 = load float, float addrspace(5)* %12, align 4
  %14 = mul i32 %1, 4
  %15 = add i32 %14, 2
  %16 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %15
  %17 = load float, float addrspace(5)* %16, align 4
  %18 = mul i32 %1, 4
  %19 = add i32 %18, 3
  %20 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %19
  %21 = load float, float addrspace(5)* %20, align 4
  %22 = call float @dx.op.dot4.f32(i32 56, float %2, float %3, float %4, float %5, float %9, float %13, float %17, float %21)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)
  %27 = mul i32 %1, 4
  %28 = add i32 %27, 0
  %29 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %28
  %30 = load float, float addrspace(5)* %29, align 4
  %31 = mul i32 %1, 4
  %32 = add i32 %31, 1
  %33 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %32
  %34 = load float, float addrspace(5)* %33, align 4
  %35 = mul i32 %1, 4
  %36 = add i32 %35, 2
  %37 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %36
  %38 = load float, float addrspace(5)* %37, align 4
  %39 = mul i32 %1, 4
  %40 = add i32 %39, 3
  %41 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %40
  %42 = load float, float addrspace(5)* %41, align 4
  %43 = call float @dx.op.dot4.f32(i32 56, float %23, float %24, float %25, float %26, float %30, float %34, float %38, float %42)
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)
  %46 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)
  %47 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)
  %48 = mul i32 %1, 4
  %49 = add i32 %48, 0
  %50 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %49
  %51 = load float, float addrspace(5)* %50, align 4
  %52 = mul i32 %1, 4
  %53 = add i32 %52, 1
  %54 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %53
  %55 = load float, float addrspace(5)* %54, align 4
  %56 = mul i32 %1, 4
  %57 = add i32 %56, 2
  %58 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %57
  %59 = load float, float addrspace(5)* %58, align 4
  %60 = mul i32 %1, 4
  %61 = add i32 %60, 3
  %62 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %61
  %63 = load float, float addrspace(5)* %62, align 4
  %64 = call float @dx.op.dot4.f32(i32 56, float %44, float %45, float %46, float %47, float %51, float %55, float %59, float %63)
  %65 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)
  %66 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)
  %67 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)
  %68 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)
  %69 = mul i32 %1, 4
  %70 = add i32 %69, 0
  %71 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %70
  %72 = load float, float addrspace(5)* %71, align 4
  %73 = mul i32 %1, 4
  %74 = add i32 %73, 1
  %75 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %74
  %76 = load float, float addrspace(5)* %75, align 4
  %77 = mul i32 %1, 4
  %78 = add i32 %77, 2
  %79 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %78
  %80 = load float, float addrspace(5)* %79, align 4
  %81 = mul i32 %1, 4
  %82 = add i32 %81, 3
  %83 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %82
  %84 = load float, float addrspace(5)* %83, align 4
  %85 = call float @dx.op.dot4.f32(i32 56, float %65, float %66, float %67, float %68, float %72, float %76, float %80, float %84)
  %86 = mul i32 %0, 4
  %87 = add i32 %86, 0
  %88 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %87
  %89 = load float, float addrspace(5)* %88, align 4
  %90 = mul i32 %0, 4
  %91 = add i32 %90, 1
  %92 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %91
  %93 = load float, float addrspace(5)* %92, align 4
  %94 = mul i32 %0, 4
  %95 = add i32 %94, 2
  %96 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %95
  %97 = load float, float addrspace(5)* %96, align 4
  %98 = mul i32 %0, 4
  %99 = add i32 %98, 3
  %100 = getelementptr [16 x float], [16 x float] addrspace(5)* @dx.icb, i32 0, i32 %99
  %101 = load float, float addrspace(5)* %100, align 4
  %102 = call float @dx.op.dot4.f32(i32 56, float %22, float %43, float %64, float %85, float %89, float %93, float %97, float %101)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %102)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #1

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.entryPoints = !{!2}
!llvm.ident = !{!17}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{void ()* @main, !"main", !3, null, !16}
!3 = !{!4, !14, null}
!4 = !{!5, !7, !9, !11, !13}
!5 = !{i32 0, !"A", i8 9, i8 0, !6, i8 2, i32 1, i8 4, i32 0, i8 0, null}
!6 = !{i32 0}
!7 = !{i32 1, !"A", i8 9, i8 0, !8, i8 2, i32 1, i8 4, i32 1, i8 0, null}
!8 = !{i32 1}
!9 = !{i32 2, !"A", i8 9, i8 0, !10, i8 2, i32 1, i8 4, i32 2, i8 0, null}
!10 = !{i32 2}
!11 = !{i32 3, !"A", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 3, i8 0, null}
!12 = !{i32 3}
!13 = !{i32 4, !"B", i8 4, i8 0, !6, i8 1, i32 1, i8 4, i32 4, i8 0, null}
!14 = !{!15}
!15 = !{i32 0, !"SV_Target", i8 9, i8 16, !6, i8 0, i32 1, i8 1, i32 0, i8 0, null}
!16 = !{i32 0, i64 256}
!17 = !{!"dxbc2dxil 1.2"}
