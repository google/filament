
%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.f32 = type { float }
%dx.types.Sampler = type opaque

define void @main() {
entry:
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 2, i1 false)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %6 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %0, %dx.types.Handle %3, float %4, float %5, float undef, float undef, i32 0, i32 0, i32 0)
  %7 = extractvalue %dx.types.ResRet.f32 %6, 0
  %8 = extractvalue %dx.types.ResRet.f32 %6, 1
  %9 = extractvalue %dx.types.ResRet.f32 %6, 2
  %10 = extractvalue %dx.types.ResRet.f32 %6, 3
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %13 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %0, %dx.types.Handle %3, float %11, float %12, float undef, float undef, i32 -5, i32 7, i32 1)
  %14 = extractvalue %dx.types.ResRet.f32 %13, 0
  %15 = extractvalue %dx.types.ResRet.f32 %13, 1
  %16 = extractvalue %dx.types.ResRet.f32 %13, 2
  %17 = extractvalue %dx.types.ResRet.f32 %13, 3
  %18 = fadd fast float %7, %14
  %19 = fadd fast float %8, %15
  %20 = fadd fast float %9, %16
  %21 = fadd fast float %10, %17
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %24 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %0, %dx.types.Handle %3, float %22, float %23, float undef, float undef, i32 -3, i32 2, i32 3)
  %25 = extractvalue %dx.types.ResRet.f32 %24, 0
  %26 = extractvalue %dx.types.ResRet.f32 %24, 1
  %27 = extractvalue %dx.types.ResRet.f32 %24, 2
  %28 = extractvalue %dx.types.ResRet.f32 %24, 3
  %29 = extractvalue %dx.types.ResRet.f32 %24, 4
  %30 = fadd fast float %18, %25
  %31 = fadd fast float %19, %26
  %32 = fadd fast float %20, %27
  %33 = fadd fast float %21, %28
  %34 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %29)
  %35 = sext i1 %34 to i32
  %36 = uitofp i32 %35 to float
  %37 = fadd fast float %30, %36
  %38 = fadd fast float %31, %36
  %39 = fadd fast float %32, %36
  %40 = fadd fast float %33, %36
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)
  %44 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1, %dx.types.Handle %3, float %41, float %42, float %43, float undef, i32 -3, i32 2, i32 2)
  %45 = extractvalue %dx.types.ResRet.f32 %44, 0
  %46 = extractvalue %dx.types.ResRet.f32 %44, 1
  %47 = extractvalue %dx.types.ResRet.f32 %44, 2
  %48 = extractvalue %dx.types.ResRet.f32 %44, 3
  %49 = extractvalue %dx.types.ResRet.f32 %44, 4
  %50 = fadd fast float %37, %45
  %51 = fadd fast float %38, %46
  %52 = fadd fast float %39, %47
  %53 = fadd fast float %40, %48
  %54 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %49)
  %55 = sext i1 %54 to i32
  %56 = uitofp i32 %55 to float
  %57 = fadd fast float %50, %56
  %58 = fadd fast float %51, %56
  %59 = fadd fast float %52, %56
  %60 = fadd fast float %53, %56
  %61 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %62 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %63 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)
  %64 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)
  %65 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2, %dx.types.Handle %3, float %61, float %62, float %63, float %64, i32 undef, i32 undef, i32 2)
  %66 = extractvalue %dx.types.ResRet.f32 %65, 0
  %67 = extractvalue %dx.types.ResRet.f32 %65, 1
  %68 = extractvalue %dx.types.ResRet.f32 %65, 2
  %69 = extractvalue %dx.types.ResRet.f32 %65, 3
  %70 = extractvalue %dx.types.ResRet.f32 %65, 4
  %71 = fadd fast float %57, %66
  %72 = fadd fast float %58, %67
  %73 = fadd fast float %59, %68
  %74 = fadd fast float %60, %69
  %75 = call i1 @dx.op.checkAccessFullyMapped.i32(i32 71, i32 %70)
  %76 = sext i1 %75 to i32
  %77 = uitofp i32 %76 to float
  %78 = fadd fast float %71, %77
  %79 = fadd fast float %72, %77
  %80 = fadd fast float %73, %77
  %81 = fadd fast float %74, %77
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %78)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %79)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %80)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %81)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #2

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare i1 @dx.op.checkAccessFullyMapped.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #1

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!10}
!llvm.ident = !{!18}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{!3, null, null, !8}
!3 = !{!4, !6, !7}
!4 = !{i32 0, %dx.types.f32 addrspace(1)* undef, !"T0", i32 0, i32 0, i32 1, i32 2, i32 0, !5}
!5 = !{i32 0, i32 9}
!6 = !{i32 1, %dx.types.f32 addrspace(1)* undef, !"T1", i32 0, i32 1, i32 1, i32 7, i32 0, !5}
!7 = !{i32 2, %dx.types.f32 addrspace(1)* undef, !"T2", i32 0, i32 2, i32 1, i32 9, i32 0, !5}
!8 = !{!9}
!9 = !{i32 0, %dx.types.Sampler addrspace(1)* undef, !"S0", i32 0, i32 0, i32 1, i32 0, null}
!10 = !{void ()* @main, !"main", !11, !2, !17}
!11 = !{!12, !15, null}
!12 = !{!13}
!13 = !{i32 0, !"A", i8 9, i8 0, !14, i8 2, i32 1, i8 4, i32 0, i8 0, null}
!14 = !{i32 0}
!15 = !{!16}
!16 = !{i32 0, !"SV_Target", i8 9, i8 16, !14, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!17 = !{i32 0, i64 256}
!18 = !{!"dxbc2dxil 1.2"}
