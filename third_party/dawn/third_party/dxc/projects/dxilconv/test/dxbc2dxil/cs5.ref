
%dx.types.Handle = type { i8* }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.u32 = type { i32 }
%dx.types.i8x16 = type { [16 x i8] }

@TGSM0 = internal addrspace(3) global [6144 x i8] undef, align 4
@llvm.used = appending global [1 x i8*] [i8* addrspacecast (i8 addrspace(3)* getelementptr inbounds ([6144 x i8], [6144 x i8] addrspace(3)* @TGSM0, i32 0, i32 0) to i8*)], section "llvm.metadata"

define void @main() {
entry:
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)
  %2 = call i32 @dx.op.threadId.i32(i32 93, i32 0)
  %3 = shl i32 %2, 7
  call void @dx.op.tempRegStore.i32(i32 1, i32 0, i32 %3)
  %4 = call i32 @dx.op.groupId.i32(i32 94, i32 1)
  %5 = shl i32 %4, 10
  call void @dx.op.tempRegStore.i32(i32 1, i32 1, i32 %5)
  %6 = call i32 @dx.op.tempRegLoad.i32(i32 0, i32 1)
  %7 = call i32 @dx.op.tempRegLoad.i32(i32 0, i32 0)
  %8 = add i32 %6, %7
  call void @dx.op.tempRegStore.i32(i32 1, i32 0, i32 %8)
  %9 = call i32 @dx.op.tempRegLoad.i32(i32 0, i32 0)
  %10 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 2)
  %11 = add i32 %9, %10
  call void @dx.op.tempRegStore.i32(i32 1, i32 0, i32 %11)
  %12 = call i32 @dx.op.tempRegLoad.i32(i32 0, i32 0)
  %13 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)
  %14 = add i32 %12, %13
  call void @dx.op.tempRegStore.i32(i32 1, i32 0, i32 %14)
  %15 = call i32 @dx.op.tempRegLoad.i32(i32 0, i32 0)
  %16 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %0, i32 %15, i32 undef)
  %17 = extractvalue %dx.types.ResRet.i32 %16, 0
  call void @dx.op.tempRegStore.i32(i32 1, i32 1, i32 %17)
  %18 = call float @dx.op.tempRegLoad.f32(i32 0, i32 1)
  %19 = fptrunc float %18 to half
  %20 = fadd fast half %19, 0xH4000
  call void @dx.op.tempRegStore.f16(i32 1, i32 4, half %20)
  %21 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)
  %22 = mul i32 %21, 16
  %23 = add i32 %22, 4
  %24 = call half @dx.op.tempRegLoad.f16(i32 0, i32 4)
  %25 = fpext half %24 to float
  %26 = getelementptr [6144 x i8], [6144 x i8] addrspace(3)* @TGSM0, i32 0, i32 %23
  %27 = bitcast i8 addrspace(3)* %26 to float addrspace(3)*
  store float %25, float addrspace(3)* %27, align 4
  %28 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)
  %29 = mul i32 %28, 16
  %30 = add i32 %29, 8
  %31 = call float @dx.op.tempRegLoad.f32(i32 0, i32 1)
  %32 = getelementptr [6144 x i8], [6144 x i8] addrspace(3)* @TGSM0, i32 0, i32 %30
  %33 = bitcast i8 addrspace(3)* %32 to float addrspace(3)*
  store float %31, float addrspace(3)* %33, align 4
  %34 = call float @dx.op.tempRegLoad.f32(i32 0, i32 1)
  %35 = fptosi float %34 to i32
  %36 = trunc i32 %35 to i16
  call void @dx.op.tempRegStore.i16(i32 1, i32 8, i16 %36)
  %37 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)
  %38 = mul i32 %37, 16
  %39 = add i32 %38, 12
  %40 = call i16 @dx.op.tempRegLoad.i16(i32 0, i32 8)
  %41 = sext i16 %40 to i32
  %42 = call float @dx.op.bitcastI32toF32(i32 126, i32 %41)
  %43 = getelementptr [6144 x i8], [6144 x i8] addrspace(3)* @TGSM0, i32 0, i32 %39
  %44 = bitcast i8 addrspace(3)* %43 to float addrspace(3)*
  store float %42, float addrspace(3)* %44, align 4
  call void @dx.op.barrier(i32 80, i32 11)
  %45 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)
  %46 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %1, i32 0)
  %47 = extractvalue %dx.types.CBufRet.i32 %46, 0
  %48 = add i32 %45, %47
  call void @dx.op.tempRegStore.i32(i32 1, i32 2, i32 %48)
  %49 = call i32 @dx.op.tempRegLoad.i32(i32 0, i32 2)
  %50 = mul i32 %49, 16
  %51 = add i32 %50, 8
  %52 = getelementptr [6144 x i8], [6144 x i8] addrspace(3)* @TGSM0, i32 0, i32 %51
  %53 = bitcast i8 addrspace(3)* %52 to float addrspace(3)*
  %54 = load float, float addrspace(3)* %53, align 4
  call void @dx.op.tempRegStore.f32(i32 1, i32 3, float %54)
  %55 = call float @dx.op.tempRegLoad.f32(i32 0, i32 3)
  %56 = call float @dx.op.tempRegLoad.f32(i32 0, i32 1)
  %57 = fadd fast float %55, %56
  call void @dx.op.tempRegStore.f32(i32 1, i32 1, float %57)
  %58 = call i32 @dx.op.tempRegLoad.i32(i32 0, i32 2)
  %59 = mul i32 %58, 16
  %60 = add i32 %59, 12
  %61 = getelementptr [6144 x i8], [6144 x i8] addrspace(3)* @TGSM0, i32 0, i32 %60
  %62 = bitcast i8 addrspace(3)* %61 to float addrspace(3)*
  %63 = load float, float addrspace(3)* %62, align 4
  %64 = call i32 @dx.op.bitcastF32toI32(i32 127, float %63)
  %65 = trunc i32 %64 to i16
  call void @dx.op.tempRegStore.i16(i32 1, i32 8, i16 %65)
  %66 = call i16 @dx.op.tempRegLoad.i16(i32 0, i32 8)
  %67 = sext i16 %66 to i32
  %68 = sitofp i32 %67 to float
  call void @dx.op.tempRegStore.f32(i32 1, i32 3, float %68)
  %69 = call float @dx.op.tempRegLoad.f32(i32 0, i32 3)
  %70 = call float @dx.op.tempRegLoad.f32(i32 0, i32 1)
  %71 = fadd fast float %69, %70
  call void @dx.op.tempRegStore.f32(i32 1, i32 1, float %71)
  call void @dx.op.barrier(i32 80, i32 9)
  call void @dx.op.barrier(i32 80, i32 2)
  %72 = call i32 @dx.op.tempRegLoad.i32(i32 0, i32 2)
  %73 = mul i32 %72, 16
  %74 = add i32 %73, 4
  %75 = getelementptr [6144 x i8], [6144 x i8] addrspace(3)* @TGSM0, i32 0, i32 %74
  %76 = bitcast i8 addrspace(3)* %75 to float addrspace(3)*
  %77 = load float, float addrspace(3)* %76, align 4
  %78 = fptrunc float %77 to half
  call void @dx.op.tempRegStore.f16(i32 1, i32 4, half %78)
  %79 = call float @dx.op.tempRegLoad.f32(i32 0, i32 1)
  %80 = call half @dx.op.tempRegLoad.f16(i32 0, i32 4)
  %81 = fpext half %80 to float
  %82 = fadd fast float %79, %81
  call void @dx.op.tempRegStore.f32(i32 1, i32 1, float %82)
  %83 = call i32 @dx.op.tempRegLoad.i32(i32 0, i32 0)
  %84 = call i32 @dx.op.tempRegLoad.i32(i32 0, i32 1)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %0, i32 %83, i32 undef, i32 %84, i32 undef, i32 undef, i32 undef, i8 1)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #1

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadIdInGroup.i32(i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #0

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f16(i32, i32, half) #2

; Function Attrs: nounwind readonly
declare half @dx.op.tempRegLoad.f16(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i16(i32, i32, i16) #2

; Function Attrs: nounwind readonly
declare i16 @dx.op.tempRegLoad.i16(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #1

; Function Attrs: noduplicate nounwind
declare void @dx.op.barrier(i32, i32) #3

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #1

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #2

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { noduplicate nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!7}
!llvm.ident = !{!10}

!0 = !{i32 1, i32 0}
!1 = !{!"cs", i32 6, i32 0}
!2 = !{null, !3, !5, null}
!3 = !{!4}
!4 = !{i32 0, %dx.types.u32 addrspace(1)* undef, !"U0", i32 0, i32 0, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!5 = !{!6}
!6 = !{i32 0, %dx.types.i8x16 addrspace(2)* undef, !"CB0", i32 0, i32 0, i32 1, i32 16, null}
!7 = !{void ()* @main, !"main", null, !2, !8}
!8 = !{i32 0, i64 288, i32 4, !9}
!9 = !{i32 16, i32 8, i32 3}
!10 = !{!"dxbc2dxil 1.2"}
