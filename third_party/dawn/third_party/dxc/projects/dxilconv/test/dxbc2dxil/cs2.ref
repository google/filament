
%dx.types.Handle = type { i8* }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.u32 = type { i32 }
%dx.types.i8x16 = type { [16 x i8] }

@TGSM0 = internal addrspace(3) global [6144 x i8] undef, align 4
@llvm.used = appending global [1 x i8*] [i8* addrspacecast (i8 addrspace(3)* getelementptr inbounds ([6144 x i8], [6144 x i8] addrspace(3)* @TGSM0, i32 0, i32 0) to i8*)], section "llvm.metadata"

define void @main() {
entry:
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)
  %2 = call i32 @dx.op.threadId.i32(i32 93, i32 0)
  %3 = shl i32 %2, 7
  %4 = call i32 @dx.op.groupId.i32(i32 94, i32 1)
  %5 = shl i32 %4, 10
  %6 = add i32 %5, %3
  %7 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 2)
  %8 = add i32 %6, %7
  %9 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)
  %10 = add i32 %8, %9
  %11 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %0, i32 %10, i32 undef)
  %12 = extractvalue %dx.types.ResRet.i32 %11, 0
  %13 = call float @dx.op.bitcastI32toF32(i32 126, i32 %12)
  %14 = fptrunc float %13 to half
  %15 = fadd fast half %14, 0xH4000
  %16 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)
  %17 = mul i32 %16, 16
  %18 = add i32 %17, 4
  %19 = fpext half %15 to float
  %20 = getelementptr [6144 x i8], [6144 x i8] addrspace(3)* @TGSM0, i32 0, i32 %18
  %21 = bitcast i8 addrspace(3)* %20 to float addrspace(3)*
  store float %19, float addrspace(3)* %21, align 4
  %22 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)
  %23 = mul i32 %22, 16
  %24 = add i32 %23, 8
  %25 = getelementptr [6144 x i8], [6144 x i8] addrspace(3)* @TGSM0, i32 0, i32 %24
  %26 = bitcast i8 addrspace(3)* %25 to float addrspace(3)*
  store float %13, float addrspace(3)* %26, align 4
  %27 = fptosi float %13 to i32
  %28 = trunc i32 %27 to i16
  %29 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)
  %30 = mul i32 %29, 16
  %31 = add i32 %30, 12
  %32 = sext i16 %28 to i32
  %33 = call float @dx.op.bitcastI32toF32(i32 126, i32 %32)
  %34 = getelementptr [6144 x i8], [6144 x i8] addrspace(3)* @TGSM0, i32 0, i32 %31
  %35 = bitcast i8 addrspace(3)* %34 to float addrspace(3)*
  store float %33, float addrspace(3)* %35, align 4
  call void @dx.op.barrier(i32 80, i32 11)
  %36 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)
  %37 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %1, i32 0)
  %38 = extractvalue %dx.types.CBufRet.i32 %37, 0
  %39 = add i32 %36, %38
  %40 = mul i32 %39, 16
  %41 = add i32 %40, 8
  %42 = getelementptr [6144 x i8], [6144 x i8] addrspace(3)* @TGSM0, i32 0, i32 %41
  %43 = bitcast i8 addrspace(3)* %42 to float addrspace(3)*
  %44 = load float, float addrspace(3)* %43, align 4
  %45 = fadd fast float %44, %13
  %46 = mul i32 %39, 16
  %47 = add i32 %46, 12
  %48 = getelementptr [6144 x i8], [6144 x i8] addrspace(3)* @TGSM0, i32 0, i32 %47
  %49 = bitcast i8 addrspace(3)* %48 to float addrspace(3)*
  %50 = load float, float addrspace(3)* %49, align 4
  %51 = call i32 @dx.op.bitcastF32toI32(i32 127, float %50)
  %52 = trunc i32 %51 to i16
  %53 = sext i16 %52 to i32
  %54 = sitofp i32 %53 to float
  %55 = fadd fast float %54, %45
  call void @dx.op.barrier(i32 80, i32 9)
  call void @dx.op.barrier(i32 80, i32 2)
  %56 = mul i32 %39, 16
  %57 = add i32 %56, 4
  %58 = getelementptr [6144 x i8], [6144 x i8] addrspace(3)* @TGSM0, i32 0, i32 %57
  %59 = bitcast i8 addrspace(3)* %58 to float addrspace(3)*
  %60 = load float, float addrspace(3)* %59, align 4
  %61 = fptrunc float %60 to half
  %62 = fpext half %61 to float
  %63 = fadd fast float %55, %62
  %64 = call i32 @dx.op.bitcastF32toI32(i32 127, float %63)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %0, i32 %10, i32 undef, i32 %64, i32 undef, i32 undef, i32 undef, i8 1)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #1

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadIdInGroup.i32(i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #0

; Function Attrs: nounwind readonly
declare float @dx.op.tempRegLoad.f32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f16(i32, i32, half) #2

; Function Attrs: nounwind readonly
declare half @dx.op.tempRegLoad.f16(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i16(i32, i32, i16) #2

; Function Attrs: nounwind readonly
declare i16 @dx.op.tempRegLoad.i16(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #1

; Function Attrs: noduplicate nounwind
declare void @dx.op.barrier(i32, i32) #3

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #1

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #2

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { noduplicate nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!7}
!llvm.ident = !{!10}

!0 = !{i32 1, i32 0}
!1 = !{!"cs", i32 6, i32 0}
!2 = !{null, !3, !5, null}
!3 = !{!4}
!4 = !{i32 0, %dx.types.u32 addrspace(1)* undef, !"U0", i32 0, i32 0, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!5 = !{!6}
!6 = !{i32 0, %dx.types.i8x16 addrspace(2)* undef, !"CB0", i32 0, i32 0, i32 1, i32 16, null}
!7 = !{void ()* @main, !"main", null, !2, !8}
!8 = !{i32 0, i64 288, i32 4, !9}
!9 = !{i32 16, i32 8, i32 3}
!10 = !{!"dxbc2dxil 1.2"}
