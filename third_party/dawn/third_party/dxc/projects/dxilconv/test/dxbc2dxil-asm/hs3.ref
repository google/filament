
%dx.types.twoi32 = type { i32, i32 }

define void @main() {
entry:
  %0 = call i32 @dx.op.outputControlPointID.i32(i32 107)
  %1 = call %dx.types.twoi32 @dx.op.binaryWithTwoOuts.i32(i32 43, i32 %0, i32 4)
  %2 = extractvalue %dx.types.twoi32 %1, 1
  %3 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 %2)
  %4 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 1, i32 %2)
  %5 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 2, i32 %2)
  %6 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 3, i32 %2)
  call void @dx.op.storeOutput.i32(i32 5, i32 0, i32 0, i8 0, i32 %3)
  call void @dx.op.storeOutput.i32(i32 5, i32 0, i32 0, i8 1, i32 %4)
  call void @dx.op.storeOutput.i32(i32 5, i32 0, i32 0, i8 2, i32 %5)
  call void @dx.op.storeOutput.i32(i32 5, i32 0, i32 0, i8 3, i32 %6)
  %7 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 %2)
  %8 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 %2)
  call void @dx.op.storeOutput.i32(i32 5, i32 1, i32 0, i8 0, i32 %7)
  call void @dx.op.storeOutput.i32(i32 5, i32 1, i32 0, i8 1, i32 %8)
  %9 = call i32 @dx.op.loadInput.i32(i32 4, i32 2, i32 0, i8 0, i32 %2)
  %10 = call i32 @dx.op.loadInput.i32(i32 4, i32 2, i32 0, i8 1, i32 %2)
  %11 = call i32 @dx.op.loadInput.i32(i32 4, i32 2, i32 0, i8 2, i32 %2)
  call void @dx.op.storeOutput.i32(i32 5, i32 2, i32 0, i8 0, i32 %9)
  call void @dx.op.storeOutput.i32(i32 5, i32 2, i32 0, i8 1, i32 %10)
  call void @dx.op.storeOutput.i32(i32 5, i32 2, i32 0, i8 2, i32 %11)
  ret void
}

; Function Attrs: nounwind readnone
declare %dx.types.twoi32 @dx.op.binaryWithTwoOuts.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.outputControlPointID.i32(i32) #0

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.i32(i32, i32, i32, i8, i32) #1

define void @pc_main() {
entry:
  %dx.v32.x01 = alloca [16 x i32], align 4
  br label %hullloop0

hullloop0:                                        ; preds = %hullloop0, %entry
  %InstanceID.0 = phi i32 [ 0, %entry ], [ %10, %hullloop0 ]
  %0 = getelementptr [16 x i32], [16 x i32]* %dx.v32.x01, i32 0, i32 0
  store i32 1073741824, i32* %0, align 4
  %1 = getelementptr [16 x i32], [16 x i32]* %dx.v32.x01, i32 0, i32 4
  store i32 1082130432, i32* %1, align 4
  %2 = getelementptr [16 x i32], [16 x i32]* %dx.v32.x01, i32 0, i32 8
  store i32 1097859072, i32* %2, align 4
  %3 = getelementptr [16 x i32], [16 x i32]* %dx.v32.x01, i32 0, i32 12
  store i32 1086324736, i32* %3, align 4
  %4 = mul i32 %InstanceID.0, 4
  %5 = add i32 %4, 0
  %6 = getelementptr [16 x i32], [16 x i32]* %dx.v32.x01, i32 0, i32 %5
  %7 = load i32, i32* %6, align 4
  %8 = call float @dx.op.bitcastI32toF32(i32 126, i32 %7)
  %9 = sub i32 %InstanceID.0, 0
  call void @dx.op.storePatchConstant.f32(i32 106, i32 0, i32 %9, i8 0, float %8)
  %10 = add i32 %InstanceID.0, 1
  %11 = icmp ult i32 %10, 4
  br i1 %11, label %hullloop0, label %hullloop0.end

hullloop0.end:                                    ; preds = %hullloop0
  br label %hullloop1

hullloop1:                                        ; preds = %hullloop1, %hullloop0.end
  %InstanceID.1 = phi i32 [ 0, %hullloop0.end ], [ %21, %hullloop1 ]
  %12 = getelementptr [16 x i32], [16 x i32]* %dx.v32.x01, i32 0, i32 0
  store i32 1094713344, i32* %12, align 4
  %13 = getelementptr [16 x i32], [16 x i32]* %dx.v32.x01, i32 0, i32 4
  store i32 1107296256, i32* %13, align 4
  %14 = getelementptr [16 x i32], [16 x i32]* %dx.v32.x01, i32 0, i32 8
  store i32 1097859072, i32* %14, align 4
  %15 = getelementptr [16 x i32], [16 x i32]* %dx.v32.x01, i32 0, i32 12
  store i32 1084227584, i32* %15, align 4
  %16 = mul i32 %InstanceID.1, 4
  %17 = add i32 %16, 0
  %18 = getelementptr [16 x i32], [16 x i32]* %dx.v32.x01, i32 0, i32 %17
  %19 = load i32, i32* %18, align 4
  %20 = sub i32 %InstanceID.1, 0
  call void @dx.op.storePatchConstant.i32(i32 106, i32 1, i32 %20, i8 0, i32 %19)
  %21 = add i32 %InstanceID.1, 1
  %22 = icmp ult i32 %21, 4
  br i1 %22, label %hullloop1, label %hullloop1.end

hullloop1.end:                                    ; preds = %hullloop1
  br label %hullloop2

hullloop2:                                        ; preds = %hullloop2, %hullloop1.end
  %InstanceID.2 = phi i32 [ 0, %hullloop1.end ], [ %23, %hullloop2 ]
  call void @dx.op.storePatchConstant.f32(i32 106, i32 5, i32 0, i8 0, float 1.200000e+01)
  call void @dx.op.storePatchConstant.f32(i32 106, i32 7, i32 0, i8 0, float 6.000000e+00)
  call void @dx.op.storePatchConstant.i32(i32 106, i32 6, i32 0, i8 0, i32 0)
  call void @dx.op.storePatchConstant.i32(i32 106, i32 8, i32 0, i8 0, i32 0)
  %23 = add i32 %InstanceID.2, 1
  %24 = icmp ult i32 %23, 1
  br i1 %24, label %hullloop2, label %hullloop2.end

hullloop2.end:                                    ; preds = %hullloop2
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storePatchConstant.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #0

; Function Attrs: nounwind
declare void @dx.op.storePatchConstant.i32(i32, i32, i32, i8, i32) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.entryPoints = !{!2}
!llvm.ident = !{!23}

!0 = !{i32 1, i32 0}
!1 = !{!"hs", i32 6, i32 0}
!2 = !{void ()* @main, !"main", !3, null, !21}
!3 = !{!4, !4, !9}
!4 = !{!5, !7, !8}
!5 = !{i32 0, !"0_", i8 5, i8 0, !6, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!6 = !{i32 0}
!7 = !{i32 1, !"1_", i8 5, i8 0, !6, i8 0, i32 1, i8 2, i32 1, i8 0, null}
!8 = !{i32 2, !"2_", i8 5, i8 0, !6, i8 0, i32 1, i8 3, i32 2, i8 0, null}
!9 = !{!10, !12, !13, !14, !15, !16, !17, !18, !20}
!10 = !{i32 0, !"SV_TessFactor", i8 9, i8 25, !11, i8 0, i32 4, i8 1, i32 0, i8 0, null}
!11 = !{i32 0, i32 1, i32 2, i32 3}
!12 = !{i32 1, !"0_", i8 5, i8 0, !6, i8 0, i32 1, i8 1, i32 0, i8 1, null}
!13 = !{i32 2, !"1_", i8 5, i8 0, !6, i8 0, i32 1, i8 1, i32 1, i8 1, null}
!14 = !{i32 3, !"2_", i8 5, i8 0, !6, i8 0, i32 1, i8 1, i32 2, i8 1, null}
!15 = !{i32 4, !"3_", i8 5, i8 0, !6, i8 0, i32 1, i8 1, i32 3, i8 1, null}
!16 = !{i32 5, !"SV_InsideTessFactor", i8 9, i8 26, !6, i8 0, i32 1, i8 1, i32 4, i8 0, null}
!17 = !{i32 6, !"4_", i8 5, i8 0, !6, i8 0, i32 1, i8 1, i32 4, i8 1, null}
!18 = !{i32 7, !"SV_InsideTessFactor", i8 9, i8 26, !19, i8 0, i32 1, i8 1, i32 5, i8 0, null}
!19 = !{i32 1}
!20 = !{i32 8, !"5_", i8 5, i8 0, !6, i8 0, i32 1, i8 1, i32 5, i8 1, null}
!21 = !{i32 0, i64 258, i32 3, !22}
!22 = !{void ()* @pc_main, i32 4, i32 32, i32 3, i32 3, i32 3, float 6.400000e+01}
!23 = !{!"dxbc2dxil 1.2"}
