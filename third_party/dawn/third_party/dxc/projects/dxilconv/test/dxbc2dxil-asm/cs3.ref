
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.i8x16 = type { [16 x i8] }

@TGSM0 = internal addrspace(3) global [1024 x i8] undef, align 4
@llvm.used = appending global [1 x i8*] [i8* addrspacecast (i8 addrspace(3)* getelementptr inbounds ([1024 x i8], [1024 x i8] addrspace(3)* @TGSM0, i32 0, i32 0) to i8*)], section "llvm.metadata"

define void @main() {
entry:
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)
  %1 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 2)
  %2 = shl i32 %1, 2
  %3 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %0, i32 0)
  %4 = extractvalue %dx.types.CBufRet.i32 %3, 3
  %5 = extractvalue %dx.types.CBufRet.i32 %3, 2
  %6 = getelementptr [1024 x i8], [1024 x i8] addrspace(3)* @TGSM0, i32 0, i32 %2
  %7 = bitcast i8 addrspace(3)* %6 to i32 addrspace(3)*
  store i32 %4, i32 addrspace(3)* %7, align 4
  %8 = add i32 %2, 4
  %9 = getelementptr [1024 x i8], [1024 x i8] addrspace(3)* @TGSM0, i32 0, i32 %8
  %10 = bitcast i8 addrspace(3)* %9 to i32 addrspace(3)*
  store i32 %5, i32 addrspace(3)* %10, align 4
  call void @dx.op.barrier(i32 80, i32 8)
  call void @dx.op.barrier(i32 80, i32 4)
  call void @dx.op.barrier(i32 80, i32 2)
  call void @dx.op.barrier(i32 80, i32 9)
  call void @dx.op.barrier(i32 80, i32 5)
  call void @dx.op.barrier(i32 80, i32 3)
  call void @dx.op.barrier(i32 80, i32 12)
  call void @dx.op.barrier(i32 80, i32 10)
  call void @dx.op.barrier(i32 80, i32 13)
  call void @dx.op.barrier(i32 80, i32 11)
  %11 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 0)
  %12 = getelementptr [1024 x i8], [1024 x i8] addrspace(3)* @TGSM0, i32 0, i32 undef
  %13 = bitcast i8 addrspace(3)* %12 to i32 addrspace(3)*
  %14 = atomicrmw add i32 addrspace(3)* %13, i32 %11 monotonic
  %15 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 0)
  %16 = getelementptr [1024 x i8], [1024 x i8] addrspace(3)* @TGSM0, i32 0, i32 undef
  %17 = bitcast i8 addrspace(3)* %16 to i32 addrspace(3)*
  %18 = atomicrmw or i32 addrspace(3)* %17, i32 %15 monotonic
  %19 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 1)
  %20 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 0)
  %21 = getelementptr [1024 x i8], [1024 x i8] addrspace(3)* @TGSM0, i32 0, i32 undef
  %22 = bitcast i8 addrspace(3)* %21 to i32 addrspace(3)*
  %23 = cmpxchg i32 addrspace(3)* %22, i32 %19, i32 %20 monotonic monotonic
  %24 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 1)
  %25 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 0)
  %26 = getelementptr [1024 x i8], [1024 x i8] addrspace(3)* @TGSM0, i32 0, i32 undef
  %27 = bitcast i8 addrspace(3)* %26 to i32 addrspace(3)*
  %28 = cmpxchg i32 addrspace(3)* %27, i32 %24, i32 %25 monotonic monotonic
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadIdInGroup.i32(i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #0

; Function Attrs: noduplicate nounwind
declare void @dx.op.barrier(i32, i32) #3

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.f32(i32, i32, float) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #1

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { noduplicate nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!5}
!llvm.ident = !{!8}

!0 = !{i32 1, i32 0}
!1 = !{!"cs", i32 6, i32 0}
!2 = !{null, null, !3, null}
!3 = !{!4}
!4 = !{i32 0, %dx.types.i8x16 addrspace(2)* undef, !"CB0", i32 0, i32 0, i32 1, i32 16, null}
!5 = !{void ()* @main, !"main", null, !2, !6}
!6 = !{i32 0, i64 256, i32 4, !7}
!7 = !{i32 4, i32 2, i32 3}
!8 = !{!"dxbc2dxil 1.2"}
