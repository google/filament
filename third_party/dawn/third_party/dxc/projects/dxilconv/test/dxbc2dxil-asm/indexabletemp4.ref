
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.i8x192 = type { [192 x i8] }

define void @main() {
entry:
  %dx.v32.x01 = alloca [8 x i32], align 4
  %0 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)
  %1 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 undef)
  %2 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %0, i32 %1)
  %3 = extractvalue %dx.types.CBufRet.i32 %2, 0
  %4 = getelementptr [8 x i32], [8 x i32]* %dx.v32.x01, i32 0, i32 0
  store i32 %3, i32* %4, align 4
  %5 = add i32 %1, 4
  %6 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %0, i32 %5)
  %7 = extractvalue %dx.types.CBufRet.i32 %6, 0
  %8 = getelementptr [8 x i32], [8 x i32]* %dx.v32.x01, i32 0, i32 2
  store i32 %7, i32* %8, align 4
  %9 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 1, i32 undef)
  %10 = getelementptr [8 x i32], [8 x i32]* %dx.v32.x01, i32 0, i32 3
  store i32 %9, i32* %10, align 4
  %11 = getelementptr [8 x i32], [8 x i32]* %dx.v32.x01, i32 0, i32 3
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, 77
  %14 = mul i32 %13, 2
  %15 = add i32 %14, 0
  %16 = getelementptr [8 x i32], [8 x i32]* %dx.v32.x01, i32 0, i32 %15
  %17 = load i32, i32* %16, align 4
  call void @dx.op.storeOutput.i32(i32 5, i32 0, i32 0, i8 0, i32 %17)
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.tempRegStore.i32(i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare i32 @dx.op.tempRegLoad.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.bitcastI32toF32(i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.bitcastF32toI32(i32, float) #1

; Function Attrs: nounwind
declare void @dx.op.storeOutput.i32(i32, i32, i32, i8, i32) #2

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!dx.version = !{!0}
!dx.valver = !{!0}
!dx.shaderModel = !{!1}
!dx.resources = !{!2}
!dx.entryPoints = !{!5}
!llvm.ident = !{!13}

!0 = !{i32 1, i32 0}
!1 = !{!"ps", i32 6, i32 0}
!2 = !{null, null, !3, null}
!3 = !{!4}
!4 = !{i32 0, %dx.types.i8x192 addrspace(2)* undef, !"CB0", i32 0, i32 0, i32 1, i32 192, null}
!5 = !{void ()* @main, !"main", !6, !2, !12}
!6 = !{!7, !10, null}
!7 = !{!8}
!8 = !{i32 0, !"1_", i8 5, i8 0, !9, i8 1, i32 1, i8 2, i32 1, i8 0, null}
!9 = !{i32 0}
!10 = !{!11}
!11 = !{i32 0, !"SV_Target", i8 5, i8 16, !9, i8 0, i32 1, i8 1, i32 0, i8 0, null}
!12 = !{i32 0, i64 256}
!13 = !{!"dxbc2dxil 1.2"}
