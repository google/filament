# Copyright 2023 The Dawn & Tint Authors
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

template("generate_version_include") {
  assert(defined(invoker.input_file), "must set 'input_file' in $target_name")
  assert(defined(invoker.output_file), "must set 'output_file' in $target_name")

  if (!defined(invoker.input_file)) {
    # No input file, generate one
    assert(false, "Fix gen_version.py so that it outputs to a file")
    action(target_name) {
      script = "${dawn_dxc_dir}/utils/version/gen_version.py"
      outputs = [ "${target_gen_dir}/${invoker.output_file}" ]
      args = []
      if (defined(invoker.gen_flags)) {
        args += invoker.gen_flags
      }
      args += [
        ">",  # TODO(amaiorano): This doesn't work. Need a way to route script
              # output to a file (modify script or create a 'shell_command'
              # action template)
        rebase_path(invoker.output_file, root_build_dir),
      ]
    }
  } else {
    # Input file provided, just copy it
    copy(target_name) {
      sources = [ invoker.input_file ]
      outputs = [ "${target_gen_dir}/${invoker.output_file}" ]
    }
  }
}
