diff --git a/src/google/protobuf/descriptor.cc b/src/google/protobuf/descriptor.cc
index bbbeb343b7cf7..d2a631b4d465e 100644
--- a/src/google/protobuf/descriptor.cc
+++ b/src/google/protobuf/descriptor.cc
@@ -37,7 +37,6 @@
 #include "absl/base/call_once.h"
 #include "absl/base/casts.h"
 #include "absl/base/const_init.h"
-#include "absl/base/dynamic_annotations.h"
 #include "absl/base/thread_annotations.h"
 #include "absl/cleanup/cleanup.h"
 #include "absl/container/btree_map.h"
diff --git a/src/google/protobuf/repeated_field.h b/src/google/protobuf/repeated_field.h
index cacad88b13735..e428811d27169 100644
--- a/src/google/protobuf/repeated_field.h
+++ b/src/google/protobuf/repeated_field.h
@@ -32,7 +32,6 @@
 #include <utility>
 
 #include "absl/base/attributes.h"
-#include "absl/base/dynamic_annotations.h"
 #include "absl/base/optimization.h"
 #include "absl/log/absl_check.h"
 #include "absl/meta/type_traits.h"
@@ -544,8 +543,8 @@ class RepeatedField final
     if (old_size != new_size) {
       ABSL_ATTRIBUTE_UNUSED const bool is_soo = this->is_soo();
       ABSL_ATTRIBUTE_UNUSED const Element* elem = unsafe_elements(is_soo);
-      ABSL_ANNOTATE_CONTIGUOUS_CONTAINER(elem, elem + Capacity(is_soo),
-                                         elem + old_size, elem + new_size);
+      // ABSL_ANNOTATE_CONTIGUOUS_CONTAINER(elem, elem + Capacity(is_soo),
+      //                                   elem + old_size, elem + new_size);
       if (new_size < old_size) {
         ABSL_ANNOTATE_MEMORY_IS_UNINITIALIZED(
             elem + new_size, (old_size - new_size) * sizeof(Element));
