diff --git a/src/google/protobuf/generated_message_util.cc b/src/google/protobuf/generated_message_util.cc
index c073444d6cde8..9457a859eb8c1 100644
--- a/src/google/protobuf/generated_message_util.cc
+++ b/src/google/protobuf/generated_message_util.cc
@@ -83,27 +83,17 @@ static void InitWeakDefaults() {
 void InitWeakDefaults() {}
 #endif
 
-PROTOBUF_CONSTINIT std::atomic<bool> init_protobuf_defaults_state{false};
-static bool InitProtobufDefaultsImpl() {
-  if (auto* to_destroy = fixed_address_empty_string.Init()) {
-    OnShutdownDestroyString(to_destroy);
-  }
-  InitWeakDefaults();
-
-
-  init_protobuf_defaults_state.store(true, std::memory_order_release);
-  return true;
-}
-
+PROTOBUF_CONSTINIT bool init_protobuf_defaults_state{false};
 void InitProtobufDefaultsSlow() {
-  static bool is_inited = InitProtobufDefaultsImpl();
-  (void)is_inited;
+  fixed_address_empty_string.Init();
+  init_protobuf_defaults_state = true;
+  InitWeakDefaults();
 }
 // Force the initialization of the empty string.
 // Normally, registration would do it, but we don't have any guarantee that
 // there is any object with reflection.
 PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 static std::true_type init_empty_string =
-    (InitProtobufDefaultsSlow(), std::true_type{});
+    (InitProtobufDefaults(), std::true_type{});
 
 const std::string& GetEmptyString() {
   InitProtobufDefaults();
diff --git a/src/google/protobuf/generated_message_util.h b/src/google/protobuf/generated_message_util.h
index 989734e57f5d5..f7e29d6028ebc 100644
--- a/src/google/protobuf/generated_message_util.h
+++ b/src/google/protobuf/generated_message_util.h
@@ -67,11 +67,14 @@ namespace internal {
 // This fastpath inlines a single branch instead of having to make the
 // InitProtobufDefaults function call.
 // It also generates less inlined code than a function-scope static initializer.
-PROTOBUF_EXPORT extern std::atomic<bool> init_protobuf_defaults_state;
+PROTOBUF_EXPORT extern bool init_protobuf_defaults_state;
 PROTOBUF_EXPORT void InitProtobufDefaultsSlow();
 PROTOBUF_EXPORT inline void InitProtobufDefaults() {
-  if (ABSL_PREDICT_FALSE(
-          !init_protobuf_defaults_state.load(std::memory_order_acquire))) {
+  // This is not thread-safe, but is called within a static initializer. As long
+  // as there are no calls to this function from off the main thread, before
+  // main() starts, this is safe. After main() starts,
+  // init_protobuf_defaults_state will always be true.
+  if (ABSL_PREDICT_FALSE(!init_protobuf_defaults_state)) {
     InitProtobufDefaultsSlow();
   }
 }
-- 
2.49.0.rc1.451.g8f38331e32-goog

