// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// LINT: LEGACY_NAMES
syntax = "proto3";

package protobuf.kotlin.generator;

option java_package = "com.google.protobuf.kotlin.generator";

message EvilNamesProto3 {
  bool initialized = 1;
  bool has_foo = 2;
  string Bar = 3;
  bool is_initialized = 4;

  oneof camelCase {
    string fooBar = 5;
  }

  repeated string ALL_CAPS = 7;
  map<int32, bool> ALL_CAPS_MAP = 8;

  bool has_underbar_preceding_numeric_1foo = 9;
  bool has_underbar_preceding_numeric_42bar = 10;
  bool has_underbar_preceding_numeric_123foo42bar_baz = 11;

  repeated string extension = 12;

  string class = 13;
  double int = 14;
  bool long = 15;
  int64 boolean = 16;
  string sealed = 17;
  float interface = 18;
  int32 in = 19;
  string object = 20;
  string cached_size = 21;
  bool serialized_size = 22;
  string value = 23;
  int64 index = 24;
  repeated string values = 25;
  repeated string new_values = 26;
  bool builder = 27;
  map<int32, int32> k = 28;
  map<string, string> v = 29;
  map<string, int32> key = 30;
  map<int32, string> map = 31;
  map<string, int32> pairs = 32;

  string _leading_underscore = 33;
  oneof _leading_underscore_oneof {
    int32 option = 34;
  }
}

message HardKeywordsAllTypesProto3 {
  message NestedMessage {
    optional int32 while = 1;
  }

  enum NestedEnum {
    ZERO = 0;
    FOO = 1;
    BAR = 2;
  }

  optional int32 as = 1;
  optional string in = 2;
  optional NestedEnum break = 3;
  map<int32, int32> continue = 4;
  optional NestedMessage do = 5;

  repeated int32 else = 6;
  repeated string for = 7;
  repeated NestedEnum fun = 8;
  repeated NestedMessage if = 9;
}

message Class {}
