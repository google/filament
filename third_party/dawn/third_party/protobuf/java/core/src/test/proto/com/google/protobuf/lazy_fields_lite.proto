// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: Naoki Iwasaki (niwasaki@google.com)
//
// A proto file with lazy fields

syntax = "proto2";

package protobuf_unittest;

message LazyMessageLite {
  optional int32 num = 1;
  optional int32 num_with_default = 2 [default = 421];
  optional LazyInnerMessageLite inner = 3 [lazy = true];
  repeated LazyInnerMessageLite repeated_inner = 4 [lazy = true];

  oneof oneof_field {
    int32 oneof_num = 5;
    LazyInnerMessageLite oneof_inner = 6 [lazy = true];
  }
}

message LazyInnerMessageLite {
  optional int32 num = 1;
  optional int32 num_with_default = 2 [default = 42];
  optional LazyNestedInnerMessageLite nested = 3 [lazy = true];

  extensions 1000 to max;
}

message LazyExtension {
  extend LazyInnerMessageLite {
    optional LazyExtension extension = 1000;
  }
  optional string name = 1;
}

message LazyNestedInnerMessageLite {
  optional int32 num = 1;
  optional int32 num_with_default = 2 [default = 4];
}
