<?xml version="1.0" encoding="UTF-8"?>
<registry>
    <comment>
Copyright 2015-2025 The Khronos Group Inc.

SPDX-License-Identifier: Apache-2.0 OR MIT
    </comment>

    <comment>
This file, vk.xml, is the Vulkan API Registry. It is a critically important
and normative part of the Vulkan Specification, including a canonical
machine-readable definition of the API, parameter and member validation
language incorporated into the Specification and reference pages, and other
material which is registered by Khronos, such as tags used by extension and
layer authors. The authoritative public version of vk.xml is maintained in
the default branch (currently named main) of the Khronos Vulkan GitHub
project. The authoritative private version is maintained in the default
branch of the member gitlab server.
    </comment>

    <platforms comment="Vulkan platform names, reserved for use with platform- and window system-specific extensions">
        <platform name="xlib" protect="VK_USE_PLATFORM_XLIB_KHR" comment="X Window System, Xlib client library"/>
        <platform name="xlib_xrandr" protect="VK_USE_PLATFORM_XLIB_XRANDR_EXT" comment="X Window System, Xlib client library, XRandR extension"/>
        <platform name="xcb" protect="VK_USE_PLATFORM_XCB_KHR" comment="X Window System, Xcb client library"/>
        <platform name="wayland" protect="VK_USE_PLATFORM_WAYLAND_KHR" comment="Wayland display server protocol"/>
        <platform name="directfb" protect="VK_USE_PLATFORM_DIRECTFB_EXT" comment="DirectFB library"/>
        <platform name="android" protect="VK_USE_PLATFORM_ANDROID_KHR" comment="Android OS"/>
        <platform name="win32" protect="VK_USE_PLATFORM_WIN32_KHR" comment="Microsoft Win32 API (also refers to Win64 apps)"/>
        <platform name="vi" protect="VK_USE_PLATFORM_VI_NN" comment="Nintendo Vi"/>
        <platform name="ios" protect="VK_USE_PLATFORM_IOS_MVK" comment="Apple IOS"/>
        <platform name="macos" protect="VK_USE_PLATFORM_MACOS_MVK" comment="Apple MacOS"/>
        <platform name="metal" protect="VK_USE_PLATFORM_METAL_EXT" comment="Metal on CoreAnimation on Apple platforms"/>
        <platform name="fuchsia" protect="VK_USE_PLATFORM_FUCHSIA" comment="Fuchsia"/>
        <platform name="ggp" protect="VK_USE_PLATFORM_GGP" comment="Google Games Platform"/>
        <platform name="sci" protect="VK_USE_PLATFORM_SCI" comment="NVIDIA SCI"/>
        <platform name="provisional" protect="VK_ENABLE_BETA_EXTENSIONS" comment="Enable declarations for beta/provisional extensions"/>
        <platform name="screen" protect="VK_USE_PLATFORM_SCREEN_QNX" comment="QNX Screen Graphics Subsystem"/>
    </platforms>

    <tags comment="Vulkan vendor/author tags for extensions and layers">
        <tag name="IMG"         author="Imagination Technologies"      contact="Andrew Garrard @fluppeteer"/>
        <tag name="AMD"         author="Advanced Micro Devices, Inc."  contact="Tobias Hector @tobski"/>
        <tag name="AMDX"        author="Advanced Micro Devices, Inc."  contact="Tobias Hector @tobski"/>
        <tag name="ARM"         author="ARM Limited"                   contact="Jan-Harald Fredriksen @janharaldfredriksen-arm"/>
        <tag name="FSL"         author="Freescale Semiconductor, Inc." contact="Norbert Nopper @FslNopper"/>
        <tag name="BRCM"        author="Broadcom Corporation"          contact="Graeme Leese @gnl21"/>
        <tag name="NXP"         author="NXP Semiconductors N.V."       contact="Norbert Nopper @FslNopper"/>
        <tag name="NV"          author="NVIDIA Corporation"            contact="Daniel Koch @dgkoch"/>
        <tag name="NVX"         author="NVIDIA Corporation"            contact="Daniel Koch @dgkoch"/>
        <tag name="VIV"         author="Vivante Corporation"           contact="Yanjun Zhang gitlab:@yanjunzhang"/>
        <tag name="VSI"         author="VeriSilicon Holdings Co., Ltd." contact="Yanjun Zhang gitlab:@yanjunzhang"/>
        <tag name="KDAB"        author="KDAB"                          contact="Sean Harmer @seanharmer"/>
        <tag name="ANDROID"     author="Google LLC"                    contact="Jesse Hall @critsec"/>
        <tag name="CHROMIUM"    author="Google LLC"                    contact="Jesse Hall @critsec"/>
        <tag name="FUCHSIA"     author="Google LLC"                    contact="Craig Stout @cdotstout, Jesse Hall @critsec, John Rosasco @rosasco"/>
        <tag name="GGP"         author="Google, LLC"                   contact="Jean-Francois Roy @jfroy, Hai Nguyen @chaoticbob, Jesse Hall @critsec"/>
        <tag name="GOOGLE"      author="Google LLC"                    contact="Jesse Hall @critsec"/>
        <tag name="QCOM"        author="Qualcomm Technologies, Inc."   contact="Matthew Netsch @mnetsch"/>
        <tag name="LUNARG"      author="LunarG, Inc."                  contact="Karen Ghavam @karenghavam-lunarg"/>
        <tag name="NZXT"        author="NZXT Inc."                     contact="Jacob Kiesel @xaeroxe"/>
        <tag name="SAMSUNG"     author="Samsung Electronics Co., Ltd." contact="Ralph Potter @r-potter"/>
        <tag name="SEC"         author="Samsung Electronics Co., Ltd." contact="Ralph Potter @r-potter"/>
        <tag name="TIZEN"       author="Samsung Electronics Co., Ltd." contact="Ralph Potter @r-potter"/>
        <tag name="RENDERDOC"   author="RenderDoc (renderdoc.org)"     contact="Baldur Karlsson @baldurk"/>
        <tag name="NN"          author="Nintendo Co., Ltd."            contact="Yasuhiro Yoshioka gitlab:@yoshioka_yasuhiro"/>
        <tag name="MVK"         author="The Brenwill Workshop Ltd."    contact="Bill Hollings @billhollings"/>
        <tag name="KHR"         author="Khronos"                       contact="Ralph Potter @r-potter"/>
        <tag name="KHX"         author="Khronos"                       contact="Ralph Potter @r-potter"/>
        <tag name="EXT"         author="Multivendor"                   contact="Jon Leech @oddhack"/>
        <tag name="MESA"        author="Mesa open source project"      contact="Lina Versace @linyaa-kiwi, Daniel Stone @fooishbar, David Airlie @airlied, Faith Ekstrand @gfxstrand, Hans-Kristian Arntzen @HansKristian-Work"/>
        <tag name="INTEL"       author="Intel Corporation"             contact="Slawek Grajewski @sgrajewski"/>
        <tag name="HUAWEI"      author="Huawei Technologies Co. Ltd."  contact="Pan Gao @PanGao-h, Juntao Li @Lawrenceleehw"/>
        <tag name="VALVE"       author="Valve Corporation"             contact="Pierre-Loup Griffais @plagman, Joshua Ashton @Joshua-Ashton, Hans-Kristian Arntzen @HansKristian-Work"/>
        <tag name="QNX"         author="BlackBerry Limited"            contact="Mike Gorchak @mgorchak-blackberry, Aaron Ruby @aruby-blackberry"/>
        <tag name="JUICE"       author="Juice Technologies, Inc."      contact="David McCloskey @damcclos, Dean Beeler @canadacow"/>
        <tag name="FB"          author="Facebook, Inc"                 contact="Artem Bolgar @artyom17"/>
        <tag name="RASTERGRID"  author="RasterGrid Kft."               contact="Daniel Rakos @aqnuep"/>
        <tag name="MSFT"        author="Microsoft Corporation"         contact="Jesse Natalie @jenatali"/>
        <tag name="SHADY"       author="Saarland University"           contact="Hugo Devillers @hugobros3"/>
        <tag name="FREDEMMOTT"  author="Frederick Emmott"              contact="Fred Emmott @fredemmott" />
    </tags>

    <types comment="Vulkan type definitions">
        <type name="vk_platform" category="include">#include "vk_platform.h"</type>

            <comment>WSI extensions</comment>

        <type category="include" name="X11/Xlib.h"/>
        <type category="include" name="X11/extensions/Xrandr.h"/>
        <type category="include" name="wayland-client.h"/>
        <type category="include" name="windows.h"/>
        <type category="include" name="xcb/xcb.h"/>
        <type category="include" name="directfb.h"/>
        <type category="include" name="zircon/types.h"/>
        <type category="include" name="ggp_c/vulkan_types.h"/>
        <type category="include" name="screen/screen.h"/>
        <type category="include" name="nvscisync.h"/>
        <type category="include" name="nvscibuf.h"/>
            <comment>
                In the current header structure, each platform's interfaces
                are confined to a platform-specific header (vulkan_xlib.h,
                vulkan_win32.h, etc.). These headers are not self-contained,
                and should not include native headers (X11/Xlib.h,
                windows.h, etc.). Code should either include vulkan.h after
                defining the appropriate VK_USE_PLATFORM_platform
                macros, or include the required native headers prior to
                explicitly including the corresponding platform header.

                To accomplish this, the dependencies of native types require
                native headers, but the XML defines the content for those
                native headers as empty. The actual native header includes
                can be restored by modifying the native header tags above
                to #include the header file in the 'name' attribute.
            </comment>

        <type requires="X11/Xlib.h" name="Display"/>
        <type requires="X11/Xlib.h" name="VisualID"/>
        <type requires="X11/Xlib.h" name="Window"/>
        <type requires="X11/extensions/Xrandr.h" name="RROutput"/>
        <type requires="wayland-client.h" name="wl_display"/>
        <type requires="wayland-client.h" name="wl_surface"/>
        <type requires="windows.h" name="HINSTANCE"/>
        <type requires="windows.h" name="HWND"/>
        <type requires="windows.h" name="HMONITOR"/>
        <type requires="windows.h" name="HANDLE"/>
        <type requires="windows.h" name="SECURITY_ATTRIBUTES"/>
        <type requires="windows.h" name="DWORD"/>
        <type requires="windows.h" name="LPCWSTR"/>
        <type requires="xcb/xcb.h" name="xcb_connection_t"/>
        <type requires="xcb/xcb.h" name="xcb_visualid_t"/>
        <type requires="xcb/xcb.h" name="xcb_window_t"/>
        <type requires="directfb.h" name="IDirectFB"/>
        <type requires="directfb.h" name="IDirectFBSurface"/>
        <type requires="zircon/types.h" name="zx_handle_t"/>
        <type requires="ggp_c/vulkan_types.h" name="GgpStreamDescriptor"/>
        <type requires="ggp_c/vulkan_types.h" name="GgpFrameToken"/>
        <type requires="screen/screen.h" name="_screen_context"/>
        <type requires="screen/screen.h" name="_screen_window"/>
        <type requires="screen/screen.h" name="_screen_buffer"/>
        <type requires="nvscisync.h" name="NvSciSyncAttrList"/>
        <type requires="nvscisync.h" name="NvSciSyncObj"/>
        <type requires="nvscisync.h" name="NvSciSyncFence"/>
        <type requires="nvscibuf.h" name="NvSciBufAttrList"/>
        <type requires="nvscibuf.h" name="NvSciBufObj"/>

        <type category="define" deprecated="true">// DEPRECATED: This define is deprecated. VK_MAKE_API_VERSION should be used instead.
#define <name>VK_MAKE_VERSION</name>(major, minor, patch) \
    ((((uint32_t)(major)) &lt;&lt; 22U) | (((uint32_t)(minor)) &lt;&lt; 12U) | ((uint32_t)(patch)))</type>
        <type category="define" deprecated="true">// DEPRECATED: This define is deprecated. VK_API_VERSION_MAJOR should be used instead.
#define <name>VK_VERSION_MAJOR</name>(version) ((uint32_t)(version) &gt;&gt; 22U)</type>
        <type category="define" deprecated="true">// DEPRECATED: This define is deprecated. VK_API_VERSION_MINOR should be used instead.
#define <name>VK_VERSION_MINOR</name>(version) (((uint32_t)(version) &gt;&gt; 12U) &amp; 0x3FFU)</type>
        <type category="define" deprecated="true">// DEPRECATED: This define is deprecated. VK_API_VERSION_PATCH should be used instead.
#define <name>VK_VERSION_PATCH</name>(version) ((uint32_t)(version) &amp; 0xFFFU)</type>

        <type category="define">#define <name>VK_MAKE_API_VERSION</name>(variant, major, minor, patch) \
    ((((uint32_t)(variant)) &lt;&lt; 29U) | (((uint32_t)(major)) &lt;&lt; 22U) | (((uint32_t)(minor)) &lt;&lt; 12U) | ((uint32_t)(patch)))</type>
        <type category="define">#define <name>VK_API_VERSION_VARIANT</name>(version) ((uint32_t)(version) &gt;&gt; 29U)</type>
        <type category="define">#define <name>VK_API_VERSION_MAJOR</name>(version) (((uint32_t)(version) &gt;&gt; 22U) &amp; 0x7FU)</type>
        <type category="define">#define <name>VK_API_VERSION_MINOR</name>(version) (((uint32_t)(version) &gt;&gt; 12U) &amp; 0x3FFU)</type>
        <type category="define">#define <name>VK_API_VERSION_PATCH</name>(version) ((uint32_t)(version) &amp; 0xFFFU)</type>

        <type category="define" requires="VK_HEADER_VERSION">// Vulkan SC variant number
#define <name>VKSC_API_VARIANT</name> 1</type>

        <type category="define">// DEPRECATED: This define has been removed. Specific version defines (e.g. VK_API_VERSION_1_0), or the VK_MAKE_VERSION macro, should be used instead.
//#define <name>VK_API_VERSION</name> <type>VK_MAKE_API_VERSION</type>(0, 1, 0, 0) // Patch version should always be set to 0</type>
        <type category="define">// Vulkan 1.0 version number
#define <name>VK_API_VERSION_1_0</name> <type>VK_MAKE_API_VERSION</type>(0, 1, 0, 0)// Patch version should always be set to 0</type>
        <type category="define">// Vulkan 1.1 version number
#define <name>VK_API_VERSION_1_1</name> <type>VK_MAKE_API_VERSION</type>(0, 1, 1, 0)// Patch version should always be set to 0</type>
        <type category="define">// Vulkan 1.2 version number
#define <name>VK_API_VERSION_1_2</name> <type>VK_MAKE_API_VERSION</type>(0, 1, 2, 0)// Patch version should always be set to 0</type>
        <type category="define" requires="VK_MAKE_API_VERSION">// Vulkan 1.3 version number
#define <name>VK_API_VERSION_1_3</name> <type>VK_MAKE_API_VERSION</type>(0, 1, 3, 0)// Patch version should always be set to 0</type>
        <type category="define" requires="VK_MAKE_API_VERSION">// Vulkan 1.4 version number
#define <name>VK_API_VERSION_1_4</name> <type>VK_MAKE_API_VERSION</type>(0, 1, 4, 0)// Patch version should always be set to 0</type>
        <type category="define" requires="VKSC_API_VARIANT">// Vulkan SC 1.0 version number
#define <name>VKSC_API_VERSION_1_0</name> <type>VK_MAKE_API_VERSION</type>(VKSC_API_VARIANT, 1, 0, 0)// Patch version should always be set to 0</type>

        <type api="vulkan" category="define">// Version of this file
#define <name>VK_HEADER_VERSION</name> 307</type>
        <type api="vulkan" category="define" requires="VK_HEADER_VERSION">// Complete version of this file
#define <name>VK_HEADER_VERSION_COMPLETE</name> <type>VK_MAKE_API_VERSION</type>(0, 1, 4, VK_HEADER_VERSION)</type>
        <type api="vulkansc" category="define">// Version of this file
#define <name>VK_HEADER_VERSION</name> 17</type>
        <type api="vulkansc" category="define" requires="VKSC_API_VARIANT">// Complete version of this file
#define <name>VK_HEADER_VERSION_COMPLETE</name> <type>VK_MAKE_API_VERSION</type>(VKSC_API_VARIANT, 1, 0, VK_HEADER_VERSION)</type>

        <type api="vulkan" category="define">
#define <name>VK_DEFINE_HANDLE</name>(object) typedef struct object##_T* object;</type>
        <type api="vulkansc" category="define" comment="Extra parenthesis are a MISRA-C requirement that exposes a bug in MSVC">
#define <name>VK_DEFINE_HANDLE</name>(object) typedef struct object##_T* (object);</type>

        <type category="define" name="VK_USE_64_BIT_PTR_DEFINES">
#ifndef VK_USE_64_BIT_PTR_DEFINES
    #if defined(__LP64__) || defined(_WIN64) || (defined(__x86_64__) &amp;&amp; !defined(__ILP32__) ) || defined(_M_X64) || defined(__ia64) || defined (_M_IA64) || defined(__aarch64__) || defined(__powerpc64__) || (defined(__riscv) &amp;&amp; __riscv_xlen == 64)
        #define VK_USE_64_BIT_PTR_DEFINES 1
    #else
        #define VK_USE_64_BIT_PTR_DEFINES 0
    #endif
#endif</type>
        <type category="define" requires="VK_USE_64_BIT_PTR_DEFINES" name="VK_NULL_HANDLE">
#ifndef VK_DEFINE_NON_DISPATCHABLE_HANDLE
    #if (VK_USE_64_BIT_PTR_DEFINES==1)
        #if (defined(__cplusplus) &amp;&amp; (__cplusplus >= 201103L)) || (defined(_MSVC_LANG) &amp;&amp; (_MSVC_LANG >= 201103L))
            #define VK_NULL_HANDLE nullptr
        #else
            #define VK_NULL_HANDLE ((void*)0)
        #endif
    #else
        #define VK_NULL_HANDLE 0ULL
    #endif
#endif
#ifndef VK_NULL_HANDLE
    #define VK_NULL_HANDLE 0
#endif</type>
        <type api="vulkan" category="define" requires="VK_NULL_HANDLE" name="VK_DEFINE_NON_DISPATCHABLE_HANDLE">
#ifndef VK_DEFINE_NON_DISPATCHABLE_HANDLE
    #if (VK_USE_64_BIT_PTR_DEFINES==1)
        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef struct object##_T *object;
    #else
        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef uint64_t object;
    #endif
#endif</type>
        <type api="vulkansc" category="define" requires="VK_NULL_HANDLE" name="VK_DEFINE_NON_DISPATCHABLE_HANDLE" comment="Extra parenthesis are a MISRA-C requirement that exposes a bug in MSVC">
#ifndef VK_DEFINE_NON_DISPATCHABLE_HANDLE
    #if (VK_USE_64_BIT_PTR_DEFINES==1)
        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef struct object##_T *(object);
    #else
        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef uint64_t (object);
    #endif
#endif</type>

        <type category="basetype">struct <name>ANativeWindow</name>;</type>
        <type category="basetype">struct <name>AHardwareBuffer</name>;</type>
        <type category="basetype">#ifdef __OBJC__
@class CAMetalLayer;
#else
typedef void <name>CAMetalLayer</name>;
#endif</type>
        <type category="basetype">#ifdef __OBJC__
@protocol MTLDevice;
typedef __unsafe_unretained id&lt;MTLDevice&gt; MTLDevice_id;
#else
typedef void* <name>MTLDevice_id</name>;
#endif</type>
        <type category="basetype">#ifdef __OBJC__
@protocol MTLCommandQueue;
typedef __unsafe_unretained id&lt;MTLCommandQueue&gt; MTLCommandQueue_id;
#else
typedef void* <name>MTLCommandQueue_id</name>;
#endif</type>
        <type category="basetype">#ifdef __OBJC__
@protocol MTLBuffer;
typedef __unsafe_unretained id&lt;MTLBuffer&gt; MTLBuffer_id;
#else
typedef void* <name>MTLBuffer_id</name>;
#endif</type>
        <type category="basetype">#ifdef __OBJC__
@protocol MTLTexture;
typedef __unsafe_unretained id&lt;MTLTexture&gt; MTLTexture_id;
#else
typedef void* <name>MTLTexture_id</name>;
#endif</type>
        <type category="basetype">#ifdef __OBJC__
@protocol MTLSharedEvent;
typedef __unsafe_unretained id&lt;MTLSharedEvent&gt; MTLSharedEvent_id;
#else
typedef void* <name>MTLSharedEvent_id</name>;
#endif</type>
        <type category="basetype">typedef struct __IOSurface* <name>IOSurfaceRef</name>;</type>

        <type category="basetype">typedef <type>uint32_t</type> <name>VkSampleMask</name>;</type>
        <type category="basetype">typedef <type>uint32_t</type> <name>VkBool32</name>;</type>
        <type category="basetype">typedef <type>uint32_t</type> <name>VkFlags</name>;</type>
        <type category="basetype">typedef <type>uint64_t</type> <name>VkFlags64</name>;</type>
        <type category="basetype">typedef <type>uint64_t</type> <name>VkDeviceSize</name>;</type>
        <type category="basetype">typedef <type>uint64_t</type> <name>VkDeviceAddress</name>;</type>

            <comment>Basic C types, pulled in via vk_platform.h</comment>
        <type requires="vk_platform" name="void"/>
        <type requires="vk_platform" name="char"/>
        <type requires="vk_platform" name="float"/>
        <type requires="vk_platform" name="double"/>
        <type requires="vk_platform" name="int8_t"/>
        <type requires="vk_platform" name="uint8_t"/>
        <type requires="vk_platform" name="int16_t"/>
        <type requires="vk_platform" name="uint16_t"/>
        <type requires="vk_platform" name="uint32_t"/>
        <type requires="vk_platform" name="uint64_t"/>
        <type requires="vk_platform" name="int32_t"/>
        <type requires="vk_platform" name="int64_t"/>
        <type requires="vk_platform" name="size_t"/>
        <type name="int"/>

            <comment>Bitmask types</comment>
        <type requires="VkFramebufferCreateFlagBits"      category="bitmask">typedef <type>VkFlags</type> <name>VkFramebufferCreateFlags</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkQueryPoolCreateFlags</name>;</type>
        <type requires="VkRenderPassCreateFlagBits"       category="bitmask">typedef <type>VkFlags</type> <name>VkRenderPassCreateFlags</name>;</type>
        <type requires="VkSamplerCreateFlagBits"          category="bitmask">typedef <type>VkFlags</type> <name>VkSamplerCreateFlags</name>;</type>
        <type requires="VkPipelineLayoutCreateFlagBits"   category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineLayoutCreateFlags</name>;</type>
        <type requires="VkPipelineCacheCreateFlagBits"    category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineCacheCreateFlags</name>;</type>
        <type api="vulkan" requires="VkPipelineDepthStencilStateCreateFlagBits" category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineDepthStencilStateCreateFlags</name>;</type>
        <type api="vulkansc" category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineDepthStencilStateCreateFlags</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineDynamicStateCreateFlags</name>;</type>
        <type api="vulkan" requires="VkPipelineColorBlendStateCreateFlagBits"   category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineColorBlendStateCreateFlags</name>;</type>
        <type api="vulkansc" category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineColorBlendStateCreateFlags</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineMultisampleStateCreateFlags</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineRasterizationStateCreateFlags</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineViewportStateCreateFlags</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineTessellationStateCreateFlags</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineInputAssemblyStateCreateFlags</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineVertexInputStateCreateFlags</name>;</type>
        <type requires="VkPipelineShaderStageCreateFlagBits" category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineShaderStageCreateFlags</name>;</type>
        <type requires="VkDescriptorSetLayoutCreateFlagBits" category="bitmask">typedef <type>VkFlags</type> <name>VkDescriptorSetLayoutCreateFlags</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkBufferViewCreateFlags</name>;</type>
        <type requires="VkInstanceCreateFlagBits"         category="bitmask">typedef <type>VkFlags</type> <name>VkInstanceCreateFlags</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkDeviceCreateFlags</name>;</type>
        <type requires="VkDeviceQueueCreateFlagBits"      category="bitmask">typedef <type>VkFlags</type> <name>VkDeviceQueueCreateFlags</name>;</type>
        <type requires="VkQueueFlagBits"                  category="bitmask">typedef <type>VkFlags</type> <name>VkQueueFlags</name>;</type>
        <type requires="VkMemoryPropertyFlagBits"         category="bitmask">typedef <type>VkFlags</type> <name>VkMemoryPropertyFlags</name>;</type>
        <type requires="VkMemoryHeapFlagBits"             category="bitmask">typedef <type>VkFlags</type> <name>VkMemoryHeapFlags</name>;</type>
        <type requires="VkAccessFlagBits"                 category="bitmask">typedef <type>VkFlags</type> <name>VkAccessFlags</name>;</type>
        <type requires="VkBufferUsageFlagBits"            category="bitmask">typedef <type>VkFlags</type> <name>VkBufferUsageFlags</name>;</type>
        <type requires="VkBufferCreateFlagBits"           category="bitmask">typedef <type>VkFlags</type> <name>VkBufferCreateFlags</name>;</type>
        <type requires="VkShaderStageFlagBits"            category="bitmask">typedef <type>VkFlags</type> <name>VkShaderStageFlags</name>;</type>
        <type requires="VkImageUsageFlagBits"             category="bitmask">typedef <type>VkFlags</type> <name>VkImageUsageFlags</name>;</type>
        <type requires="VkImageCreateFlagBits"            category="bitmask">typedef <type>VkFlags</type> <name>VkImageCreateFlags</name>;</type>
        <type requires="VkImageViewCreateFlagBits"        category="bitmask">typedef <type>VkFlags</type> <name>VkImageViewCreateFlags</name>;</type>
        <type requires="VkPipelineCreateFlagBits"         category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineCreateFlags</name>;</type>
        <type requires="VkColorComponentFlagBits"         category="bitmask">typedef <type>VkFlags</type> <name>VkColorComponentFlags</name>;</type>
        <type requires="VkFenceCreateFlagBits"            category="bitmask">typedef <type>VkFlags</type> <name>VkFenceCreateFlags</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkSemaphoreCreateFlags</name>;</type>
        <type requires="VkFormatFeatureFlagBits"          category="bitmask">typedef <type>VkFlags</type> <name>VkFormatFeatureFlags</name>;</type>
        <type requires="VkQueryControlFlagBits"           category="bitmask">typedef <type>VkFlags</type> <name>VkQueryControlFlags</name>;</type>
        <type requires="VkQueryResultFlagBits"            category="bitmask">typedef <type>VkFlags</type> <name>VkQueryResultFlags</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkShaderModuleCreateFlags</name>;</type>
        <type requires="VkEventCreateFlagBits"            category="bitmask">typedef <type>VkFlags</type> <name>VkEventCreateFlags</name>;</type>
        <type requires="VkCommandPoolCreateFlagBits"      category="bitmask">typedef <type>VkFlags</type> <name>VkCommandPoolCreateFlags</name>;</type>
        <type requires="VkCommandPoolResetFlagBits"       category="bitmask">typedef <type>VkFlags</type> <name>VkCommandPoolResetFlags</name>;</type>
        <type requires="VkCommandBufferResetFlagBits"     category="bitmask">typedef <type>VkFlags</type> <name>VkCommandBufferResetFlags</name>;</type>
        <type requires="VkCommandBufferUsageFlagBits"     category="bitmask">typedef <type>VkFlags</type> <name>VkCommandBufferUsageFlags</name>;</type>
        <type requires="VkQueryPipelineStatisticFlagBits" category="bitmask">typedef <type>VkFlags</type> <name>VkQueryPipelineStatisticFlags</name>;</type>
        <type requires="VkMemoryMapFlagBits"              category="bitmask">typedef <type>VkFlags</type> <name>VkMemoryMapFlags</name>;</type>
        <type requires="VkMemoryUnmapFlagBits"            category="bitmask">typedef <type>VkFlags</type> <name>VkMemoryUnmapFlags</name>;</type>
        <type                                             category="bitmask" name="VkMemoryUnmapFlagsKHR" alias="VkMemoryUnmapFlags"/>
        <type requires="VkImageAspectFlagBits"            category="bitmask">typedef <type>VkFlags</type> <name>VkImageAspectFlags</name>;</type>
        <type requires="VkSparseMemoryBindFlagBits"       category="bitmask">typedef <type>VkFlags</type> <name>VkSparseMemoryBindFlags</name>;</type>
        <type requires="VkSparseImageFormatFlagBits"      category="bitmask">typedef <type>VkFlags</type> <name>VkSparseImageFormatFlags</name>;</type>
        <type requires="VkSubpassDescriptionFlagBits"     category="bitmask">typedef <type>VkFlags</type> <name>VkSubpassDescriptionFlags</name>;</type>
        <type requires="VkPipelineStageFlagBits"          category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineStageFlags</name>;</type>
        <type requires="VkSampleCountFlagBits"            category="bitmask">typedef <type>VkFlags</type> <name>VkSampleCountFlags</name>;</type>
        <type requires="VkAttachmentDescriptionFlagBits"  category="bitmask">typedef <type>VkFlags</type> <name>VkAttachmentDescriptionFlags</name>;</type>
        <type requires="VkStencilFaceFlagBits"            category="bitmask">typedef <type>VkFlags</type> <name>VkStencilFaceFlags</name>;</type>
        <type requires="VkCullModeFlagBits"               category="bitmask">typedef <type>VkFlags</type> <name>VkCullModeFlags</name>;</type>
        <type requires="VkDescriptorPoolCreateFlagBits"   category="bitmask">typedef <type>VkFlags</type> <name>VkDescriptorPoolCreateFlags</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkDescriptorPoolResetFlags</name>;</type>
        <type requires="VkDependencyFlagBits"             category="bitmask">typedef <type>VkFlags</type> <name>VkDependencyFlags</name>;</type>
        <type requires="VkSubgroupFeatureFlagBits"        category="bitmask">typedef <type>VkFlags</type> <name>VkSubgroupFeatureFlags</name>;</type>
        <type requires="VkIndirectCommandsLayoutUsageFlagBitsNV" category="bitmask">typedef <type>VkFlags</type> <name>VkIndirectCommandsLayoutUsageFlagsNV</name>;</type>
        <type requires="VkIndirectStateFlagBitsNV"        category="bitmask">typedef <type>VkFlags</type> <name>VkIndirectStateFlagsNV</name>;</type>
        <type requires="VkGeometryFlagBitsKHR"            category="bitmask">typedef <type>VkFlags</type> <name>VkGeometryFlagsKHR</name>;</type>
        <type                                             category="bitmask" name="VkGeometryFlagsNV" alias="VkGeometryFlagsKHR"/>
        <type requires="VkGeometryInstanceFlagBitsKHR"    category="bitmask">typedef <type>VkFlags</type> <name>VkGeometryInstanceFlagsKHR</name>;</type>
        <type                                             category="bitmask" name="VkGeometryInstanceFlagsNV" alias="VkGeometryInstanceFlagsKHR"/>
        <type requires="VkClusterAccelerationStructureGeometryFlagBitsNV"     category="bitmask">typedef <type>VkFlags</type> <name>VkClusterAccelerationStructureGeometryFlagsNV</name>;</type>
        <type requires="VkClusterAccelerationStructureClusterFlagBitsNV"      category="bitmask">typedef <type>VkFlags</type> <name>VkClusterAccelerationStructureClusterFlagsNV</name>;</type>
        <type requires="VkClusterAccelerationStructureAddressResolutionFlagBitsNV"      category="bitmask">typedef <type>VkFlags</type> <name>VkClusterAccelerationStructureAddressResolutionFlagsNV</name>;</type>
        <type requires="VkBuildAccelerationStructureFlagBitsKHR" category="bitmask">typedef <type>VkFlags</type> <name>VkBuildAccelerationStructureFlagsKHR</name>;</type>
        <type                                             category="bitmask" name="VkBuildAccelerationStructureFlagsNV" alias="VkBuildAccelerationStructureFlagsKHR"/>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkPrivateDataSlotCreateFlags</name>;</type>
        <type                                             category="bitmask" name="VkPrivateDataSlotCreateFlagsEXT" alias="VkPrivateDataSlotCreateFlags"/>
        <type requires="VkAccelerationStructureCreateFlagBitsKHR" category="bitmask">typedef <type>VkFlags</type> <name>VkAccelerationStructureCreateFlagsKHR</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkDescriptorUpdateTemplateCreateFlags</name>;</type>
        <type                                             category="bitmask" name="VkDescriptorUpdateTemplateCreateFlagsKHR" alias="VkDescriptorUpdateTemplateCreateFlags"/>
        <type requires="VkPipelineCreationFeedbackFlagBits" category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineCreationFeedbackFlags</name>;</type>
        <type                                             category="bitmask" name="VkPipelineCreationFeedbackFlagsEXT" alias="VkPipelineCreationFeedbackFlags"/>
        <type requires="VkPerformanceCounterDescriptionFlagBitsKHR" category="bitmask">typedef <type>VkFlags</type> <name>VkPerformanceCounterDescriptionFlagsKHR</name>;</type>
        <type requires="VkAcquireProfilingLockFlagBitsKHR" category="bitmask">typedef <type>VkFlags</type> <name>VkAcquireProfilingLockFlagsKHR</name>;</type>
        <type requires="VkSemaphoreWaitFlagBits"          category="bitmask">typedef <type>VkFlags</type> <name>VkSemaphoreWaitFlags</name>;</type>
        <type                                             category="bitmask" name="VkSemaphoreWaitFlagsKHR" alias="VkSemaphoreWaitFlags"/>
        <type requires="VkPipelineCompilerControlFlagBitsAMD" category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineCompilerControlFlagsAMD</name>;</type>
        <type requires="VkShaderCorePropertiesFlagBitsAMD" category="bitmask">typedef <type>VkFlags</type> <name>VkShaderCorePropertiesFlagsAMD</name>;</type>
        <type requires="VkDeviceDiagnosticsConfigFlagBitsNV" category="bitmask">typedef <type>VkFlags</type> <name>VkDeviceDiagnosticsConfigFlagsNV</name>;</type>
        <type requires="VkRefreshObjectFlagBitsKHR"       category="bitmask">typedef <type>VkFlags</type> <name>VkRefreshObjectFlagsKHR</name>;</type>
        <type bitvalues="VkAccessFlagBits2"               category="bitmask">typedef <type>VkFlags64</type> <name>VkAccessFlags2</name>;</type>
        <type                                             category="bitmask" name="VkAccessFlags2KHR" alias="VkAccessFlags2"/>
        <type bitvalues="VkPipelineStageFlagBits2"        category="bitmask">typedef <type>VkFlags64</type> <name>VkPipelineStageFlags2</name>;</type>
        <type                                             category="bitmask" name="VkPipelineStageFlags2KHR" alias="VkPipelineStageFlags2"/>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkAccelerationStructureMotionInfoFlagsNV</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkAccelerationStructureMotionInstanceFlagsNV</name>;</type>
        <type bitvalues="VkFormatFeatureFlagBits2"        category="bitmask">typedef <type>VkFlags64</type> <name>VkFormatFeatureFlags2</name>;</type>
        <type                                             category="bitmask" name="VkFormatFeatureFlags2KHR" alias="VkFormatFeatureFlags2"/>
        <type requires="VkRenderingFlagBits"              category="bitmask">typedef <type>VkFlags</type> <name>VkRenderingFlags</name>;</type>
        <type bitvalues="VkMemoryDecompressionMethodFlagBitsNV" category="bitmask">typedef <type>VkFlags64</type> <name>VkMemoryDecompressionMethodFlagsNV</name>;</type>
        <type                                             category="bitmask" name="VkRenderingFlagsKHR" alias="VkRenderingFlags"/>
        <type requires="VkBuildMicromapFlagBitsEXT" category="bitmask">typedef <type>VkFlags</type> <name>VkBuildMicromapFlagsEXT</name>;</type>
        <type requires="VkMicromapCreateFlagBitsEXT" category="bitmask">typedef <type>VkFlags</type> <name>VkMicromapCreateFlagsEXT</name>;</type>
        <type requires="VkIndirectCommandsLayoutUsageFlagBitsEXT" category="bitmask">typedef <type>VkFlags</type> <name>VkIndirectCommandsLayoutUsageFlagsEXT</name>;</type>
        <type requires="VkIndirectCommandsInputModeFlagBitsEXT" category="bitmask">typedef <type>VkFlags</type> <name>VkIndirectCommandsInputModeFlagsEXT</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkDirectDriverLoadingFlagsLUNARG</name>;</type>
        <type bitvalues="VkPipelineCreateFlagBits2"       category="bitmask">typedef <type>VkFlags64</type> <name>VkPipelineCreateFlags2</name>;</type>
        <type                                             category="bitmask" name="VkPipelineCreateFlags2KHR" alias="VkPipelineCreateFlags2"/>
        <type bitvalues="VkBufferUsageFlagBits2"          category="bitmask">typedef <type>VkFlags64</type> <name>VkBufferUsageFlags2</name>;</type>
        <type                                             category="bitmask" name="VkBufferUsageFlags2KHR" alias="VkBufferUsageFlags2"/>

            <comment>WSI extensions</comment>
        <type requires="VkCompositeAlphaFlagBitsKHR"      category="bitmask">typedef <type>VkFlags</type> <name>VkCompositeAlphaFlagsKHR</name>;</type>
        <type requires="VkDisplayPlaneAlphaFlagBitsKHR"   category="bitmask">typedef <type>VkFlags</type> <name>VkDisplayPlaneAlphaFlagsKHR</name>;</type>
        <type requires="VkSurfaceTransformFlagBitsKHR"    category="bitmask">typedef <type>VkFlags</type> <name>VkSurfaceTransformFlagsKHR</name>;</type>
        <type requires="VkSwapchainCreateFlagBitsKHR"     category="bitmask">typedef <type>VkFlags</type> <name>VkSwapchainCreateFlagsKHR</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkDisplayModeCreateFlagsKHR</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkDisplaySurfaceCreateFlagsKHR</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkAndroidSurfaceCreateFlagsKHR</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkViSurfaceCreateFlagsNN</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkWaylandSurfaceCreateFlagsKHR</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkWin32SurfaceCreateFlagsKHR</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkXlibSurfaceCreateFlagsKHR</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkXcbSurfaceCreateFlagsKHR</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkDirectFBSurfaceCreateFlagsEXT</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkIOSSurfaceCreateFlagsMVK</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkMacOSSurfaceCreateFlagsMVK</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkMetalSurfaceCreateFlagsEXT</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkImagePipeSurfaceCreateFlagsFUCHSIA</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkStreamDescriptorSurfaceCreateFlagsGGP</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkHeadlessSurfaceCreateFlagsEXT</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkScreenSurfaceCreateFlagsQNX</name>;</type>
        <type requires="VkPeerMemoryFeatureFlagBits"      category="bitmask">typedef <type>VkFlags</type> <name>VkPeerMemoryFeatureFlags</name>;</type>
        <type                                             category="bitmask" name="VkPeerMemoryFeatureFlagsKHR"               alias="VkPeerMemoryFeatureFlags"/>
        <type requires="VkMemoryAllocateFlagBits"         category="bitmask">typedef <type>VkFlags</type> <name>VkMemoryAllocateFlags</name>;</type>
        <type                                             category="bitmask" name="VkMemoryAllocateFlagsKHR"                  alias="VkMemoryAllocateFlags"/>
        <type requires="VkDeviceGroupPresentModeFlagBitsKHR" category="bitmask">typedef <type>VkFlags</type> <name>VkDeviceGroupPresentModeFlagsKHR</name>;</type>

        <type requires="VkDebugReportFlagBitsEXT"         category="bitmask">typedef <type>VkFlags</type> <name>VkDebugReportFlagsEXT</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkCommandPoolTrimFlags</name>;</type>
        <type                                             category="bitmask" name="VkCommandPoolTrimFlagsKHR"                 alias="VkCommandPoolTrimFlags"/>
        <type requires="VkExternalMemoryHandleTypeFlagBitsNV" category="bitmask">typedef <type>VkFlags</type> <name>VkExternalMemoryHandleTypeFlagsNV</name>;</type>
        <type requires="VkClusterAccelerationStructureIndexFormatFlagBitsNV" category="bitmask">typedef <type>VkFlags</type> <name>VkClusterAccelerationStructureIndexFormatFlagsNV</name>;</type>
        <type requires="VkExternalMemoryFeatureFlagBitsNV" category="bitmask">typedef <type>VkFlags</type> <name>VkExternalMemoryFeatureFlagsNV</name>;</type>
        <type requires="VkExternalMemoryHandleTypeFlagBits" category="bitmask">typedef <type>VkFlags</type> <name>VkExternalMemoryHandleTypeFlags</name>;</type>
        <type                                             category="bitmask" name="VkExternalMemoryHandleTypeFlagsKHR"        alias="VkExternalMemoryHandleTypeFlags"/>
        <type requires="VkExternalMemoryFeatureFlagBits"  category="bitmask">typedef <type>VkFlags</type> <name>VkExternalMemoryFeatureFlags</name>;</type>
        <type                                             category="bitmask" name="VkExternalMemoryFeatureFlagsKHR"           alias="VkExternalMemoryFeatureFlags"/>
        <type requires="VkExternalSemaphoreHandleTypeFlagBits" category="bitmask">typedef <type>VkFlags</type> <name>VkExternalSemaphoreHandleTypeFlags</name>;</type>
        <type                                             category="bitmask" name="VkExternalSemaphoreHandleTypeFlagsKHR"     alias="VkExternalSemaphoreHandleTypeFlags"/>
        <type requires="VkExternalSemaphoreFeatureFlagBits" category="bitmask">typedef <type>VkFlags</type> <name>VkExternalSemaphoreFeatureFlags</name>;</type>
        <type                                             category="bitmask" name="VkExternalSemaphoreFeatureFlagsKHR"        alias="VkExternalSemaphoreFeatureFlags"/>
        <type requires="VkSemaphoreImportFlagBits" category="bitmask">typedef <type>VkFlags</type> <name>VkSemaphoreImportFlags</name>;</type>
        <type                                             category="bitmask" name="VkSemaphoreImportFlagsKHR"                 alias="VkSemaphoreImportFlags"/>
        <type requires="VkExternalFenceHandleTypeFlagBits" category="bitmask">typedef <type>VkFlags</type> <name>VkExternalFenceHandleTypeFlags</name>;</type>
        <type                                             category="bitmask" name="VkExternalFenceHandleTypeFlagsKHR"         alias="VkExternalFenceHandleTypeFlags"/>
        <type requires="VkExternalFenceFeatureFlagBits"   category="bitmask">typedef <type>VkFlags</type> <name>VkExternalFenceFeatureFlags</name>;</type>
        <type                                             category="bitmask" name="VkExternalFenceFeatureFlagsKHR"            alias="VkExternalFenceFeatureFlags"/>
        <type requires="VkFenceImportFlagBits"            category="bitmask">typedef <type>VkFlags</type> <name>VkFenceImportFlags</name>;</type>
        <type                                             category="bitmask" name="VkFenceImportFlagsKHR"                     alias="VkFenceImportFlags"/>
        <type requires="VkSurfaceCounterFlagBitsEXT"      category="bitmask">typedef <type>VkFlags</type> <name>VkSurfaceCounterFlagsEXT</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineViewportSwizzleStateCreateFlagsNV</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineDiscardRectangleStateCreateFlagsEXT</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineCoverageToColorStateCreateFlagsNV</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineCoverageModulationStateCreateFlagsNV</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineCoverageReductionStateCreateFlagsNV</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkValidationCacheCreateFlagsEXT</name>;</type>
        <type requires="VkDebugUtilsMessageSeverityFlagBitsEXT" category="bitmask">typedef <type>VkFlags</type> <name>VkDebugUtilsMessageSeverityFlagsEXT</name>;</type>
        <type requires="VkDebugUtilsMessageTypeFlagBitsEXT" category="bitmask">typedef <type>VkFlags</type> <name>VkDebugUtilsMessageTypeFlagsEXT</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkDebugUtilsMessengerCreateFlagsEXT</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkDebugUtilsMessengerCallbackDataFlagsEXT</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkDeviceMemoryReportFlagsEXT</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineRasterizationConservativeStateCreateFlagsEXT</name>;</type>
        <type requires="VkDescriptorBindingFlagBits"      category="bitmask">typedef <type>VkFlags</type> <name>VkDescriptorBindingFlags</name>;</type>
        <type                                             category="bitmask" name="VkDescriptorBindingFlagsEXT"               alias="VkDescriptorBindingFlags"/>
        <type requires="VkConditionalRenderingFlagBitsEXT"  category="bitmask">typedef <type>VkFlags</type> <name>VkConditionalRenderingFlagsEXT</name>;</type>
        <type requires="VkResolveModeFlagBits"            category="bitmask">typedef <type>VkFlags</type> <name>VkResolveModeFlags</name>;</type>
        <type                                             category="bitmask" name="VkResolveModeFlagsKHR"                     alias="VkResolveModeFlags"/>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineRasterizationStateStreamCreateFlagsEXT</name>;</type>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkPipelineRasterizationDepthClipStateCreateFlagsEXT</name>;</type>
        <type requires="VkSwapchainImageUsageFlagBitsANDROID" category="bitmask">typedef <type>VkFlags</type> <name>VkSwapchainImageUsageFlagsANDROID</name>;</type>
        <type requires="VkToolPurposeFlagBits"            category="bitmask">typedef <type>VkFlags</type> <name>VkToolPurposeFlags</name>;</type>
        <type                                             category="bitmask" name="VkToolPurposeFlagsEXT"                     alias="VkToolPurposeFlags"/>
        <type requires="VkSubmitFlagBits"                 category="bitmask">typedef <type>VkFlags</type> <name>VkSubmitFlags</name>;</type>
        <type                                             category="bitmask" name="VkSubmitFlagsKHR"                          alias="VkSubmitFlags"/>
        <type                                             category="bitmask">typedef <type>VkFlags</type> <name>VkImageFormatConstraintsFlagsFUCHSIA</name>;</type>
        <type requires="VkHostImageCopyFlagBits"          category="bitmask">typedef <type>VkFlags</type> <name>VkHostImageCopyFlags</name>;</type>
        <type                                             category="bitmask" name="VkHostImageCopyFlagsEXT"                   alias="VkHostImageCopyFlags"/>
        <type requires="VkPartitionedAccelerationStructureInstanceFlagBitsNV" category="bitmask">typedef <type>VkFlags</type> <name>VkPartitionedAccelerationStructureInstanceFlagsNV</name>;</type>
        <type requires="VkImageConstraintsInfoFlagBitsFUCHSIA"   category="bitmask">typedef <type>VkFlags</type> <name>VkImageConstraintsInfoFlagsFUCHSIA</name>;</type>
        <type requires="VkGraphicsPipelineLibraryFlagBitsEXT" category="bitmask">typedef <type>VkFlags</type> <name>VkGraphicsPipelineLibraryFlagsEXT</name>;</type>
        <type requires="VkImageCompressionFlagBitsEXT"          category="bitmask">typedef <type>VkFlags</type> <name>VkImageCompressionFlagsEXT</name>;</type>
        <type requires="VkImageCompressionFixedRateFlagBitsEXT" category="bitmask">typedef <type>VkFlags</type> <name>VkImageCompressionFixedRateFlagsEXT</name>;</type>
        <type requires="VkExportMetalObjectTypeFlagBitsEXT"     category="bitmask">typedef <type>VkFlags</type> <name>VkExportMetalObjectTypeFlagsEXT</name>;</type>
        <type requires="VkDeviceAddressBindingFlagBitsEXT" category="bitmask">typedef <type>VkFlags</type> <name>VkDeviceAddressBindingFlagsEXT</name>;</type>
        <type requires="VkOpticalFlowGridSizeFlagBitsNV"        category="bitmask">typedef <type>VkFlags</type>   <name>VkOpticalFlowGridSizeFlagsNV</name>;</type>
        <type requires="VkOpticalFlowUsageFlagBitsNV"           category="bitmask">typedef <type>VkFlags</type>   <name>VkOpticalFlowUsageFlagsNV</name>;</type>
        <type requires="VkOpticalFlowSessionCreateFlagBitsNV"   category="bitmask">typedef <type>VkFlags</type>   <name>VkOpticalFlowSessionCreateFlagsNV</name>;</type>
        <type requires="VkOpticalFlowExecuteFlagBitsNV"         category="bitmask">typedef <type>VkFlags</type>   <name>VkOpticalFlowExecuteFlagsNV</name>;</type>
        <type requires="VkFrameBoundaryFlagBitsEXT"       category="bitmask">typedef <type>VkFlags</type> <name>VkFrameBoundaryFlagsEXT</name>;</type>
        <type requires="VkPresentScalingFlagBitsEXT" category="bitmask">typedef <type>VkFlags</type> <name>VkPresentScalingFlagsEXT</name>;</type>
        <type requires="VkPresentGravityFlagBitsEXT" category="bitmask">typedef <type>VkFlags</type> <name>VkPresentGravityFlagsEXT</name>;</type>
        <type requires="VkShaderCreateFlagBitsEXT"        category="bitmask">typedef <type>VkFlags</type> <name>VkShaderCreateFlagsEXT</name>;</type>
        <type bitvalues="VkPhysicalDeviceSchedulingControlsFlagBitsARM" category="bitmask">typedef <type>VkFlags64</type> <name>VkPhysicalDeviceSchedulingControlsFlagsARM</name>;</type>

            <comment>Video Core extension</comment>
        <type requires="VkVideoCodecOperationFlagBitsKHR"           category="bitmask">typedef <type>VkFlags</type> <name>VkVideoCodecOperationFlagsKHR</name>;</type>
        <type requires="VkVideoCapabilityFlagBitsKHR"               category="bitmask">typedef <type>VkFlags</type> <name>VkVideoCapabilityFlagsKHR</name>;</type>
        <type requires="VkVideoSessionCreateFlagBitsKHR"            category="bitmask">typedef <type>VkFlags</type> <name>VkVideoSessionCreateFlagsKHR</name>;</type>
        <type requires="VkVideoSessionParametersCreateFlagBitsKHR"  category="bitmask">typedef <type>VkFlags</type> <name>VkVideoSessionParametersCreateFlagsKHR</name>;</type>
        <type                                                       category="bitmask">typedef <type>VkFlags</type> <name>VkVideoBeginCodingFlagsKHR</name>;</type>
        <type                                                       category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEndCodingFlagsKHR</name>;</type>
        <type requires="VkVideoCodingControlFlagBitsKHR"            category="bitmask">typedef <type>VkFlags</type> <name>VkVideoCodingControlFlagsKHR</name>;</type>

            <comment>Video Decode Core extension</comment>
        <type requires="VkVideoDecodeUsageFlagBitsKHR"              category="bitmask">typedef <type>VkFlags</type> <name>VkVideoDecodeUsageFlagsKHR</name>;</type>
        <type requires="VkVideoDecodeCapabilityFlagBitsKHR"         category="bitmask">typedef <type>VkFlags</type> <name>VkVideoDecodeCapabilityFlagsKHR</name>;</type>
        <type                                                       category="bitmask">typedef <type>VkFlags</type> <name>VkVideoDecodeFlagsKHR</name>;</type>

            <comment>Video Decode H.264 extension</comment>
        <type requires="VkVideoDecodeH264PictureLayoutFlagBitsKHR"  category="bitmask">typedef <type>VkFlags</type> <name>VkVideoDecodeH264PictureLayoutFlagsKHR</name>;</type>

            <comment>Video Encode Core extension</comment>
        <type requires="VkVideoEncodeFlagBitsKHR"                   category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeFlagsKHR</name>;</type>
        <type requires="VkVideoEncodeUsageFlagBitsKHR"              category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeUsageFlagsKHR</name>;</type>
        <type requires="VkVideoEncodeContentFlagBitsKHR"            category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeContentFlagsKHR</name>;</type>
        <type requires="VkVideoEncodeCapabilityFlagBitsKHR"         category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeCapabilityFlagsKHR</name>;</type>
        <type requires="VkVideoEncodeFeedbackFlagBitsKHR"           category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeFeedbackFlagsKHR</name>;</type>
        <type                                                       category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeRateControlFlagsKHR</name>;</type>
        <type requires="VkVideoEncodeRateControlModeFlagBitsKHR"    category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeRateControlModeFlagsKHR</name>;</type>
        <type requires="VkVideoChromaSubsamplingFlagBitsKHR"        category="bitmask">typedef <type>VkFlags</type> <name>VkVideoChromaSubsamplingFlagsKHR</name>;</type>
        <type requires="VkVideoComponentBitDepthFlagBitsKHR"        category="bitmask">typedef <type>VkFlags</type> <name>VkVideoComponentBitDepthFlagsKHR</name>;</type>

            <comment>Video Encode H.264 extension</comment>
        <type requires="VkVideoEncodeH264CapabilityFlagBitsKHR"             category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeH264CapabilityFlagsKHR</name>;</type>
        <type requires="VkVideoEncodeH264StdFlagBitsKHR"                    category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeH264StdFlagsKHR</name>;</type>
        <type requires="VkVideoEncodeH264RateControlFlagBitsKHR"            category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeH264RateControlFlagsKHR</name>;</type>

            <comment>Video Encode H.265 extension</comment>
        <type requires="VkVideoEncodeH265CapabilityFlagBitsKHR"             category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeH265CapabilityFlagsKHR</name>;</type>
        <type requires="VkVideoEncodeH265StdFlagBitsKHR"                    category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeH265StdFlagsKHR</name>;</type>
        <type requires="VkVideoEncodeH265RateControlFlagBitsKHR"            category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeH265RateControlFlagsKHR</name>;</type>
        <type requires="VkVideoEncodeH265CtbSizeFlagBitsKHR"                category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeH265CtbSizeFlagsKHR</name>;</type>
        <type requires="VkVideoEncodeH265TransformBlockSizeFlagBitsKHR"     category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeH265TransformBlockSizeFlagsKHR</name>;</type>

            <comment>Video Encode AV1 extension</comment>
        <type requires="VkVideoEncodeAV1CapabilityFlagBitsKHR"              category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeAV1CapabilityFlagsKHR</name>;</type>
        <type requires="VkVideoEncodeAV1StdFlagBitsKHR"                     category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeAV1StdFlagsKHR</name>;</type>
        <type requires="VkVideoEncodeAV1RateControlFlagBitsKHR"             category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeAV1RateControlFlagsKHR</name>;</type>
        <type requires="VkVideoEncodeAV1SuperblockSizeFlagBitsKHR"          category="bitmask">typedef <type>VkFlags</type> <name>VkVideoEncodeAV1SuperblockSizeFlagsKHR</name>;</type>

            <comment>VK_KHR_maintenance8</comment>
        <type bitvalues="VkAccessFlagBits3KHR"            category="bitmask">typedef <type>VkFlags64</type> <name>VkAccessFlags3KHR</name>;</type>

            <comment>Types which can be void pointers or class pointers, selected at compile time</comment>
        <type category="handle"                           objtypeenum="VK_OBJECT_TYPE_INSTANCE"><type>VK_DEFINE_HANDLE</type>(<name>VkInstance</name>)</type>
        <type category="handle" parent="VkInstance"       objtypeenum="VK_OBJECT_TYPE_PHYSICAL_DEVICE"><type>VK_DEFINE_HANDLE</type>(<name>VkPhysicalDevice</name>)</type>
        <type category="handle" parent="VkPhysicalDevice" objtypeenum="VK_OBJECT_TYPE_DEVICE"><type>VK_DEFINE_HANDLE</type>(<name>VkDevice</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_QUEUE"><type>VK_DEFINE_HANDLE</type>(<name>VkQueue</name>)</type>
        <type category="handle" parent="VkCommandPool"    objtypeenum="VK_OBJECT_TYPE_COMMAND_BUFFER"><type>VK_DEFINE_HANDLE</type>(<name>VkCommandBuffer</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_DEVICE_MEMORY"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkDeviceMemory</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_COMMAND_POOL"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkCommandPool</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_BUFFER"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkBuffer</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_BUFFER_VIEW"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkBufferView</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_IMAGE"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkImage</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_IMAGE_VIEW"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkImageView</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_SHADER_MODULE"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkShaderModule</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_PIPELINE"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkPipeline</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_PIPELINE_LAYOUT"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkPipelineLayout</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_SAMPLER"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkSampler</name>)</type>
        <type category="handle" parent="VkDescriptorPool" objtypeenum="VK_OBJECT_TYPE_DESCRIPTOR_SET"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkDescriptorSet</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkDescriptorSetLayout</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_DESCRIPTOR_POOL"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkDescriptorPool</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_FENCE"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkFence</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_SEMAPHORE"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkSemaphore</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_EVENT"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkEvent</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_QUERY_POOL"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkQueryPool</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_FRAMEBUFFER"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkFramebuffer</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_RENDER_PASS"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkRenderPass</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_PIPELINE_CACHE"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkPipelineCache</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_PIPELINE_BINARY_KHR"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkPipelineBinaryKHR</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkIndirectCommandsLayoutNV</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_EXT"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkIndirectCommandsLayoutEXT</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_INDIRECT_EXECUTION_SET_EXT"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkIndirectExecutionSetEXT</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkDescriptorUpdateTemplate</name>)</type>
        <type category="handle" name="VkDescriptorUpdateTemplateKHR" alias="VkDescriptorUpdateTemplate"/>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkSamplerYcbcrConversion</name>)</type>
        <type category="handle" name="VkSamplerYcbcrConversionKHR"   alias="VkSamplerYcbcrConversion"/>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_VALIDATION_CACHE_EXT"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkValidationCacheEXT</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkAccelerationStructureKHR</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkAccelerationStructureNV</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkPerformanceConfigurationINTEL</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkBufferCollectionFUCHSIA</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkDeferredOperationKHR</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_PRIVATE_DATA_SLOT"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkPrivateDataSlot</name>)</type>
        <type category="handle" name="VkPrivateDataSlotEXT"          alias="VkPrivateDataSlot"/>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_CU_MODULE_NVX"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkCuModuleNVX</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_CU_FUNCTION_NVX"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkCuFunctionNVX</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkOpticalFlowSessionNV</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_MICROMAP_EXT"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkMicromapEXT</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_SHADER_EXT"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkShaderEXT</name>)</type>

            <comment>WSI extensions</comment>
        <type category="handle" parent="VkPhysicalDevice" objtypeenum="VK_OBJECT_TYPE_DISPLAY_KHR"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkDisplayKHR</name>)</type>
        <type category="handle" parent="VkDisplayKHR"     objtypeenum="VK_OBJECT_TYPE_DISPLAY_MODE_KHR"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkDisplayModeKHR</name>)</type>
        <type category="handle" parent="VkInstance"       objtypeenum="VK_OBJECT_TYPE_SURFACE_KHR"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkSurfaceKHR</name>)</type>
        <type category="handle" parent="VkDevice"         objtypeenum="VK_OBJECT_TYPE_SWAPCHAIN_KHR"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkSwapchainKHR</name>)</type>
        <type category="handle" parent="VkInstance"       objtypeenum="VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkDebugReportCallbackEXT</name>)</type>
        <type category="handle" parent="VkInstance"       objtypeenum="VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkDebugUtilsMessengerEXT</name>)</type>

            <comment>Video extensions</comment>
        <type category="handle" parent="VkDevice"          objtypeenum="VK_OBJECT_TYPE_VIDEO_SESSION_KHR"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkVideoSessionKHR</name>)</type>
        <type category="handle" parent="VkVideoSessionKHR" objtypeenum="VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkVideoSessionParametersKHR</name>)</type>

            <comment>VK_NV_external_sci_sync2</comment>
        <type category="handle" parent="VkDevice"          objtypeenum="VK_OBJECT_TYPE_SEMAPHORE_SCI_SYNC_POOL_NV"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkSemaphoreSciSyncPoolNV</name>)</type>

            <comment>Types generated from corresponding enums tags below</comment>
        <type name="VkAttachmentLoadOp" category="enum"/>
        <type name="VkAttachmentStoreOp" category="enum"/>
        <type name="VkBlendFactor" category="enum"/>
        <type name="VkBlendOp" category="enum"/>
        <type name="VkBorderColor" category="enum"/>
        <type name="VkFramebufferCreateFlagBits" category="enum"/>
        <type name="VkQueryPoolCreateFlagBits" category="enum"/>
        <type name="VkRenderPassCreateFlagBits" category="enum"/>
        <type name="VkSamplerCreateFlagBits" category="enum"/>
        <type name="VkPipelineCacheHeaderVersion" category="enum"/>
        <type name="VkPipelineCacheCreateFlagBits" category="enum"/>
        <type name="VkPipelineShaderStageCreateFlagBits" category="enum"/>
        <type name="VkDescriptorSetLayoutCreateFlagBits" category="enum"/>
        <type name="VkInstanceCreateFlagBits" category="enum"/>
        <type name="VkDeviceQueueCreateFlagBits" category="enum"/>
        <type name="VkBufferCreateFlagBits" category="enum"/>
        <type name="VkBufferUsageFlagBits" category="enum"/>
        <type name="VkColorComponentFlagBits" category="enum"/>
        <type name="VkComponentSwizzle" category="enum"/>
        <type name="VkCommandPoolCreateFlagBits" category="enum"/>
        <type name="VkCommandPoolResetFlagBits" category="enum"/>
        <type name="VkCommandBufferResetFlagBits" category="enum"/>
        <type name="VkCommandBufferLevel" category="enum"/>
        <type name="VkCommandBufferUsageFlagBits" category="enum"/>
        <type name="VkCompareOp" category="enum"/>
        <type name="VkCullModeFlagBits" category="enum"/>
        <type name="VkDescriptorType" category="enum"/>
        <type name="VkDeviceCreateFlagBits" category="enum"/>
        <type name="VkDynamicState" category="enum"/>
        <type name="VkFenceCreateFlagBits" category="enum"/>
        <type name="VkPolygonMode" category="enum"/>
        <type name="VkFormat" category="enum"/>
        <type name="VkFormatFeatureFlagBits" category="enum"/>
        <type name="VkFrontFace" category="enum"/>
        <type name="VkMemoryMapFlagBits" category="enum"/>
        <type name="VkImageAspectFlagBits" category="enum"/>
        <type name="VkImageCreateFlagBits" category="enum"/>
        <type name="VkImageLayout" category="enum"/>
        <type name="VkImageTiling" category="enum"/>
        <type name="VkImageType" category="enum"/>
        <type name="VkImageUsageFlagBits" category="enum"/>
        <type name="VkImageViewCreateFlagBits" category="enum"/>
        <type name="VkImageViewType" category="enum"/>
        <type name="VkIndirectCommandsTokenTypeEXT" category="enum"/>
        <type name="VkSharingMode" category="enum"/>
        <type name="VkIndexType" category="enum"/>
        <type name="VkLogicOp" category="enum"/>
        <type name="VkMemoryHeapFlagBits" category="enum"/>
        <type name="VkAccessFlagBits" category="enum"/>
        <type name="VkMemoryPropertyFlagBits" category="enum"/>
        <type name="VkPhysicalDeviceType" category="enum"/>
        <type name="VkPipelineBindPoint" category="enum"/>
        <type name="VkPipelineCreateFlagBits" category="enum"/>
        <type name="VkPrimitiveTopology" category="enum"/>
        <type name="VkQueryControlFlagBits" category="enum"/>
        <type name="VkQueryPipelineStatisticFlagBits" category="enum"/>
        <type name="VkQueryResultFlagBits" category="enum"/>
        <type name="VkQueryType" category="enum"/>
        <type name="VkQueueFlagBits" category="enum"/>
        <type name="VkSubpassContents" category="enum"/>
        <type name="VkResult" category="enum"/>
        <type name="VkShaderStageFlagBits" category="enum"/>
        <type name="VkSparseMemoryBindFlagBits" category="enum"/>
        <type name="VkStencilFaceFlagBits" category="enum"/>
        <type name="VkStencilOp" category="enum"/>
        <type name="VkStructureType" category="enum"/>
        <type name="VkSystemAllocationScope" category="enum"/>
        <type name="VkInternalAllocationType" category="enum"/>
        <type name="VkSamplerAddressMode" category="enum"/>
        <type name="VkFilter" category="enum"/>
        <type name="VkSamplerMipmapMode" category="enum"/>
        <type name="VkVertexInputRate" category="enum"/>
        <type name="VkPipelineStageFlagBits" category="enum"/>
        <type name="VkSparseImageFormatFlagBits" category="enum"/>
        <type name="VkClusterAccelerationStructureIndexFormatFlagBitsNV" category="enum"/>
        <type name="VkClusterAccelerationStructureTypeNV" category="enum"/>
        <type name="VkClusterAccelerationStructureOpTypeNV" category="enum"/>
        <type name="VkClusterAccelerationStructureOpModeNV" category="enum"/>
        <type name="VkSampleCountFlagBits" category="enum"/>
        <type name="VkAttachmentDescriptionFlagBits" category="enum"/>
        <type name="VkDescriptorPoolCreateFlagBits" category="enum"/>
        <type name="VkDependencyFlagBits" category="enum"/>
        <type name="VkObjectType" category="enum"/>
        <type name="VkEventCreateFlagBits" category="enum"/>
        <type name="VkPipelineLayoutCreateFlagBits" category="enum"/>
        <type name="VkSemaphoreCreateFlagBits" category="enum"/>
        <type name="VkRayTracingInvocationReorderModeNV" category="enum"/>

        <comment>Extensions</comment>
        <type name="VkIndirectCommandsLayoutUsageFlagBitsNV" category="enum"/>
        <type name="VkIndirectCommandsTokenTypeNV" category="enum"/>
        <type name="VkIndirectStateFlagBitsNV" category="enum"/>
        <type name="VkPrivateDataSlotCreateFlagBits" category="enum"/>
        <type category="enum" name="VkPrivateDataSlotCreateFlagBitsEXT"            alias="VkPrivateDataSlotCreateFlagBits"/>
        <type name="VkDescriptorUpdateTemplateType" category="enum"/>
        <type category="enum" name="VkDescriptorUpdateTemplateTypeKHR"             alias="VkDescriptorUpdateTemplateType"/>
        <type name="VkViewportCoordinateSwizzleNV" category="enum"/>
        <type name="VkDiscardRectangleModeEXT" category="enum"/>
        <type name="VkSubpassDescriptionFlagBits" category="enum"/>
        <type name="VkPointClippingBehavior" category="enum"/>
        <type category="enum" name="VkPointClippingBehaviorKHR"                    alias="VkPointClippingBehavior"/>
        <type name="VkCoverageModulationModeNV" category="enum"/>
        <type name="VkCoverageReductionModeNV" category="enum"/>
        <type name="VkValidationCacheHeaderVersionEXT" category="enum"/>
        <type name="VkShaderInfoTypeAMD" category="enum"/>
        <type name="VkQueueGlobalPriority" category="enum"/>
        <type name="VkQueueGlobalPriorityKHR" category="enum"                      alias="VkQueueGlobalPriority"/>
        <type name="VkQueueGlobalPriorityEXT" category="enum"                      alias="VkQueueGlobalPriority"/>
        <type name="VkTimeDomainKHR" category="enum"/>
        <type name="VkTimeDomainEXT" category="enum" alias="VkTimeDomainKHR"/>
        <type name="VkConservativeRasterizationModeEXT" category="enum"/>
        <type name="VkResolveModeFlagBits" category="enum"/>
        <type category="enum" name="VkResolveModeFlagBitsKHR"                      alias="VkResolveModeFlagBits"/>
        <type name="VkDescriptorBindingFlagBits" category="enum"/>
        <type category="enum" name="VkDescriptorBindingFlagBitsEXT"                alias="VkDescriptorBindingFlagBits"/>
        <type name="VkConditionalRenderingFlagBitsEXT" category="enum"/>
        <type name="VkSemaphoreType" category="enum"/>
        <type category="enum" name="VkSemaphoreTypeKHR"                            alias="VkSemaphoreType"/>
        <type name="VkGeometryFlagBitsKHR" category="enum"/>
        <type category="enum" name="VkGeometryFlagBitsNV"                          alias="VkGeometryFlagBitsKHR"/>
        <type name="VkGeometryInstanceFlagBitsKHR" category="enum"/>
        <type category="enum" name="VkGeometryInstanceFlagBitsNV"                  alias="VkGeometryInstanceFlagBitsKHR"/>
        <type name="VkClusterAccelerationStructureAddressResolutionFlagBitsNV"          category="enum"/>
        <type name="VkClusterAccelerationStructureGeometryFlagBitsNV"         category="enum"/>
        <type name="VkClusterAccelerationStructureClusterFlagBitsNV"          category="enum"/>
        <type name="VkBuildAccelerationStructureFlagBitsKHR" category="enum"/>
        <type category="enum" name="VkBuildAccelerationStructureFlagBitsNV"        alias="VkBuildAccelerationStructureFlagBitsKHR"/>
        <type name="VkAccelerationStructureCreateFlagBitsKHR" category="enum"/>
        <type name="VkBuildAccelerationStructureModeKHR" category="enum"/>
        <type name="VkCopyAccelerationStructureModeKHR" category="enum"/>
        <type category="enum" name="VkCopyAccelerationStructureModeNV"             alias="VkCopyAccelerationStructureModeKHR"/>
        <type name="VkAccelerationStructureTypeKHR" category="enum"/>
        <type category="enum" name="VkAccelerationStructureTypeNV"                 alias="VkAccelerationStructureTypeKHR"/>
        <type name="VkGeometryTypeKHR" category="enum"/>
        <type category="enum" name="VkGeometryTypeNV"                              alias="VkGeometryTypeKHR"/>
        <type name="VkRayTracingShaderGroupTypeKHR" category="enum"/>
        <type category="enum" name="VkRayTracingShaderGroupTypeNV"                 alias="VkRayTracingShaderGroupTypeKHR"/>
        <type name="VkAccelerationStructureMemoryRequirementsTypeNV" category="enum"/>
        <type name="VkAccelerationStructureBuildTypeKHR" category="enum"/>
        <type name="VkAccelerationStructureCompatibilityKHR" category="enum"/>
        <type name="VkRayTracingLssIndexingModeNV" category="enum"/>
        <type name="VkRayTracingLssPrimitiveEndCapsModeNV" category="enum"/>
        <type name="VkShaderGroupShaderKHR" category="enum"/>
        <type name="VkMemoryOverallocationBehaviorAMD" category="enum"/>
        <type name="VkDeviceDiagnosticsConfigFlagBitsNV" category="enum"/>
        <type name="VkPipelineCreationFeedbackFlagBits" category="enum"/>
        <type category="enum" name="VkPipelineCreationFeedbackFlagBitsEXT"         alias="VkPipelineCreationFeedbackFlagBits"/>
        <type name="VkPerformanceCounterScopeKHR" category="enum"/>
        <type name="VkPerformanceCounterUnitKHR" category="enum"/>
        <type name="VkPerformanceCounterStorageKHR" category="enum"/>
        <type name="VkPerformanceCounterDescriptionFlagBitsKHR" category="enum"/>
        <type name="VkAcquireProfilingLockFlagBitsKHR" category="enum"/>
        <type name="VkSemaphoreWaitFlagBits" category="enum"/>
        <type category="enum" name="VkSemaphoreWaitFlagBitsKHR"                    alias="VkSemaphoreWaitFlagBits"/>
        <type name="VkPerformanceConfigurationTypeINTEL" category="enum"/>
        <type name="VkQueryPoolSamplingModeINTEL" category="enum"/>
        <type name="VkPerformanceOverrideTypeINTEL" category="enum"/>
        <type name="VkPerformanceParameterTypeINTEL" category="enum"/>
        <type name="VkPerformanceValueTypeINTEL" category="enum"/>
        <type name="VkLineRasterizationMode" category="enum"/>
        <type name="VkLineRasterizationModeKHR" category="enum" alias="VkLineRasterizationMode"/>
        <type name="VkLineRasterizationModeEXT" category="enum" alias="VkLineRasterizationMode"/>
        <type name="VkShaderModuleCreateFlagBits" category="enum"/>
        <type name="VkPipelineCompilerControlFlagBitsAMD" category="enum"/>
        <type name="VkShaderCorePropertiesFlagBitsAMD" category="enum"/>
        <type name="VkRefreshObjectFlagBitsKHR" category="enum"/>
        <type name="VkFaultLevel" category="enum"/>
        <type name="VkFaultType" category="enum"/>
        <type name="VkFaultQueryBehavior" category="enum"/>
        <type name="VkPipelineMatchControl" category="enum"/>
        <type name="VkSciSyncClientTypeNV" category="enum"/>
        <type name="VkSciSyncPrimitiveTypeNV" category="enum"/>
        <type name="VkToolPurposeFlagBits" category="enum"/>
        <type category="enum" name="VkToolPurposeFlagBitsEXT"                      alias="VkToolPurposeFlagBits"/>
        <type name="VkFragmentShadingRateNV" category="enum"/>
        <type name="VkFragmentShadingRateTypeNV" category="enum"/>
        <type name="VkSubpassMergeStatusEXT" category="enum"/>
        <type name="VkAccessFlagBits2" category="enum"/>
        <type category="enum" name="VkAccessFlagBits2KHR"                          alias="VkAccessFlagBits2"/>
        <type name="VkPipelineStageFlagBits2" category="enum"/>
        <type category="enum" name="VkPipelineStageFlagBits2KHR"                   alias="VkPipelineStageFlagBits2"/>
        <type name="VkProvokingVertexModeEXT" category="enum"/>
        <type name="VkPipelineCacheValidationVersion" category="enum"/>
        <type name="VkImageFormatConstraintsFlagBitsFUCHSIA" category="enum"/>
        <type name="VkHostImageCopyFlagBits" category="enum"/>
        <type category="enum" name="VkHostImageCopyFlagBitsEXT"                    alias="VkHostImageCopyFlagBits"/>
        <type name="VkImageConstraintsInfoFlagBitsFUCHSIA" category="enum"/>
        <type name="VkFormatFeatureFlagBits2" category="enum"/>
        <type category="enum" name="VkFormatFeatureFlagBits2KHR"                   alias="VkFormatFeatureFlagBits2"/>
        <type name="VkRenderingFlagBits" category="enum"/>
        <type category="enum" name="VkRenderingFlagBitsKHR"                        alias="VkRenderingFlagBits"/>
        <type name="VkPipelineDepthStencilStateCreateFlagBits" category="enum"/>
        <type name="VkPipelineColorBlendStateCreateFlagBits" category="enum"/>
        <type name="VkImageCompressionFlagBitsEXT" category="enum"/>
        <type name="VkImageCompressionFixedRateFlagBitsEXT" category="enum"/>
        <type name="VkExportMetalObjectTypeFlagBitsEXT" category="enum"/>
        <type name="VkPipelineRobustnessBufferBehavior" category="enum"/>
        <type category="enum" name="VkPipelineRobustnessBufferBehaviorEXT"          alias="VkPipelineRobustnessBufferBehavior"/>
        <type name="VkPipelineRobustnessImageBehavior" category="enum"/>
        <type category="enum" name="VkPipelineRobustnessImageBehaviorEXT"           alias="VkPipelineRobustnessImageBehavior"/>
        <type name="VkDeviceAddressBindingFlagBitsEXT" category="enum"/>
        <type name="VkDeviceAddressBindingTypeEXT" category="enum"/>
        <type name="VkMicromapTypeEXT" category="enum"/>
        <type name="VkBuildMicromapModeEXT" category="enum"/>
        <type name="VkCopyMicromapModeEXT" category="enum"/>
        <type name="VkBuildMicromapFlagBitsEXT" category="enum"/>
        <type name="VkMicromapCreateFlagBitsEXT" category="enum"/>
        <type name="VkOpacityMicromapFormatEXT" category="enum"/>
        <type name="VkOpacityMicromapSpecialIndexEXT" category="enum"/>
        <type name="VkDeviceFaultVendorBinaryHeaderVersionEXT" category="enum"/>
        <type name="VkIndirectCommandsLayoutUsageFlagBitsEXT" category="enum"/>
        <type name="VkIndirectExecutionSetInfoTypeEXT" category="enum"/>
        <type name="VkIndirectCommandsInputModeFlagBitsEXT" category="enum"/>
        <type name="VkFrameBoundaryFlagBitsEXT" category="enum"/>
        <type name="VkMemoryDecompressionMethodFlagBitsNV" category="enum"/>
        <type name="VkDepthBiasRepresentationEXT" category="enum"/>
        <type name="VkDirectDriverLoadingModeLUNARG" category="enum"/>
        <type name="VkPipelineCreateFlagBits2" category="enum"/>
        <type category="enum" name="VkPipelineCreateFlagBits2KHR"                  alias="VkPipelineCreateFlagBits2"/>
        <type name="VkBufferUsageFlagBits2" category="enum"/>
        <type category="enum" name="VkBufferUsageFlagBits2KHR"                     alias="VkBufferUsageFlagBits2"/>
        <type name="VkPartitionedAccelerationStructureOpTypeNV" category="enum"/>
        <type name="VkPartitionedAccelerationStructureInstanceFlagBitsNV" category="enum"/>
        <type name="VkAntiLagModeAMD" category="enum"/>
        <type name="VkAntiLagStageAMD" category="enum"/>
        <type name="VkDisplacementMicromapFormatNV" category="enum"/>
        <type name="VkShaderCreateFlagBitsEXT" category="enum"/>
        <type name="VkShaderCodeTypeEXT" category="enum"/>
        <type name="VkScopeKHR" category="enum"/>
        <type name="VkComponentTypeKHR" category="enum"/>
        <type category="enum" name="VkScopeNV"                                     alias="VkScopeKHR"/>
        <type category="enum" name="VkComponentTypeNV"                             alias="VkComponentTypeKHR"/>
        <type name="VkCubicFilterWeightsQCOM" category="enum"/>
        <type name="VkBlockMatchWindowCompareModeQCOM" category="enum"/>
        <type name="VkLayeredDriverUnderlyingApiMSFT" category="enum"/>
        <type name="VkPhysicalDeviceLayeredApiKHR" category="enum"/>
        <type name="VkDepthClampModeEXT" category="enum"/>
        <type name="VkCooperativeVectorMatrixLayoutNV" category="enum"/>

            <comment>WSI extensions</comment>
        <type name="VkColorSpaceKHR" category="enum"/>
        <type name="VkCompositeAlphaFlagBitsKHR" category="enum"/>
        <type name="VkDisplayPlaneAlphaFlagBitsKHR" category="enum"/>
        <type name="VkPresentModeKHR" category="enum"/>
        <type name="VkSurfaceTransformFlagBitsKHR" category="enum"/>
        <type name="VkDisplaySurfaceStereoTypeNV" category="enum"/>
        <type name="VkDebugReportFlagBitsEXT" category="enum"/>
        <type name="VkDebugReportObjectTypeEXT" category="enum"/>
        <type name="VkDeviceMemoryReportEventTypeEXT" category="enum"/>
        <type name="VkRasterizationOrderAMD" category="enum"/>
        <type name="VkExternalMemoryHandleTypeFlagBitsNV" category="enum"/>
        <type name="VkExternalMemoryFeatureFlagBitsNV" category="enum"/>
        <type name="VkValidationCheckEXT" category="enum"/>
        <type name="VkValidationFeatureEnableEXT" category="enum"/>
        <type name="VkValidationFeatureDisableEXT" category="enum"/>
        <type name="VkExternalMemoryHandleTypeFlagBits" category="enum"/>
        <type category="enum" name="VkExternalMemoryHandleTypeFlagBitsKHR"         alias="VkExternalMemoryHandleTypeFlagBits"/>
        <type name="VkExternalMemoryFeatureFlagBits" category="enum"/>
        <type category="enum" name="VkExternalMemoryFeatureFlagBitsKHR"            alias="VkExternalMemoryFeatureFlagBits"/>
        <type name="VkExternalSemaphoreHandleTypeFlagBits" category="enum"/>
        <type category="enum" name="VkExternalSemaphoreHandleTypeFlagBitsKHR"      alias="VkExternalSemaphoreHandleTypeFlagBits"/>
        <type name="VkExternalSemaphoreFeatureFlagBits" category="enum"/>
        <type category="enum" name="VkExternalSemaphoreFeatureFlagBitsKHR"         alias="VkExternalSemaphoreFeatureFlagBits"/>
        <type name="VkSemaphoreImportFlagBits" category="enum"/>
        <type category="enum" name="VkSemaphoreImportFlagBitsKHR"                  alias="VkSemaphoreImportFlagBits"/>
        <type name="VkExternalFenceHandleTypeFlagBits" category="enum"/>
        <type category="enum" name="VkExternalFenceHandleTypeFlagBitsKHR"          alias="VkExternalFenceHandleTypeFlagBits"/>
        <type name="VkExternalFenceFeatureFlagBits" category="enum"/>
        <type category="enum" name="VkExternalFenceFeatureFlagBitsKHR"             alias="VkExternalFenceFeatureFlagBits"/>
        <type name="VkFenceImportFlagBits" category="enum"/>
        <type category="enum" name="VkFenceImportFlagBitsKHR"                      alias="VkFenceImportFlagBits"/>
        <type name="VkSurfaceCounterFlagBitsEXT" category="enum"/>
        <type name="VkDisplayPowerStateEXT" category="enum"/>
        <type name="VkDeviceEventTypeEXT" category="enum"/>
        <type name="VkDisplayEventTypeEXT" category="enum"/>
        <type name="VkPeerMemoryFeatureFlagBits" category="enum"/>
        <type category="enum" name="VkPeerMemoryFeatureFlagBitsKHR"                alias="VkPeerMemoryFeatureFlagBits"/>
        <type name="VkMemoryAllocateFlagBits" category="enum"/>
        <type category="enum" name="VkMemoryAllocateFlagBitsKHR"                   alias="VkMemoryAllocateFlagBits"/>
        <type name="VkDeviceGroupPresentModeFlagBitsKHR" category="enum"/>
        <type name="VkSwapchainCreateFlagBitsKHR" category="enum"/>
        <type name="VkSubgroupFeatureFlagBits" category="enum"/>
        <type name="VkTessellationDomainOrigin" category="enum"/>
        <type category="enum" name="VkTessellationDomainOriginKHR"                 alias="VkTessellationDomainOrigin"/>
        <type name="VkSamplerYcbcrModelConversion" category="enum"/>
        <type category="enum" name="VkSamplerYcbcrModelConversionKHR"              alias="VkSamplerYcbcrModelConversion"/>
        <type name="VkSamplerYcbcrRange" category="enum"/>
        <type category="enum" name="VkSamplerYcbcrRangeKHR"                        alias="VkSamplerYcbcrRange"/>
        <type name="VkChromaLocation" category="enum"/>
        <type category="enum" name="VkChromaLocationKHR"                           alias="VkChromaLocation"/>
        <type name="VkSamplerReductionMode" category="enum"/>
        <type category="enum" name="VkSamplerReductionModeEXT"                     alias="VkSamplerReductionMode"/>
        <type name="VkBlendOverlapEXT" category="enum"/>
        <type name="VkDebugUtilsMessageSeverityFlagBitsEXT" category="enum"/>
        <type name="VkDebugUtilsMessageTypeFlagBitsEXT" category="enum"/>
        <type name="VkFullScreenExclusiveEXT" category="enum"/>
        <type name="VkShaderFloatControlsIndependence" category="enum"/>
        <type category="enum" name="VkShaderFloatControlsIndependenceKHR"          alias="VkShaderFloatControlsIndependence"/>
        <type name="VkSwapchainImageUsageFlagBitsANDROID" category="enum"/>
        <type name="VkFragmentShadingRateCombinerOpKHR" category="enum"/>
        <type name="VkSubmitFlagBits" category="enum"/>
        <type category="enum" name="VkSubmitFlagBitsKHR"                           alias="VkSubmitFlagBits"/>
        <type name="VkGraphicsPipelineLibraryFlagBitsEXT" category="enum"/>
        <type name="VkOpticalFlowGridSizeFlagBitsNV" category="enum"/>
        <type name="VkOpticalFlowUsageFlagBitsNV" category="enum"/>
        <type name="VkOpticalFlowPerformanceLevelNV" category="enum"/>
        <type name="VkOpticalFlowSessionBindingPointNV" category="enum"/>
        <type name="VkOpticalFlowSessionCreateFlagBitsNV" category="enum"/>
        <type name="VkOpticalFlowExecuteFlagBitsNV" category="enum"/>
        <type name="VkDeviceFaultAddressTypeEXT" category="enum"/>
        <type name="VkPresentScalingFlagBitsEXT" category="enum"/>
        <type name="VkPresentGravityFlagBitsEXT" category="enum"/>
        <type name="VkLayerSettingTypeEXT" category="enum"/>
        <type name="VkLatencyMarkerNV" category="enum"/>
        <type name="VkOutOfBandQueueTypeNV" category="enum"/>
        <type name="VkPhysicalDeviceSchedulingControlsFlagBitsARM" category="enum"/>
        <type name="VkMemoryUnmapFlagBits" category="enum"/>
        <type category="enum" name="VkMemoryUnmapFlagBitsKHR"                      alias="VkMemoryUnmapFlagBits"/>
        <type name="VkWaylandSurfaceCreateFlagBitsKHR" category="enum"/>

            <comment>Enumerated types in the header, but not used by the API</comment>
        <type name="VkVendorId" category="enum"/>
        <type name="VkDriverId" category="enum"/>
        <type category="enum" name="VkDriverIdKHR"                                 alias="VkDriverId"/>
        <type name="VkShadingRatePaletteEntryNV" category="enum"/>
        <type name="VkCoarseSampleOrderTypeNV" category="enum"/>
        <type name="VkPipelineExecutableStatisticFormatKHR" category="enum"/>

            <comment>Video Core extensions</comment>
        <type name="VkVideoCodecOperationFlagBitsKHR" category="enum"/>
        <type name="VkVideoChromaSubsamplingFlagBitsKHR" category="enum"/>
        <type name="VkVideoComponentBitDepthFlagBitsKHR" category="enum"/>
        <type name="VkVideoCapabilityFlagBitsKHR" category="enum"/>
        <type name="VkVideoSessionCreateFlagBitsKHR" category="enum"/>
        <type name="VkVideoSessionParametersCreateFlagBitsKHR" category="enum"/>
        <type name="VkVideoCodingControlFlagBitsKHR" category="enum"/>
        <type name="VkQueryResultStatusKHR" category="enum"/>

            <comment>Video Decode extensions</comment>
        <type name="VkVideoDecodeUsageFlagBitsKHR" category="enum"/>
        <type name="VkVideoDecodeCapabilityFlagBitsKHR" category="enum"/>

            <comment>Video H.264 Decode extensions</comment>
        <type name="VkVideoDecodeH264PictureLayoutFlagBitsKHR" category="enum"/>

            <comment>Video H.265 Decode extensions</comment>

            <comment>Video Encode extensions</comment>
        <type name="VkVideoEncodeFlagBitsKHR" category="enum"/>
        <type name="VkVideoEncodeUsageFlagBitsKHR" category="enum"/>
        <type name="VkVideoEncodeContentFlagBitsKHR" category="enum"/>
        <type name="VkVideoEncodeTuningModeKHR" category="enum"/>
        <type name="VkVideoEncodeCapabilityFlagBitsKHR" category="enum"/>
        <type name="VkVideoEncodeFeedbackFlagBitsKHR" category="enum"/>
        <type name="VkVideoEncodeRateControlModeFlagBitsKHR" category="enum"/>

           <comment>Video H.264 Encode extensions</comment>
        <type name="VkVideoEncodeH264CapabilityFlagBitsKHR"             category="enum"/>
        <type name="VkVideoEncodeH264StdFlagBitsKHR"                    category="enum"/>
        <type name="VkVideoEncodeH264RateControlFlagBitsKHR"            category="enum"/>

           <comment>Video H.265 Encode extensions</comment>
        <type name="VkVideoEncodeH265CapabilityFlagBitsKHR"             category="enum"/>
        <type name="VkVideoEncodeH265StdFlagBitsKHR"                    category="enum"/>
        <type name="VkVideoEncodeH265RateControlFlagBitsKHR"            category="enum"/>
        <type name="VkVideoEncodeH265CtbSizeFlagBitsKHR"                category="enum"/>
        <type name="VkVideoEncodeH265TransformBlockSizeFlagBitsKHR"     category="enum"/>

           <comment>Video AV1 Encode extensions</comment>
        <type name="VkVideoEncodeAV1CapabilityFlagBitsKHR"              category="enum"/>
        <type name="VkVideoEncodeAV1StdFlagBitsKHR"                     category="enum"/>
        <type name="VkVideoEncodeAV1RateControlFlagBitsKHR"             category="enum"/>
        <type name="VkVideoEncodeAV1SuperblockSizeFlagBitsKHR"          category="enum"/>
        <type name="VkVideoEncodeAV1PredictionModeKHR"                  category="enum"/>
        <type name="VkVideoEncodeAV1RateControlGroupKHR"                category="enum"/>

           <comment>VK_KHR_maintenance8</comment>
        <type name="VkAccessFlagBits3KHR" category="enum"/>

        <comment>The PFN_vk*Function types are used by VkAllocationCallbacks below</comment>
        <type category="funcpointer">typedef void (VKAPI_PTR *<name>PFN_vkInternalAllocationNotification</name>)(
    <type>void</type>*                                       pUserData,
    <type>size_t</type>                                      size,
    <type>VkInternalAllocationType</type>                    allocationType,
    <type>VkSystemAllocationScope</type>                     allocationScope);</type>
        <type category="funcpointer">typedef void (VKAPI_PTR *<name>PFN_vkInternalFreeNotification</name>)(
    <type>void</type>*                                       pUserData,
    <type>size_t</type>                                      size,
    <type>VkInternalAllocationType</type>                    allocationType,
    <type>VkSystemAllocationScope</type>                     allocationScope);</type>
        <type category="funcpointer">typedef void* (VKAPI_PTR *<name>PFN_vkReallocationFunction</name>)(
    <type>void</type>*                                       pUserData,
    <type>void</type>*                                       pOriginal,
    <type>size_t</type>                                      size,
    <type>size_t</type>                                      alignment,
    <type>VkSystemAllocationScope</type>                     allocationScope);</type>
        <type category="funcpointer">typedef void* (VKAPI_PTR *<name>PFN_vkAllocationFunction</name>)(
    <type>void</type>*                                       pUserData,
    <type>size_t</type>                                      size,
    <type>size_t</type>                                      alignment,
    <type>VkSystemAllocationScope</type>                     allocationScope);</type>
        <type category="funcpointer">typedef void (VKAPI_PTR *<name>PFN_vkFreeFunction</name>)(
    <type>void</type>*                                       pUserData,
    <type>void</type>*                                       pMemory);</type>

            <comment>The PFN_vkVoidFunction type are used by VkGet*ProcAddr below</comment>
        <type category="funcpointer">typedef void (VKAPI_PTR *<name>PFN_vkVoidFunction</name>)(void);</type>

            <comment>The PFN_vkDebugReportCallbackEXT type are used by the DEBUG_REPORT extension</comment>
        <type category="funcpointer">typedef VkBool32 (VKAPI_PTR *<name>PFN_vkDebugReportCallbackEXT</name>)(
    <type>VkDebugReportFlagsEXT</type>                       flags,
    <type>VkDebugReportObjectTypeEXT</type>                  objectType,
    <type>uint64_t</type>                                    object,
    <type>size_t</type>                                      location,
    <type>int32_t</type>                                     messageCode,
    const <type>char</type>*                                 pLayerPrefix,
    const <type>char</type>*                                 pMessage,
    <type>void</type>*                                       pUserData);</type>

            <comment>The PFN_vkDebugUtilsMessengerCallbackEXT type are used by the VK_EXT_debug_utils extension</comment>
        <type category="funcpointer" requires="VkDebugUtilsMessengerCallbackDataEXT">typedef VkBool32 (VKAPI_PTR *<name>PFN_vkDebugUtilsMessengerCallbackEXT</name>)(
    <type>VkDebugUtilsMessageSeverityFlagBitsEXT</type>           messageSeverity,
    <type>VkDebugUtilsMessageTypeFlagsEXT</type>                  messageTypes,
    const <type>VkDebugUtilsMessengerCallbackDataEXT</type>*      pCallbackData,
    <type>void</type>*                                            pUserData);</type>

            <comment>The PFN_vkFaultCallbackFunction type is used by VKSC_VERSION_1_0</comment>
        <type category="funcpointer">typedef void (VKAPI_PTR *<name>PFN_vkFaultCallbackFunction</name>)(
    <type>VkBool32</type>                                    unrecordedFaults,
    <type>uint32_t</type>                                    faultCount,
    const <type>VkFaultData</type>*                          pFaults);</type>

            <comment>The PFN_vkDeviceMemoryReportCallbackEXT type is used by the VK_EXT_device_memory_report extension</comment>
        <type category="funcpointer" requires="VkDeviceMemoryReportCallbackDataEXT">typedef void (VKAPI_PTR *<name>PFN_vkDeviceMemoryReportCallbackEXT</name>)(
    const <type>VkDeviceMemoryReportCallbackDataEXT</type>*  pCallbackData,
    <type>void</type>*                                       pUserData);</type>

            <comment>The PFN_vkGetInstanceProcAddrLUNARG type is used by the
                     VkDirectDriverLoadingInfoLUNARG structure.
                     We cannot introduce an explicit dependency on the
                     equivalent PFN_vkGetInstanceProcAddr type, even though
                     it is implicitly generated in the C header, because
                     that results in multiple definitions.</comment>
        <type category="funcpointer" requires="VkInstance">typedef PFN_vkVoidFunction (VKAPI_PTR *<name>PFN_vkGetInstanceProcAddrLUNARG</name>)(
    <type>VkInstance</type> instance, const <type>char</type>* pName);</type>

            <comment>Struct types</comment>
        <type category="struct" name="VkBaseOutStructure">
            <member><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">struct <type>VkBaseOutStructure</type>* <name>pNext</name></member>
        </type>
        <type category="struct" name="VkBaseInStructure">
            <member><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const struct <type>VkBaseInStructure</type>* <name>pNext</name></member>
        </type>
        <type category="struct" name="VkOffset2D">
            <member><type>int32_t</type>        <name>x</name></member>
            <member><type>int32_t</type>        <name>y</name></member>
        </type>
        <type category="struct" name="VkOffset3D">
            <member><type>int32_t</type>        <name>x</name></member>
            <member><type>int32_t</type>        <name>y</name></member>
            <member><type>int32_t</type>        <name>z</name></member>
        </type>
        <type category="struct" name="VkExtent2D">
            <member><type>uint32_t</type>        <name>width</name></member>
            <member><type>uint32_t</type>        <name>height</name></member>
        </type>
        <type category="struct" name="VkExtent3D">
            <member><type>uint32_t</type>        <name>width</name></member>
            <member><type>uint32_t</type>        <name>height</name></member>
            <member><type>uint32_t</type>        <name>depth</name></member>
        </type>
        <type category="struct" name="VkViewport">
            <member noautovalidity="true"><type>float</type> <name>x</name></member>
            <member noautovalidity="true"><type>float</type> <name>y</name></member>
            <member noautovalidity="true"><type>float</type> <name>width</name></member>
            <member noautovalidity="true"><type>float</type> <name>height</name></member>
            <member><type>float</type>                       <name>minDepth</name></member>
            <member><type>float</type>                       <name>maxDepth</name></member>
        </type>
        <type category="struct" name="VkRect2D">
            <member><type>VkOffset2D</type>     <name>offset</name></member>
            <member><type>VkExtent2D</type>     <name>extent</name></member>
        </type>
        <type category="struct" name="VkClearRect">
            <member><type>VkRect2D</type>       <name>rect</name></member>
            <member><type>uint32_t</type>       <name>baseArrayLayer</name></member>
            <member><type>uint32_t</type>       <name>layerCount</name></member>
        </type>
        <type category="struct" name="VkComponentMapping">
            <member><type>VkComponentSwizzle</type> <name>r</name></member>
            <member><type>VkComponentSwizzle</type> <name>g</name></member>
            <member><type>VkComponentSwizzle</type> <name>b</name></member>
            <member><type>VkComponentSwizzle</type> <name>a</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceProperties" returnedonly="true">
            <member limittype="noauto"><type>uint32_t</type>       <name>apiVersion</name></member>
            <member limittype="noauto"><type>uint32_t</type>       <name>driverVersion</name></member>
            <member limittype="noauto"><type>uint32_t</type>       <name>vendorID</name></member>
            <member limittype="noauto"><type>uint32_t</type>       <name>deviceID</name></member>
            <member limittype="noauto"><type>VkPhysicalDeviceType</type> <name>deviceType</name></member>
            <member limittype="noauto" len="null-terminated"><type>char</type>           <name>deviceName</name>[<enum>VK_MAX_PHYSICAL_DEVICE_NAME_SIZE</enum>]</member>
            <member limittype="noauto"><type>uint8_t</type>        <name>pipelineCacheUUID</name>[<enum>VK_UUID_SIZE</enum>]</member>
            <member limittype="struct"><type>VkPhysicalDeviceLimits</type> <name>limits</name></member>
            <member limittype="struct"><type>VkPhysicalDeviceSparseProperties</type> <name>sparseProperties</name></member>
        </type>
        <type category="struct" name="VkExtensionProperties" returnedonly="true">
            <member len="null-terminated"><type>char</type> <name>extensionName</name>[<enum>VK_MAX_EXTENSION_NAME_SIZE</enum>]<comment>extension name</comment></member>
            <member><type>uint32_t</type>                   <name>specVersion</name><comment>version of the extension specification implemented</comment></member>
        </type>
        <type category="struct" name="VkLayerProperties" returnedonly="true">
            <member len="null-terminated"><type>char</type> <name>layerName</name>[<enum>VK_MAX_EXTENSION_NAME_SIZE</enum>]<comment>layer name</comment></member>
            <member><type>uint32_t</type>                   <name>specVersion</name><comment>version of the layer specification implemented</comment></member>
            <member><type>uint32_t</type>                   <name>implementationVersion</name><comment>build or release version of the layer's library</comment></member>
            <member len="null-terminated"><type>char</type> <name>description</name>[<enum>VK_MAX_DESCRIPTION_SIZE</enum>]<comment>Free-form description of the layer</comment></member>
        </type>
        <type category="struct" name="VkApplicationInfo">
            <member values="VK_STRUCTURE_TYPE_APPLICATION_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*     <name>pNext</name></member>
            <member optional="true" len="null-terminated">const <type>char</type>*     <name>pApplicationName</name></member>
            <member><type>uint32_t</type>        <name>applicationVersion</name></member>
            <member optional="true" len="null-terminated">const <type>char</type>*     <name>pEngineName</name></member>
            <member><type>uint32_t</type>        <name>engineVersion</name></member>
            <member><type>uint32_t</type>        <name>apiVersion</name></member>
        </type>
        <type category="struct" name="VkAllocationCallbacks">
            <member optional="true"><type>void</type>*           <name>pUserData</name></member>
            <member noautovalidity="true"><type>PFN_vkAllocationFunction</type>   <name>pfnAllocation</name></member>
            <member noautovalidity="true"><type>PFN_vkReallocationFunction</type> <name>pfnReallocation</name></member>
            <member noautovalidity="true"><type>PFN_vkFreeFunction</type>    <name>pfnFree</name></member>
            <member optional="true" noautovalidity="true"><type>PFN_vkInternalAllocationNotification</type> <name>pfnInternalAllocation</name></member>
            <member optional="true" noautovalidity="true"><type>PFN_vkInternalFreeNotification</type> <name>pfnInternalFree</name></member>
        </type>
        <type category="struct" name="VkDeviceQueueCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*     <name>pNext</name></member>
            <member optional="true"><type>VkDeviceQueueCreateFlags</type>    <name>flags</name></member>
            <member><type>uint32_t</type>        <name>queueFamilyIndex</name></member>
            <member><type>uint32_t</type>        <name>queueCount</name></member>
            <member len="queueCount">const <type>float</type>*    <name>pQueuePriorities</name></member>
        </type>
        <type category="struct" name="VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*     <name>pNext</name></member>
            <member optional="true"><type>VkDeviceCreateFlags</type>    <name>flags</name></member>
            <member><type>uint32_t</type>        <name>queueCreateInfoCount</name></member>
            <member len="queueCreateInfoCount">const <type>VkDeviceQueueCreateInfo</type>* <name>pQueueCreateInfos</name></member>
            <member optional="true" deprecated="ignored"><type>uint32_t</type>               <name>enabledLayerCount</name></member>
            <member len="enabledLayerCount,null-terminated" deprecated="ignored">const <type>char</type>* const*      <name>ppEnabledLayerNames</name><comment>Ordered list of layer names to be enabled</comment></member>
            <member optional="true"><type>uint32_t</type>               <name>enabledExtensionCount</name></member>
            <member len="enabledExtensionCount,null-terminated">const <type>char</type>* const*      <name>ppEnabledExtensionNames</name></member>
            <member optional="true">const <type>VkPhysicalDeviceFeatures</type>* <name>pEnabledFeatures</name></member>
        </type>
        <type category="struct" name="VkInstanceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*     <name>pNext</name></member>
            <member optional="true"><type>VkInstanceCreateFlags</type>  <name>flags</name></member>
            <member optional="true">const <type>VkApplicationInfo</type>* <name>pApplicationInfo</name></member>
            <member optional="true"><type>uint32_t</type>               <name>enabledLayerCount</name></member>
            <member len="enabledLayerCount,null-terminated">const <type>char</type>* const*      <name>ppEnabledLayerNames</name><comment>Ordered list of layer names to be enabled</comment></member>
            <member optional="true"><type>uint32_t</type>               <name>enabledExtensionCount</name></member>
            <member len="enabledExtensionCount,null-terminated">const <type>char</type>* const*      <name>ppEnabledExtensionNames</name><comment>Extension names to be enabled</comment></member>
        </type>
        <type category="struct" name="VkQueueFamilyProperties" returnedonly="true">
            <member optional="true" limittype="bitmask"><type>VkQueueFlags</type>           <name>queueFlags</name><comment>Queue flags</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>queueCount</name></member>
            <member limittype="bits"><type>uint32_t</type>               <name>timestampValidBits</name></member>
            <member limittype="min,mul"><type>VkExtent3D</type>             <name>minImageTransferGranularity</name><comment>Minimum alignment requirement for image transfers</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMemoryProperties" returnedonly="true">
            <member><type>uint32_t</type>                                     <name>memoryTypeCount</name></member>
            <member len="memoryTypeCount"><type>VkMemoryType</type>           <name>memoryTypes</name>[<enum>VK_MAX_MEMORY_TYPES</enum>]</member>
            <member><type>uint32_t</type>                                     <name>memoryHeapCount</name></member>
            <member len="memoryHeapCount"><type>VkMemoryHeap</type>           <name>memoryHeaps</name>[<enum>VK_MAX_MEMORY_HEAPS</enum>]</member>
        </type>
        <type category="struct" name="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkDeviceSize</type>           <name>allocationSize</name><comment>Size of memory allocation</comment></member>
            <member><type>uint32_t</type>               <name>memoryTypeIndex</name><comment>Index of the of the memory type to allocate from</comment></member>
        </type>
        <type category="struct" name="VkMemoryRequirements" returnedonly="true">
            <member><type>VkDeviceSize</type>           <name>size</name><comment>Specified in bytes</comment></member>
            <member><type>VkDeviceSize</type>           <name>alignment</name><comment>Specified in bytes</comment></member>
            <member><type>uint32_t</type>               <name>memoryTypeBits</name><comment>Bitmask of the allowed memory type indices into memoryTypes[] for this object</comment></member>
        </type>
        <type category="struct" name="VkSparseImageFormatProperties" returnedonly="true">
            <member limittype="bitmask" optional="true"><type>VkImageAspectFlags</type>       <name>aspectMask</name></member>
            <member limittype="min,mul"><type>VkExtent3D</type>                                <name>imageGranularity</name></member>
            <member limittype="bitmask" optional="true"><type>VkSparseImageFormatFlags</type> <name>flags</name></member>
        </type>
        <type category="struct" name="VkSparseImageMemoryRequirements" returnedonly="true">
            <member><type>VkSparseImageFormatProperties</type> <name>formatProperties</name></member>
            <member><type>uint32_t</type>               <name>imageMipTailFirstLod</name></member>
            <member><type>VkDeviceSize</type>           <name>imageMipTailSize</name><comment>Specified in bytes, must be a multiple of sparse block size in bytes / alignment</comment></member>
            <member><type>VkDeviceSize</type>           <name>imageMipTailOffset</name><comment>Specified in bytes, must be a multiple of sparse block size in bytes / alignment</comment></member>
            <member><type>VkDeviceSize</type>           <name>imageMipTailStride</name><comment>Specified in bytes, must be a multiple of sparse block size in bytes / alignment</comment></member>
        </type>
        <type category="struct" name="VkMemoryType" returnedonly="true">
            <member optional="true"><type>VkMemoryPropertyFlags</type>  <name>propertyFlags</name><comment>Memory properties of this memory type</comment></member>
            <member><type>uint32_t</type>               <name>heapIndex</name><comment>Index of the memory heap allocations of this memory type are taken from</comment></member>
        </type>
        <type category="struct" name="VkMemoryHeap" returnedonly="true">
            <member><type>VkDeviceSize</type>           <name>size</name><comment>Available memory in the heap</comment></member>
            <member optional="true"><type>VkMemoryHeapFlags</type>      <name>flags</name><comment>Flags for the heap</comment></member>
        </type>
        <type category="struct" name="VkMappedMemoryRange">
            <member values="VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkDeviceMemory</type>         <name>memory</name><comment>Mapped memory object</comment></member>
            <member><type>VkDeviceSize</type>           <name>offset</name><comment>Offset within the memory object where the range starts</comment></member>
            <member><type>VkDeviceSize</type>           <name>size</name><comment>Size of the range within the memory object</comment></member>
        </type>
        <type category="struct" name="VkFormatProperties" returnedonly="true">
            <member optional="true" limittype="bitmask"><type>VkFormatFeatureFlags</type>   <name>linearTilingFeatures</name><comment>Format features in case of linear tiling</comment></member>
            <member optional="true" limittype="bitmask"><type>VkFormatFeatureFlags</type>   <name>optimalTilingFeatures</name><comment>Format features in case of optimal tiling</comment></member>
            <member optional="true" limittype="bitmask"><type>VkFormatFeatureFlags</type>   <name>bufferFeatures</name><comment>Format features supported by buffers</comment></member>
        </type>
        <type category="struct" name="VkImageFormatProperties" returnedonly="true">
            <member><type>VkExtent3D</type>             <name>maxExtent</name><comment>max image dimensions for this resource type</comment></member>
            <member><type>uint32_t</type>               <name>maxMipLevels</name><comment>max number of mipmap levels for this resource type</comment></member>
            <member><type>uint32_t</type>               <name>maxArrayLayers</name><comment>max array size for this resource type</comment></member>
            <member optional="true"><type>VkSampleCountFlags</type>     <name>sampleCounts</name><comment>supported sample counts for this resource type</comment></member>
            <member><type>VkDeviceSize</type>           <name>maxResourceSize</name><comment>max size (in bytes) of this resource type</comment></member>
        </type>
        <type category="struct" name="VkDescriptorBufferInfo">
            <member optional="true"><type>VkBuffer</type>               <name>buffer</name><comment>Buffer used for this descriptor slot.</comment></member>
            <member><type>VkDeviceSize</type>           <name>offset</name><comment>Base offset from buffer start in bytes to update in the descriptor set.</comment></member>
            <member><type>VkDeviceSize</type>           <name>range</name><comment>Size in bytes of the buffer resource for this descriptor update.</comment></member>
        </type>
        <type category="struct" name="VkDescriptorImageInfo">
            <member noautovalidity="true"><type>VkSampler</type>       <name>sampler</name><comment>Sampler to write to the descriptor in case it is a SAMPLER or COMBINED_IMAGE_SAMPLER descriptor. Ignored otherwise.</comment></member>
            <member noautovalidity="true"><type>VkImageView</type>     <name>imageView</name><comment>Image view to write to the descriptor in case it is a SAMPLED_IMAGE, STORAGE_IMAGE, COMBINED_IMAGE_SAMPLER, or INPUT_ATTACHMENT descriptor. Ignored otherwise.</comment></member>
            <member noautovalidity="true"><type>VkImageLayout</type>   <name>imageLayout</name><comment>Layout the image is expected to be in when accessed using this descriptor (only used if imageView is not VK_NULL_HANDLE).</comment></member>
        </type>
        <type category="struct" name="VkWriteDescriptorSet">
            <member values="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member noautovalidity="true"><type>VkDescriptorSet</type>        <name>dstSet</name><comment>Destination descriptor set</comment></member>
            <member><type>uint32_t</type>               <name>dstBinding</name><comment>Binding within the destination descriptor set to write</comment></member>
            <member><type>uint32_t</type>               <name>dstArrayElement</name><comment>Array element within the destination binding to write</comment></member>
            <member><type>uint32_t</type>               <name>descriptorCount</name><comment>Number of descriptors to write (determines the size of the array pointed by pDescriptors)</comment></member>
            <member><type>VkDescriptorType</type>       <name>descriptorType</name><comment>Descriptor type to write (determines which members of the array pointed by pDescriptors are going to be used)</comment></member>
            <member noautovalidity="true" len="descriptorCount">const <type>VkDescriptorImageInfo</type>* <name>pImageInfo</name><comment>Sampler, image view, and layout for SAMPLER, COMBINED_IMAGE_SAMPLER, {SAMPLED,STORAGE}_IMAGE, and INPUT_ATTACHMENT descriptor types.</comment></member>
            <member noautovalidity="true" len="descriptorCount">const <type>VkDescriptorBufferInfo</type>* <name>pBufferInfo</name><comment>Raw buffer, size, and offset for {UNIFORM,STORAGE}_BUFFER[_DYNAMIC] descriptor types.</comment></member>
            <member noautovalidity="true" len="descriptorCount">const <type>VkBufferView</type>*    <name>pTexelBufferView</name><comment>Buffer view to write to the descriptor for {UNIFORM,STORAGE}_TEXEL_BUFFER descriptor types.</comment></member>
        </type>
        <type category="struct" name="VkCopyDescriptorSet">
            <member values="VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkDescriptorSet</type>        <name>srcSet</name><comment>Source descriptor set</comment></member>
            <member><type>uint32_t</type>               <name>srcBinding</name><comment>Binding within the source descriptor set to copy from</comment></member>
            <member><type>uint32_t</type>               <name>srcArrayElement</name><comment>Array element within the source binding to copy from</comment></member>
            <member><type>VkDescriptorSet</type>        <name>dstSet</name><comment>Destination descriptor set</comment></member>
            <member><type>uint32_t</type>               <name>dstBinding</name><comment>Binding within the destination descriptor set to copy to</comment></member>
            <member><type>uint32_t</type>               <name>dstArrayElement</name><comment>Array element within the destination binding to copy to</comment></member>
            <member><type>uint32_t</type>               <name>descriptorCount</name><comment>Number of descriptors to write (determines the size of the array pointed by pDescriptors)</comment></member>
        </type>
        <type category="struct" name="VkBufferUsageFlags2CreateInfo" structextends="VkBufferViewCreateInfo,VkBufferCreateInfo,VkPhysicalDeviceExternalBufferInfo,VkDescriptorBufferBindingInfoEXT">
            <member values="VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*    <name>pNext</name></member>
            <member><type>VkBufferUsageFlags2</type>            <name>usage</name></member>
        </type>
        <type category="struct" name="VkBufferUsageFlags2CreateInfoKHR" alias="VkBufferUsageFlags2CreateInfo"/>
        <type category="struct" name="VkBufferCreateInfo">
            <member values="VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkBufferCreateFlags</type>    <name>flags</name><comment>Buffer creation flags</comment></member>
            <member><type>VkDeviceSize</type>           <name>size</name><comment>Specified in bytes</comment></member>
            <member noautovalidity="true"><type>VkBufferUsageFlags</type>     <name>usage</name><comment>Buffer usage flags</comment></member>
            <member><type>VkSharingMode</type>          <name>sharingMode</name></member>
            <member optional="true"><type>uint32_t</type>               <name>queueFamilyIndexCount</name></member>
            <member noautovalidity="true" len="queueFamilyIndexCount">const <type>uint32_t</type>*        <name>pQueueFamilyIndices</name></member>
        </type>
        <type category="struct" name="VkBufferViewCreateInfo">
            <member values="VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkBufferViewCreateFlags</type> <name>flags</name></member>
            <member><type>VkBuffer</type>               <name>buffer</name></member>
            <member><type>VkFormat</type>               <name>format</name><comment>Optionally specifies format of elements</comment></member>
            <member><type>VkDeviceSize</type>           <name>offset</name><comment>Specified in bytes</comment></member>
            <member><type>VkDeviceSize</type>           <name>range</name><comment>View size specified in bytes</comment></member>
        </type>
        <type category="struct" name="VkImageSubresource">
            <member><type>VkImageAspectFlags</type>     <name>aspectMask</name></member>
            <member><type>uint32_t</type>               <name>mipLevel</name></member>
            <member><type>uint32_t</type>               <name>arrayLayer</name></member>
        </type>
        <type category="struct" name="VkImageSubresourceLayers">
            <member><type>VkImageAspectFlags</type>     <name>aspectMask</name></member>
            <member><type>uint32_t</type>               <name>mipLevel</name></member>
            <member><type>uint32_t</type>               <name>baseArrayLayer</name></member>
            <member><type>uint32_t</type>               <name>layerCount</name></member>
        </type>
        <type category="struct" name="VkImageSubresourceRange">
            <member><type>VkImageAspectFlags</type>     <name>aspectMask</name></member>
            <member><type>uint32_t</type>               <name>baseMipLevel</name></member>
            <member><type>uint32_t</type>               <name>levelCount</name></member>
            <member><type>uint32_t</type>               <name>baseArrayLayer</name></member>
            <member><type>uint32_t</type>               <name>layerCount</name></member>
        </type>
        <type category="struct" name="VkMemoryBarrier">
            <member values="VK_STRUCTURE_TYPE_MEMORY_BARRIER"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkAccessFlags</type>          <name>srcAccessMask</name><comment>Memory accesses from the source of the dependency to synchronize</comment></member>
            <member optional="true"><type>VkAccessFlags</type>          <name>dstAccessMask</name><comment>Memory accesses from the destination of the dependency to synchronize</comment></member>
        </type>
        <type category="struct" name="VkBufferMemoryBarrier">
            <member values="VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member noautovalidity="true"><type>VkAccessFlags</type>          <name>srcAccessMask</name><comment>Memory accesses from the source of the dependency to synchronize</comment></member>
            <member noautovalidity="true"><type>VkAccessFlags</type>          <name>dstAccessMask</name><comment>Memory accesses from the destination of the dependency to synchronize</comment></member>
            <member><type>uint32_t</type>               <name>srcQueueFamilyIndex</name><comment>Queue family to transition ownership from</comment></member>
            <member><type>uint32_t</type>               <name>dstQueueFamilyIndex</name><comment>Queue family to transition ownership to</comment></member>
            <member><type>VkBuffer</type>               <name>buffer</name><comment>Buffer to sync</comment></member>
            <member><type>VkDeviceSize</type>           <name>offset</name><comment>Offset within the buffer to sync</comment></member>
            <member><type>VkDeviceSize</type>           <name>size</name><comment>Amount of bytes to sync</comment></member>
        </type>
        <type category="struct" name="VkImageMemoryBarrier">
            <member values="VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member noautovalidity="true"><type>VkAccessFlags</type>          <name>srcAccessMask</name><comment>Memory accesses from the source of the dependency to synchronize</comment></member>
            <member noautovalidity="true"><type>VkAccessFlags</type>          <name>dstAccessMask</name><comment>Memory accesses from the destination of the dependency to synchronize</comment></member>
            <member><type>VkImageLayout</type>          <name>oldLayout</name><comment>Current layout of the image</comment></member>
            <member><type>VkImageLayout</type>          <name>newLayout</name><comment>New layout to transition the image to</comment></member>
            <member><type>uint32_t</type>               <name>srcQueueFamilyIndex</name><comment>Queue family to transition ownership from</comment></member>
            <member><type>uint32_t</type>               <name>dstQueueFamilyIndex</name><comment>Queue family to transition ownership to</comment></member>
            <member><type>VkImage</type>                <name>image</name><comment>Image to sync</comment></member>
            <member><type>VkImageSubresourceRange</type> <name>subresourceRange</name><comment>Subresource range to sync</comment></member>
        </type>
        <type category="struct" name="VkImageCreateInfo">
            <member values="VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkImageCreateFlags</type>     <name>flags</name><comment>Image creation flags</comment></member>
            <member><type>VkImageType</type>            <name>imageType</name></member>
            <member><type>VkFormat</type>               <name>format</name></member>
            <member><type>VkExtent3D</type>             <name>extent</name></member>
            <member><type>uint32_t</type>               <name>mipLevels</name></member>
            <member><type>uint32_t</type>               <name>arrayLayers</name></member>
            <member><type>VkSampleCountFlagBits</type>  <name>samples</name></member>
            <member><type>VkImageTiling</type>          <name>tiling</name></member>
            <member><type>VkImageUsageFlags</type>      <name>usage</name><comment>Image usage flags</comment></member>
            <member><type>VkSharingMode</type>          <name>sharingMode</name><comment>Cross-queue-family sharing mode</comment></member>
            <member optional="true"><type>uint32_t</type>               <name>queueFamilyIndexCount</name><comment>Number of queue families to share across</comment></member>
            <member noautovalidity="true" len="queueFamilyIndexCount">const <type>uint32_t</type>*        <name>pQueueFamilyIndices</name><comment>Array of queue family indices to share across</comment></member>
            <member><type>VkImageLayout</type>          <name>initialLayout</name><comment>Initial image layout for all subresources</comment></member>
        </type>
        <type category="struct" name="VkSubresourceLayout">
            <member><type>VkDeviceSize</type>           <name>offset</name><comment>Specified in bytes</comment></member>
            <member><type>VkDeviceSize</type>           <name>size</name><comment>Specified in bytes</comment></member>
            <member><type>VkDeviceSize</type>           <name>rowPitch</name><comment>Specified in bytes</comment></member>
            <member><type>VkDeviceSize</type>           <name>arrayPitch</name><comment>Specified in bytes</comment></member>
            <member><type>VkDeviceSize</type>           <name>depthPitch</name><comment>Specified in bytes</comment></member>
        </type>
        <type category="struct" name="VkImageViewCreateInfo">
            <member values="VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkImageViewCreateFlags</type> <name>flags</name></member>
            <member><type>VkImage</type>                <name>image</name></member>
            <member><type>VkImageViewType</type>        <name>viewType</name></member>
            <member><type>VkFormat</type>               <name>format</name></member>
            <member><type>VkComponentMapping</type>     <name>components</name></member>
            <member><type>VkImageSubresourceRange</type> <name>subresourceRange</name></member>
        </type>
        <type category="struct" name="VkBufferCopy">
            <member><type>VkDeviceSize</type>                       <name>srcOffset</name><comment>Specified in bytes</comment></member>
            <member><type>VkDeviceSize</type>                       <name>dstOffset</name><comment>Specified in bytes</comment></member>
            <member noautovalidity="true"><type>VkDeviceSize</type> <name>size</name><comment>Specified in bytes</comment></member>
        </type>
        <type category="struct" name="VkSparseMemoryBind">
            <member><type>VkDeviceSize</type>           <name>resourceOffset</name><comment>Specified in bytes</comment></member>
            <member><type>VkDeviceSize</type>           <name>size</name><comment>Specified in bytes</comment></member>
            <member optional="true"><type>VkDeviceMemory</type>         <name>memory</name></member>
            <member><type>VkDeviceSize</type>           <name>memoryOffset</name><comment>Specified in bytes</comment></member>
            <member optional="true"><type>VkSparseMemoryBindFlags</type> <name>flags</name></member>
        </type>
        <type category="struct" name="VkSparseImageMemoryBind">
            <member><type>VkImageSubresource</type>     <name>subresource</name></member>
            <member><type>VkOffset3D</type>             <name>offset</name></member>
            <member><type>VkExtent3D</type>             <name>extent</name></member>
            <member optional="true"><type>VkDeviceMemory</type>         <name>memory</name></member>
            <member><type>VkDeviceSize</type>           <name>memoryOffset</name><comment>Specified in bytes</comment></member>
            <member optional="true"><type>VkSparseMemoryBindFlags</type> <name>flags</name></member>
        </type>
        <type category="struct" name="VkSparseBufferMemoryBindInfo">
            <member><type>VkBuffer</type> <name>buffer</name></member>
            <member><type>uint32_t</type>               <name>bindCount</name></member>
            <member len="bindCount">const <type>VkSparseMemoryBind</type>* <name>pBinds</name></member>
        </type>
        <type category="struct" name="VkSparseImageOpaqueMemoryBindInfo">
            <member><type>VkImage</type> <name>image</name></member>
            <member><type>uint32_t</type>               <name>bindCount</name></member>
            <member len="bindCount">const <type>VkSparseMemoryBind</type>* <name>pBinds</name></member>
        </type>
        <type category="struct" name="VkSparseImageMemoryBindInfo">
            <member><type>VkImage</type> <name>image</name></member>
            <member><type>uint32_t</type>               <name>bindCount</name></member>
            <member len="bindCount">const <type>VkSparseImageMemoryBind</type>* <name>pBinds</name></member>
        </type>
        <type category="struct" name="VkBindSparseInfo">
            <member values="VK_STRUCTURE_TYPE_BIND_SPARSE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>               <name>waitSemaphoreCount</name></member>
            <member len="waitSemaphoreCount">const <type>VkSemaphore</type>*     <name>pWaitSemaphores</name></member>
            <member optional="true"><type>uint32_t</type>               <name>bufferBindCount</name></member>
            <member len="bufferBindCount">const <type>VkSparseBufferMemoryBindInfo</type>* <name>pBufferBinds</name></member>
            <member optional="true"><type>uint32_t</type>               <name>imageOpaqueBindCount</name></member>
            <member len="imageOpaqueBindCount">const <type>VkSparseImageOpaqueMemoryBindInfo</type>* <name>pImageOpaqueBinds</name></member>
            <member optional="true"><type>uint32_t</type>               <name>imageBindCount</name></member>
            <member len="imageBindCount">const <type>VkSparseImageMemoryBindInfo</type>* <name>pImageBinds</name></member>
            <member optional="true"><type>uint32_t</type>               <name>signalSemaphoreCount</name></member>
            <member len="signalSemaphoreCount">const <type>VkSemaphore</type>*     <name>pSignalSemaphores</name></member>
        </type>
        <type category="struct" name="VkImageCopy">
            <member><type>VkImageSubresourceLayers</type> <name>srcSubresource</name></member>
            <member><type>VkOffset3D</type>             <name>srcOffset</name><comment>Specified in pixels for both compressed and uncompressed images</comment></member>
            <member><type>VkImageSubresourceLayers</type> <name>dstSubresource</name></member>
            <member><type>VkOffset3D</type>             <name>dstOffset</name><comment>Specified in pixels for both compressed and uncompressed images</comment></member>
            <member><type>VkExtent3D</type>             <name>extent</name><comment>Specified in pixels for both compressed and uncompressed images</comment></member>
        </type>
        <type category="struct" name="VkImageBlit">
            <member><type>VkImageSubresourceLayers</type> <name>srcSubresource</name></member>
            <member><type>VkOffset3D</type>             <name>srcOffsets</name>[2]<comment>Specified in pixels for both compressed and uncompressed images</comment></member>
            <member><type>VkImageSubresourceLayers</type> <name>dstSubresource</name></member>
            <member><type>VkOffset3D</type>             <name>dstOffsets</name>[2]<comment>Specified in pixels for both compressed and uncompressed images</comment></member>
        </type>
        <type category="struct" name="VkBufferImageCopy">
            <member><type>VkDeviceSize</type>           <name>bufferOffset</name><comment>Specified in bytes</comment></member>
            <member><type>uint32_t</type>               <name>bufferRowLength</name><comment>Specified in texels</comment></member>
            <member><type>uint32_t</type>               <name>bufferImageHeight</name></member>
            <member><type>VkImageSubresourceLayers</type> <name>imageSubresource</name></member>
            <member><type>VkOffset3D</type>             <name>imageOffset</name><comment>Specified in pixels for both compressed and uncompressed images</comment></member>
            <member><type>VkExtent3D</type>             <name>imageExtent</name><comment>Specified in pixels for both compressed and uncompressed images</comment></member>
        </type>
        <type category="struct" name="VkCopyMemoryIndirectCommandNV">
            <member><type>VkDeviceAddress</type>                <name>srcAddress</name></member>
            <member><type>VkDeviceAddress</type>                <name>dstAddress</name></member>
            <member><type>VkDeviceSize</type>                   <name>size</name><comment>Specified in bytes</comment></member>
        </type>
        <type category="struct" name="VkCopyMemoryToImageIndirectCommandNV">
            <member><type>VkDeviceAddress</type>                <name>srcAddress</name></member>
            <member><type>uint32_t</type>                       <name>bufferRowLength</name><comment>Specified in texels</comment></member>
            <member><type>uint32_t</type>                       <name>bufferImageHeight</name></member>
            <member><type>VkImageSubresourceLayers</type>       <name>imageSubresource</name></member>
            <member><type>VkOffset3D</type>                     <name>imageOffset</name><comment>Specified in pixels for both compressed and uncompressed images</comment></member>
            <member><type>VkExtent3D</type>                     <name>imageExtent</name><comment>Specified in pixels for both compressed and uncompressed images</comment></member>
        </type>
        <type category="struct" name="VkImageResolve">
            <member><type>VkImageSubresourceLayers</type> <name>srcSubresource</name></member>
            <member><type>VkOffset3D</type>             <name>srcOffset</name></member>
            <member><type>VkImageSubresourceLayers</type> <name>dstSubresource</name></member>
            <member><type>VkOffset3D</type>             <name>dstOffset</name></member>
            <member><type>VkExtent3D</type>             <name>extent</name></member>
        </type>
        <type category="struct" name="VkShaderModuleCreateInfo" structextends="VkPipelineShaderStageCreateInfo">
            <member values="VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member noautovalidity="true" optional="true">const <type>void</type>*            <name>pNext</name><comment>noautovalidity because this structure can be either an explicit parameter, or passed in a pNext chain</comment></member>
            <member optional="true"><type>VkShaderModuleCreateFlags</type> <name>flags</name></member>
            <member><type>size_t</type>                 <name>codeSize</name><comment>Specified in bytes</comment></member>
            <member len="latexmath:[\textrm{codeSize} \over 4]" altlen="codeSize / 4">const <type>uint32_t</type>*            <name>pCode</name><comment>Binary code of size codeSize</comment></member>
        </type>
        <type category="struct" name="VkDescriptorSetLayoutBinding">
            <member><type>uint32_t</type>               <name>binding</name><comment>Binding number for this entry</comment></member>
            <member><type>VkDescriptorType</type>       <name>descriptorType</name><comment>Type of the descriptors in this binding</comment></member>
            <member optional="true"><type>uint32_t</type> <name>descriptorCount</name><comment>Number of descriptors in this binding</comment></member>
            <member noautovalidity="true"><type>VkShaderStageFlags</type>     <name>stageFlags</name><comment>Shader stages this binding is visible to</comment></member>
            <member noautovalidity="true" optional="true" len="descriptorCount">const <type>VkSampler</type>*       <name>pImmutableSamplers</name><comment>Immutable samplers (used if descriptor type is SAMPLER or COMBINED_IMAGE_SAMPLER, is either NULL or contains count number of elements)</comment></member>
        </type>
        <type category="struct" name="VkDescriptorSetLayoutCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkDescriptorSetLayoutCreateFlags</type>    <name>flags</name></member>
            <member optional="true"><type>uint32_t</type>               <name>bindingCount</name><comment>Number of bindings in the descriptor set layout</comment></member>
            <member len="bindingCount">const <type>VkDescriptorSetLayoutBinding</type>* <name>pBindings</name><comment>Array of descriptor set layout bindings</comment></member>
        </type>
        <type category="struct" name="VkDescriptorPoolSize">
            <member><type>VkDescriptorType</type>       <name>type</name></member>
            <member><type>uint32_t</type>               <name>descriptorCount</name></member>
        </type>
        <type category="struct" name="VkDescriptorPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkDescriptorPoolCreateFlags</type>  <name>flags</name></member>
            <member><type>uint32_t</type>               <name>maxSets</name></member>
            <member optional="true"><type>uint32_t</type>               <name>poolSizeCount</name></member>
            <member len="poolSizeCount">const <type>VkDescriptorPoolSize</type>* <name>pPoolSizes</name></member>
        </type>
        <type category="struct" name="VkDescriptorSetAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkDescriptorPool</type>       <name>descriptorPool</name></member>
            <member><type>uint32_t</type>               <name>descriptorSetCount</name></member>
            <member len="descriptorSetCount">const <type>VkDescriptorSetLayout</type>* <name>pSetLayouts</name></member>
        </type>
        <type category="struct" name="VkSpecializationMapEntry">
            <member><type>uint32_t</type>                     <name>constantID</name><comment>The SpecConstant ID specified in the BIL</comment></member>
            <member><type>uint32_t</type>                     <name>offset</name><comment>Offset of the value in the data block</comment></member>
            <member noautovalidity="true"><type>size_t</type> <name>size</name><comment>Size in bytes of the SpecConstant</comment></member>
        </type>
        <type category="struct" name="VkSpecializationInfo">
            <member optional="true"><type>uint32_t</type>               <name>mapEntryCount</name><comment>Number of entries in the map</comment></member>
            <member len="mapEntryCount">const <type>VkSpecializationMapEntry</type>* <name>pMapEntries</name><comment>Array of map entries</comment></member>
            <member optional="true"><type>size_t</type>                 <name>dataSize</name><comment>Size in bytes of pData</comment></member>
            <member len="dataSize">const <type>void</type>*            <name>pData</name><comment>Pointer to SpecConstant data</comment></member>
        </type>
        <type category="struct" name="VkPipelineShaderStageCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkPipelineShaderStageCreateFlags</type>    <name>flags</name></member>
            <member><type>VkShaderStageFlagBits</type>  <name>stage</name><comment>Shader stage</comment></member>
            <member optional="true"><type>VkShaderModule</type> <name>module</name><comment>Module containing entry point</comment></member>
            <member api="vulkan" len="null-terminated">const <type>char</type>* <name>pName</name><comment>Null-terminated entry point name</comment></member>
            <member api="vulkansc" optional="true" len="null-terminated">const <type>char</type>* <name>pName</name><comment>Null-terminated entry point name</comment></member>
            <member optional="true">const <type>VkSpecializationInfo</type>* <name>pSpecializationInfo</name></member>
        </type>
        <type category="struct" name="VkComputePipelineCreateInfo">
            <member values="VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member noautovalidity="true" optional="true"><type>VkPipelineCreateFlags</type>  <name>flags</name><comment>Pipeline creation flags</comment></member>
            <member><type>VkPipelineShaderStageCreateInfo</type> <name>stage</name></member>
            <member><type>VkPipelineLayout</type>       <name>layout</name><comment>Interface layout of the pipeline</comment></member>
            <member noautovalidity="true" optional="true"><type>VkPipeline</type>      <name>basePipelineHandle</name><comment>If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of</comment></member>
            <member><type>int32_t</type>                <name>basePipelineIndex</name><comment>If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of</comment></member>
        </type>
        <type category="struct" name="VkComputePipelineIndirectBufferInfoNV" structextends="VkComputePipelineCreateInfo">
            <member values="VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*   <name>pNext</name></member>
            <member><type>VkDeviceAddress</type>               <name>deviceAddress</name></member>
            <member><type>VkDeviceSize</type>                  <name>size</name></member>
            <member><type>VkDeviceAddress</type>               <name>pipelineDeviceAddressCaptureReplay</name></member>
        </type>
        <type category="struct" name="VkPipelineCreateFlags2CreateInfo" structextends="VkComputePipelineCreateInfo,VkGraphicsPipelineCreateInfo,VkRayTracingPipelineCreateInfoNV,VkRayTracingPipelineCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*    <name>pNext</name></member>
            <member><type>VkPipelineCreateFlags2</type>         <name>flags</name></member>
        </type>
        <type category="struct" name="VkPipelineCreateFlags2CreateInfoKHR" alias="VkPipelineCreateFlags2CreateInfo"/>
        <type category="struct" name="VkVertexInputBindingDescription">
            <member><type>uint32_t</type>               <name>binding</name><comment>Vertex buffer binding id</comment></member>
            <member><type>uint32_t</type>               <name>stride</name><comment>Distance between vertices in bytes (0 = no advancement)</comment></member>
            <member><type>VkVertexInputRate</type>      <name>inputRate</name><comment>The rate at which the vertex data is consumed</comment></member>
        </type>
        <type category="struct" name="VkVertexInputAttributeDescription">
            <member><type>uint32_t</type>               <name>location</name><comment>location of the shader vertex attrib</comment></member>
            <member><type>uint32_t</type>               <name>binding</name><comment>Vertex buffer binding id</comment></member>
            <member><type>VkFormat</type>               <name>format</name><comment>format of source data</comment></member>
            <member><type>uint32_t</type>               <name>offset</name><comment>Offset of first element in bytes from base of vertex</comment></member>
        </type>
        <type category="struct" name="VkPipelineVertexInputStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkPipelineVertexInputStateCreateFlags</type>    <name>flags</name></member>
            <member optional="true"><type>uint32_t</type>               <name>vertexBindingDescriptionCount</name><comment>number of bindings</comment></member>
            <member len="vertexBindingDescriptionCount">const <type>VkVertexInputBindingDescription</type>* <name>pVertexBindingDescriptions</name></member>
            <member optional="true"><type>uint32_t</type>               <name>vertexAttributeDescriptionCount</name><comment>number of attributes</comment></member>
            <member len="vertexAttributeDescriptionCount">const <type>VkVertexInputAttributeDescription</type>* <name>pVertexAttributeDescriptions</name></member>
        </type>
        <type category="struct" name="VkPipelineInputAssemblyStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkPipelineInputAssemblyStateCreateFlags</type>    <name>flags</name></member>
            <member><type>VkPrimitiveTopology</type>    <name>topology</name></member>
            <member><type>VkBool32</type>               <name>primitiveRestartEnable</name></member>
        </type>
        <type category="struct" name="VkPipelineTessellationStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkPipelineTessellationStateCreateFlags</type>    <name>flags</name></member>
            <member><type>uint32_t</type>               <name>patchControlPoints</name></member>
        </type>
        <type category="struct" name="VkPipelineViewportStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkPipelineViewportStateCreateFlags</type>    <name>flags</name></member>
            <member optional="true"><type>uint32_t</type>               <name>viewportCount</name></member>
            <member noautovalidity="true" optional="true" len="viewportCount">const <type>VkViewport</type>*      <name>pViewports</name></member>
            <member optional="true"><type>uint32_t</type>               <name>scissorCount</name></member>
            <member noautovalidity="true" optional="true" len="scissorCount">const <type>VkRect2D</type>*        <name>pScissors</name></member>
        </type>
        <type category="struct" name="VkPipelineRasterizationStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member optional="true"><type>VkPipelineRasterizationStateCreateFlags</type>    <name>flags</name></member>
            <member><type>VkBool32</type>               <name>depthClampEnable</name></member>
            <member><type>VkBool32</type>               <name>rasterizerDiscardEnable</name></member>
            <member><type>VkPolygonMode</type>          <name>polygonMode</name><comment>optional (GL45)</comment></member>
            <member optional="true"><type>VkCullModeFlags</type>        <name>cullMode</name></member>
            <member><type>VkFrontFace</type>            <name>frontFace</name></member>
            <member><type>VkBool32</type>               <name>depthBiasEnable</name></member>
            <member><type>float</type>                  <name>depthBiasConstantFactor</name></member>
            <member><type>float</type>                  <name>depthBiasClamp</name></member>
            <member><type>float</type>                  <name>depthBiasSlopeFactor</name></member>
            <member><type>float</type>                  <name>lineWidth</name></member>
        </type>
        <type category="struct" name="VkPipelineMultisampleStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkPipelineMultisampleStateCreateFlags</type>    <name>flags</name></member>
            <member><type>VkSampleCountFlagBits</type>  <name>rasterizationSamples</name><comment>Number of samples used for rasterization</comment></member>
            <member><type>VkBool32</type>               <name>sampleShadingEnable</name><comment>optional (GL45)</comment></member>
            <member><type>float</type>                  <name>minSampleShading</name><comment>optional (GL45)</comment></member>
            <member optional="true" len="latexmath:[\lceil{\mathit{rasterizationSamples} \over 32}\rceil]" altlen="(rasterizationSamples + 31) / 32">const <type>VkSampleMask</type>*    <name>pSampleMask</name><comment>Array of sampleMask words</comment></member>
            <member><type>VkBool32</type>               <name>alphaToCoverageEnable</name></member>
            <member><type>VkBool32</type>               <name>alphaToOneEnable</name></member>
        </type>
        <type category="struct" name="VkPipelineColorBlendAttachmentState">
            <member><type>VkBool32</type>               <name>blendEnable</name></member>
            <member><type>VkBlendFactor</type>          <name>srcColorBlendFactor</name></member>
            <member><type>VkBlendFactor</type>          <name>dstColorBlendFactor</name></member>
            <member><type>VkBlendOp</type>              <name>colorBlendOp</name></member>
            <member><type>VkBlendFactor</type>          <name>srcAlphaBlendFactor</name></member>
            <member><type>VkBlendFactor</type>          <name>dstAlphaBlendFactor</name></member>
            <member><type>VkBlendOp</type>              <name>alphaBlendOp</name></member>
            <member optional="true"><type>VkColorComponentFlags</type>  <name>colorWriteMask</name></member>
        </type>
        <type category="struct" name="VkPipelineColorBlendStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkPipelineColorBlendStateCreateFlags</type>    <name>flags</name></member>
            <member><type>VkBool32</type>               <name>logicOpEnable</name></member>
            <member noautovalidity="true"><type>VkLogicOp</type>              <name>logicOp</name></member>
            <member optional="true"><type>uint32_t</type>               <name>attachmentCount</name><comment># of pAttachments</comment></member>
            <member optional="true" len="attachmentCount">const <type>VkPipelineColorBlendAttachmentState</type>* <name>pAttachments</name></member>
            <member><type>float</type>                  <name>blendConstants</name>[4]</member>
        </type>
        <type category="struct" name="VkPipelineDynamicStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkPipelineDynamicStateCreateFlags</type>    <name>flags</name></member>
            <member optional="true"><type>uint32_t</type>               <name>dynamicStateCount</name></member>
            <member len="dynamicStateCount">const <type>VkDynamicState</type>*  <name>pDynamicStates</name></member>
        </type>
        <type category="struct" name="VkStencilOpState">
            <member><type>VkStencilOp</type>            <name>failOp</name></member>
            <member><type>VkStencilOp</type>            <name>passOp</name></member>
            <member><type>VkStencilOp</type>            <name>depthFailOp</name></member>
            <member><type>VkCompareOp</type>            <name>compareOp</name></member>
            <member><type>uint32_t</type>               <name>compareMask</name></member>
            <member><type>uint32_t</type>               <name>writeMask</name></member>
            <member><type>uint32_t</type>               <name>reference</name></member>
        </type>
        <type category="struct" name="VkPipelineDepthStencilStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkPipelineDepthStencilStateCreateFlags</type>    <name>flags</name></member>
            <member><type>VkBool32</type>               <name>depthTestEnable</name></member>
            <member><type>VkBool32</type>               <name>depthWriteEnable</name></member>
            <member><type>VkCompareOp</type>            <name>depthCompareOp</name></member>
            <member><type>VkBool32</type>               <name>depthBoundsTestEnable</name><comment>optional (depth_bounds_test)</comment></member>
            <member><type>VkBool32</type>               <name>stencilTestEnable</name></member>
            <member><type>VkStencilOpState</type>       <name>front</name></member>
            <member><type>VkStencilOpState</type>       <name>back</name></member>
            <member><type>float</type>                  <name>minDepthBounds</name></member>
            <member><type>float</type>                  <name>maxDepthBounds</name></member>
        </type>
        <type category="struct" name="VkGraphicsPipelineCreateInfo">
            <member values="VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member noautovalidity="true" optional="true"><type>VkPipelineCreateFlags</type>  <name>flags</name><comment>Pipeline creation flags</comment></member>
            <member noautovalidity="true" optional="true"><type>uint32_t</type> <name>stageCount</name></member>
            <member api="vulkan" noautovalidity="true" len="stageCount" optional="true">const <type>VkPipelineShaderStageCreateInfo</type>* <name>pStages</name><comment>One entry for each active shader stage</comment></member>
            <member api="vulkansc" noautovalidity="true" len="stageCount">const <type>VkPipelineShaderStageCreateInfo</type>* <name>pStages</name><comment>One entry for each active shader stage</comment></member>
            <member noautovalidity="true" optional="true">const <type>VkPipelineVertexInputStateCreateInfo</type>* <name>pVertexInputState</name></member>
            <member noautovalidity="true" optional="true">const <type>VkPipelineInputAssemblyStateCreateInfo</type>* <name>pInputAssemblyState</name></member>
            <member noautovalidity="true" optional="true">const <type>VkPipelineTessellationStateCreateInfo</type>* <name>pTessellationState</name></member>
            <member noautovalidity="true" optional="true">const <type>VkPipelineViewportStateCreateInfo</type>* <name>pViewportState</name></member>
            <member noautovalidity="true" optional="true">const <type>VkPipelineRasterizationStateCreateInfo</type>* <name>pRasterizationState</name></member>
            <member noautovalidity="true" optional="true">const <type>VkPipelineMultisampleStateCreateInfo</type>* <name>pMultisampleState</name></member>
            <member noautovalidity="true" optional="true">const <type>VkPipelineDepthStencilStateCreateInfo</type>* <name>pDepthStencilState</name></member>
            <member noautovalidity="true" optional="true">const <type>VkPipelineColorBlendStateCreateInfo</type>* <name>pColorBlendState</name></member>
            <member optional="true">const <type>VkPipelineDynamicStateCreateInfo</type>* <name>pDynamicState</name></member>
            <member noautovalidity="true" optional="true"><type>VkPipelineLayout</type>       <name>layout</name><comment>Interface layout of the pipeline</comment></member>
            <member noautovalidity="true" optional="true"><type>VkRenderPass</type>           <name>renderPass</name></member>
            <member noautovalidity="true"><type>uint32_t</type>               <name>subpass</name></member>
            <member noautovalidity="true" optional="true"><type>VkPipeline</type>      <name>basePipelineHandle</name><comment>If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of</comment></member>
            <member><type>int32_t</type>                <name>basePipelineIndex</name><comment>If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of</comment></member>
        </type>
        <type category="struct" name="VkPipelineCacheCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkPipelineCacheCreateFlags</type>    <name>flags</name></member>
            <member api="vulkan" optional="true"><type>size_t</type>           <name>initialDataSize</name><comment>Size of initial data to populate cache, in bytes</comment></member>
            <member api="vulkansc"><type>size_t</type>                         <name>initialDataSize</name><comment>Size of initial data to populate cache, in bytes</comment></member>
            <member len="initialDataSize">const <type>void</type>*            <name>pInitialData</name><comment>Initial data to populate cache</comment></member>
        </type>
        <type category="struct" name="VkPipelineCacheHeaderVersionOne">
            <comment>The fields in this structure are non-normative since structure packing is implementation-defined in C. The specification defines the normative layout.</comment>
            <member><type>uint32_t</type>               <name>headerSize</name></member>
            <member><type>VkPipelineCacheHeaderVersion</type> <name>headerVersion</name></member>
            <member><type>uint32_t</type>               <name>vendorID</name></member>
            <member><type>uint32_t</type>               <name>deviceID</name></member>
            <member><type>uint8_t</type>                <name>pipelineCacheUUID</name>[<enum>VK_UUID_SIZE</enum>]</member>
        </type>
        <type category="struct" name="VkPipelineCacheStageValidationIndexEntry">
            <comment>The fields in this structure are non-normative since structure packing is implementation-defined in C. The specification defines the normative layout.</comment>
            <member><type>uint64_t</type>               <name>codeSize</name></member>
            <member><type>uint64_t</type>               <name>codeOffset</name></member>
        </type>
        <type category="struct" name="VkPipelineCacheSafetyCriticalIndexEntry">
            <comment>The fields in this structure are non-normative since structure packing is implementation-defined in C. The specification defines the normative layout.</comment>
            <member><type>uint8_t</type>                <name>pipelineIdentifier</name>[<enum>VK_UUID_SIZE</enum>]</member>
            <member><type>uint64_t</type>               <name>pipelineMemorySize</name></member>
            <member><type>uint64_t</type>               <name>jsonSize</name></member>
            <member><type>uint64_t</type>               <name>jsonOffset</name></member>
            <member><type>uint32_t</type>               <name>stageIndexCount</name></member>
            <member><type>uint32_t</type>               <name>stageIndexStride</name></member>
            <member><type>uint64_t</type>               <name>stageIndexOffset</name></member>
        </type>
        <type category="struct" name="VkPipelineCacheHeaderVersionSafetyCriticalOne">
            <comment>The fields in this structure are non-normative since structure packing is implementation-defined in C. The specification defines the normative layout.</comment>
            <member><type>VkPipelineCacheHeaderVersionOne</type>        <name>headerVersionOne</name></member>
            <member><type>VkPipelineCacheValidationVersion</type>       <name>validationVersion</name></member>
            <member><type>uint32_t</type>                               <name>implementationData</name></member>
            <member><type>uint32_t</type>                               <name>pipelineIndexCount</name></member>
            <member><type>uint32_t</type>                               <name>pipelineIndexStride</name></member>
            <member><type>uint64_t</type>                               <name>pipelineIndexOffset</name></member>
        </type>
        <type category="struct" name="VkPushConstantRange">
            <member><type>VkShaderStageFlags</type>     <name>stageFlags</name><comment>Which stages use the range</comment></member>
            <member><type>uint32_t</type>               <name>offset</name><comment>Start of the range, in bytes</comment></member>
            <member><type>uint32_t</type>               <name>size</name><comment>Size of the range, in bytes</comment></member>
        </type>
        <type category="struct" name="VkPipelineBinaryCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_BINARY_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                           <name>pNext</name></member>
            <member optional="true">const <type>VkPipelineBinaryKeysAndDataKHR</type>* <name>pKeysAndDataInfo</name></member>
            <member optional="true"><type>VkPipeline</type>                            <name>pipeline</name></member>
            <member optional="true">const <type>VkPipelineCreateInfoKHR</type>*         <name>pPipelineCreateInfo</name></member>
        </type>
        <type category="struct" name="VkPipelineBinaryHandlesInfoKHR">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_BINARY_HANDLES_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                    <name>pNext</name></member>
            <member optional="false,true"><type>uint32_t</type>                                 <name>pipelineBinaryCount</name></member>
            <member optional="true" len="pipelineBinaryCount"><type>VkPipelineBinaryKHR</type>* <name>pPipelineBinaries</name></member>
        </type>
        <type category="struct" name="VkPipelineBinaryDataKHR">
            <member><type>size_t</type>                               <name>dataSize</name></member>
            <member len="dataSize"><type>void</type>*                 <name>pData</name></member>
        </type>
        <type category="struct" name="VkPipelineBinaryKeysAndDataKHR">
            <member><type>uint32_t</type>                                           <name>binaryCount</name></member>
            <member len="binaryCount">const <type>VkPipelineBinaryKeyKHR</type>*    <name>pPipelineBinaryKeys</name></member>
            <member len="binaryCount">const <type>VkPipelineBinaryDataKHR</type>*   <name>pPipelineBinaryData</name></member>
        </type>
        <type category="struct" name="VkPipelineBinaryKeyKHR">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_BINARY_KEY_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*          <name>pNext</name></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>keySize</name></member>
            <member><type>uint8_t</type>                        <name>key</name>[<enum>VK_MAX_PIPELINE_BINARY_KEY_SIZE_KHR</enum>]</member>
        </type>
        <type category="struct" name="VkPipelineBinaryInfoKHR" structextends="VkGraphicsPipelineCreateInfo,VkComputePipelineCreateInfo,VkRayTracingPipelineCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_BINARY_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                         <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                                                            <name>binaryCount</name></member>
            <member len="binaryCount">const <type>VkPipelineBinaryKHR</type>*                        <name>pPipelineBinaries</name></member>
        </type>
        <type category="struct" name="VkReleaseCapturedPipelineDataInfoKHR">
            <member values="VK_STRUCTURE_TYPE_RELEASE_CAPTURED_PIPELINE_DATA_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*          <name>pNext</name></member>
            <member><type>VkPipeline</type>    <name>pipeline</name></member>
        </type>
        <type category="struct" name="VkPipelineBinaryDataInfoKHR">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_BINARY_DATA_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*          <name>pNext</name></member>
            <member><type>VkPipelineBinaryKHR</type>    <name>pipelineBinary</name></member>
        </type>
        <type category="struct" name="VkPipelineCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member noautovalidity="true" optional="true"><type>void</type>*          <name>pNext</name></member>
        </type>
        <type category="struct" name="VkPipelineLayoutCreateInfo" structextends="VkBindDescriptorSetsInfo,VkPushConstantsInfo,VkPushDescriptorSetInfo,VkPushDescriptorSetWithTemplateInfo,VkSetDescriptorBufferOffsetsInfoEXT,VkBindDescriptorBufferEmbeddedSamplersInfoEXT,VkIndirectCommandsLayoutCreateInfoEXT">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkPipelineLayoutCreateFlags</type>    <name>flags</name></member>
            <member optional="true"><type>uint32_t</type>               <name>setLayoutCount</name><comment>Number of descriptor sets interfaced by the pipeline</comment></member>
            <member optional="false,true" len="setLayoutCount">const <type>VkDescriptorSetLayout</type>* <name>pSetLayouts</name><comment>Array of setCount number of descriptor set layout objects defining the layout of the</comment></member>
            <member optional="true"><type>uint32_t</type>               <name>pushConstantRangeCount</name><comment>Number of push-constant ranges used by the pipeline</comment></member>
            <member len="pushConstantRangeCount">const <type>VkPushConstantRange</type>* <name>pPushConstantRanges</name><comment>Array of pushConstantRangeCount number of ranges used by various shader stages</comment></member>
        </type>
        <type category="struct" name="VkSamplerCreateInfo">
            <member values="VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkSamplerCreateFlags</type>   <name>flags</name></member>
            <member><type>VkFilter</type>               <name>magFilter</name><comment>Filter mode for magnification</comment></member>
            <member><type>VkFilter</type>               <name>minFilter</name><comment>Filter mode for minifiation</comment></member>
            <member><type>VkSamplerMipmapMode</type>    <name>mipmapMode</name><comment>Mipmap selection mode</comment></member>
            <member><type>VkSamplerAddressMode</type>   <name>addressModeU</name></member>
            <member><type>VkSamplerAddressMode</type>   <name>addressModeV</name></member>
            <member><type>VkSamplerAddressMode</type>   <name>addressModeW</name></member>
            <member><type>float</type>                  <name>mipLodBias</name></member>
            <member><type>VkBool32</type>               <name>anisotropyEnable</name></member>
            <member><type>float</type>                  <name>maxAnisotropy</name></member>
            <member><type>VkBool32</type>               <name>compareEnable</name></member>
            <member noautovalidity="true"><type>VkCompareOp</type>            <name>compareOp</name></member>
            <member><type>float</type>                  <name>minLod</name></member>
            <member><type>float</type>                  <name>maxLod</name></member>
            <member noautovalidity="true"><type>VkBorderColor</type>          <name>borderColor</name></member>
            <member><type>VkBool32</type>               <name>unnormalizedCoordinates</name></member>
        </type>
        <type category="struct" name="VkCommandPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkCommandPoolCreateFlags</type>   <name>flags</name><comment>Command pool creation flags</comment></member>
            <member><type>uint32_t</type>               <name>queueFamilyIndex</name></member>
        </type>
        <type category="struct" name="VkCommandBufferAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkCommandPool</type>          <name>commandPool</name></member>
            <member><type>VkCommandBufferLevel</type>   <name>level</name></member>
            <member><type>uint32_t</type>               <name>commandBufferCount</name></member>
        </type>
        <type category="struct" name="VkCommandBufferInheritanceInfo">
            <member values="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true" noautovalidity="true"><type>VkRenderPass</type>    <name>renderPass</name><comment>Render pass for secondary command buffers</comment></member>
            <member><type>uint32_t</type>               <name>subpass</name></member>
            <member optional="true" noautovalidity="true"><type>VkFramebuffer</type>   <name>framebuffer</name><comment>Framebuffer for secondary command buffers</comment></member>
            <member><type>VkBool32</type>               <name>occlusionQueryEnable</name><comment>Whether this secondary command buffer may be executed during an occlusion query</comment></member>
            <member optional="true" noautovalidity="true"><type>VkQueryControlFlags</type>    <name>queryFlags</name><comment>Query flags used by this secondary command buffer, if executed during an occlusion query</comment></member>
            <member optional="true" noautovalidity="true"><type>VkQueryPipelineStatisticFlags</type> <name>pipelineStatistics</name><comment>Pipeline statistics that may be counted for this secondary command buffer</comment></member>
        </type>
        <type category="struct" name="VkCommandBufferBeginInfo">
            <member values="VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkCommandBufferUsageFlags</type>  <name>flags</name><comment>Command buffer usage flags</comment></member>
            <member optional="true" noautovalidity="true">const <type>VkCommandBufferInheritanceInfo</type>*       <name>pInheritanceInfo</name><comment>Pointer to inheritance info for secondary command buffers</comment></member>
        </type>
        <type category="struct" name="VkRenderPassBeginInfo">
            <member values="VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkRenderPass</type>           <name>renderPass</name></member>
            <member><type>VkFramebuffer</type>          <name>framebuffer</name></member>
            <member><type>VkRect2D</type>               <name>renderArea</name></member>
            <member optional="true"><type>uint32_t</type>               <name>clearValueCount</name></member>
            <member len="clearValueCount" noautovalidity="true">const <type>VkClearValue</type>*    <name>pClearValues</name></member>
        </type>
        <type category="union" name="VkClearColorValue" comment="// Union allowing specification of floating-point, integer, or unsigned integer color data. Actual value selected is based on image/attachment being cleared.">
            <member><type>float</type>                  <name>float32</name>[4]</member>
            <member><type>int32_t</type>                <name>int32</name>[4]</member>
            <member><type>uint32_t</type>               <name>uint32</name>[4]</member>
        </type>
        <type category="struct" name="VkClearDepthStencilValue">
            <member><type>float</type>                  <name>depth</name></member>
            <member><type>uint32_t</type>               <name>stencil</name></member>
        </type>
        <type category="union" name="VkClearValue" comment="// Union allowing specification of color or depth and stencil values. Actual value selected is based on attachment being cleared.">
            <member noautovalidity="true"><type>VkClearColorValue</type>      <name>color</name></member>
            <member><type>VkClearDepthStencilValue</type> <name>depthStencil</name></member>
        </type>
        <type category="struct" name="VkClearAttachment">
            <member><type>VkImageAspectFlags</type>     <name>aspectMask</name></member>
            <member><type>uint32_t</type>               <name>colorAttachment</name></member>
            <member noautovalidity="true"><type>VkClearValue</type>           <name>clearValue</name></member>
        </type>
        <type category="struct" name="VkAttachmentDescription">
            <member optional="true"><type>VkAttachmentDescriptionFlags</type> <name>flags</name></member>
            <member><type>VkFormat</type>               <name>format</name></member>
            <member><type>VkSampleCountFlagBits</type>  <name>samples</name></member>
            <member><type>VkAttachmentLoadOp</type>     <name>loadOp</name><comment>Load operation for color or depth data</comment></member>
            <member><type>VkAttachmentStoreOp</type>    <name>storeOp</name><comment>Store operation for color or depth data</comment></member>
            <member><type>VkAttachmentLoadOp</type>     <name>stencilLoadOp</name><comment>Load operation for stencil data</comment></member>
            <member><type>VkAttachmentStoreOp</type>    <name>stencilStoreOp</name><comment>Store operation for stencil data</comment></member>
            <member><type>VkImageLayout</type>          <name>initialLayout</name></member>
            <member><type>VkImageLayout</type>          <name>finalLayout</name></member>
        </type>
        <type category="struct" name="VkAttachmentReference">
            <member><type>uint32_t</type>               <name>attachment</name></member>
            <member><type>VkImageLayout</type>          <name>layout</name></member>
        </type>
        <type category="struct" name="VkSubpassDescription">
            <member optional="true"><type>VkSubpassDescriptionFlags</type> <name>flags</name></member>
            <member><type>VkPipelineBindPoint</type>    <name>pipelineBindPoint</name><comment>Must be VK_PIPELINE_BIND_POINT_GRAPHICS for now</comment></member>
            <member optional="true"><type>uint32_t</type>               <name>inputAttachmentCount</name></member>
            <member len="inputAttachmentCount">const <type>VkAttachmentReference</type>* <name>pInputAttachments</name></member>
            <member optional="true"><type>uint32_t</type>               <name>colorAttachmentCount</name></member>
            <member len="colorAttachmentCount">const <type>VkAttachmentReference</type>* <name>pColorAttachments</name></member>
            <member optional="true" len="colorAttachmentCount">const <type>VkAttachmentReference</type>* <name>pResolveAttachments</name></member>
            <member optional="true">const <type>VkAttachmentReference</type>* <name>pDepthStencilAttachment</name></member>
            <member optional="true"><type>uint32_t</type>               <name>preserveAttachmentCount</name></member>
            <member len="preserveAttachmentCount">const <type>uint32_t</type>* <name>pPreserveAttachments</name></member>
        </type>
        <type category="struct" name="VkSubpassDependency">
            <member><type>uint32_t</type>               <name>srcSubpass</name></member>
            <member><type>uint32_t</type>               <name>dstSubpass</name></member>
            <member optional="true"><type>VkPipelineStageFlags</type>   <name>srcStageMask</name></member>
            <member optional="true"><type>VkPipelineStageFlags</type>   <name>dstStageMask</name></member>
            <member optional="true"><type>VkAccessFlags</type>          <name>srcAccessMask</name><comment>Memory accesses from the source of the dependency to synchronize</comment></member>
            <member optional="true"><type>VkAccessFlags</type>          <name>dstAccessMask</name><comment>Memory accesses from the destination of the dependency to synchronize</comment></member>
            <member optional="true"><type>VkDependencyFlags</type>      <name>dependencyFlags</name></member>
        </type>
        <type category="struct" name="VkRenderPassCreateInfo">
            <member values="VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkRenderPassCreateFlags</type> <name>flags</name></member>
            <member optional="true"><type>uint32_t</type>   <name>attachmentCount</name></member>
            <member len="attachmentCount">const <type>VkAttachmentDescription</type>* <name>pAttachments</name></member>
            <member><type>uint32_t</type>               <name>subpassCount</name></member>
            <member len="subpassCount">const <type>VkSubpassDescription</type>* <name>pSubpasses</name></member>
            <member optional="true"><type>uint32_t</type>       <name>dependencyCount</name></member>
            <member len="dependencyCount">const <type>VkSubpassDependency</type>* <name>pDependencies</name></member>
        </type>
        <type category="struct" name="VkEventCreateInfo">
            <member values="VK_STRUCTURE_TYPE_EVENT_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkEventCreateFlags</type>     <name>flags</name><comment>Event creation flags</comment></member>
        </type>
        <type category="struct" name="VkFenceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_FENCE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkFenceCreateFlags</type>     <name>flags</name><comment>Fence creation flags</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFeatures">
            <member><type>VkBool32</type>               <name>robustBufferAccess</name><comment>out of bounds buffer accesses are well defined</comment></member>
            <member><type>VkBool32</type>               <name>fullDrawIndexUint32</name><comment>full 32-bit range of indices for indexed draw calls</comment></member>
            <member><type>VkBool32</type>               <name>imageCubeArray</name><comment>image views which are arrays of cube maps</comment></member>
            <member><type>VkBool32</type>               <name>independentBlend</name><comment>blending operations are controlled per-attachment</comment></member>
            <member><type>VkBool32</type>               <name>geometryShader</name><comment>geometry stage</comment></member>
            <member><type>VkBool32</type>               <name>tessellationShader</name><comment>tessellation control and evaluation stage</comment></member>
            <member><type>VkBool32</type>               <name>sampleRateShading</name><comment>per-sample shading and interpolation</comment></member>
            <member><type>VkBool32</type>               <name>dualSrcBlend</name><comment>blend operations which take two sources</comment></member>
            <member><type>VkBool32</type>               <name>logicOp</name><comment>logic operations</comment></member>
            <member><type>VkBool32</type>               <name>multiDrawIndirect</name><comment>multi draw indirect</comment></member>
            <member><type>VkBool32</type>               <name>drawIndirectFirstInstance</name><comment>indirect drawing can use non-zero firstInstance</comment></member>
            <member><type>VkBool32</type>               <name>depthClamp</name><comment>depth clamping</comment></member>
            <member><type>VkBool32</type>               <name>depthBiasClamp</name><comment>depth bias clamping</comment></member>
            <member><type>VkBool32</type>               <name>fillModeNonSolid</name><comment>point and wireframe fill modes</comment></member>
            <member><type>VkBool32</type>               <name>depthBounds</name><comment>depth bounds test</comment></member>
            <member><type>VkBool32</type>               <name>wideLines</name><comment>lines with width greater than 1</comment></member>
            <member><type>VkBool32</type>               <name>largePoints</name><comment>points with size greater than 1</comment></member>
            <member><type>VkBool32</type>               <name>alphaToOne</name><comment>the fragment alpha component can be forced to maximum representable alpha value</comment></member>
            <member><type>VkBool32</type>               <name>multiViewport</name><comment>viewport arrays</comment></member>
            <member><type>VkBool32</type>               <name>samplerAnisotropy</name><comment>anisotropic sampler filtering</comment></member>
            <member><type>VkBool32</type>               <name>textureCompressionETC2</name><comment>ETC texture compression formats</comment></member>
            <member><type>VkBool32</type>               <name>textureCompressionASTC_LDR</name><comment>ASTC LDR texture compression formats</comment></member>
            <member><type>VkBool32</type>               <name>textureCompressionBC</name><comment>BC1-7 texture compressed formats</comment></member>
            <member><type>VkBool32</type>               <name>occlusionQueryPrecise</name><comment>precise occlusion queries returning actual sample counts</comment></member>
            <member><type>VkBool32</type>               <name>pipelineStatisticsQuery</name><comment>pipeline statistics query</comment></member>
            <member><type>VkBool32</type>               <name>vertexPipelineStoresAndAtomics</name><comment>stores and atomic ops on storage buffers and images are supported in vertex, tessellation, and geometry stages</comment></member>
            <member><type>VkBool32</type>               <name>fragmentStoresAndAtomics</name><comment>stores and atomic ops on storage buffers and images are supported in the fragment stage</comment></member>
            <member><type>VkBool32</type>               <name>shaderTessellationAndGeometryPointSize</name><comment>tessellation and geometry stages can export point size</comment></member>
            <member><type>VkBool32</type>               <name>shaderImageGatherExtended</name><comment>image gather with runtime values and independent offsets</comment></member>
            <member><type>VkBool32</type>               <name>shaderStorageImageExtendedFormats</name><comment>the extended set of formats can be used for storage images</comment></member>
            <member><type>VkBool32</type>               <name>shaderStorageImageMultisample</name><comment>multisample images can be used for storage images</comment></member>
            <member><type>VkBool32</type>               <name>shaderStorageImageReadWithoutFormat</name><comment>read from storage image does not require format qualifier</comment></member>
            <member><type>VkBool32</type>               <name>shaderStorageImageWriteWithoutFormat</name><comment>write to storage image does not require format qualifier</comment></member>
            <member><type>VkBool32</type>               <name>shaderUniformBufferArrayDynamicIndexing</name><comment>arrays of uniform buffers can be accessed with dynamically uniform indices</comment></member>
            <member><type>VkBool32</type>               <name>shaderSampledImageArrayDynamicIndexing</name><comment>arrays of sampled images can be accessed with dynamically uniform indices</comment></member>
            <member><type>VkBool32</type>               <name>shaderStorageBufferArrayDynamicIndexing</name><comment>arrays of storage buffers can be accessed with dynamically uniform indices</comment></member>
            <member><type>VkBool32</type>               <name>shaderStorageImageArrayDynamicIndexing</name><comment>arrays of storage images can be accessed with dynamically uniform indices</comment></member>
            <member><type>VkBool32</type>               <name>shaderClipDistance</name><comment>clip distance in shaders</comment></member>
            <member><type>VkBool32</type>               <name>shaderCullDistance</name><comment>cull distance in shaders</comment></member>
            <member><type>VkBool32</type>               <name>shaderFloat64</name><comment>64-bit floats (doubles) in shaders</comment></member>
            <member><type>VkBool32</type>               <name>shaderInt64</name><comment>64-bit integers in shaders</comment></member>
            <member><type>VkBool32</type>               <name>shaderInt16</name><comment>16-bit integers in shaders</comment></member>
            <member><type>VkBool32</type>               <name>shaderResourceResidency</name><comment>shader can use texture operations that return resource residency information (requires sparseNonResident support)</comment></member>
            <member><type>VkBool32</type>               <name>shaderResourceMinLod</name><comment>shader can use texture operations that specify minimum resource LOD</comment></member>
            <member><type>VkBool32</type>               <name>sparseBinding</name><comment>Sparse resources support: Resource memory can be managed at opaque page level rather than object level</comment></member>
            <member><type>VkBool32</type>               <name>sparseResidencyBuffer</name><comment>Sparse resources support: GPU can access partially resident buffers </comment></member>
            <member><type>VkBool32</type>               <name>sparseResidencyImage2D</name><comment>Sparse resources support: GPU can access partially resident 2D (non-MSAA non-depth/stencil) images </comment></member>
            <member><type>VkBool32</type>               <name>sparseResidencyImage3D</name><comment>Sparse resources support: GPU can access partially resident 3D images </comment></member>
            <member><type>VkBool32</type>               <name>sparseResidency2Samples</name><comment>Sparse resources support: GPU can access partially resident MSAA 2D images with 2 samples</comment></member>
            <member><type>VkBool32</type>               <name>sparseResidency4Samples</name><comment>Sparse resources support: GPU can access partially resident MSAA 2D images with 4 samples</comment></member>
            <member><type>VkBool32</type>               <name>sparseResidency8Samples</name><comment>Sparse resources support: GPU can access partially resident MSAA 2D images with 8 samples</comment></member>
            <member><type>VkBool32</type>               <name>sparseResidency16Samples</name><comment>Sparse resources support: GPU can access partially resident MSAA 2D images with 16 samples</comment></member>
            <member><type>VkBool32</type>               <name>sparseResidencyAliased</name><comment>Sparse resources support: GPU can correctly access data aliased into multiple locations (opt-in)</comment></member>
            <member><type>VkBool32</type>               <name>variableMultisampleRate</name><comment>multisample rate must be the same for all pipelines in a subpass</comment></member>
            <member><type>VkBool32</type>               <name>inheritedQueries</name><comment>Queries may be inherited from primary to secondary command buffers</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSparseProperties" returnedonly="true">
            <member limittype="bitmask"><type>VkBool32</type>           <name>residencyStandard2DBlockShape</name><comment>Sparse resources support: GPU will access all 2D (single sample) sparse resources using the standard sparse image block shapes (based on pixel format)</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>           <name>residencyStandard2DMultisampleBlockShape</name><comment>Sparse resources support: GPU will access all 2D (multisample) sparse resources using the standard sparse image block shapes (based on pixel format)</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>           <name>residencyStandard3DBlockShape</name><comment>Sparse resources support: GPU will access all 3D sparse resources using the standard sparse image block shapes (based on pixel format)</comment></member>
            <member limittype="not"><type>VkBool32</type>           <name>residencyAlignedMipSize</name><comment>Sparse resources support: Images with mip level dimensions that are NOT a multiple of the sparse image block dimensions will be placed in the mip tail</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>           <name>residencyNonResidentStrict</name><comment>Sparse resources support: GPU can consistently access non-resident regions of a resource, all reads return as if data is 0, writes are discarded</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceLimits" returnedonly="true">
                <comment>resource maximum sizes</comment>
            <member limittype="max"><type>uint32_t</type>               <name>maxImageDimension1D</name><comment>max 1D image dimension</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxImageDimension2D</name><comment>max 2D image dimension</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxImageDimension3D</name><comment>max 3D image dimension</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxImageDimensionCube</name><comment>max cube map image dimension</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxImageArrayLayers</name><comment>max layers for image arrays</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxTexelBufferElements</name><comment>max texel buffer size (fstexels)</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxUniformBufferRange</name><comment>max uniform buffer range (bytes)</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxStorageBufferRange</name><comment>max storage buffer range (bytes)</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPushConstantsSize</name><comment>max size of the push constants pool (bytes)</comment></member>
                <comment>memory limits</comment>
            <member limittype="max"><type>uint32_t</type>               <name>maxMemoryAllocationCount</name><comment>max number of device memory allocations supported</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxSamplerAllocationCount</name><comment>max number of samplers that can be allocated on a device</comment></member>
            <member limittype="min,mul"><type>VkDeviceSize</type>           <name>bufferImageGranularity</name><comment>Granularity (in bytes) at which buffers and images can be bound to adjacent memory for simultaneous usage</comment></member>
            <member limittype="max"><type>VkDeviceSize</type>           <name>sparseAddressSpaceSize</name><comment>Total address space available for sparse allocations (bytes)</comment></member>
                <comment>descriptor set limits</comment>
            <member limittype="max"><type>uint32_t</type>               <name>maxBoundDescriptorSets</name><comment>max number of descriptors sets that can be bound to a pipeline</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPerStageDescriptorSamplers</name><comment>max number of samplers allowed per-stage in a descriptor set</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPerStageDescriptorUniformBuffers</name><comment>max number of uniform buffers allowed per-stage in a descriptor set</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPerStageDescriptorStorageBuffers</name><comment>max number of storage buffers allowed per-stage in a descriptor set</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPerStageDescriptorSampledImages</name><comment>max number of sampled images allowed per-stage in a descriptor set</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPerStageDescriptorStorageImages</name><comment>max number of storage images allowed per-stage in a descriptor set</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPerStageDescriptorInputAttachments</name><comment>max number of input attachments allowed per-stage in a descriptor set</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPerStageResources</name><comment>max number of resources allowed by a single stage</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetSamplers</name><comment>max number of samplers allowed in all stages in a descriptor set</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetUniformBuffers</name><comment>max number of uniform buffers allowed in all stages in a descriptor set</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetUniformBuffersDynamic</name><comment>max number of dynamic uniform buffers allowed in all stages in a descriptor set</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetStorageBuffers</name><comment>max number of storage buffers allowed in all stages in a descriptor set</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetStorageBuffersDynamic</name><comment>max number of dynamic storage buffers allowed in all stages in a descriptor set</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetSampledImages</name><comment>max number of sampled images allowed in all stages in a descriptor set</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetStorageImages</name><comment>max number of storage images allowed in all stages in a descriptor set</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetInputAttachments</name><comment>max number of input attachments allowed in all stages in a descriptor set</comment></member>
                <comment>vertex stage limits</comment>
            <member limittype="max"><type>uint32_t</type>               <name>maxVertexInputAttributes</name><comment>max number of vertex input attribute slots</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxVertexInputBindings</name><comment>max number of vertex input binding slots</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxVertexInputAttributeOffset</name><comment>max vertex input attribute offset added to vertex buffer offset</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxVertexInputBindingStride</name><comment>max vertex input binding stride</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxVertexOutputComponents</name><comment>max number of output components written by vertex shader</comment></member>
                <comment>tessellation control stage limits</comment>
            <member limittype="max"><type>uint32_t</type>               <name>maxTessellationGenerationLevel</name><comment>max level supported by tessellation primitive generator</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxTessellationPatchSize</name><comment>max patch size (vertices)</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxTessellationControlPerVertexInputComponents</name><comment>max number of input components per-vertex in TCS</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxTessellationControlPerVertexOutputComponents</name><comment>max number of output components per-vertex in TCS</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxTessellationControlPerPatchOutputComponents</name><comment>max number of output components per-patch in TCS</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxTessellationControlTotalOutputComponents</name><comment>max total number of per-vertex and per-patch output components in TCS</comment></member>
                <comment>tessellation evaluation stage limits</comment>
            <member limittype="max"><type>uint32_t</type>               <name>maxTessellationEvaluationInputComponents</name><comment>max number of input components per vertex in TES</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxTessellationEvaluationOutputComponents</name><comment>max number of output components per vertex in TES</comment></member>
                <comment>geometry stage limits</comment>
            <member limittype="max"><type>uint32_t</type>               <name>maxGeometryShaderInvocations</name><comment>max invocation count supported in geometry shader</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxGeometryInputComponents</name><comment>max number of input components read in geometry stage</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxGeometryOutputComponents</name><comment>max number of output components written in geometry stage</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxGeometryOutputVertices</name><comment>max number of vertices that can be emitted in geometry stage</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxGeometryTotalOutputComponents</name><comment>max total number of components (all vertices) written in geometry stage</comment></member>
                <comment>fragment stage limits</comment>
            <member limittype="max"><type>uint32_t</type>               <name>maxFragmentInputComponents</name><comment>max number of input components read in fragment stage</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxFragmentOutputAttachments</name><comment>max number of output attachments written in fragment stage</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxFragmentDualSrcAttachments</name><comment>max number of output attachments written when using dual source blending</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxFragmentCombinedOutputResources</name><comment>max total number of storage buffers, storage images and output buffers</comment></member>
                <comment>compute stage limits</comment>
            <member limittype="max"><type>uint32_t</type>               <name>maxComputeSharedMemorySize</name><comment>max total storage size of work group local storage (bytes)</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxComputeWorkGroupCount</name>[3]<comment>max num of compute work groups that may be dispatched by a single command (x,y,z)</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxComputeWorkGroupInvocations</name><comment>max total compute invocations in a single local work group</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxComputeWorkGroupSize</name>[3]<comment>max local size of a compute work group (x,y,z)</comment></member>
            <member limittype="bits"><type>uint32_t</type>              <name>subPixelPrecisionBits</name><comment>number bits of subpixel precision in screen x and y</comment></member>
            <member limittype="bits"><type>uint32_t</type>              <name>subTexelPrecisionBits</name><comment>number bits of precision for selecting texel weights</comment></member>
            <member limittype="bits"><type>uint32_t</type>              <name>mipmapPrecisionBits</name><comment>number bits of precision for selecting mipmap weights</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDrawIndexedIndexValue</name><comment>max index value for indexed draw calls (for 32-bit indices)</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDrawIndirectCount</name><comment>max draw count for indirect drawing calls</comment></member>
            <member limittype="max"><type>float</type>                  <name>maxSamplerLodBias</name><comment>max absolute sampler LOD bias</comment></member>
            <member limittype="max"><type>float</type>                  <name>maxSamplerAnisotropy</name><comment>max degree of sampler anisotropy</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxViewports</name><comment>max number of active viewports</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxViewportDimensions</name>[2]<comment>max viewport dimensions (x,y)</comment></member>
            <member limittype="range"><type>float</type>                <name>viewportBoundsRange</name>[2]<comment>viewport bounds range (min,max)</comment></member>
            <member limittype="bits"><type>uint32_t</type>              <name>viewportSubPixelBits</name><comment>number bits of subpixel precision for viewport</comment></member>
            <member limittype="max,pot"><type>size_t</type>             <name>minMemoryMapAlignment</name><comment>min required alignment of pointers returned by MapMemory (bytes)</comment></member>
            <member limittype="min,pot"><type>VkDeviceSize</type>       <name>minTexelBufferOffsetAlignment</name><comment>min required alignment for texel buffer offsets (bytes) </comment></member>
            <member limittype="min,pot"><type>VkDeviceSize</type>       <name>minUniformBufferOffsetAlignment</name><comment>min required alignment for uniform buffer sizes and offsets (bytes)</comment></member>
            <member limittype="min,pot"><type>VkDeviceSize</type>       <name>minStorageBufferOffsetAlignment</name><comment>min required alignment for storage buffer offsets (bytes)</comment></member>
            <member limittype="min"><type>int32_t</type>                <name>minTexelOffset</name><comment>min texel offset for OpTextureSampleOffset</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxTexelOffset</name><comment>max texel offset for OpTextureSampleOffset</comment></member>
            <member limittype="min"><type>int32_t</type>                <name>minTexelGatherOffset</name><comment>min texel offset for OpTextureGatherOffset</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxTexelGatherOffset</name><comment>max texel offset for OpTextureGatherOffset</comment></member>
            <member limittype="min"><type>float</type>                  <name>minInterpolationOffset</name><comment>furthest negative offset for interpolateAtOffset</comment></member>
            <member limittype="max"><type>float</type>                  <name>maxInterpolationOffset</name><comment>furthest positive offset for interpolateAtOffset</comment></member>
            <member limittype="bits"><type>uint32_t</type>              <name>subPixelInterpolationOffsetBits</name><comment>number of subpixel bits for interpolateAtOffset</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxFramebufferWidth</name><comment>max width for a framebuffer</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxFramebufferHeight</name><comment>max height for a framebuffer</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxFramebufferLayers</name><comment>max layer count for a layered framebuffer</comment></member>
            <member limittype="bitmask" optional="true"><type>VkSampleCountFlags</type>     <name>framebufferColorSampleCounts</name><comment>supported color sample counts for a framebuffer</comment></member>
            <member limittype="bitmask" optional="true"><type>VkSampleCountFlags</type>     <name>framebufferDepthSampleCounts</name><comment>supported depth sample counts for a framebuffer</comment></member>
            <member limittype="bitmask" optional="true"><type>VkSampleCountFlags</type>     <name>framebufferStencilSampleCounts</name><comment>supported stencil sample counts for a framebuffer</comment></member>
            <member limittype="bitmask" optional="true"><type>VkSampleCountFlags</type>     <name>framebufferNoAttachmentsSampleCounts</name><comment>supported sample counts for a subpass which uses no attachments</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxColorAttachments</name><comment>max number of color attachments per subpass</comment></member>
            <member limittype="bitmask" optional="true"><type>VkSampleCountFlags</type>     <name>sampledImageColorSampleCounts</name><comment>supported color sample counts for a non-integer sampled image</comment></member>
            <member limittype="bitmask" optional="true"><type>VkSampleCountFlags</type>     <name>sampledImageIntegerSampleCounts</name><comment>supported sample counts for an integer image</comment></member>
            <member limittype="bitmask" optional="true"><type>VkSampleCountFlags</type>     <name>sampledImageDepthSampleCounts</name><comment>supported depth sample counts for a sampled image</comment></member>
            <member limittype="bitmask" optional="true"><type>VkSampleCountFlags</type>     <name>sampledImageStencilSampleCounts</name><comment>supported stencil sample counts for a sampled image</comment></member>
            <member limittype="bitmask" optional="true"><type>VkSampleCountFlags</type>     <name>storageImageSampleCounts</name><comment>supported sample counts for a storage image</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxSampleMaskWords</name><comment>max number of sample mask words</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>           <name>timestampComputeAndGraphics</name><comment>timestamps on graphics and compute queues</comment></member>
            <member limittype="min,mul"><type>float</type>              <name>timestampPeriod</name><comment>number of nanoseconds it takes for timestamp query value to increment by 1</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxClipDistances</name><comment>max number of clip distances</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxCullDistances</name><comment>max number of cull distances</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxCombinedClipAndCullDistances</name><comment>max combined number of user clipping</comment></member>
            <member limittype="max"><type>uint32_t</type>               <name>discreteQueuePriorities</name><comment>distinct queue priorities available </comment></member>
            <member limittype="range"><type>float</type>                <name>pointSizeRange</name>[2]<comment>range (min,max) of supported point sizes</comment></member>
            <member limittype="range"><type>float</type>                <name>lineWidthRange</name>[2]<comment>range (min,max) of supported line widths</comment></member>
            <member limittype="min,mul"><type>float</type>              <name>pointSizeGranularity</name><comment>granularity of supported point sizes</comment></member>
            <member limittype="min,mul"><type>float</type>              <name>lineWidthGranularity</name><comment>granularity of supported line widths</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>           <name>strictLines</name><comment>line rasterization follows preferred rules</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>           <name>standardSampleLocations</name><comment>supports standard sample locations for all supported sample counts</comment></member>
            <member limittype="min,pot"><type>VkDeviceSize</type>       <name>optimalBufferCopyOffsetAlignment</name><comment>optimal offset of buffer copies</comment></member>
            <member limittype="min,pot"><type>VkDeviceSize</type>       <name>optimalBufferCopyRowPitchAlignment</name><comment>optimal pitch of buffer copies</comment></member>
            <member limittype="min,pot"><type>VkDeviceSize</type>       <name>nonCoherentAtomSize</name><comment>minimum size and alignment for non-coherent host-mapped device memory access</comment></member>
        </type>
        <type category="struct" name="VkSemaphoreCreateInfo">
            <member values="VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkSemaphoreCreateFlags</type> <name>flags</name><comment>Semaphore creation flags</comment></member>
        </type>
        <type category="struct" name="VkQueryPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkQueryPoolCreateFlags</type> <name>flags</name></member>
            <member><type>VkQueryType</type>            <name>queryType</name></member>
            <member><type>uint32_t</type>               <name>queryCount</name></member>
            <member optional="true" noautovalidity="true"><type>VkQueryPipelineStatisticFlags</type> <name>pipelineStatistics</name><comment>Optional</comment></member>
        </type>
        <type category="struct" name="VkFramebufferCreateInfo">
            <member values="VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkFramebufferCreateFlags</type>    <name>flags</name></member>
            <member><type>VkRenderPass</type>                           <name>renderPass</name></member>
            <member optional="true"><type>uint32_t</type>               <name>attachmentCount</name></member>
            <member noautovalidity="true" len="attachmentCount">const <type>VkImageView</type>*     <name>pAttachments</name></member>
            <member><type>uint32_t</type>               <name>width</name></member>
            <member><type>uint32_t</type>               <name>height</name></member>
            <member><type>uint32_t</type>               <name>layers</name></member>
        </type>
        <type category="struct" name="VkDrawIndirectCommand">
            <member><type>uint32_t</type>                       <name>vertexCount</name></member>
            <member><type>uint32_t</type>                       <name>instanceCount</name></member>
            <member><type>uint32_t</type>                       <name>firstVertex</name></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>firstInstance</name></member>
        </type>
        <type category="struct" name="VkDrawIndexedIndirectCommand">
            <member><type>uint32_t</type>                       <name>indexCount</name></member>
            <member><type>uint32_t</type>                       <name>instanceCount</name></member>
            <member><type>uint32_t</type>                       <name>firstIndex</name></member>
            <member><type>int32_t</type>                        <name>vertexOffset</name></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>firstInstance</name></member>
        </type>
        <type category="struct" name="VkDispatchIndirectCommand">
            <member noautovalidity="true"><type>uint32_t</type> <name>x</name></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>y</name></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>z</name></member>
        </type>
        <type category="struct" name="VkMultiDrawInfoEXT">
            <member><type>uint32_t</type> <name>firstVertex</name></member>
            <member><type>uint32_t</type> <name>vertexCount</name></member>
        </type>
        <type category="struct" name="VkMultiDrawIndexedInfoEXT">
            <member><type>uint32_t</type> <name>firstIndex</name></member>
            <member><type>uint32_t</type> <name>indexCount</name></member>
            <member><type>int32_t</type> <name>vertexOffset</name></member>
        </type>
        <type category="struct" name="VkSubmitInfo">
            <member values="VK_STRUCTURE_TYPE_SUBMIT_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>       <name>waitSemaphoreCount</name></member>
            <member len="waitSemaphoreCount">const <type>VkSemaphore</type>*     <name>pWaitSemaphores</name></member>
            <member optional="false,true" len="waitSemaphoreCount">const <type>VkPipelineStageFlags</type>*           <name>pWaitDstStageMask</name></member>
            <member optional="true"><type>uint32_t</type>       <name>commandBufferCount</name></member>
            <member len="commandBufferCount">const <type>VkCommandBuffer</type>*     <name>pCommandBuffers</name></member>
            <member optional="true"><type>uint32_t</type>       <name>signalSemaphoreCount</name></member>
            <member len="signalSemaphoreCount">const <type>VkSemaphore</type>*     <name>pSignalSemaphores</name></member>
        </type>
            <comment>WSI extensions</comment>
        <type category="struct" name="VkDisplayPropertiesKHR" returnedonly="true">
            <member><type>VkDisplayKHR</type>                     <name>display</name><comment>Handle of the display object</comment></member>
            <member len="null-terminated">const <type>char</type>*                      <name>displayName</name><comment>Name of the display</comment></member>
            <member><type>VkExtent2D</type>                       <name>physicalDimensions</name><comment>In millimeters?</comment></member>
            <member><type>VkExtent2D</type>                       <name>physicalResolution</name><comment>Max resolution for CRT?</comment></member>
            <member optional="true"><type>VkSurfaceTransformFlagsKHR</type>       <name>supportedTransforms</name><comment>one or more bits from VkSurfaceTransformFlagsKHR</comment></member>
            <member><type>VkBool32</type>                         <name>planeReorderPossible</name><comment>VK_TRUE if the overlay plane's z-order can be changed on this display.</comment></member>
            <member><type>VkBool32</type>                         <name>persistentContent</name><comment>VK_TRUE if this is a "smart" display that supports self-refresh/internal buffering.</comment></member>
        </type>
        <type category="struct" name="VkDisplayPlanePropertiesKHR" returnedonly="true">
            <member><type>VkDisplayKHR</type>                     <name>currentDisplay</name><comment>Display the plane is currently associated with.  Will be VK_NULL_HANDLE if the plane is not in use.</comment></member>
            <member><type>uint32_t</type>                         <name>currentStackIndex</name><comment>Current z-order of the plane.</comment></member>
        </type>
        <type category="struct" name="VkDisplayModeParametersKHR">
            <member><type>VkExtent2D</type>                       <name>visibleRegion</name><comment>Visible scanout region.</comment></member>
            <member noautovalidity="true"><type>uint32_t</type>   <name>refreshRate</name><comment>Number of times per second the display is updated.</comment></member>
        </type>
        <type category="struct" name="VkDisplayModePropertiesKHR" returnedonly="true">
            <member><type>VkDisplayModeKHR</type>                 <name>displayMode</name><comment>Handle of this display mode.</comment></member>
            <member><type>VkDisplayModeParametersKHR</type>       <name>parameters</name><comment>The parameters this mode uses.</comment></member>
        </type>
        <type category="struct" name="VkDisplayModeCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkDisplayModeCreateFlagsKHR</type>      <name>flags</name></member>
            <member><type>VkDisplayModeParametersKHR</type>       <name>parameters</name><comment>The parameters this mode uses.</comment></member>
        </type>
        <type category="struct" name="VkDisplayPlaneCapabilitiesKHR" returnedonly="true">
            <member optional="true"><type>VkDisplayPlaneAlphaFlagsKHR</type>      <name>supportedAlpha</name><comment>Types of alpha blending supported, if any.</comment></member>
            <member><type>VkOffset2D</type>                       <name>minSrcPosition</name><comment>Does the plane have any position and extent restrictions?</comment></member>
            <member><type>VkOffset2D</type>                       <name>maxSrcPosition</name></member>
            <member><type>VkExtent2D</type>                       <name>minSrcExtent</name></member>
            <member><type>VkExtent2D</type>                       <name>maxSrcExtent</name></member>
            <member><type>VkOffset2D</type>                       <name>minDstPosition</name></member>
            <member><type>VkOffset2D</type>                       <name>maxDstPosition</name></member>
            <member><type>VkExtent2D</type>                       <name>minDstExtent</name></member>
            <member><type>VkExtent2D</type>                       <name>maxDstExtent</name></member>
        </type>
        <type category="struct" name="VkDisplaySurfaceCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkDisplaySurfaceCreateFlagsKHR</type>   <name>flags</name></member>
            <member><type>VkDisplayModeKHR</type>                 <name>displayMode</name><comment>The mode to use when displaying this surface</comment></member>
            <member><type>uint32_t</type>                         <name>planeIndex</name><comment>The plane on which this surface appears.  Must be between 0 and the value returned by vkGetPhysicalDeviceDisplayPlanePropertiesKHR() in pPropertyCount.</comment></member>
            <member><type>uint32_t</type>                         <name>planeStackIndex</name><comment>The z-order of the plane.</comment></member>
            <member><type>VkSurfaceTransformFlagBitsKHR</type>    <name>transform</name><comment>Transform to apply to the images as part of the scanout operation</comment></member>
            <member><type>float</type>                            <name>globalAlpha</name><comment>Global alpha value.  Must be between 0 and 1, inclusive.  Ignored if alphaMode is not VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR</comment></member>
            <member><type>VkDisplayPlaneAlphaFlagBitsKHR</type>   <name>alphaMode</name><comment>The type of alpha blending to use. Must be one of the bits from VkDisplayPlaneCapabilitiesKHR::supportedAlpha for this display plane</comment></member>
            <member><type>VkExtent2D</type>                       <name>imageExtent</name><comment>size of the images to use with this surface</comment></member>
        </type>
        <type category="struct" name="VkDisplaySurfaceStereoCreateInfoNV" structextends="VkDisplaySurfaceCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_DISPLAY_SURFACE_STEREO_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*      <name>pNext</name></member>
            <member><type>VkDisplaySurfaceStereoTypeNV</type>     <name>stereoType</name><comment>The 3D stereo type to use when presenting this surface.</comment></member>
        </type>
        <type category="struct" name="VkDisplayPresentInfoKHR" structextends="VkPresentInfoKHR">
            <member values="VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkRect2D</type>                         <name>srcRect</name><comment>Rectangle within the presentable image to read pixel data from when presenting to the display.</comment></member>
            <member><type>VkRect2D</type>                         <name>dstRect</name><comment>Rectangle within the current display mode's visible region to display srcRectangle in.</comment></member>
            <member><type>VkBool32</type>                         <name>persistent</name><comment>For smart displays, use buffered mode.  If the display properties member "persistentMode" is VK_FALSE, this member must always be VK_FALSE.</comment></member>
        </type>
        <type category="struct" name="VkSurfaceCapabilitiesKHR" returnedonly="true">
            <member><type>uint32_t</type>                         <name>minImageCount</name><comment>Supported minimum number of images for the surface</comment></member>
            <member><type>uint32_t</type>                         <name>maxImageCount</name><comment>Supported maximum number of images for the surface, 0 for unlimited</comment></member>
            <member><type>VkExtent2D</type>                       <name>currentExtent</name><comment>Current image width and height for the surface, (0, 0) if undefined</comment></member>
            <member><type>VkExtent2D</type>                       <name>minImageExtent</name><comment>Supported minimum image width and height for the surface</comment></member>
            <member><type>VkExtent2D</type>                       <name>maxImageExtent</name><comment>Supported maximum image width and height for the surface</comment></member>
            <member><type>uint32_t</type>                         <name>maxImageArrayLayers</name><comment>Supported maximum number of image layers for the surface</comment></member>
            <member><type>VkSurfaceTransformFlagsKHR</type>       <name>supportedTransforms</name><comment>1 or more bits representing the transforms supported</comment></member>
            <member><type>VkSurfaceTransformFlagBitsKHR</type>    <name>currentTransform</name><comment>The surface's current transform relative to the device's natural orientation</comment></member>
            <member><type>VkCompositeAlphaFlagsKHR</type>         <name>supportedCompositeAlpha</name><comment>1 or more bits representing the alpha compositing modes supported</comment></member>
            <member><type>VkImageUsageFlags</type>                <name>supportedUsageFlags</name><comment>Supported image usage flags for the surface</comment></member>
        </type>
        <type category="struct" name="VkAndroidSurfaceCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                    <name>pNext</name></member>
            <member optional="true"><type>VkAndroidSurfaceCreateFlagsKHR</type> <name>flags</name></member>
            <member noautovalidity="true">struct <type>ANativeWindow</type>*    <name>window</name></member>
        </type>
        <type category="struct" name="VkViSurfaceCreateInfoNN">
            <member values="VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkViSurfaceCreateFlagsNN</type>   <name>flags</name></member>
            <member noautovalidity="true"><type>void</type>*                            <name>window</name></member>
        </type>
        <type category="struct" name="VkWaylandSurfaceCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkWaylandSurfaceCreateFlagsKHR</type>   <name>flags</name></member>
            <member noautovalidity="true">struct <type>wl_display</type>*               <name>display</name></member>
            <member noautovalidity="true">struct <type>wl_surface</type>*               <name>surface</name></member>
        </type>
        <type category="struct" name="VkWin32SurfaceCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkWin32SurfaceCreateFlagsKHR</type>   <name>flags</name></member>
            <member><type>HINSTANCE</type>                        <name>hinstance</name></member>
            <member><type>HWND</type>                             <name>hwnd</name></member>
        </type>
        <type category="struct" name="VkXlibSurfaceCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkXlibSurfaceCreateFlagsKHR</type>   <name>flags</name></member>
            <member noautovalidity="true"><type>Display</type>*                         <name>dpy</name></member>
            <member><type>Window</type>                           <name>window</name></member>
        </type>
        <type category="struct" name="VkXcbSurfaceCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkXcbSurfaceCreateFlagsKHR</type>   <name>flags</name></member>
            <member noautovalidity="true"><type>xcb_connection_t</type>*                <name>connection</name></member>
            <member><type>xcb_window_t</type>                     <name>window</name></member>
        </type>
        <type category="struct" name="VkDirectFBSurfaceCreateInfoEXT">
            <member values="VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkDirectFBSurfaceCreateFlagsEXT</type>   <name>flags</name></member>
            <member noautovalidity="true"><type>IDirectFB</type>*                       <name>dfb</name></member>
            <member noautovalidity="true"><type>IDirectFBSurface</type>*                <name>surface</name></member>
        </type>
        <type category="struct" name="VkImagePipeSurfaceCreateInfoFUCHSIA">
            <member values="VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkImagePipeSurfaceCreateFlagsFUCHSIA</type>   <name>flags</name></member>
            <member><type>zx_handle_t</type>                      <name>imagePipeHandle</name></member>
        </type>
        <type category="struct" name="VkStreamDescriptorSurfaceCreateInfoGGP">
            <member values="VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkStreamDescriptorSurfaceCreateFlagsGGP</type> <name>flags</name></member>
            <member><type>GgpStreamDescriptor</type>              <name>streamDescriptor</name></member>
        </type>
        <type category="struct" name="VkScreenSurfaceCreateInfoQNX">
            <member values="VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkScreenSurfaceCreateFlagsQNX</type>    <name>flags</name></member>
            <member noautovalidity="true">struct <type>_screen_context</type>*    <name>context</name></member>
            <member noautovalidity="true">struct <type>_screen_window</type>*     <name>window</name></member>
        </type>
        <type category="struct" name="VkSurfaceFormatKHR" returnedonly="true">
            <member><type>VkFormat</type>                         <name>format</name><comment>Supported pair of rendering format</comment></member>
            <member><type>VkColorSpaceKHR</type>                  <name>colorSpace</name><comment>and color space for the surface</comment></member>
        </type>
        <type category="struct" name="VkSwapchainCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkSwapchainCreateFlagsKHR</type>        <name>flags</name></member>
            <member><type>VkSurfaceKHR</type>                     <name>surface</name><comment>The swapchain's target surface</comment></member>
            <member><type>uint32_t</type>                         <name>minImageCount</name><comment>Minimum number of presentation images the application needs</comment></member>
            <member><type>VkFormat</type>                         <name>imageFormat</name><comment>Format of the presentation images</comment></member>
            <member><type>VkColorSpaceKHR</type>                  <name>imageColorSpace</name><comment>Colorspace of the presentation images</comment></member>
            <member><type>VkExtent2D</type>                       <name>imageExtent</name><comment>Dimensions of the presentation images</comment></member>
            <member><type>uint32_t</type>                         <name>imageArrayLayers</name><comment>Determines the number of views for multiview/stereo presentation</comment></member>
            <member><type>VkImageUsageFlags</type>                <name>imageUsage</name><comment>Bits indicating how the presentation images will be used</comment></member>
            <member><type>VkSharingMode</type>                    <name>imageSharingMode</name><comment>Sharing mode used for the presentation images</comment></member>
            <member optional="true"><type>uint32_t</type>         <name>queueFamilyIndexCount</name><comment>Number of queue families having access to the images in case of concurrent sharing mode</comment></member>
            <member noautovalidity="true" len="queueFamilyIndexCount">const <type>uint32_t</type>*                  <name>pQueueFamilyIndices</name><comment>Array of queue family indices having access to the images in case of concurrent sharing mode</comment></member>
            <member><type>VkSurfaceTransformFlagBitsKHR</type>    <name>preTransform</name><comment>The transform, relative to the device's natural orientation, applied to the image content prior to presentation</comment></member>
            <member><type>VkCompositeAlphaFlagBitsKHR</type>      <name>compositeAlpha</name><comment>The alpha blending mode used when compositing this surface with other surfaces in the window system</comment></member>
            <member><type>VkPresentModeKHR</type>                 <name>presentMode</name><comment>Which presentation mode to use for presents on this swap chain</comment></member>
            <member><type>VkBool32</type>                         <name>clipped</name><comment>Specifies whether presentable images may be affected by window clip regions</comment></member>
            <member api="vulkan" optional="true"><type>VkSwapchainKHR</type>                         <name>oldSwapchain</name><comment>Existing swap chain to replace, if any</comment></member>
            <member api="vulkansc" noautovalidity="true" optional="true"><type>VkSwapchainKHR</type> <name>oldSwapchain</name><comment>Existing swap chain to replace, if any</comment></member>
        </type>
        <type category="struct" name="VkPresentInfoKHR">
            <member values="VK_STRUCTURE_TYPE_PRESENT_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*  <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>         <name>waitSemaphoreCount</name><comment>Number of semaphores to wait for before presenting</comment></member>
            <member len="waitSemaphoreCount">const <type>VkSemaphore</type>* <name>pWaitSemaphores</name><comment>Semaphores to wait for before presenting</comment></member>
            <member><type>uint32_t</type>                         <name>swapchainCount</name><comment>Number of swapchains to present in this call</comment></member>
            <member len="swapchainCount">const <type>VkSwapchainKHR</type>* <name>pSwapchains</name><comment>Swapchains to present an image from</comment></member>
            <member len="swapchainCount">const <type>uint32_t</type>* <name>pImageIndices</name><comment>Indices of which presentable images to present</comment></member>
            <member optional="true" len="swapchainCount"><type>VkResult</type>* <name>pResults</name><comment>Optional (i.e. if non-NULL) VkResult for each swapchain</comment></member>
        </type>
        <type category="struct" name="VkDebugReportCallbackCreateInfoEXT" structextends="VkInstanceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkDebugReportFlagsEXT</type>            <name>flags</name><comment>Indicates which events call this callback</comment></member>
            <member><type>PFN_vkDebugReportCallbackEXT</type>     <name>pfnCallback</name><comment>Function pointer of a callback function</comment></member>
            <member optional="true"><type>void</type>*            <name>pUserData</name><comment>Data provided to callback function</comment></member>
        </type>
        <type category="struct" name="VkValidationFlagsEXT" structextends="VkInstanceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT"><type>VkStructureType</type>                  <name>sType</name><comment>Must be VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT</comment></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>disabledValidationCheckCount</name><comment>Number of validation checks to disable</comment></member>
            <member len="disabledValidationCheckCount">const <type>VkValidationCheckEXT</type>* <name>pDisabledValidationChecks</name><comment>Validation checks to disable</comment></member>
        </type>
        <type category="struct" name="VkValidationFeaturesEXT" structextends="VkInstanceCreateInfo,VkShaderModuleCreateInfo,VkShaderCreateInfoEXT">
            <member values="VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT"><type>VkStructureType</type>  <name>sType</name><comment>Must be VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT</comment></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                         <name>enabledValidationFeatureCount</name><comment>Number of validation features to enable</comment></member>
            <member len="enabledValidationFeatureCount">const <type>VkValidationFeatureEnableEXT</type>* <name>pEnabledValidationFeatures</name><comment>Validation features to enable</comment></member>
            <member optional="true"><type>uint32_t</type>                         <name>disabledValidationFeatureCount</name><comment>Number of validation features to disable</comment></member>
            <member len="disabledValidationFeatureCount">const <type>VkValidationFeatureDisableEXT</type>* <name>pDisabledValidationFeatures</name><comment>Validation features to disable</comment></member>
        </type>
        <type category="struct" name="VkLayerSettingsCreateInfoEXT" allowduplicate="true" structextends="VkInstanceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT"><type>VkStructureType</type>  <name>sType</name><comment>Must be VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT</comment></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                         <name>settingCount</name><comment>Number of settings to configure</comment></member>
            <member len="settingCount">const <type>VkLayerSettingEXT</type>* <name>pSettings</name><comment>Validation features to enable</comment></member>
        </type>
        <type category="struct" name="VkLayerSettingEXT">
            <member len="null-terminated">const <type>char</type>* <name>pLayerName</name></member>
            <member len="null-terminated">const <type>char</type>* <name>pSettingName</name></member>
            <member><type>VkLayerSettingTypeEXT</type>       <name>type</name><comment>The type of the object</comment></member>
            <member optional="true"><type>uint32_t</type>                         <name>valueCount</name><comment>Number of values of the setting</comment></member>
            <member noautovalidity="true" len="valueCount">const <type>void</type>* <name>pValues</name><comment>Values to pass for a setting</comment></member>
        </type>
        <type category="struct" name="VkApplicationParametersEXT" allowduplicate="true" structextends="VkApplicationInfo,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_APPLICATION_PARAMETERS_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>uint32_t</type>                           <name>vendorID</name></member>
            <member optional="true"><type>uint32_t</type>           <name>deviceID</name></member>
            <member><type>uint32_t</type>                           <name>key</name></member>
            <member><type>uint64_t</type>                           <name>value</name></member>
        </type>
        <type category="struct" name="VkPipelineRasterizationStateRasterizationOrderAMD" structextends="VkPipelineRasterizationStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkRasterizationOrderAMD</type>          <name>rasterizationOrder</name><comment>Rasterization order to use for the pipeline</comment></member>
        </type>
        <type category="struct" name="VkDebugMarkerObjectNameInfoEXT">
            <member values="VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkDebugReportObjectTypeEXT</type>       <name>objectType</name><comment>The type of the object</comment></member>
            <member objecttype="objectType"><type>uint64_t</type>                         <name>object</name><comment>The handle of the object, cast to uint64_t</comment></member>
            <member len="null-terminated">const <type>char</type>* <name>pObjectName</name><comment>Name to apply to the object</comment></member>
        </type>
        <type category="struct" name="VkDebugMarkerObjectTagInfoEXT">
            <member values="VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkDebugReportObjectTypeEXT</type>       <name>objectType</name><comment>The type of the object</comment></member>
            <member  objecttype="objectType"><type>uint64_t</type>                         <name>object</name><comment>The handle of the object, cast to uint64_t</comment></member>
            <member><type>uint64_t</type>                         <name>tagName</name><comment>The name of the tag to set on the object</comment></member>
            <member><type>size_t</type>                           <name>tagSize</name><comment>The length in bytes of the tag data</comment></member>
            <member len="tagSize">const <type>void</type>*        <name>pTag</name><comment>Tag data to attach to the object</comment></member>
        </type>
        <type category="struct" name="VkDebugMarkerMarkerInfoEXT">
            <member values="VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member len="null-terminated">const <type>char</type>* <name>pMarkerName</name><comment>Name of the debug marker</comment></member>
            <member><type>float</type>            <name>color</name>[4]<comment>Optional color for debug marker</comment></member>
        </type>
        <type category="struct" name="VkDedicatedAllocationImageCreateInfoNV" structextends="VkImageCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>dedicatedAllocation</name><comment>Whether this image uses a dedicated allocation</comment></member>
        </type>
        <type category="struct" name="VkDedicatedAllocationBufferCreateInfoNV" structextends="VkBufferCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>dedicatedAllocation</name><comment>Whether this buffer uses a dedicated allocation</comment></member>
        </type>
        <type category="struct" name="VkDedicatedAllocationMemoryAllocateInfoNV" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkImage</type>          <name>image</name><comment>Image that this allocation will be bound to</comment></member>
            <member optional="true"><type>VkBuffer</type>         <name>buffer</name><comment>Buffer that this allocation will be bound to</comment></member>
        </type>
        <type category="struct" name="VkExternalImageFormatPropertiesNV" returnedonly="true">
            <member><type>VkImageFormatProperties</type>          <name>imageFormatProperties</name></member>
            <member optional="true"><type>VkExternalMemoryFeatureFlagsNV</type>   <name>externalMemoryFeatures</name></member>
            <member optional="true"><type>VkExternalMemoryHandleTypeFlagsNV</type> <name>exportFromImportedHandleTypes</name></member>
            <member optional="true"><type>VkExternalMemoryHandleTypeFlagsNV</type> <name>compatibleHandleTypes</name></member>
        </type>
        <type category="struct" name="VkExternalMemoryImageCreateInfoNV" structextends="VkImageCreateInfo">
            <member values="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkExternalMemoryHandleTypeFlagsNV</type> <name>handleTypes</name></member>
        </type>
        <type category="struct" name="VkExportMemoryAllocateInfoNV" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkExternalMemoryHandleTypeFlagsNV</type> <name>handleTypes</name></member>
        </type>
        <type category="struct" name="VkImportMemoryWin32HandleInfoNV" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkExternalMemoryHandleTypeFlagsNV</type> <name>handleType</name></member>
            <member optional="true"><type>HANDLE</type>                           <name>handle</name></member>
        </type>
        <type category="struct" name="VkExportMemoryWin32HandleInfoNV" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true">const <type>SECURITY_ATTRIBUTES</type>*       <name>pAttributes</name></member>
            <member optional="true"><type>DWORD</type>                            <name>dwAccess</name></member>
        </type>
        <type category="struct" name="VkExportMemorySciBufInfoNV" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_EXPORT_MEMORY_SCI_BUF_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                 <name>pNext</name></member>
            <member><type>NvSciBufAttrList</type>                            <name>pAttributes</name></member>
        </type>
        <type category="struct" name="VkImportMemorySciBufInfoNV" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_IMPORT_MEMORY_SCI_BUF_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkExternalMemoryHandleTypeFlagBits</type>     <name>handleType</name></member>
            <member><type>NvSciBufObj</type>                            <name>handle</name></member>
        </type>
        <type category="struct" name="VkMemoryGetSciBufInfoNV">
            <member values="VK_STRUCTURE_TYPE_MEMORY_GET_SCI_BUF_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkDeviceMemory</type>                         <name>memory</name></member>
            <member><type>VkExternalMemoryHandleTypeFlagBits</type>     <name>handleType</name></member>
        </type>
        <type category="struct" name="VkMemorySciBufPropertiesNV">
            <member values="VK_STRUCTURE_TYPE_MEMORY_SCI_BUF_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>uint32_t</type>                               <name>memoryTypeBits</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExternalMemorySciBufFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCI_BUF_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                       <name>pNext</name></member>
            <member><type>VkBool32</type>                                    <name>sciBufImport</name></member>
            <member><type>VkBool32</type>                                    <name>sciBufExport</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExternalSciBufFeaturesNV"  alias="VkPhysicalDeviceExternalMemorySciBufFeaturesNV"/>
        <type category="struct" name="VkWin32KeyedMutexAcquireReleaseInfoNV" structextends="VkSubmitInfo,VkSubmitInfo2">
            <member values="VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                         <name>acquireCount</name></member>
            <member len="acquireCount">const <type>VkDeviceMemory</type>*            <name>pAcquireSyncs</name></member>
            <member len="acquireCount">const <type>uint64_t</type>*                  <name>pAcquireKeys</name></member>
            <member len="acquireCount">const <type>uint32_t</type>*                  <name>pAcquireTimeoutMilliseconds</name></member>
            <member optional="true"><type>uint32_t</type>                         <name>releaseCount</name></member>
            <member len="releaseCount">const <type>VkDeviceMemory</type>*            <name>pReleaseSyncs</name></member>
            <member len="releaseCount">const <type>uint64_t</type>*                  <name>pReleaseKeys</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member featurelink="deviceGeneratedCommandsNV"><type>VkBool32</type>                       <name>deviceGeneratedCommands</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*          <name>pNext</name></member>
            <member><type>VkBool32</type>                       <name>deviceGeneratedCompute</name></member>
            <member><type>VkBool32</type>                       <name>deviceGeneratedComputePipelines</name></member>
            <member><type>VkBool32</type>                       <name>deviceGeneratedComputeCaptureReplay</name></member>
        </type>
        <type category="struct" name="VkDevicePrivateDataCreateInfo" allowduplicate="true" structextends="VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member><type>uint32_t</type>                               <name>privateDataSlotRequestCount</name></member>
        </type>
        <type category="struct" name="VkDevicePrivateDataCreateInfoEXT" alias="VkDevicePrivateDataCreateInfo"/>
        <type category="struct" name="VkPrivateDataSlotCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member><type>VkPrivateDataSlotCreateFlags</type>        <name>flags</name></member>
        </type>
        <type category="struct" name="VkPrivateDataSlotCreateInfoEXT" alias="VkPrivateDataSlotCreateInfo"/>
        <type category="struct" name="VkPhysicalDevicePrivateDataFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                                  <name>pNext</name></member>
            <member><type>VkBool32</type>                               <name>privateData</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePrivateDataFeaturesEXT" alias="VkPhysicalDevicePrivateDataFeatures"/>
        <type category="struct" name="VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>         <name>maxGraphicsShaderGroupCount</name></member>
            <member limittype="max"><type>uint32_t</type>         <name>maxIndirectSequenceCount</name></member>
            <member limittype="max"><type>uint32_t</type>         <name>maxIndirectCommandsTokenCount</name></member>
            <member limittype="max"><type>uint32_t</type>         <name>maxIndirectCommandsStreamCount</name></member>
            <member limittype="max"><type>uint32_t</type>         <name>maxIndirectCommandsTokenOffset</name></member>
            <member limittype="max"><type>uint32_t</type>         <name>maxIndirectCommandsStreamStride</name></member>
            <member limittype="min"><type>uint32_t</type>         <name>minSequencesCountBufferOffsetAlignment</name></member>
            <member limittype="min"><type>uint32_t</type>         <name>minSequencesIndexBufferOffsetAlignment</name></member>
            <member limittype="min"><type>uint32_t</type>         <name>minIndirectCommandsBufferOffsetAlignment</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceClusterAccelerationStructureFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member><type>VkBool32</type>                                       <name>clusterAccelerationStructure</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceClusterAccelerationStructurePropertiesNV" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*    <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>maxVerticesPerCluster</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>maxTrianglesPerCluster</name></member>
            <member limittype="min"><type>uint32_t</type>                       <name>clusterScratchByteAlignment</name></member>
            <member limittype="min"><type>uint32_t</type>                       <name>clusterByteAlignment</name></member>
            <member limittype="min"><type>uint32_t</type>                       <name>clusterTemplateByteAlignment</name></member>
            <member limittype="min"><type>uint32_t</type>                       <name>clusterBottomLevelByteAlignment</name></member>
            <member limittype="min"><type>uint32_t</type>                       <name>clusterTemplateBoundsByteAlignment</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>maxClusterGeometryIndex</name></member>
        </type>
        <type category="struct" name="VkStridedDeviceAddressNV">
            <member><type>VkDeviceAddress</type>                    <name>startAddress</name></member>
            <member><type>VkDeviceSize</type>                       <name>strideInBytes</name><comment>Specified in bytes</comment></member>
        </type>
        <type category="struct" name="VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV" structextends="VkRayTracingPipelineCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CLUSTER_ACCELERATION_STRUCTURE_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                           <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>allowClusterAccelerationStructure</name></member>
        </type>
        <type category="struct" name="VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV">
            <comment>The bitfields in this structure are non-normative since bitfield ordering is implementation-defined in C. The specification defines the normative layout.</comment>
            <member><type>uint32_t</type>                           <name>geometryIndex</name>:24</member>
            <member><type>uint32_t</type>                           <name>reserved</name>:5</member>
            <member><type>uint32_t</type>                           <name>geometryFlags</name>:3</member>
        </type>
        <type category="struct" name="VkClusterAccelerationStructureMoveObjectsInfoNV">
            <member><type>VkDeviceAddress</type>                    <name>srcAccelerationStructure</name></member>
        </type>
        <type category="struct" name="VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV">
            <member><type>uint32_t</type>                           <name>clusterReferencesCount</name></member>
            <member><type>uint32_t</type>                           <name>clusterReferencesStride</name></member>
            <member><type>VkDeviceAddress</type>                    <name>clusterReferences</name></member>
        </type>
        <type category="struct" name="VkClusterAccelerationStructureBuildTriangleClusterInfoNV">
            <comment>The bitfields in this structure are non-normative since bitfield ordering is implementation-defined in C. The specification defines the normative layout.</comment>
            <member><type>uint32_t</type>                                       <name>clusterID</name></member>
            <member optional="true"><type>VkClusterAccelerationStructureClusterFlagsNV</type> <name>clusterFlags</name></member>
            <member><type>uint32_t</type>                                       <name>triangleCount</name>:9</member>
            <member><type>uint32_t</type>                                       <name>vertexCount</name>:9</member>
            <member><type>uint32_t</type>                                       <name>positionTruncateBitCount</name>:6</member>
            <member><type>uint32_t</type>                                       <name>indexType</name>:4</member>
            <member><type>uint32_t</type>                                       <name>opacityMicromapIndexType</name>:4</member>
            <member><type>VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV</type> <name>baseGeometryIndexAndGeometryFlags</name></member>
            <member><type>uint16_t</type>                                       <name>indexBufferStride</name></member>
            <member><type>uint16_t</type>                                       <name>vertexBufferStride</name></member>
            <member><type>uint16_t</type>                                       <name>geometryIndexAndFlagsBufferStride</name></member>
            <member><type>uint16_t</type>                                       <name>opacityMicromapIndexBufferStride</name></member>
            <member><type>VkDeviceAddress</type>                                <name>indexBuffer</name></member>
            <member><type>VkDeviceAddress</type>                                <name>vertexBuffer</name></member>
            <member><type>VkDeviceAddress</type>                                <name>geometryIndexAndFlagsBuffer</name></member>
            <member><type>VkDeviceAddress</type>                                <name>opacityMicromapArray</name></member>
            <member><type>VkDeviceAddress</type>                                <name>opacityMicromapIndexBuffer</name></member>
        </type>
        <type category="struct" name="VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV">
            <comment>The bitfields in this structure are non-normative since bitfield ordering is implementation-defined in C. The specification defines the normative layout.</comment>
            <member><type>uint32_t</type>                                       <name>clusterID</name></member>
            <member optional="true"><type>VkClusterAccelerationStructureClusterFlagsNV</type> <name>clusterFlags</name></member>
            <member><type>uint32_t</type>                                       <name>triangleCount</name>:9</member>
            <member><type>uint32_t</type>                                       <name>vertexCount</name>:9</member>
            <member><type>uint32_t</type>                                       <name>positionTruncateBitCount</name>:6</member>
            <member><type>uint32_t</type>                                       <name>indexType</name>:4</member>
            <member><type>uint32_t</type>                                       <name>opacityMicromapIndexType</name>:4</member>
            <member><type>VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV</type> <name>baseGeometryIndexAndGeometryFlags</name></member>
            <member><type>uint16_t</type>                                       <name>indexBufferStride</name></member>
            <member><type>uint16_t</type>                                       <name>vertexBufferStride</name></member>
            <member><type>uint16_t</type>                                       <name>geometryIndexAndFlagsBufferStride</name></member>
            <member><type>uint16_t</type>                                       <name>opacityMicromapIndexBufferStride</name></member>
            <member><type>VkDeviceAddress</type>                                <name>indexBuffer</name></member>
            <member><type>VkDeviceAddress</type>                                <name>vertexBuffer</name></member>
            <member><type>VkDeviceAddress</type>                                <name>geometryIndexAndFlagsBuffer</name></member>
            <member><type>VkDeviceAddress</type>                                <name>opacityMicromapArray</name></member>
            <member><type>VkDeviceAddress</type>                                <name>opacityMicromapIndexBuffer</name></member>
            <member><type>VkDeviceAddress</type>                                <name>instantiationBoundingBoxLimit</name></member>
        </type>
        <type category="struct" name="VkClusterAccelerationStructureInstantiateClusterInfoNV">
            <member><type>uint32_t</type>                                       <name>clusterIdOffset</name></member>
            <member><type>uint32_t</type>                                       <name>geometryIndexOffset</name>:24</member>
            <member><type>uint32_t</type>                                       <name>reserved</name>:8</member>
            <member><type>VkDeviceAddress</type>                                <name>clusterTemplateAddress</name></member>
            <member><type>VkStridedDeviceAddressNV</type>                       <name>vertexBuffer</name></member>
        </type>
        <type category="struct" name="VkClusterAccelerationStructureClustersBottomLevelInputNV">
            <member values="VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_CLUSTERS_BOTTOM_LEVEL_INPUT_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member><type>uint32_t</type>                                       <name>maxTotalClusterCount</name></member>
            <member><type>uint32_t</type>                                       <name>maxClusterCountPerAccelerationStructure</name></member>
        </type>
        <type category="struct" name="VkClusterAccelerationStructureTriangleClusterInputNV">
            <member values="VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_TRIANGLE_CLUSTER_INPUT_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member><type>VkFormat</type>                                       <name>vertexFormat</name></member>
            <member><type>uint32_t</type>                                       <name>maxGeometryIndexValue</name></member>
            <member><type>uint32_t</type>                                       <name>maxClusterUniqueGeometryCount</name></member>
            <member><type>uint32_t</type>                                       <name>maxClusterTriangleCount</name></member>
            <member><type>uint32_t</type>                                       <name>maxClusterVertexCount</name></member>
            <member><type>uint32_t</type>                                       <name>maxTotalTriangleCount</name></member>
            <member><type>uint32_t</type>                                       <name>maxTotalVertexCount</name></member>
            <member><type>uint32_t</type>                                       <name>minPositionTruncateBitCount</name></member>
        </type>
        <type category="struct" name="VkClusterAccelerationStructureMoveObjectsInputNV">
            <member values="VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_MOVE_OBJECTS_INPUT_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member><type>VkClusterAccelerationStructureTypeNV</type>           <name>type</name></member>
            <member><type>VkBool32</type>                                       <name>noMoveOverlap</name></member>
            <member><type>VkDeviceSize</type>                                   <name>maxMovedBytes</name></member>
        </type>
        <type category="union" name="VkClusterAccelerationStructureOpInputNV">
            <member selection="VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_CLUSTERS_BOTTOM_LEVEL_NV"><type>VkClusterAccelerationStructureClustersBottomLevelInputNV</type>*     <name>pClustersBottomLevel</name></member>
            <member selection="VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_NV,VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_TEMPLATE_NV,VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_INSTANTIATE_TRIANGLE_CLUSTER_NV"><type>VkClusterAccelerationStructureTriangleClusterInputNV</type>*         <name>pTriangleClusters</name></member>
            <member selection="VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_MOVE_OBJECTS_NV"><type>VkClusterAccelerationStructureMoveObjectsInputNV</type>*             <name>pMoveObjects</name></member>
        </type>
        <type category="struct" name="VkClusterAccelerationStructureInputInfoNV">
            <member values="VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_INPUT_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member><type>uint32_t</type>                                       <name>maxAccelerationStructureCount</name></member>
            <member optional="true"><type>VkBuildAccelerationStructureFlagsKHR</type>           <name>flags</name></member>
            <member><type>VkClusterAccelerationStructureOpTypeNV</type>        <name>opType</name></member>
            <member><type>VkClusterAccelerationStructureOpModeNV</type>        <name>opMode</name></member>
            <member selector="opType"><type>VkClusterAccelerationStructureOpInputNV</type>       <name>opInput</name></member>
        </type>
        <type category="struct" name="VkClusterAccelerationStructureCommandsInfoNV">
            <member values="VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_COMMANDS_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member><type>VkClusterAccelerationStructureInputInfoNV</type>      <name>input</name></member>
            <member><type>VkDeviceAddress</type>                                <name>dstImplicitData</name></member>
            <member><type>VkDeviceAddress</type>                                <name>scratchData</name></member>
            <member><type>VkStridedDeviceAddressRegionKHR</type>                <name>dstAddressesArray</name></member>
            <member><type>VkStridedDeviceAddressRegionKHR</type>                <name>dstSizesArray</name></member>
            <member><type>VkStridedDeviceAddressRegionKHR</type>                <name>srcInfosArray</name></member>
            <member><type>VkDeviceAddress</type>                                <name>srcInfosCount</name></member>
            <member optional="true"><type>VkClusterAccelerationStructureAddressResolutionFlagsNV</type> <name>addressResolutionFlags</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMultiDrawPropertiesEXT" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>         <name>maxMultiDrawCount</name></member>
        </type>
        <type category="struct" name="VkGraphicsShaderGroupCreateInfoNV">
            <member values="VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                <name>pNext</name></member>
            <member><type>uint32_t</type>                                                   <name>stageCount</name></member>
            <member len="stageCount">const <type>VkPipelineShaderStageCreateInfo</type>*    <name>pStages</name></member>
            <member noautovalidity="true" optional="true">const <type>VkPipelineVertexInputStateCreateInfo</type>*                <name>pVertexInputState</name></member>
            <member noautovalidity="true" optional="true">const <type>VkPipelineTessellationStateCreateInfo</type>*               <name>pTessellationState</name></member>
        </type>
        <type category="struct" name="VkGraphicsPipelineShaderGroupsCreateInfoNV" structextends="VkGraphicsPipelineCreateInfo">
            <member values="VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                                   <name>groupCount</name></member>
            <member len="groupCount">const <type>VkGraphicsShaderGroupCreateInfoNV</type>*  <name>pGroups</name></member>
            <member optional="true"><type>uint32_t</type>                                   <name>pipelineCount</name></member>
            <member len="pipelineCount">const <type>VkPipeline</type>*                      <name>pPipelines</name></member>
        </type>
        <type category="struct" name="VkBindShaderGroupIndirectCommandNV">
            <member><type>uint32_t</type>         <name>groupIndex</name></member>
        </type>
        <type category="struct" name="VkBindIndexBufferIndirectCommandNV">
            <member><type>VkDeviceAddress</type>  <name>bufferAddress</name></member>
            <member><type>uint32_t</type>         <name>size</name></member>
            <member><type>VkIndexType</type>      <name>indexType</name></member>
        </type>
        <type category="struct" name="VkBindVertexBufferIndirectCommandNV">
            <member><type>VkDeviceAddress</type>  <name>bufferAddress</name></member>
            <member><type>uint32_t</type>         <name>size</name></member>
            <member><type>uint32_t</type>         <name>stride</name></member>
        </type>
        <type category="struct" name="VkSetStateFlagsIndirectCommandNV">
            <member><type>uint32_t</type>          <name>data</name></member>
        </type>
        <type category="struct" name="VkIndirectCommandsStreamNV">
            <member><type>VkBuffer</type>      <name>buffer</name></member>
            <member><type>VkDeviceSize</type>  <name>offset</name></member>
        </type>
        <type category="struct" name="VkIndirectCommandsLayoutTokenNV">
            <member values="VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                    <name>pNext</name></member>
            <member><type>VkIndirectCommandsTokenTypeNV</type>  <name>tokenType</name></member>
            <member><type>uint32_t</type>                       <name>stream</name></member>
            <member><type>uint32_t</type>                       <name>offset</name></member>
            <member><type>uint32_t</type>                                <name>vertexBindingUnit</name></member>
            <member><type>VkBool32</type>                                <name>vertexDynamicStride</name></member>
            <member optional="true"><type>VkPipelineLayout</type>        <name>pushconstantPipelineLayout</name></member>
            <member optional="true"><type>VkShaderStageFlags</type>      <name>pushconstantShaderStageFlags</name></member>
            <member><type>uint32_t</type>                                <name>pushconstantOffset</name></member>
            <member><type>uint32_t</type>                                <name>pushconstantSize</name></member>
            <member optional="true"><type>VkIndirectStateFlagsNV</type>  <name>indirectStateFlags</name></member>
            <member optional="true"><type>uint32_t</type>                <name>indexTypeCount</name></member>
            <member len="indexTypeCount">const <type>VkIndexType</type>* <name>pIndexTypes</name></member>
            <member len="indexTypeCount">const <type>uint32_t</type>*    <name>pIndexTypeValues</name></member>
        </type>
        <type category="struct" name="VkIndirectCommandsLayoutCreateInfoNV">
            <member values="VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                             <name>pNext</name></member>
            <member optional="true"><type>VkIndirectCommandsLayoutUsageFlagsNV</type>    <name>flags</name></member>
            <member><type>VkPipelineBindPoint</type>                     <name>pipelineBindPoint</name></member>
            <member><type>uint32_t</type>                                <name>tokenCount</name></member>
            <member len="tokenCount">const <type>VkIndirectCommandsLayoutTokenNV</type>*  <name>pTokens</name></member>
            <member><type>uint32_t</type>                                <name>streamCount</name></member>
            <member len="streamCount">const <type>uint32_t</type>*       <name>pStreamStrides</name></member>
        </type>
        <type category="struct" name="VkGeneratedCommandsInfoNV">
            <member values="VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                        <name>pNext</name></member>
            <member><type>VkPipelineBindPoint</type>                <name>pipelineBindPoint</name></member>
            <member optional="true"><type>VkPipeline</type>         <name>pipeline</name></member>
            <member><type>VkIndirectCommandsLayoutNV</type>         <name>indirectCommandsLayout</name></member>
            <member><type>uint32_t</type>                           <name>streamCount</name></member>
            <member len="streamCount">const <type>VkIndirectCommandsStreamNV</type>*  <name>pStreams</name></member>
            <member><type>uint32_t</type>                           <name>sequencesCount</name></member>
            <member><type>VkBuffer</type>                           <name>preprocessBuffer</name></member>
            <member><type>VkDeviceSize</type>                       <name>preprocessOffset</name></member>
            <member><type>VkDeviceSize</type>                       <name>preprocessSize</name></member>
            <member optional="true"><type>VkBuffer</type>           <name>sequencesCountBuffer</name></member>
            <member><type>VkDeviceSize</type>                       <name>sequencesCountOffset</name></member>
            <member optional="true"><type>VkBuffer</type>           <name>sequencesIndexBuffer</name></member>
            <member><type>VkDeviceSize</type>                       <name>sequencesIndexOffset</name></member>
        </type>
        <type category="struct" name="VkGeneratedCommandsMemoryRequirementsInfoNV">
            <member values="VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                 <name>pNext</name></member>
            <member><type>VkPipelineBindPoint</type>         <name>pipelineBindPoint</name></member>
            <member optional="true"><type>VkPipeline</type>  <name>pipeline</name></member>
            <member><type>VkIndirectCommandsLayoutNV</type>  <name>indirectCommandsLayout</name></member>
            <member><type>uint32_t</type>                    <name>maxSequencesCount</name></member>
        </type>
        <type category="struct" name="VkPipelineIndirectDeviceAddressInfoNV">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*   <name>pNext</name></member>
            <member><type>VkPipelineBindPoint</type>           <name>pipelineBindPoint</name></member>
            <member><type>VkPipeline</type>                    <name>pipeline</name></member>
        </type>
        <type category="struct" name="VkBindPipelineIndirectCommandNV">
            <member><type>VkDeviceAddress</type>               <name>pipelineAddress</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFeatures2" structextends="VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkPhysicalDeviceFeatures</type>         <name>features</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFeatures2KHR"                            alias="VkPhysicalDeviceFeatures2"/>
        <type category="struct" name="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="struct"><type>VkPhysicalDeviceProperties</type>       <name>properties</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceProperties2KHR"                          alias="VkPhysicalDeviceProperties2"/>
        <type category="struct" name="VkFormatProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkFormatProperties</type>               <name>formatProperties</name></member>
        </type>
        <type category="struct" name="VkFormatProperties2KHR"                                  alias="VkFormatProperties2"/>
        <type category="struct" name="VkImageFormatProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkImageFormatProperties</type>          <name>imageFormatProperties</name></member>
        </type>
        <type category="struct" name="VkImageFormatProperties2KHR"                             alias="VkImageFormatProperties2"/>
        <type category="struct" name="VkPhysicalDeviceImageFormatInfo2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkFormat</type>                         <name>format</name></member>
            <member><type>VkImageType</type>                      <name>type</name></member>
            <member><type>VkImageTiling</type>                    <name>tiling</name></member>
            <member><type>VkImageUsageFlags</type>                <name>usage</name></member>
            <member optional="true"><type>VkImageCreateFlags</type> <name>flags</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImageFormatInfo2KHR"                     alias="VkPhysicalDeviceImageFormatInfo2"/>
        <type category="struct" name="VkQueueFamilyProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="struct"><type>VkQueueFamilyProperties</type>       <name>queueFamilyProperties</name></member>
        </type>
        <type category="struct" name="VkQueueFamilyProperties2KHR"                             alias="VkQueueFamilyProperties2"/>
        <type category="struct" name="VkPhysicalDeviceMemoryProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkPhysicalDeviceMemoryProperties</type> <name>memoryProperties</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMemoryProperties2KHR"                    alias="VkPhysicalDeviceMemoryProperties2"/>
        <type category="struct" name="VkSparseImageFormatProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="struct"><type>VkSparseImageFormatProperties</type> <name>properties</name></member>
        </type>
        <type category="struct" name="VkSparseImageFormatProperties2KHR"                       alias="VkSparseImageFormatProperties2"/>
        <type category="struct" name="VkPhysicalDeviceSparseImageFormatInfo2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkFormat</type>                         <name>format</name></member>
            <member><type>VkImageType</type>                      <name>type</name></member>
            <member><type>VkSampleCountFlagBits</type>            <name>samples</name></member>
            <member><type>VkImageUsageFlags</type>                <name>usage</name></member>
            <member><type>VkImageTiling</type>                    <name>tiling</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSparseImageFormatInfo2KHR"               alias="VkPhysicalDeviceSparseImageFormatInfo2"/>
        <type category="struct" name="VkPhysicalDevicePushDescriptorProperties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxPushDescriptors</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePushDescriptorPropertiesKHR" alias="VkPhysicalDevicePushDescriptorProperties"/>
        <type category="struct" name="VkConformanceVersion">
            <member><type>uint8_t</type>                          <name>major</name></member>
            <member><type>uint8_t</type>                          <name>minor</name></member>
            <member><type>uint8_t</type>                          <name>subminor</name></member>
            <member><type>uint8_t</type>                          <name>patch</name></member>
        </type>
        <type category="struct" name="VkConformanceVersionKHR"                                 alias="VkConformanceVersion"/>
        <type category="struct" name="VkPhysicalDeviceDriverProperties" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="exact"><type>VkDriverId</type>                  <name>driverID</name></member>
            <member limittype="exact" len="null-terminated"><type>char</type>  <name>driverName</name>[<enum>VK_MAX_DRIVER_NAME_SIZE</enum>]</member>
            <member limittype="exact" len="null-terminated"><type>char</type>  <name>driverInfo</name>[<enum>VK_MAX_DRIVER_INFO_SIZE</enum>]</member>
            <member limittype="exact"><type>VkConformanceVersion</type>        <name>conformanceVersion</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDriverPropertiesKHR"                     alias="VkPhysicalDeviceDriverProperties"/>
        <type category="struct" name="VkPresentRegionsKHR" structextends="VkPresentInfoKHR">
            <member values="VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>swapchainCount</name><comment>Copy of VkPresentInfoKHR::swapchainCount</comment></member>
            <member len="swapchainCount" optional="true">const <type>VkPresentRegionKHR</type>*   <name>pRegions</name><comment>The regions that have changed</comment></member>
        </type>
        <type category="struct" name="VkPresentRegionKHR">
            <member optional="true"><type>uint32_t</type>         <name>rectangleCount</name><comment>Number of rectangles in pRectangles</comment></member>
            <member optional="true" len="rectangleCount">const <type>VkRectLayerKHR</type>*   <name>pRectangles</name><comment>Array of rectangles that have changed in a swapchain's image(s)</comment></member>
        </type>
        <type category="struct" name="VkRectLayerKHR">
            <member><type>VkOffset2D</type>                       <name>offset</name><comment>upper-left corner of a rectangle that has not changed, in pixels of a presentation images</comment></member>
            <member noautovalidity="true"><type>VkExtent2D</type> <name>extent</name><comment>Dimensions of a rectangle that has not changed, in pixels of a presentation images</comment></member>
            <member><type>uint32_t</type>                         <name>layer</name><comment>Layer of a swapchain's image(s), for stereoscopic-3D images</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVariablePointersFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>variablePointersStorageBuffer</name></member>
            <member><type>VkBool32</type>                         <name>variablePointers</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVariablePointersFeaturesKHR"             alias="VkPhysicalDeviceVariablePointersFeatures"/>
        <type category="struct" name="VkPhysicalDeviceVariablePointerFeaturesKHR"              alias="VkPhysicalDeviceVariablePointersFeatures"/>
        <type category="struct" name="VkPhysicalDeviceVariablePointerFeatures"                 alias="VkPhysicalDeviceVariablePointersFeatures"/>
        <type category="struct" name="VkExternalMemoryProperties" returnedonly="true">
            <member><type>VkExternalMemoryFeatureFlags</type>  <name>externalMemoryFeatures</name></member>
            <member optional="true"><type>VkExternalMemoryHandleTypeFlags</type> <name>exportFromImportedHandleTypes</name></member>
            <member><type>VkExternalMemoryHandleTypeFlags</type> <name>compatibleHandleTypes</name></member>
        </type>
        <type category="struct" name="VkExternalMemoryPropertiesKHR"                           alias="VkExternalMemoryProperties"/>
        <type category="struct" name="VkPhysicalDeviceExternalImageFormatInfo"  structextends="VkPhysicalDeviceImageFormatInfo2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExternalImageFormatInfoKHR"              alias="VkPhysicalDeviceExternalImageFormatInfo"/>
        <type category="struct" name="VkExternalImageFormatProperties" returnedonly="true" structextends="VkImageFormatProperties2">
            <member values="VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkExternalMemoryProperties</type> <name>externalMemoryProperties</name></member>
        </type>
        <type category="struct" name="VkExternalImageFormatPropertiesKHR"                      alias="VkExternalImageFormatProperties"/>
        <type category="struct" name="VkPhysicalDeviceExternalBufferInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkBufferCreateFlags</type> <name>flags</name></member>
            <member optional="true" noautovalidity="true"><type>VkBufferUsageFlags</type> <name>usage</name></member>
            <member><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExternalBufferInfoKHR"                   alias="VkPhysicalDeviceExternalBufferInfo"/>
        <type category="struct" name="VkExternalBufferProperties" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkExternalMemoryProperties</type>    <name>externalMemoryProperties</name></member>
        </type>
        <type category="struct" name="VkExternalBufferPropertiesKHR"                           alias="VkExternalBufferProperties"/>
        <type category="struct" name="VkPhysicalDeviceIDProperties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="noauto"><type>uint8_t</type>                     <name>deviceUUID</name>[<enum>VK_UUID_SIZE</enum>]</member>
            <member limittype="noauto"><type>uint8_t</type>                     <name>driverUUID</name>[<enum>VK_UUID_SIZE</enum>]</member>
            <member limittype="noauto"><type>uint8_t</type>                     <name>deviceLUID</name>[<enum>VK_LUID_SIZE</enum>]</member>
            <member limittype="noauto"><type>uint32_t</type>                    <name>deviceNodeMask</name></member>
            <member limittype="noauto"><type>VkBool32</type>                    <name>deviceLUIDValid</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceIDPropertiesKHR"                         alias="VkPhysicalDeviceIDProperties"/>
        <type category="struct" name="VkExternalMemoryImageCreateInfo" structextends="VkImageCreateInfo">
            <member values="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkExternalMemoryHandleTypeFlags</type> <name>handleTypes</name></member>
        </type>
        <type category="struct" name="VkExternalMemoryImageCreateInfoKHR"                      alias="VkExternalMemoryImageCreateInfo"/>
        <type category="struct" name="VkExternalMemoryBufferCreateInfo" structextends="VkBufferCreateInfo">
            <member values="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkExternalMemoryHandleTypeFlags</type> <name>handleTypes</name></member>
        </type>
        <type category="struct" name="VkExternalMemoryBufferCreateInfoKHR"                     alias="VkExternalMemoryBufferCreateInfo"/>
        <type category="struct" name="VkExportMemoryAllocateInfo" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkExternalMemoryHandleTypeFlags</type> <name>handleTypes</name></member>
        </type>
        <type category="struct" name="VkExportMemoryAllocateInfoKHR"                           alias="VkExportMemoryAllocateInfo"/>
        <type category="struct" name="VkImportMemoryWin32HandleInfoKHR" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></member>
            <member optional="true"><type>HANDLE</type>           <name>handle</name></member>
            <member optional="true"><type>LPCWSTR</type>          <name>name</name></member>
        </type>
        <type category="struct" name="VkExportMemoryWin32HandleInfoKHR" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true">const <type>SECURITY_ATTRIBUTES</type>* <name>pAttributes</name></member>
            <member><type>DWORD</type>                            <name>dwAccess</name></member>
            <member><type>LPCWSTR</type>                          <name>name</name></member>
        </type>
        <type category="struct" name="VkImportMemoryZirconHandleInfoFUCHSIA" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></member>
            <member optional="true"><type>zx_handle_t</type>           <name>handle</name></member>
        </type>
        <type category="struct" name="VkMemoryZirconHandlePropertiesFUCHSIA" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>memoryTypeBits</name></member>
        </type>
        <type category="struct" name="VkMemoryGetZirconHandleInfoFUCHSIA">
            <member values="VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkDeviceMemory</type>                   <name>memory</name></member>
            <member><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></member>
        </type>
        <type category="struct" name="VkMemoryWin32HandlePropertiesKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>memoryTypeBits</name></member>
        </type>
        <type category="struct" name="VkMemoryGetWin32HandleInfoKHR">
            <member values="VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkDeviceMemory</type>                   <name>memory</name></member>
            <member><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></member>
        </type>
        <type category="struct" name="VkImportMemoryFdInfoKHR" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></member>
            <member><type>int</type>                              <name>fd</name></member>
        </type>
        <type category="struct" name="VkMemoryFdPropertiesKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>memoryTypeBits</name></member>
        </type>
        <type category="struct" name="VkMemoryGetFdInfoKHR">
            <member values="VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkDeviceMemory</type>                   <name>memory</name></member>
            <member><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></member>
        </type>
        <type category="struct" name="VkWin32KeyedMutexAcquireReleaseInfoKHR" structextends="VkSubmitInfo,VkSubmitInfo2">
            <member values="VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>         <name>acquireCount</name></member>
            <member len="acquireCount">const <type>VkDeviceMemory</type>* <name>pAcquireSyncs</name></member>
            <member len="acquireCount">const <type>uint64_t</type>* <name>pAcquireKeys</name></member>
            <member len="acquireCount">const <type>uint32_t</type>* <name>pAcquireTimeouts</name></member>
            <member optional="true"><type>uint32_t</type>         <name>releaseCount</name></member>
            <member len="releaseCount">const <type>VkDeviceMemory</type>* <name>pReleaseSyncs</name></member>
            <member len="releaseCount">const <type>uint64_t</type>* <name>pReleaseKeys</name></member>
        </type>
        <type category="struct" name="VkImportMemoryMetalHandleInfoEXT" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_IMPORT_MEMORY_METAL_HANDLE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></member>
            <member optional="true"><type>void</type>*           <name>handle</name></member>
        </type>
        <type category="struct" name="VkMemoryMetalHandlePropertiesEXT" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_MEMORY_METAL_HANDLE_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>memoryTypeBits</name></member>
        </type>
        <type category="struct" name="VkMemoryGetMetalHandleInfoEXT">
            <member values="VK_STRUCTURE_TYPE_MEMORY_GET_METAL_HANDLE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkDeviceMemory</type>                   <name>memory</name></member>
            <member><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExternalSemaphoreInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkExternalSemaphoreHandleTypeFlagBits</type> <name>handleType</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExternalSemaphoreInfoKHR"                alias="VkPhysicalDeviceExternalSemaphoreInfo"/>
        <type category="struct" name="VkExternalSemaphoreProperties" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkExternalSemaphoreHandleTypeFlags</type> <name>exportFromImportedHandleTypes</name></member>
            <member><type>VkExternalSemaphoreHandleTypeFlags</type> <name>compatibleHandleTypes</name></member>
            <member optional="true"><type>VkExternalSemaphoreFeatureFlags</type> <name>externalSemaphoreFeatures</name></member>
        </type>
        <type category="struct" name="VkExternalSemaphorePropertiesKHR"                        alias="VkExternalSemaphoreProperties"/>
        <type category="struct" name="VkExportSemaphoreCreateInfo" structextends="VkSemaphoreCreateInfo">
            <member values="VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkExternalSemaphoreHandleTypeFlags</type> <name>handleTypes</name></member>
        </type>
        <type category="struct" name="VkExportSemaphoreCreateInfoKHR"                          alias="VkExportSemaphoreCreateInfo"/>
        <type category="struct" name="VkImportSemaphoreWin32HandleInfoKHR">
            <member values="VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member externsync="true"><type>VkSemaphore</type>    <name>semaphore</name></member>
            <member optional="true"><type>VkSemaphoreImportFlags</type> <name>flags</name></member>
            <member noautovalidity="true"><type>VkExternalSemaphoreHandleTypeFlagBits</type> <name>handleType</name></member>
            <member optional="true"><type>HANDLE</type>           <name>handle</name></member>
            <member optional="true"><type>LPCWSTR</type>          <name>name</name></member>
        </type>
        <type category="struct" name="VkExportSemaphoreWin32HandleInfoKHR" structextends="VkSemaphoreCreateInfo">
            <member values="VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true">const <type>SECURITY_ATTRIBUTES</type>*       <name>pAttributes</name></member>
            <member><type>DWORD</type>                            <name>dwAccess</name></member>
            <member><type>LPCWSTR</type>                          <name>name</name></member>
        </type>
        <type category="struct" name="VkD3D12FenceSubmitInfoKHR" structextends="VkSubmitInfo">
            <member values="VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>         <name>waitSemaphoreValuesCount</name></member>
            <member optional="true" len="waitSemaphoreValuesCount">const <type>uint64_t</type>* <name>pWaitSemaphoreValues</name></member>
            <member optional="true"><type>uint32_t</type>         <name>signalSemaphoreValuesCount</name></member>
            <member optional="true" len="signalSemaphoreValuesCount">const <type>uint64_t</type>* <name>pSignalSemaphoreValues</name></member>
        </type>
        <type category="struct" name="VkSemaphoreGetWin32HandleInfoKHR">
            <member values="VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkSemaphore</type>                      <name>semaphore</name></member>
            <member><type>VkExternalSemaphoreHandleTypeFlagBits</type> <name>handleType</name></member>
        </type>
        <type category="struct" name="VkImportSemaphoreFdInfoKHR">
            <member values="VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member externsync="true"><type>VkSemaphore</type>    <name>semaphore</name></member>
            <member optional="true"><type>VkSemaphoreImportFlags</type> <name>flags</name></member>
            <member><type>VkExternalSemaphoreHandleTypeFlagBits</type> <name>handleType</name></member>
            <member><type>int</type>                              <name>fd</name></member>
        </type>
        <type category="struct" name="VkSemaphoreGetFdInfoKHR">
            <member values="VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkSemaphore</type>                      <name>semaphore</name></member>
            <member><type>VkExternalSemaphoreHandleTypeFlagBits</type> <name>handleType</name></member>
        </type>
        <type category="struct" name="VkImportSemaphoreZirconHandleInfoFUCHSIA">
            <member values="VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member externsync="true"><type>VkSemaphore</type>    <name>semaphore</name></member>
            <member optional="true"><type>VkSemaphoreImportFlags</type> <name>flags</name></member>
            <member><type>VkExternalSemaphoreHandleTypeFlagBits</type> <name>handleType</name></member>
            <member><type>zx_handle_t</type>                              <name>zirconHandle</name></member>
        </type>
        <type category="struct" name="VkSemaphoreGetZirconHandleInfoFUCHSIA">
            <member values="VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkSemaphore</type>                      <name>semaphore</name></member>
            <member><type>VkExternalSemaphoreHandleTypeFlagBits</type> <name>handleType</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExternalFenceInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkExternalFenceHandleTypeFlagBits</type> <name>handleType</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExternalFenceInfoKHR"                    alias="VkPhysicalDeviceExternalFenceInfo"/>
        <type category="struct" name="VkExternalFenceProperties" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkExternalFenceHandleTypeFlags</type> <name>exportFromImportedHandleTypes</name></member>
            <member><type>VkExternalFenceHandleTypeFlags</type> <name>compatibleHandleTypes</name></member>
            <member optional="true"><type>VkExternalFenceFeatureFlags</type> <name>externalFenceFeatures</name></member>
        </type>
        <type category="struct" name="VkExternalFencePropertiesKHR"                            alias="VkExternalFenceProperties"/>
        <type category="struct" name="VkExportFenceCreateInfo" structextends="VkFenceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkExternalFenceHandleTypeFlags</type> <name>handleTypes</name></member>
        </type>
        <type category="struct" name="VkExportFenceCreateInfoKHR"                              alias="VkExportFenceCreateInfo"/>
        <type category="struct" name="VkImportFenceWin32HandleInfoKHR">
            <member values="VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                        <name>pNext</name></member>
            <member externsync="true"><type>VkFence</type>                          <name>fence</name></member>
            <member optional="true"><type>VkFenceImportFlags</type>              <name>flags</name></member>
            <member noautovalidity="true"><type>VkExternalFenceHandleTypeFlagBits</type>  <name>handleType</name></member>
            <member optional="true"><type>HANDLE</type>                             <name>handle</name></member>
            <member optional="true"><type>LPCWSTR</type>                            <name>name</name></member>
        </type>
        <type category="struct" name="VkExportFenceWin32HandleInfoKHR" structextends="VkFenceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                <name>pNext</name></member>
            <member optional="true">const <type>SECURITY_ATTRIBUTES</type>* <name>pAttributes</name></member>
            <member><type>DWORD</type>                                      <name>dwAccess</name></member>
            <member><type>LPCWSTR</type>                                    <name>name</name></member>
        </type>
        <type category="struct" name="VkFenceGetWin32HandleInfoKHR">
            <member values="VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member><type>VkFence</type>                                <name>fence</name></member>
            <member><type>VkExternalFenceHandleTypeFlagBits</type>   <name>handleType</name></member>
        </type>
        <type category="struct" name="VkImportFenceFdInfoKHR">
            <member values="VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member externsync="true"><type>VkFence</type>              <name>fence</name></member>
            <member optional="true"><type>VkFenceImportFlags</type>  <name>flags</name></member>
            <member><type>VkExternalFenceHandleTypeFlagBits</type>   <name>handleType</name></member>
            <member><type>int</type>                                    <name>fd</name></member>
        </type>
        <type category="struct" name="VkFenceGetFdInfoKHR">
            <member values="VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member><type>VkFence</type>                                <name>fence</name></member>
            <member><type>VkExternalFenceHandleTypeFlagBits</type>   <name>handleType</name></member>
        </type>
        <type category="struct" name="VkExportFenceSciSyncInfoNV" structextends="VkFenceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_EXPORT_FENCE_SCI_SYNC_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>NvSciSyncAttrList</type>                      <name>pAttributes</name></member>
        </type>
        <type category="struct" name="VkImportFenceSciSyncInfoNV">
            <member values="VK_STRUCTURE_TYPE_IMPORT_FENCE_SCI_SYNC_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member externsync="true"><type>VkFence</type>              <name>fence</name></member>
            <member><type>VkExternalFenceHandleTypeFlagBits</type>      <name>handleType</name></member>
            <member><type>void</type>*                                  <name>handle</name></member>
        </type>
        <type category="struct" name="VkFenceGetSciSyncInfoNV">
            <member values="VK_STRUCTURE_TYPE_FENCE_GET_SCI_SYNC_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkFence</type>                                <name>fence</name></member>
            <member><type>VkExternalFenceHandleTypeFlagBits</type>      <name>handleType</name></member>
        </type>
        <type category="struct" name="VkExportSemaphoreSciSyncInfoNV" structextends="VkSemaphoreCreateInfo">
            <member values="VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_SCI_SYNC_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>NvSciSyncAttrList</type>                      <name>pAttributes</name></member>
        </type>
        <type category="struct" name="VkImportSemaphoreSciSyncInfoNV">
            <member values="VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_SCI_SYNC_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member externsync="true"><type>VkSemaphore</type>          <name>semaphore</name></member>
            <member><type>VkExternalSemaphoreHandleTypeFlagBits</type>  <name>handleType</name></member>
            <member><type>void</type>*                                  <name>handle</name></member>
        </type>
        <type category="struct" name="VkSemaphoreGetSciSyncInfoNV">
            <member values="VK_STRUCTURE_TYPE_SEMAPHORE_GET_SCI_SYNC_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkSemaphore</type>                            <name>semaphore</name></member>
            <member><type>VkExternalSemaphoreHandleTypeFlagBits</type>  <name>handleType</name></member>
        </type>
        <type category="struct" name="VkSciSyncAttributesInfoNV">
            <member values="VK_STRUCTURE_TYPE_SCI_SYNC_ATTRIBUTES_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkSciSyncClientTypeNV</type>                  <name>clientType</name></member>
            <member><type>VkSciSyncPrimitiveTypeNV</type>               <name>primitiveType</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExternalSciSyncFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SCI_SYNC_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member><type>VkBool32</type>                               <name>sciSyncFence</name></member>
            <member><type>VkBool32</type>                               <name>sciSyncSemaphore</name></member>
            <member><type>VkBool32</type>                               <name>sciSyncImport</name></member>
            <member><type>VkBool32</type>                               <name>sciSyncExport</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExternalSciSync2FeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SCI_SYNC_2_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member featurelink="sciSyncFence2"><type>VkBool32</type>   <name>sciSyncFence</name></member>
            <member><type>VkBool32</type>                               <name>sciSyncSemaphore2</name></member>
            <member featurelink="sciSyncImport2"><type>VkBool32</type>  <name>sciSyncImport</name></member>
            <member featurelink="sciSyncExport2"><type>VkBool32</type>  <name>sciSyncExport</name></member>
        </type>
        <type category="struct" name="VkSemaphoreSciSyncPoolCreateInfoNV">
            <member values="VK_STRUCTURE_TYPE_SEMAPHORE_SCI_SYNC_POOL_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>NvSciSyncObj</type>                           <name>handle</name></member>
        </type>
        <type category="struct" name="VkSemaphoreSciSyncCreateInfoNV" structextends="VkSemaphoreCreateInfo">
            <member values="VK_STRUCTURE_TYPE_SEMAPHORE_SCI_SYNC_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkSemaphoreSciSyncPoolNV</type>               <name>semaphorePool</name></member>
            <member>const <type>NvSciSyncFence</type>*                  <name>pFence</name></member>
        </type>
        <type category="struct" name="VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV" allowduplicate="true" structextends="VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_SEMAPHORE_SCI_SYNC_POOL_RESERVATION_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>uint32_t</type>                               <name>semaphoreSciSyncPoolRequestCount</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMultiviewFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>multiview</name><comment>Multiple views in a render pass</comment></member>
            <member><type>VkBool32</type>                         <name>multiviewGeometryShader</name><comment>Multiple views in a render pass w/ geometry shader</comment></member>
            <member><type>VkBool32</type>                         <name>multiviewTessellationShader</name><comment>Multiple views in a render pass w/ tessellation shader</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMultiviewFeaturesKHR"                    alias="VkPhysicalDeviceMultiviewFeatures"/>
        <type category="struct" name="VkPhysicalDeviceMultiviewProperties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxMultiviewViewCount</name><comment>max number of views in a subpass</comment></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxMultiviewInstanceIndex</name><comment>max instance index for a draw in a multiview subpass</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMultiviewPropertiesKHR"                  alias="VkPhysicalDeviceMultiviewProperties"/>
        <type category="struct" name="VkRenderPassMultiviewCreateInfo" structextends="VkRenderPassCreateInfo">
            <member values="VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO"><type>VkStructureType</type>        <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>               <name>subpassCount</name></member>
            <member len="subpassCount">const <type>uint32_t</type>*     <name>pViewMasks</name></member>
            <member optional="true"><type>uint32_t</type>               <name>dependencyCount</name></member>
            <member len="dependencyCount">const <type>int32_t</type>*   <name>pViewOffsets</name></member>
            <member optional="true"><type>uint32_t</type>               <name>correlationMaskCount</name></member>
            <member len="correlationMaskCount">const <type>uint32_t</type>* <name>pCorrelationMasks</name></member>
        </type>
        <type category="struct" name="VkRenderPassMultiviewCreateInfoKHR"                      alias="VkRenderPassMultiviewCreateInfo"/>
        <type category="struct" name="VkSurfaceCapabilities2EXT" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>minImageCount</name><comment>Supported minimum number of images for the surface</comment></member>
            <member><type>uint32_t</type>                         <name>maxImageCount</name><comment>Supported maximum number of images for the surface, 0 for unlimited</comment></member>
            <member><type>VkExtent2D</type>                       <name>currentExtent</name><comment>Current image width and height for the surface, (0, 0) if undefined</comment></member>
            <member><type>VkExtent2D</type>                       <name>minImageExtent</name><comment>Supported minimum image width and height for the surface</comment></member>
            <member><type>VkExtent2D</type>                       <name>maxImageExtent</name><comment>Supported maximum image width and height for the surface</comment></member>
            <member><type>uint32_t</type>                         <name>maxImageArrayLayers</name><comment>Supported maximum number of image layers for the surface</comment></member>
            <member><type>VkSurfaceTransformFlagsKHR</type>       <name>supportedTransforms</name><comment>1 or more bits representing the transforms supported</comment></member>
            <member><type>VkSurfaceTransformFlagBitsKHR</type>    <name>currentTransform</name><comment>The surface's current transform relative to the device's natural orientation</comment></member>
            <member><type>VkCompositeAlphaFlagsKHR</type>         <name>supportedCompositeAlpha</name><comment>1 or more bits representing the alpha compositing modes supported</comment></member>
            <member><type>VkImageUsageFlags</type>                <name>supportedUsageFlags</name><comment>Supported image usage flags for the surface</comment></member>
            <member optional="true"><type>VkSurfaceCounterFlagsEXT</type> <name>supportedSurfaceCounters</name></member>
        </type>
        <type category="struct" name="VkDisplayPowerInfoEXT">
            <member values="VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkDisplayPowerStateEXT</type>           <name>powerState</name></member>
        </type>
        <type category="struct" name="VkDeviceEventInfoEXT">
            <member values="VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkDeviceEventTypeEXT</type>             <name>deviceEvent</name></member>
        </type>
        <type category="struct" name="VkDisplayEventInfoEXT">
            <member values="VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkDisplayEventTypeEXT</type>            <name>displayEvent</name></member>
        </type>
        <type category="struct" name="VkSwapchainCounterCreateInfoEXT" structextends="VkSwapchainCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkSurfaceCounterFlagsEXT</type>         <name>surfaceCounters</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceGroupProperties" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>physicalDeviceCount</name></member>
            <member len="physicalDeviceCount"><type>VkPhysicalDevice</type>       <name>physicalDevices</name>[<enum>VK_MAX_DEVICE_GROUP_SIZE</enum>]</member>
            <member><type>VkBool32</type>                         <name>subsetAllocation</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceGroupPropertiesKHR"                      alias="VkPhysicalDeviceGroupProperties"/>
        <type category="struct" name="VkMemoryAllocateFlagsInfo" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkMemoryAllocateFlags</type> <name>flags</name></member>
            <member><type>uint32_t</type>                         <name>deviceMask</name></member>
        </type>
        <type category="struct" name="VkMemoryAllocateFlagsInfoKHR"                            alias="VkMemoryAllocateFlagsInfo"/>
        <type category="struct" name="VkBindBufferMemoryInfo">
            <member values="VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkBuffer</type>                         <name>buffer</name></member>
            <member><type>VkDeviceMemory</type>                   <name>memory</name></member>
            <member><type>VkDeviceSize</type>                     <name>memoryOffset</name></member>
        </type>
        <type category="struct" name="VkBindBufferMemoryInfoKHR"                               alias="VkBindBufferMemoryInfo"/>
        <type category="struct" name="VkBindBufferMemoryDeviceGroupInfo" structextends="VkBindBufferMemoryInfo">
            <member values="VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>         <name>deviceIndexCount</name></member>
            <member len="deviceIndexCount">const <type>uint32_t</type>*  <name>pDeviceIndices</name></member>
        </type>
        <type category="struct" name="VkBindBufferMemoryDeviceGroupInfoKHR"                    alias="VkBindBufferMemoryDeviceGroupInfo"/>
        <type category="struct" name="VkBindImageMemoryInfo">
            <member values="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkImage</type>                          <name>image</name></member>
            <member noautovalidity="true"><type>VkDeviceMemory</type>                   <name>memory</name></member>
            <member><type>VkDeviceSize</type>                     <name>memoryOffset</name></member>
        </type>
        <type category="struct" name="VkBindImageMemoryInfoKHR"                                alias="VkBindImageMemoryInfo"/>
        <type category="struct" name="VkBindImageMemoryDeviceGroupInfo" structextends="VkBindImageMemoryInfo">
            <member values="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>         <name>deviceIndexCount</name></member>
            <member len="deviceIndexCount">const <type>uint32_t</type>*  <name>pDeviceIndices</name></member>
            <member optional="true"><type>uint32_t</type>         <name>splitInstanceBindRegionCount</name></member>
            <member len="splitInstanceBindRegionCount">const <type>VkRect2D</type>*  <name>pSplitInstanceBindRegions</name></member>
        </type>
        <type category="struct" name="VkBindImageMemoryDeviceGroupInfoKHR"                     alias="VkBindImageMemoryDeviceGroupInfo"/>
        <type category="struct" name="VkDeviceGroupRenderPassBeginInfo" structextends="VkRenderPassBeginInfo,VkRenderingInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>deviceMask</name></member>
            <member optional="true"><type>uint32_t</type>         <name>deviceRenderAreaCount</name></member>
            <member len="deviceRenderAreaCount">const <type>VkRect2D</type>*  <name>pDeviceRenderAreas</name></member>
        </type>
        <type category="struct" name="VkDeviceGroupRenderPassBeginInfoKHR"                     alias="VkDeviceGroupRenderPassBeginInfo"/>
        <type category="struct" name="VkDeviceGroupCommandBufferBeginInfo" structextends="VkCommandBufferBeginInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>deviceMask</name></member>
        </type>
        <type category="struct" name="VkDeviceGroupCommandBufferBeginInfoKHR"                  alias="VkDeviceGroupCommandBufferBeginInfo"/>
        <type category="struct" name="VkDeviceGroupSubmitInfo" structextends="VkSubmitInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>         <name>waitSemaphoreCount</name></member>
            <member len="waitSemaphoreCount">const <type>uint32_t</type>*    <name>pWaitSemaphoreDeviceIndices</name></member>
            <member optional="true"><type>uint32_t</type>         <name>commandBufferCount</name></member>
            <member len="commandBufferCount">const <type>uint32_t</type>*    <name>pCommandBufferDeviceMasks</name></member>
            <member optional="true"><type>uint32_t</type>         <name>signalSemaphoreCount</name></member>
            <member len="signalSemaphoreCount">const <type>uint32_t</type>*  <name>pSignalSemaphoreDeviceIndices</name></member>
        </type>
        <type category="struct" name="VkDeviceGroupSubmitInfoKHR"                              alias="VkDeviceGroupSubmitInfo"/>
        <type category="struct" name="VkDeviceGroupBindSparseInfo" structextends="VkBindSparseInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>resourceDeviceIndex</name></member>
            <member><type>uint32_t</type>                         <name>memoryDeviceIndex</name></member>
        </type>
        <type category="struct" name="VkDeviceGroupBindSparseInfoKHR"                          alias="VkDeviceGroupBindSparseInfo"/>
        <type category="struct" name="VkDeviceGroupPresentCapabilitiesKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>presentMask</name>[<enum>VK_MAX_DEVICE_GROUP_SIZE</enum>]</member>
            <member><type>VkDeviceGroupPresentModeFlagsKHR</type> <name>modes</name></member>
        </type>
        <type category="struct" name="VkImageSwapchainCreateInfoKHR" structextends="VkImageCreateInfo">
            <member values="VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkSwapchainKHR</type>   <name>swapchain</name></member>
        </type>
        <type category="struct" name="VkBindImageMemorySwapchainInfoKHR" structextends="VkBindImageMemoryInfo">
            <member values="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member externsync="true"><type>VkSwapchainKHR</type> <name>swapchain</name></member>
            <member><type>uint32_t</type>                         <name>imageIndex</name></member>
        </type>
        <type category="struct" name="VkAcquireNextImageInfoKHR">
            <member values="VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member externsync="true"><type>VkSwapchainKHR</type> <name>swapchain</name></member>
            <member><type>uint64_t</type>                         <name>timeout</name></member>
            <member optional="true" externsync="true"><type>VkSemaphore</type> <name>semaphore</name></member>
            <member optional="true" externsync="true"><type>VkFence</type> <name>fence</name></member>
            <member><type>uint32_t</type>                         <name>deviceMask</name></member>
        </type>
        <type category="struct" name="VkDeviceGroupPresentInfoKHR" structextends="VkPresentInfoKHR">
            <member values="VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>         <name>swapchainCount</name></member>
            <member len="swapchainCount">const <type>uint32_t</type>* <name>pDeviceMasks</name></member>
            <member><type>VkDeviceGroupPresentModeFlagBitsKHR</type> <name>mode</name></member>
        </type>
        <type category="struct" name="VkDeviceGroupDeviceCreateInfo" structextends="VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                         <name>physicalDeviceCount</name></member>
            <member len="physicalDeviceCount">const <type>VkPhysicalDevice</type>*  <name>pPhysicalDevices</name></member>
        </type>
        <type category="struct" name="VkDeviceGroupDeviceCreateInfoKHR"                        alias="VkDeviceGroupDeviceCreateInfo"/>
        <type category="struct" name="VkDeviceGroupSwapchainCreateInfoKHR" structextends="VkSwapchainCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkDeviceGroupPresentModeFlagsKHR</type>                         <name>modes</name></member>
        </type>
        <type category="struct" name="VkDescriptorUpdateTemplateEntry">
            <member><type>uint32_t</type>                         <name>dstBinding</name><comment>Binding within the destination descriptor set to write</comment></member>
            <member><type>uint32_t</type>                         <name>dstArrayElement</name><comment>Array element within the destination binding to write</comment></member>
            <member><type>uint32_t</type>                         <name>descriptorCount</name><comment>Number of descriptors to write</comment></member>
            <member><type>VkDescriptorType</type>                 <name>descriptorType</name><comment>Descriptor type to write</comment></member>
            <member><type>size_t</type>                           <name>offset</name><comment>Offset into pData where the descriptors to update are stored</comment></member>
            <member><type>size_t</type>                           <name>stride</name><comment>Stride between two descriptors in pData when writing more than one descriptor</comment></member>
        </type>
        <type category="struct" name="VkDescriptorUpdateTemplateEntryKHR"                      alias="VkDescriptorUpdateTemplateEntry"/>
        <type category="struct" name="VkDescriptorUpdateTemplateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                               <name>pNext</name></member>
            <member optional="true"><type>VkDescriptorUpdateTemplateCreateFlags</type>    <name>flags</name></member>
            <member><type>uint32_t</type>                 <name>descriptorUpdateEntryCount</name><comment>Number of descriptor update entries to use for the update template</comment></member>
            <member len="descriptorUpdateEntryCount">const <type>VkDescriptorUpdateTemplateEntry</type>* <name>pDescriptorUpdateEntries</name><comment>Descriptor update entries for the template</comment></member>
            <member><type>VkDescriptorUpdateTemplateType</type> <name>templateType</name></member>
            <member noautovalidity="true"><type>VkDescriptorSetLayout</type> <name>descriptorSetLayout</name></member>
            <member noautovalidity="true"><type>VkPipelineBindPoint</type> <name>pipelineBindPoint</name></member>
            <member noautovalidity="true"><type>VkPipelineLayout</type> <name>pipelineLayout</name><comment>If used for push descriptors, this is the only allowed layout</comment></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>set</name></member>
        </type>
        <type category="struct" name="VkDescriptorUpdateTemplateCreateInfoKHR"                 alias="VkDescriptorUpdateTemplateCreateInfo"/>
        <type category="struct" name="VkXYColorEXT" comment="Chromaticity coordinate">
            <member><type>float</type>   <name>x</name></member>
            <member><type>float</type>   <name>y</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePresentIdFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>presentId</name><comment>Present ID in VkPresentInfoKHR</comment></member>
        </type>
        <type category="struct" name="VkPresentIdKHR" structextends="VkPresentInfoKHR">
            <member values="VK_STRUCTURE_TYPE_PRESENT_ID_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>swapchainCount</name><comment>Copy of VkPresentInfoKHR::swapchainCount</comment></member>
            <member len="swapchainCount" optional="true">const <type>uint64_t</type>* <name>pPresentIds</name><comment>Present ID values for each swapchain</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePresentWaitFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>presentWait</name><comment>vkWaitForPresentKHR is supported</comment></member>
        </type>
        <type category="struct" name="VkHdrMetadataEXT">
                <comment>Display primary in chromaticity coordinates</comment>
            <member values="VK_STRUCTURE_TYPE_HDR_METADATA_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*    <name>pNext</name></member>
                <comment> From SMPTE 2086</comment>
            <member noautovalidity="true"><type>VkXYColorEXT</type>   <name>displayPrimaryRed</name><comment>Display primary's Red</comment></member>
            <member noautovalidity="true"><type>VkXYColorEXT</type>   <name>displayPrimaryGreen</name><comment>Display primary's Green</comment></member>
            <member noautovalidity="true"><type>VkXYColorEXT</type>   <name>displayPrimaryBlue</name><comment>Display primary's Blue</comment></member>
            <member noautovalidity="true"><type>VkXYColorEXT</type>   <name>whitePoint</name><comment>Display primary's Blue</comment></member>
            <member noautovalidity="true"><type>float</type>          <name>maxLuminance</name><comment>Display maximum luminance</comment></member>
            <member noautovalidity="true"><type>float</type>          <name>minLuminance</name><comment>Display minimum luminance</comment></member>
                <comment> From CTA 861.3</comment>
            <member noautovalidity="true"><type>float</type>          <name>maxContentLightLevel</name><comment>Content maximum luminance</comment></member>
            <member noautovalidity="true"><type>float</type>          <name>maxFrameAverageLightLevel</name></member>
        </type>
        <type category="struct" name="VkHdrVividDynamicMetadataHUAWEI" structextends="VkHdrMetadataEXT">
            <member values="VK_STRUCTURE_TYPE_HDR_VIVID_DYNAMIC_METADATA_HUAWEI"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                         <name>pNext</name></member>
            <member><type>size_t</type>                                     <name>dynamicMetadataSize</name><comment>Specified in bytes</comment></member>
            <member len="dynamicMetadataSize">const <type>void</type>*   <name>pDynamicMetadata</name><comment>Binary code of size dynamicMetadataSize</comment></member>
        </type>
        <type category="struct" name="VkDisplayNativeHdrSurfaceCapabilitiesAMD" returnedonly="true" structextends="VkSurfaceCapabilities2KHR">
            <member values="VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*          <name>pNext</name></member>
            <member><type>VkBool32</type>       <name>localDimmingSupport</name></member>
        </type>
        <type category="struct" name="VkSwapchainDisplayNativeHdrCreateInfoAMD" structextends="VkSwapchainCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>       <name>localDimmingEnable</name></member>
        </type>
        <type category="struct" name="VkRefreshCycleDurationGOOGLE" returnedonly="true">
            <member><type>uint64_t</type>                         <name>refreshDuration</name><comment>Number of nanoseconds from the start of one refresh cycle to the next</comment></member>
        </type>
        <type category="struct" name="VkPastPresentationTimingGOOGLE" returnedonly="true">
            <member><type>uint32_t</type>                         <name>presentID</name><comment>Application-provided identifier, previously given to vkQueuePresentKHR</comment></member>
            <member><type>uint64_t</type>                         <name>desiredPresentTime</name><comment>Earliest time an image should have been presented, previously given to vkQueuePresentKHR</comment></member>
            <member><type>uint64_t</type>                         <name>actualPresentTime</name><comment>Time the image was actually displayed</comment></member>
            <member><type>uint64_t</type>                         <name>earliestPresentTime</name><comment>Earliest time the image could have been displayed</comment></member>
            <member><type>uint64_t</type>                         <name>presentMargin</name><comment>How early vkQueuePresentKHR was processed vs. how soon it needed to be and make earliestPresentTime</comment></member>
        </type>
        <type category="struct" name="VkPresentTimesInfoGOOGLE" structextends="VkPresentInfoKHR">
            <member values="VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>swapchainCount</name><comment>Copy of VkPresentInfoKHR::swapchainCount</comment></member>
            <member len="swapchainCount" optional="true">const <type>VkPresentTimeGOOGLE</type>*   <name>pTimes</name><comment>The earliest times to present images</comment></member>
        </type>
        <type category="struct" name="VkPresentTimeGOOGLE">
            <member><type>uint32_t</type>                         <name>presentID</name><comment>Application-provided identifier</comment></member>
            <member><type>uint64_t</type>                         <name>desiredPresentTime</name><comment>Earliest time an image should be presented</comment></member>
        </type>
        <type category="struct" name="VkIOSSurfaceCreateInfoMVK">
            <member values="VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                    <name>pNext</name></member>
            <member optional="true"><type>VkIOSSurfaceCreateFlagsMVK</type>     <name>flags</name></member>
            <member noautovalidity="true">const <type>void</type>*                                    <name>pView</name></member>
        </type>
        <type category="struct" name="VkMacOSSurfaceCreateInfoMVK">
            <member values="VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                    <name>pNext</name></member>
            <member optional="true"><type>VkMacOSSurfaceCreateFlagsMVK</type>   <name>flags</name></member>
            <member noautovalidity="true">const <type>void</type>*                                    <name>pView</name></member>
        </type>
        <type category="struct" name="VkMetalSurfaceCreateInfoEXT">
            <member values="VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                    <name>pNext</name></member>
            <member optional="true"><type>VkMetalSurfaceCreateFlagsEXT</type>   <name>flags</name></member>
            <member noautovalidity="true">const <type>CAMetalLayer</type>*      <name>pLayer</name></member>
        </type>
        <type category="struct" name="VkViewportWScalingNV">
            <member><type>float</type>          <name>xcoeff</name></member>
            <member><type>float</type>          <name>ycoeff</name></member>
        </type>
        <type category="struct" name="VkPipelineViewportWScalingStateCreateInfoNV" structextends="VkPipelineViewportStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkBool32</type>               <name>viewportWScalingEnable</name></member>
            <member><type>uint32_t</type>               <name>viewportCount</name></member>
            <member noautovalidity="true" optional="true" len="viewportCount">const <type>VkViewportWScalingNV</type>*      <name>pViewportWScalings</name></member>
        </type>
        <type category="struct" name="VkViewportSwizzleNV">
            <member><type>VkViewportCoordinateSwizzleNV</type>          <name>x</name></member>
            <member><type>VkViewportCoordinateSwizzleNV</type>          <name>y</name></member>
            <member><type>VkViewportCoordinateSwizzleNV</type>          <name>z</name></member>
            <member><type>VkViewportCoordinateSwizzleNV</type>          <name>w</name></member>
        </type>
        <type category="struct" name="VkPipelineViewportSwizzleStateCreateInfoNV" structextends="VkPipelineViewportStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkPipelineViewportSwizzleStateCreateFlagsNV</type>    <name>flags</name></member>
            <member><type>uint32_t</type>               <name>viewportCount</name></member>
            <member len="viewportCount">const <type>VkViewportSwizzleNV</type>*      <name>pViewportSwizzles</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDiscardRectanglePropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDiscardRectangles</name><comment>max number of active discard rectangles</comment></member>
        </type>
        <type category="struct" name="VkPipelineDiscardRectangleStateCreateInfoEXT" structextends="VkGraphicsPipelineCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                       <name>pNext</name></member>
            <member optional="true"><type>VkPipelineDiscardRectangleStateCreateFlagsEXT</type>     <name>flags</name></member>
            <member><type>VkDiscardRectangleModeEXT</type>                                         <name>discardRectangleMode</name></member>
            <member optional="true"><type>uint32_t</type>                                          <name>discardRectangleCount</name></member>
            <member noautovalidity="true" len="discardRectangleCount">const <type>VkRect2D</type>* <name>pDiscardRectangles</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>perViewPositionAllComponents</name></member>
        </type>
        <type category="struct" name="VkInputAttachmentAspectReference">
            <member><type>uint32_t</type>                        <name>subpass</name></member>
            <member><type>uint32_t</type>                        <name>inputAttachmentIndex</name></member>
            <member><type>VkImageAspectFlags</type>              <name>aspectMask</name></member>
        </type>
        <type category="struct" name="VkInputAttachmentAspectReferenceKHR"                     alias="VkInputAttachmentAspectReference"/>
        <type category="struct" name="VkRenderPassInputAttachmentAspectCreateInfo" structextends="VkRenderPassCreateInfo">
            <member values="VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                     <name>pNext</name></member>
            <member><type>uint32_t</type>                        <name>aspectReferenceCount</name></member>
            <member len="aspectReferenceCount">const <type>VkInputAttachmentAspectReference</type>* <name>pAspectReferences</name></member>
        </type>
        <type category="struct" name="VkRenderPassInputAttachmentAspectCreateInfoKHR"          alias="VkRenderPassInputAttachmentAspectCreateInfo"/>
        <type category="struct" name="VkPhysicalDeviceSurfaceInfo2KHR">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member noautovalidity="true" optional="true"><type>VkSurfaceKHR</type> <name>surface</name></member>
        </type>
        <type category="struct" name="VkSurfaceCapabilities2KHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*   <name>pNext</name></member>
            <member><type>VkSurfaceCapabilitiesKHR</type> <name>surfaceCapabilities</name></member>
        </type>
        <type category="struct" name="VkSurfaceFormat2KHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkSurfaceFormatKHR</type> <name>surfaceFormat</name></member>
        </type>
        <type category="struct" name="VkDisplayProperties2KHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkDisplayPropertiesKHR</type> <name>displayProperties</name></member>
        </type>
        <type category="struct" name="VkDisplayPlaneProperties2KHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkDisplayPlanePropertiesKHR</type> <name>displayPlaneProperties</name></member>
        </type>
        <type category="struct" name="VkDisplayModeProperties2KHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkDisplayModePropertiesKHR</type> <name>displayModeProperties</name></member>
        </type>
        <type category="struct" name="VkDisplayModeStereoPropertiesNV" structextends="VkDisplayModeProperties2KHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_DISPLAY_MODE_STEREO_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkBool32</type>                    <name>hdmi3DSupported</name><comment>Whether this mode supports HDMI 3D stereo rendering.</comment></member>
        </type>
        <type category="struct" name="VkDisplayPlaneInfo2KHR">
            <member values="VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member externsync="true"><type>VkDisplayModeKHR</type> <name>mode</name></member>
            <member><type>uint32_t</type> <name>planeIndex</name></member>
        </type>
        <type category="struct" name="VkDisplayPlaneCapabilities2KHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkDisplayPlaneCapabilitiesKHR</type> <name>capabilities</name></member>
        </type>
        <type category="struct" name="VkSharedPresentSurfaceCapabilitiesKHR" returnedonly="true" structextends="VkSurfaceCapabilities2KHR">
            <member values="VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member optional="true"><type>VkImageUsageFlags</type> <name>sharedPresentSupportedUsageFlags</name><comment>Supported image usage flags if swapchain created using a shared present mode</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDevice16BitStorageFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*      <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>storageBuffer16BitAccess</name><comment>16-bit integer/floating-point variables supported in BufferBlock</comment></member>
            <member><type>VkBool32</type>                         <name>uniformAndStorageBuffer16BitAccess</name><comment>16-bit integer/floating-point variables supported in BufferBlock and Block</comment></member>
            <member><type>VkBool32</type>                         <name>storagePushConstant16</name><comment>16-bit integer/floating-point variables supported in PushConstant</comment></member>
            <member><type>VkBool32</type>                         <name>storageInputOutput16</name><comment>16-bit integer/floating-point variables supported in shader inputs and outputs</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDevice16BitStorageFeaturesKHR"                 alias="VkPhysicalDevice16BitStorageFeatures"/>
        <type category="struct" name="VkPhysicalDeviceSubgroupProperties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                   <name>pNext</name></member>
            <member limittype="max,pot" noautovalidity="true"><type>uint32_t</type>                     <name>subgroupSize</name><comment>The size of a subgroup for this queue.</comment></member>
            <member limittype="bitmask" noautovalidity="true"><type>VkShaderStageFlags</type>            <name>supportedStages</name><comment>Bitfield of what shader stages support subgroup operations</comment></member>
            <member limittype="bitmask" noautovalidity="true"><type>VkSubgroupFeatureFlags</type>        <name>supportedOperations</name><comment>Bitfield of what subgroup operations are supported.</comment></member>
            <member limittype="bitmask" noautovalidity="true"><type>VkBool32</type> <name>quadOperationsInAllStages</name><comment>Flag to specify whether quad operations are available in all stages.</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member noautovalidity="true"><type>VkBool32</type> <name>shaderSubgroupExtendedTypes</name><comment>Flag to specify whether subgroup operations with extended types are supported</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR"  alias="VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures"/>
        <type category="struct" name="VkBufferMemoryRequirementsInfo2">
            <member values="VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                          <name>pNext</name></member>
            <member><type>VkBuffer</type>                                                             <name>buffer</name></member>
        </type>
        <type category="struct" name="VkBufferMemoryRequirementsInfo2KHR"                      alias="VkBufferMemoryRequirementsInfo2"/>
        <type category="struct" name="VkDeviceBufferMemoryRequirements">
            <member values="VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                           <name>pNext</name></member>
            <member>const <type>VkBufferCreateInfo</type>*                                                             <name>pCreateInfo</name></member>
        </type>
        <type category="struct" name="VkDeviceBufferMemoryRequirementsKHR" alias="VkDeviceBufferMemoryRequirements"/>
        <type category="struct" name="VkImageMemoryRequirementsInfo2">
            <member values="VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                          <name>pNext</name></member>
            <member><type>VkImage</type>                                                              <name>image</name></member>
        </type>
        <type category="struct" name="VkImageMemoryRequirementsInfo2KHR"                       alias="VkImageMemoryRequirementsInfo2"/>
        <type category="struct" name="VkImageSparseMemoryRequirementsInfo2">
            <member values="VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                          <name>pNext</name></member>
            <member><type>VkImage</type>                                                              <name>image</name></member>
        </type>
        <type category="struct" name="VkImageSparseMemoryRequirementsInfo2KHR"                 alias="VkImageSparseMemoryRequirementsInfo2"/>
        <type category="struct" name="VkDeviceImageMemoryRequirements">
            <member values="VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                          <name>pNext</name></member>
            <member>const <type>VkImageCreateInfo</type>*                                                             <name>pCreateInfo</name></member>
            <member optional="true"><type>VkImageAspectFlagBits</type>                                                <name>planeAspect</name></member>
        </type>
        <type category="struct" name="VkDeviceImageMemoryRequirementsKHR" alias="VkDeviceImageMemoryRequirements"/>
        <type category="struct" name="VkMemoryRequirements2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkMemoryRequirements</type>                                                 <name>memoryRequirements</name></member>
        </type>
        <type category="struct" name="VkMemoryRequirements2KHR"                                alias="VkMemoryRequirements2"/>
        <type category="struct" name="VkSparseImageMemoryRequirements2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                                       <name>pNext</name></member>
            <member><type>VkSparseImageMemoryRequirements</type>                                      <name>memoryRequirements</name></member>
        </type>
        <type category="struct" name="VkSparseImageMemoryRequirements2KHR"                     alias="VkSparseImageMemoryRequirements2"/>
        <type category="struct" name="VkPhysicalDevicePointClippingProperties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="exact"><type>VkPointClippingBehavior</type>     <name>pointClippingBehavior</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePointClippingPropertiesKHR"              alias="VkPhysicalDevicePointClippingProperties"/>
        <type category="struct" name="VkMemoryDedicatedRequirements" returnedonly="true" structextends="VkMemoryRequirements2">
            <member values="VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>prefersDedicatedAllocation</name></member>
            <member><type>VkBool32</type>                         <name>requiresDedicatedAllocation</name></member>
        </type>
        <type category="struct" name="VkMemoryDedicatedRequirementsKHR"                        alias="VkMemoryDedicatedRequirements"/>
        <type category="struct" name="VkMemoryDedicatedAllocateInfo" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>VkImage</type>          <name>image</name><comment>Image that this allocation will be bound to</comment></member>
            <member optional="true"><type>VkBuffer</type>         <name>buffer</name><comment>Buffer that this allocation will be bound to</comment></member>
        </type>
        <type category="struct" name="VkMemoryDedicatedAllocateInfoKHR"                        alias="VkMemoryDedicatedAllocateInfo"/>
        <type category="struct" name="VkImageViewUsageCreateInfo" structextends="VkImageViewCreateInfo">
            <member values="VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkImageUsageFlags</type> <name>usage</name></member>
        </type>
        <type category="struct" name="VkImageViewSlicedCreateInfoEXT" structextends="VkImageViewCreateInfo">
            <member values="VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>uint32_t</type> <name>sliceOffset</name></member>
            <member><type>uint32_t</type> <name>sliceCount</name></member>
        </type>
        <type category="struct" name="VkImageViewUsageCreateInfoKHR"                           alias="VkImageViewUsageCreateInfo"/>
        <type category="struct" name="VkPipelineTessellationDomainOriginStateCreateInfo" structextends="VkPipelineTessellationStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkTessellationDomainOrigin</type>    <name>domainOrigin</name></member>
        </type>
        <type category="struct" name="VkPipelineTessellationDomainOriginStateCreateInfoKHR"    alias="VkPipelineTessellationDomainOriginStateCreateInfo"/>
        <type category="struct" name="VkSamplerYcbcrConversionInfo" structextends="VkSamplerCreateInfo,VkImageViewCreateInfo">
            <member values="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkSamplerYcbcrConversion</type>      <name>conversion</name></member>
        </type>
        <type category="struct" name="VkSamplerYcbcrConversionInfoKHR"                         alias="VkSamplerYcbcrConversionInfo"/>
        <type category="struct" name="VkSamplerYcbcrConversionCreateInfo">
            <member values="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkFormat</type>                         <name>format</name></member>
            <member><type>VkSamplerYcbcrModelConversion</type> <name>ycbcrModel</name></member>
            <member><type>VkSamplerYcbcrRange</type>           <name>ycbcrRange</name></member>
            <member><type>VkComponentMapping</type>               <name>components</name></member>
            <member><type>VkChromaLocation</type>              <name>xChromaOffset</name></member>
            <member><type>VkChromaLocation</type>              <name>yChromaOffset</name></member>
            <member><type>VkFilter</type>                         <name>chromaFilter</name></member>
            <member><type>VkBool32</type>                         <name>forceExplicitReconstruction</name></member>
        </type>
        <type category="struct" name="VkSamplerYcbcrConversionCreateInfoKHR"                   alias="VkSamplerYcbcrConversionCreateInfo"/>
        <type category="struct" name="VkBindImagePlaneMemoryInfo" structextends="VkBindImageMemoryInfo">
            <member values="VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkImageAspectFlagBits</type>            <name>planeAspect</name></member>
        </type>
        <type category="struct" name="VkBindImagePlaneMemoryInfoKHR"                           alias="VkBindImagePlaneMemoryInfo"/>
        <type category="struct" name="VkImagePlaneMemoryRequirementsInfo" structextends="VkImageMemoryRequirementsInfo2">
            <member values="VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkImageAspectFlagBits</type>            <name>planeAspect</name></member>
        </type>
        <type category="struct" name="VkImagePlaneMemoryRequirementsInfoKHR"                   alias="VkImagePlaneMemoryRequirementsInfo"/>
        <type category="struct" name="VkPhysicalDeviceSamplerYcbcrConversionFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*      <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>samplerYcbcrConversion</name><comment>Sampler color conversion supported</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR"       alias="VkPhysicalDeviceSamplerYcbcrConversionFeatures"/>
        <type category="struct" name="VkSamplerYcbcrConversionImageFormatProperties" returnedonly="true" structextends="VkImageFormatProperties2">
            <member values="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*      <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>combinedImageSamplerDescriptorCount</name></member>
        </type>
        <type category="struct" name="VkSamplerYcbcrConversionImageFormatPropertiesKHR"        alias="VkSamplerYcbcrConversionImageFormatProperties"/>
        <type category="struct" name="VkTextureLODGatherFormatPropertiesAMD" returnedonly="true" structextends="VkImageFormatProperties2">
            <member values="VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>supportsTextureGatherLODBiasAMD</name></member>
        </type>
        <type category="struct" name="VkConditionalRenderingBeginInfoEXT">
            <member values="VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkBuffer</type>                         <name>buffer</name></member>
            <member><type>VkDeviceSize</type>                     <name>offset</name></member>
            <member optional="true"><type>VkConditionalRenderingFlagsEXT</type>    <name>flags</name></member>
        </type>
        <type category="struct" name="VkProtectedSubmitInfo" structextends="VkSubmitInfo">
            <member values="VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                     <name>pNext</name></member>
            <member><type>VkBool32</type>                        <name>protectedSubmit</name><comment>Submit protected command buffers</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceProtectedMemoryFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>protectedMemory</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceProtectedMemoryProperties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member limittype="exact"><type>VkBool32</type>                            <name>protectedNoFault</name></member>
        </type>
        <type category="struct" name="VkDeviceQueueInfo2">
            <member values="VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                         <name>pNext</name></member>
            <member optional="true"><type>VkDeviceQueueCreateFlags</type>            <name>flags</name></member>
            <member><type>uint32_t</type>                            <name>queueFamilyIndex</name></member>
            <member><type>uint32_t</type>                            <name>queueIndex</name></member>
        </type>
        <type category="struct" name="VkPipelineCoverageToColorStateCreateInfoNV" structextends="VkPipelineMultisampleStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                                      <name>pNext</name></member>
            <member optional="true"><type>VkPipelineCoverageToColorStateCreateFlagsNV</type>                    <name>flags</name></member>
            <member><type>VkBool32</type>                         <name>coverageToColorEnable</name></member>
            <member optional="true"><type>uint32_t</type>         <name>coverageToColorLocation</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSamplerFilterMinmaxProperties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>filterMinmaxSingleComponentFormats</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>filterMinmaxImageComponentMapping</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT" alias="VkPhysicalDeviceSamplerFilterMinmaxProperties"/>
        <type category="struct" name="VkSampleLocationEXT">
            <member><type>float</type>                            <name>x</name></member>
            <member><type>float</type>                            <name>y</name></member>
        </type>
        <type category="struct" name="VkSampleLocationsInfoEXT" structextends="VkImageMemoryBarrier,VkImageMemoryBarrier2">
            <member values="VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member noautovalidity="true"><type>VkSampleCountFlagBits</type>  <name>sampleLocationsPerPixel</name></member>
            <member><type>VkExtent2D</type>                             <name>sampleLocationGridSize</name></member>
            <member optional="true"><type>uint32_t</type>               <name>sampleLocationsCount</name></member>
            <member len="sampleLocationsCount">const <type>VkSampleLocationEXT</type>* <name>pSampleLocations</name></member>
        </type>
        <type category="struct" name="VkAttachmentSampleLocationsEXT">
            <member><type>uint32_t</type>                         <name>attachmentIndex</name></member>
            <member><type>VkSampleLocationsInfoEXT</type>         <name>sampleLocationsInfo</name></member>
        </type>
        <type category="struct" name="VkSubpassSampleLocationsEXT">
            <member><type>uint32_t</type>                         <name>subpassIndex</name></member>
            <member><type>VkSampleLocationsInfoEXT</type>         <name>sampleLocationsInfo</name></member>
        </type>
        <type category="struct" name="VkRenderPassSampleLocationsBeginInfoEXT" structextends="VkRenderPassBeginInfo">
            <member values="VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>         <name>attachmentInitialSampleLocationsCount</name></member>
            <member len="attachmentInitialSampleLocationsCount">const <type>VkAttachmentSampleLocationsEXT</type>* <name>pAttachmentInitialSampleLocations</name></member>
            <member optional="true"><type>uint32_t</type>         <name>postSubpassSampleLocationsCount</name></member>
            <member len="postSubpassSampleLocationsCount">const <type>VkSubpassSampleLocationsEXT</type>* <name>pPostSubpassSampleLocations</name></member>
        </type>
        <type category="struct" name="VkPipelineSampleLocationsStateCreateInfoEXT" structextends="VkPipelineMultisampleStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>sampleLocationsEnable</name></member>
            <member><type>VkSampleLocationsInfoEXT</type>         <name>sampleLocationsInfo</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSampleLocationsPropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="bitmask"><type>VkSampleCountFlags</type>               <name>sampleLocationSampleCounts</name></member>
            <member limittype="max"><type>VkExtent2D</type>                       <name>maxSampleLocationGridSize</name></member>
            <member limittype="range"><type>float</type>                            <name>sampleLocationCoordinateRange</name>[2]</member>
            <member limittype="bits"><type>uint32_t</type>                         <name>sampleLocationSubPixelBits</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>variableSampleLocations</name></member>
        </type>
        <type category="struct" name="VkMultisamplePropertiesEXT" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkExtent2D</type>                       <name>maxSampleLocationGridSize</name></member>
        </type>
        <type category="struct" name="VkSamplerReductionModeCreateInfo" structextends="VkSamplerCreateInfo">
            <member values="VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkSamplerReductionMode</type>           <name>reductionMode</name></member>
        </type>
        <type category="struct" name="VkSamplerReductionModeCreateInfoEXT" alias="VkSamplerReductionModeCreateInfo"/>
        <type category="struct" name="VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>advancedBlendCoherentOperations</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMultiDrawFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*                     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>multiDraw</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>advancedBlendMaxColorAttachments</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>advancedBlendIndependentBlend</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>advancedBlendNonPremultipliedSrcColor</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>advancedBlendNonPremultipliedDstColor</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>advancedBlendCorrelatedOverlap</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>advancedBlendAllOperations</name></member>
        </type>
        <type category="struct" name="VkPipelineColorBlendAdvancedStateCreateInfoEXT" structextends="VkPipelineColorBlendStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>               <name>srcPremultiplied</name></member>
            <member><type>VkBool32</type>               <name>dstPremultiplied</name></member>
            <member><type>VkBlendOverlapEXT</type>      <name>blendOverlap</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceInlineUniformBlockFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*  <name>pNext</name></member>
            <member><type>VkBool32</type>               <name>inlineUniformBlock</name></member>
            <member><type>VkBool32</type>               <name>descriptorBindingInlineUniformBlockUpdateAfterBind</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceInlineUniformBlockFeaturesEXT" alias="VkPhysicalDeviceInlineUniformBlockFeatures"/>
        <type category="struct" name="VkPhysicalDeviceInlineUniformBlockProperties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxInlineUniformBlockSize</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPerStageDescriptorInlineUniformBlocks</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetInlineUniformBlocks</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetUpdateAfterBindInlineUniformBlocks</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceInlineUniformBlockPropertiesEXT" alias="VkPhysicalDeviceInlineUniformBlockProperties"/>
        <type category="struct" name="VkWriteDescriptorSetInlineUniformBlock" structextends="VkWriteDescriptorSet">
            <member values="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>uint32_t</type>                    <name>dataSize</name></member>
            <member len="dataSize">const <type>void</type>*  <name>pData</name></member>
        </type>
        <type category="struct" name="VkWriteDescriptorSetInlineUniformBlockEXT" alias="VkWriteDescriptorSetInlineUniformBlock"/>
        <type category="struct" name="VkDescriptorPoolInlineUniformBlockCreateInfo" structextends="VkDescriptorPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>uint32_t</type>                    <name>maxInlineUniformBlockBindings</name></member>
        </type>
        <type category="struct" name="VkDescriptorPoolInlineUniformBlockCreateInfoEXT" alias="VkDescriptorPoolInlineUniformBlockCreateInfo"/>
        <type category="struct" name="VkPipelineCoverageModulationStateCreateInfoNV" structextends="VkPipelineMultisampleStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                                      <name>pNext</name></member>
            <member optional="true"><type>VkPipelineCoverageModulationStateCreateFlagsNV</type>                   <name>flags</name></member>
            <member><type>VkCoverageModulationModeNV</type>                                                       <name>coverageModulationMode</name></member>
            <member><type>VkBool32</type>                                                                         <name>coverageModulationTableEnable</name></member>
            <member optional="true"><type>uint32_t</type>                                                         <name>coverageModulationTableCount</name></member>
            <member noautovalidity="true" optional="true" len="coverageModulationTableCount">const <type>float</type>* <name>pCoverageModulationTable</name></member>
        </type>
        <type category="struct" name="VkImageFormatListCreateInfo" structextends="VkImageCreateInfo,VkSwapchainCreateInfoKHR,VkPhysicalDeviceImageFormatInfo2">
            <member values="VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>               <name>viewFormatCount</name></member>
            <member len="viewFormatCount">const <type>VkFormat</type>*  <name>pViewFormats</name></member>
        </type>
        <type category="struct" name="VkImageFormatListCreateInfoKHR"                          alias="VkImageFormatListCreateInfo"/>
        <type category="struct" name="VkValidationCacheCreateInfoEXT">
            <member values="VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkValidationCacheCreateFlagsEXT</type>    <name>flags</name></member>
            <member optional="true"><type>size_t</type>                 <name>initialDataSize</name></member>
            <member len="initialDataSize">const <type>void</type>*            <name>pInitialData</name></member>
        </type>
        <type category="struct" name="VkShaderModuleValidationCacheCreateInfoEXT" structextends="VkShaderModuleCreateInfo,VkPipelineShaderStageCreateInfo">
            <member values="VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkValidationCacheEXT</type>    <name>validationCache</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMaintenance3Properties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxPerSetDescriptors</name></member>
            <member limittype="max"><type>VkDeviceSize</type>                     <name>maxMemoryAllocationSize</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMaintenance3PropertiesKHR"               alias="VkPhysicalDeviceMaintenance3Properties"/>
        <type category="struct" name="VkPhysicalDeviceMaintenance4Features" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                                         <name>maintenance4</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMaintenance4FeaturesKHR" alias="VkPhysicalDeviceMaintenance4Features"/>
        <type category="struct" name="VkPhysicalDeviceMaintenance4Properties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="max"><type>VkDeviceSize</type>                     <name>maxBufferSize</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMaintenance4PropertiesKHR" alias="VkPhysicalDeviceMaintenance4Properties"/>
        <type category="struct" name="VkPhysicalDeviceMaintenance5Features" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                                         <name>maintenance5</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMaintenance5FeaturesKHR" alias="VkPhysicalDeviceMaintenance5Features"/>
        <type category="struct" name="VkPhysicalDeviceMaintenance5Properties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                     <name>earlyFragmentMultisampleCoverageAfterSampleCounting</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                     <name>earlyFragmentSampleMaskTestBeforeSampleCounting</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                     <name>depthStencilSwizzleOneSupport</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                     <name>polygonModePointSize</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                     <name>nonStrictSinglePixelWideLinesUseParallelogram</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                     <name>nonStrictWideLinesUseParallelogram</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMaintenance5PropertiesKHR" alias="VkPhysicalDeviceMaintenance5Properties"/>
        <type category="struct" name="VkPhysicalDeviceMaintenance6Features" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                                         <name>maintenance6</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMaintenance6FeaturesKHR" alias="VkPhysicalDeviceMaintenance6Features"/>
        <type category="struct" name="VkPhysicalDeviceMaintenance6Properties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                                         <name>blockTexelViewCompatibleMultipleLayers</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxCombinedImageSamplerDescriptorCount</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                     <name>fragmentShadingRateClampCombinerInputs</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMaintenance6PropertiesKHR" alias="VkPhysicalDeviceMaintenance6Properties"/>
        <type category="struct" name="VkPhysicalDeviceMaintenance7FeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                                         <name>maintenance7</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMaintenance7PropertiesKHR" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                                         <name>robustFragmentShadingRateAttachmentAccess</name></member>
            <member><type>VkBool32</type>                                         <name>separateDepthStencilAttachmentAccess</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxDescriptorSetTotalUniformBuffersDynamic</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxDescriptorSetTotalStorageBuffersDynamic</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxDescriptorSetTotalBuffersDynamic</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxDescriptorSetUpdateAfterBindTotalBuffersDynamic</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceLayeredApiPropertiesListKHR" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                         <name>layeredApiCount</name></member>
            <member optional="true" len="layeredApiCount"><type>VkPhysicalDeviceLayeredApiPropertiesKHR</type>* <name>pLayeredApis</name><comment>Output list of layered implementations underneath the physical device</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceLayeredApiPropertiesKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="noauto"><type>uint32_t</type>                      <name>vendorID</name></member>
            <member limittype="noauto"><type>uint32_t</type>                      <name>deviceID</name></member>
            <member limittype="noauto"><type>VkPhysicalDeviceLayeredApiKHR</type> <name>layeredAPI</name></member>
            <member limittype="noauto"><type>char</type>                          <name>deviceName</name>[<enum>VK_MAX_PHYSICAL_DEVICE_NAME_SIZE</enum>]</member>
        </type>
        <type category="struct" name="VkPhysicalDeviceLayeredApiVulkanPropertiesKHR" returnedonly="true" structextends="VkPhysicalDeviceLayeredApiPropertiesKHR">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="noauto"><type>VkPhysicalDeviceProperties2</type>   <name>properties</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMaintenance8FeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_8_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                                         <name>maintenance8</name></member>
        </type>
        <type category="struct" name="VkRenderingAreaInfo">
            <member values="VK_STRUCTURE_TYPE_RENDERING_AREA_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                <name>pNext</name></member>
            <member><type>uint32_t</type>                                                                   <name>viewMask</name></member>
            <member optional="true"><type>uint32_t</type>                                                   <name>colorAttachmentCount</name></member>
            <member noautovalidity="true" len="colorAttachmentCount">const <type>VkFormat</type>*           <name>pColorAttachmentFormats</name></member>
            <member noautovalidity="true"><type>VkFormat</type>                                             <name>depthAttachmentFormat</name></member>
            <member noautovalidity="true"><type>VkFormat</type>                                             <name>stencilAttachmentFormat</name></member>
        </type>
        <type category="struct" name="VkRenderingAreaInfoKHR" alias="VkRenderingAreaInfo"/>
        <type category="struct" name="VkDescriptorSetLayoutSupport" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>         <name>supported</name></member>
        </type>
        <type category="struct" name="VkDescriptorSetLayoutSupportKHR"                         alias="VkDescriptorSetLayoutSupport"/>
        <type category="struct" name="VkPhysicalDeviceShaderDrawParametersFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>shaderDrawParameters</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderDrawParameterFeatures"             alias="VkPhysicalDeviceShaderDrawParametersFeatures"/>
        <type category="struct" name="VkPhysicalDeviceShaderFloat16Int8Features" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*      <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>shaderFloat16</name><comment>16-bit floats (halfs) in shaders</comment></member>
            <member><type>VkBool32</type>                         <name>shaderInt8</name><comment>8-bit integers in shaders</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderFloat16Int8FeaturesKHR"            alias="VkPhysicalDeviceShaderFloat16Int8Features"/>
        <type category="struct" name="VkPhysicalDeviceFloat16Int8FeaturesKHR"                  alias="VkPhysicalDeviceShaderFloat16Int8Features"/>
        <type category="struct" name="VkPhysicalDeviceFloatControlsProperties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="exact"><type>VkShaderFloatControlsIndependence</type> <name>denormBehaviorIndependence</name></member>
            <member limittype="exact"><type>VkShaderFloatControlsIndependence</type> <name>roundingModeIndependence</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>shaderSignedZeroInfNanPreserveFloat16</name><comment>An implementation can preserve signed zero, nan, inf</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>shaderSignedZeroInfNanPreserveFloat32</name><comment>An implementation can preserve signed zero, nan, inf</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>shaderSignedZeroInfNanPreserveFloat64</name><comment>An implementation can preserve signed zero, nan, inf</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>shaderDenormPreserveFloat16</name><comment>An implementation can preserve  denormals</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>shaderDenormPreserveFloat32</name><comment>An implementation can preserve  denormals</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>shaderDenormPreserveFloat64</name><comment>An implementation can preserve  denormals</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>shaderDenormFlushToZeroFloat16</name><comment>An implementation can flush to zero  denormals</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>shaderDenormFlushToZeroFloat32</name><comment>An implementation can flush to zero  denormals</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>shaderDenormFlushToZeroFloat64</name><comment>An implementation can flush to zero  denormals</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>shaderRoundingModeRTEFloat16</name><comment>An implementation can support RTE</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>shaderRoundingModeRTEFloat32</name><comment>An implementation can support RTE</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>shaderRoundingModeRTEFloat64</name><comment>An implementation can support RTE</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>shaderRoundingModeRTZFloat16</name><comment>An implementation can support RTZ</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>shaderRoundingModeRTZFloat32</name><comment>An implementation can support RTZ</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                         <name>shaderRoundingModeRTZFloat64</name><comment>An implementation can support RTZ</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFloatControlsPropertiesKHR"              alias="VkPhysicalDeviceFloatControlsProperties"/>
        <type category="struct" name="VkPhysicalDeviceHostQueryResetFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>hostQueryReset</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceHostQueryResetFeaturesEXT"               alias="VkPhysicalDeviceHostQueryResetFeatures"/>
        <type category="struct" name="VkNativeBufferUsage2ANDROID">
            <member><type>uint64_t</type> <name>consumer</name></member>
            <member><type>uint64_t</type> <name>producer</name></member>
        </type>
        <type category="struct" name="VkNativeBufferANDROID">
            <member values="VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member>const <type>void</type>* <name>handle</name></member>
            <member><type>int</type> <name>stride</name></member>
            <member><type>int</type> <name>format</name></member>
            <member><type>int</type> <name>usage</name></member>
            <member><type>VkNativeBufferUsage2ANDROID</type> <name>usage2</name></member>
        </type>
        <type category="struct" name="VkSwapchainImageCreateInfoANDROID">
            <member values="VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkSwapchainImageUsageFlagsANDROID</type> <name>usage</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePresentationPropertiesANDROID">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkBool32</type> <name>sharedImage</name></member>
        </type>
        <type category="struct" name="VkShaderResourceUsageAMD" returnedonly="true">
            <member><type>uint32_t</type> <name>numUsedVgprs</name></member>
            <member><type>uint32_t</type> <name>numUsedSgprs</name></member>
            <member><type>uint32_t</type> <name>ldsSizePerLocalWorkGroup</name></member>
            <member><type>size_t</type> <name>ldsUsageSizeInBytes</name></member>
            <member><type>size_t</type> <name>scratchMemUsageInBytes</name></member>
        </type>
        <type category="struct" name="VkShaderStatisticsInfoAMD" returnedonly="true">
            <member><type>VkShaderStageFlags</type> <name>shaderStageMask</name></member>
            <member><type>VkShaderResourceUsageAMD</type> <name>resourceUsage</name></member>
            <member><type>uint32_t</type> <name>numPhysicalVgprs</name></member>
            <member><type>uint32_t</type> <name>numPhysicalSgprs</name></member>
            <member><type>uint32_t</type> <name>numAvailableVgprs</name></member>
            <member><type>uint32_t</type> <name>numAvailableSgprs</name></member>
            <member><type>uint32_t</type> <name>computeWorkGroupSize</name>[3]</member>
        </type>
        <type category="struct" name="VkDeviceQueueGlobalPriorityCreateInfo" structextends="VkDeviceQueueCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*    <name>pNext</name></member>
            <member><type>VkQueueGlobalPriority</type>          <name>globalPriority</name></member>
        </type>
        <type category="struct" name="VkDeviceQueueGlobalPriorityCreateInfoKHR" alias="VkDeviceQueueGlobalPriorityCreateInfo"/>
        <type category="struct" name="VkDeviceQueueGlobalPriorityCreateInfoEXT" alias="VkDeviceQueueGlobalPriorityCreateInfo"/>
        <type category="struct" name="VkPhysicalDeviceGlobalPriorityQueryFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkBool32</type>                    <name>globalPriorityQuery</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR" alias="VkPhysicalDeviceGlobalPriorityQueryFeatures"/>
        <type category="struct" name="VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT" alias="VkPhysicalDeviceGlobalPriorityQueryFeatures"/>
        <type category="struct" name="VkQueueFamilyGlobalPriorityProperties" structextends="VkQueueFamilyProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                                            <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>                                         <name>priorityCount</name></member>
            <member limittype="bitmask" len="priorityCount"><type>VkQueueGlobalPriority</type> <name>priorities</name>[<enum>VK_MAX_GLOBAL_PRIORITY_SIZE</enum>]</member>
        </type>
        <type category="struct" name="VkQueueFamilyGlobalPriorityPropertiesKHR" alias="VkQueueFamilyGlobalPriorityProperties"/>
        <type category="struct" name="VkQueueFamilyGlobalPriorityPropertiesEXT" alias="VkQueueFamilyGlobalPriorityProperties"/>
        <type category="struct" name="VkDebugUtilsObjectNameInfoEXT" structextends="VkPipelineShaderStageCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                            <name>pNext</name></member>
            <member><type>VkObjectType</type>                                           <name>objectType</name></member>
            <member objecttype="objectType"><type>uint64_t</type>                                               <name>objectHandle</name></member>
            <member optional="true" len="null-terminated">const <type>char</type>*      <name>pObjectName</name></member>
        </type>
        <type category="struct" name="VkDebugUtilsObjectTagInfoEXT">
            <member values="VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member><type>VkObjectType</type>                           <name>objectType</name></member>
            <member objecttype="objectType"><type>uint64_t</type>                               <name>objectHandle</name></member>
            <member><type>uint64_t</type>                               <name>tagName</name></member>
            <member><type>size_t</type>                                 <name>tagSize</name></member>
            <member len="tagSize">const <type>void</type>*              <name>pTag</name></member>
        </type>
        <type category="struct" name="VkDebugUtilsLabelEXT">
            <member values="VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member len="null-terminated">const <type>char</type>*      <name>pLabelName</name></member>
            <member><type>float</type>                  <name>color</name>[4]</member>
        </type>
        <type category="struct" name="VkDebugUtilsMessengerCreateInfoEXT" allowduplicate="true" structextends="VkInstanceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                          <name>pNext</name></member>
            <member optional="true"><type>VkDebugUtilsMessengerCreateFlagsEXT</type>  <name>flags</name></member>
            <member><type>VkDebugUtilsMessageSeverityFlagsEXT</type>                  <name>messageSeverity</name></member>
            <member><type>VkDebugUtilsMessageTypeFlagsEXT</type>                      <name>messageType</name></member>
            <member><type>PFN_vkDebugUtilsMessengerCallbackEXT</type>                 <name>pfnUserCallback</name></member>
            <member optional="true"><type>void</type>*                                <name>pUserData</name></member>
        </type>
        <type category="struct" name="VkDebugUtilsMessengerCallbackDataEXT">
            <member values="VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                        <name>pNext</name></member>
            <member optional="true"><type>VkDebugUtilsMessengerCallbackDataFlagsEXT</type>                          <name>flags</name></member>
            <member optional="true" len="null-terminated">const <type>char</type>*                                  <name>pMessageIdName</name></member>
            <member><type>int32_t</type>                                                            <name>messageIdNumber</name></member>
            <member optional="true" len="null-terminated">const <type>char</type>*                                  <name>pMessage</name></member>
            <member optional="true"><type>uint32_t</type>                                                           <name>queueLabelCount</name></member>
            <member len="queueLabelCount">const <type>VkDebugUtilsLabelEXT</type>*                  <name>pQueueLabels</name></member>
            <member optional="true"><type>uint32_t</type>                                                           <name>cmdBufLabelCount</name></member>
            <member len="cmdBufLabelCount">const <type>VkDebugUtilsLabelEXT</type>*                 <name>pCmdBufLabels</name></member>
            <member optional="true"><type>uint32_t</type>                                                           <name>objectCount</name></member>
            <member len="objectCount">const <type>VkDebugUtilsObjectNameInfoEXT</type>*             <name>pObjects</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDeviceMemoryReportFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkBool32</type>                    <name>deviceMemoryReport</name></member>
        </type>
        <type category="struct" name="VkDeviceDeviceMemoryReportCreateInfoEXT" allowduplicate="true" structextends="VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*         <name>pNext</name></member>
            <member><type>VkDeviceMemoryReportFlagsEXT</type>        <name>flags</name></member>
            <member><type>PFN_vkDeviceMemoryReportCallbackEXT</type> <name>pfnUserCallback</name></member>
            <member><type>void</type>*                               <name>pUserData</name></member>
        </type>
        <type category="struct" name="VkDeviceMemoryReportCallbackDataEXT" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkDeviceMemoryReportFlagsEXT</type>     <name>flags</name></member>
            <member><type>VkDeviceMemoryReportEventTypeEXT</type> <name>type</name></member>
            <member><type>uint64_t</type>                         <name>memoryObjectId</name></member>
            <member><type>VkDeviceSize</type>                     <name>size</name></member>
            <member><type>VkObjectType</type>                     <name>objectType</name></member>
            <member objecttype="objectType"><type>uint64_t</type> <name>objectHandle</name></member>
            <member><type>uint32_t</type>                         <name>heapIndex</name></member>
        </type>
        <type category="struct" name="VkImportMemoryHostPointerInfoEXT" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></member>
            <member><type>void</type>* <name>pHostPointer</name></member>
        </type>
        <type category="struct" name="VkMemoryHostPointerPropertiesEXT" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member><type>uint32_t</type> <name>memoryTypeBits</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExternalMemoryHostPropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member limittype="min,pot"><type>VkDeviceSize</type> <name>minImportedHostPointerAlignment</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceConservativeRasterizationPropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member limittype="exact"><type>float</type>                 <name>primitiveOverestimationSize</name><comment>The size in pixels the primitive is enlarged at each edge during conservative rasterization</comment></member>
            <member limittype="max"><type>float</type>                      <name>maxExtraPrimitiveOverestimationSize</name><comment>The maximum additional overestimation the client can specify in the pipeline state</comment></member>
            <member limittype="min,mul"><type>float</type>                   <name>extraPrimitiveOverestimationSizeGranularity</name><comment>The granularity of extra overestimation sizes the implementations supports between 0 and maxExtraOverestimationSize</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>primitiveUnderestimation</name><comment>true if the implementation supports conservative rasterization underestimation mode</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>conservativePointAndLineRasterization</name><comment>true if conservative rasterization also applies to points and lines</comment></member>
            <member limittype="exact"><type>VkBool32</type>              <name>degenerateTrianglesRasterized</name><comment>true if degenerate triangles (those with zero area after snap) are rasterized</comment></member>
            <member limittype="exact"><type>VkBool32</type>              <name>degenerateLinesRasterized</name><comment>true if degenerate lines (those with zero length after snap) are rasterized</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>fullyCoveredFragmentShaderInputVariable</name><comment>true if the implementation supports the FullyCoveredEXT SPIR-V builtin fragment shader input variable</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>conservativeRasterizationPostDepthCoverage</name><comment>true if the implementation supports both conservative rasterization and post depth coverage sample coverage mask</comment></member>
        </type>
        <type category="struct" name="VkCalibratedTimestampInfoKHR">
            <member values="VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkTimeDomainKHR</type>                        <name>timeDomain</name></member>
        </type>
        <type category="struct" name="VkCalibratedTimestampInfoEXT" alias="VkCalibratedTimestampInfoKHR"/>
        <type category="struct" name="VkPhysicalDeviceShaderCorePropertiesAMD" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member limittype="exact"><type>uint32_t</type> <name>shaderEngineCount</name><comment>number of shader engines</comment></member>
            <member limittype="exact"><type>uint32_t</type> <name>shaderArraysPerEngineCount</name><comment>number of shader arrays</comment></member>
            <member limittype="exact"><type>uint32_t</type> <name>computeUnitsPerShaderArray</name><comment>number of physical CUs per shader array</comment></member>
            <member limittype="exact"><type>uint32_t</type> <name>simdPerComputeUnit</name><comment>number of SIMDs per compute unit</comment></member>
            <member limittype="exact"><type>uint32_t</type> <name>wavefrontsPerSimd</name><comment>number of wavefront slots in each SIMD</comment></member>
            <member limittype="max"><type>uint32_t</type>      <name>wavefrontSize</name><comment>maximum number of threads per wavefront</comment></member>
            <member limittype="exact"><type>uint32_t</type> <name>sgprsPerSimd</name><comment>number of physical SGPRs per SIMD</comment></member>
            <member limittype="min"><type>uint32_t</type>      <name>minSgprAllocation</name><comment>minimum number of SGPRs that can be allocated by a wave</comment></member>
            <member limittype="max"><type>uint32_t</type>      <name>maxSgprAllocation</name><comment>number of available SGPRs</comment></member>
            <member limittype="min,mul"><type>uint32_t</type>   <name>sgprAllocationGranularity</name><comment>SGPRs are allocated in groups of this size</comment></member>
            <member limittype="exact"><type>uint32_t</type> <name>vgprsPerSimd</name><comment>number of physical VGPRs per SIMD</comment></member>
            <member limittype="min"><type>uint32_t</type>      <name>minVgprAllocation</name><comment>minimum number of VGPRs that can be allocated by a wave</comment></member>
            <member limittype="max"><type>uint32_t</type>      <name>maxVgprAllocation</name><comment>number of available VGPRs</comment></member>
            <member limittype="min,mul"><type>uint32_t</type>   <name>vgprAllocationGranularity</name><comment>VGPRs are allocated in groups of this size</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderCoreProperties2AMD" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name><comment>Pointer to next structure</comment></member>
            <member limittype="bitmask"><type>VkShaderCorePropertiesFlagsAMD</type> <name>shaderCoreFeatures</name><comment>features supported by the shader core</comment></member>
            <member limittype="max"><type>uint32_t</type> <name>activeComputeUnitCount</name><comment>number of active compute units across all shader engines/arrays</comment></member>
        </type>
        <type category="struct" name="VkPipelineRasterizationConservativeStateCreateInfoEXT" structextends="VkPipelineRasterizationStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                                      <name>pNext</name></member>
            <member optional="true"><type>VkPipelineRasterizationConservativeStateCreateFlagsEXT</type>           <name>flags</name><comment>Reserved</comment></member>
            <member><type>VkConservativeRasterizationModeEXT</type>                                               <name>conservativeRasterizationMode</name><comment>Conservative rasterization mode</comment></member>
            <member><type>float</type>                                                                            <name>extraPrimitiveOverestimationSize</name><comment>Extra overestimation to add to the primitive</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDescriptorIndexingFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>               <name>shaderInputAttachmentArrayDynamicIndexing</name></member>
            <member><type>VkBool32</type>               <name>shaderUniformTexelBufferArrayDynamicIndexing</name></member>
            <member><type>VkBool32</type>               <name>shaderStorageTexelBufferArrayDynamicIndexing</name></member>
            <member><type>VkBool32</type>               <name>shaderUniformBufferArrayNonUniformIndexing</name></member>
            <member><type>VkBool32</type>               <name>shaderSampledImageArrayNonUniformIndexing</name></member>
            <member><type>VkBool32</type>               <name>shaderStorageBufferArrayNonUniformIndexing</name></member>
            <member><type>VkBool32</type>               <name>shaderStorageImageArrayNonUniformIndexing</name></member>
            <member><type>VkBool32</type>               <name>shaderInputAttachmentArrayNonUniformIndexing</name></member>
            <member><type>VkBool32</type>               <name>shaderUniformTexelBufferArrayNonUniformIndexing</name></member>
            <member><type>VkBool32</type>               <name>shaderStorageTexelBufferArrayNonUniformIndexing</name></member>
            <member><type>VkBool32</type>               <name>descriptorBindingUniformBufferUpdateAfterBind</name></member>
            <member><type>VkBool32</type>               <name>descriptorBindingSampledImageUpdateAfterBind</name></member>
            <member><type>VkBool32</type>               <name>descriptorBindingStorageImageUpdateAfterBind</name></member>
            <member><type>VkBool32</type>               <name>descriptorBindingStorageBufferUpdateAfterBind</name></member>
            <member><type>VkBool32</type>               <name>descriptorBindingUniformTexelBufferUpdateAfterBind</name></member>
            <member><type>VkBool32</type>               <name>descriptorBindingStorageTexelBufferUpdateAfterBind</name></member>
            <member><type>VkBool32</type>               <name>descriptorBindingUpdateUnusedWhilePending</name></member>
            <member><type>VkBool32</type>               <name>descriptorBindingPartiallyBound</name></member>
            <member><type>VkBool32</type>               <name>descriptorBindingVariableDescriptorCount</name></member>
            <member><type>VkBool32</type>               <name>runtimeDescriptorArray</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDescriptorIndexingFeaturesEXT"           alias="VkPhysicalDeviceDescriptorIndexingFeatures"/>
        <type category="struct" name="VkPhysicalDeviceDescriptorIndexingProperties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxUpdateAfterBindDescriptorsInAllPools</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>shaderUniformBufferArrayNonUniformIndexingNative</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>shaderSampledImageArrayNonUniformIndexingNative</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>shaderStorageBufferArrayNonUniformIndexingNative</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>shaderStorageImageArrayNonUniformIndexingNative</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>shaderInputAttachmentArrayNonUniformIndexingNative</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>robustBufferAccessUpdateAfterBind</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>quadDivergentImplicitLod</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPerStageDescriptorUpdateAfterBindSamplers</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPerStageDescriptorUpdateAfterBindUniformBuffers</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPerStageDescriptorUpdateAfterBindStorageBuffers</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPerStageDescriptorUpdateAfterBindSampledImages</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPerStageDescriptorUpdateAfterBindStorageImages</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPerStageDescriptorUpdateAfterBindInputAttachments</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxPerStageUpdateAfterBindResources</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetUpdateAfterBindSamplers</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetUpdateAfterBindUniformBuffers</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetUpdateAfterBindUniformBuffersDynamic</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetUpdateAfterBindStorageBuffers</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetUpdateAfterBindStorageBuffersDynamic</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetUpdateAfterBindSampledImages</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetUpdateAfterBindStorageImages</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxDescriptorSetUpdateAfterBindInputAttachments</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDescriptorIndexingPropertiesEXT"         alias="VkPhysicalDeviceDescriptorIndexingProperties"/>
        <type category="struct" name="VkDescriptorSetLayoutBindingFlagsCreateInfo" structextends="VkDescriptorSetLayoutCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                        <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                                           <name>bindingCount</name></member>
            <member len="bindingCount" optional="false,true">const <type>VkDescriptorBindingFlags</type>* <name>pBindingFlags</name></member>
        </type>
        <type category="struct" name="VkDescriptorSetLayoutBindingFlagsCreateInfoEXT"          alias="VkDescriptorSetLayoutBindingFlagsCreateInfo"/>
        <type category="struct" name="VkDescriptorSetVariableDescriptorCountAllocateInfo" structextends="VkDescriptorSetAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>               <name>descriptorSetCount</name></member>
            <member len="descriptorSetCount">const <type>uint32_t</type>* <name>pDescriptorCounts</name></member>
        </type>
        <type category="struct" name="VkDescriptorSetVariableDescriptorCountAllocateInfoEXT"   alias="VkDescriptorSetVariableDescriptorCountAllocateInfo"/>
        <type category="struct" name="VkDescriptorSetVariableDescriptorCountLayoutSupport" structextends="VkDescriptorSetLayoutSupport" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>uint32_t</type>         <name>maxVariableDescriptorCount</name></member>
        </type>
        <type category="struct" name="VkDescriptorSetVariableDescriptorCountLayoutSupportEXT"  alias="VkDescriptorSetVariableDescriptorCountLayoutSupport"/>
        <type category="struct" name="VkAttachmentDescription2">
            <member values="VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkAttachmentDescriptionFlags</type> <name>flags</name></member>
            <member><type>VkFormat</type>                                     <name>format</name></member>
            <member><type>VkSampleCountFlagBits</type>                        <name>samples</name></member>
            <member><type>VkAttachmentLoadOp</type>                           <name>loadOp</name><comment>Load operation for color or depth data</comment></member>
            <member><type>VkAttachmentStoreOp</type>                          <name>storeOp</name><comment>Store operation for color or depth data</comment></member>
            <member><type>VkAttachmentLoadOp</type>                           <name>stencilLoadOp</name><comment>Load operation for stencil data</comment></member>
            <member><type>VkAttachmentStoreOp</type>                          <name>stencilStoreOp</name><comment>Store operation for stencil data</comment></member>
            <member><type>VkImageLayout</type>                                <name>initialLayout</name></member>
            <member><type>VkImageLayout</type>                                <name>finalLayout</name></member>
        </type>
        <type category="struct" name="VkAttachmentDescription2KHR"                             alias="VkAttachmentDescription2"/>
        <type category="struct" name="VkAttachmentReference2">
            <member values="VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>uint32_t</type>                          <name>attachment</name></member>
            <member><type>VkImageLayout</type>                     <name>layout</name></member>
            <member noautovalidity="true"><type>VkImageAspectFlags</type> <name>aspectMask</name></member>
        </type>
        <type category="struct" name="VkAttachmentReference2KHR"                               alias="VkAttachmentReference2"/>
        <type category="struct" name="VkSubpassDescription2">
            <member values="VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                           <name>pNext</name></member>
            <member optional="true"><type>VkSubpassDescriptionFlags</type>                   <name>flags</name></member>
            <member><type>VkPipelineBindPoint</type>                                         <name>pipelineBindPoint</name></member>
            <member><type>uint32_t</type>                                                    <name>viewMask</name></member>
            <member optional="true"><type>uint32_t</type>                                    <name>inputAttachmentCount</name></member>
            <member len="inputAttachmentCount">const <type>VkAttachmentReference2</type>*    <name>pInputAttachments</name></member>
            <member optional="true"><type>uint32_t</type>                                    <name>colorAttachmentCount</name></member>
            <member len="colorAttachmentCount">const <type>VkAttachmentReference2</type>*    <name>pColorAttachments</name></member>
            <member optional="true" len="colorAttachmentCount">const <type>VkAttachmentReference2</type>* <name>pResolveAttachments</name></member>
            <member optional="true">const <type>VkAttachmentReference2</type>*               <name>pDepthStencilAttachment</name></member>
            <member optional="true"><type>uint32_t</type>                                    <name>preserveAttachmentCount</name></member>
            <member len="preserveAttachmentCount">const <type>uint32_t</type>*               <name>pPreserveAttachments</name></member>
        </type>
        <type category="struct" name="VkSubpassDescription2KHR"                                alias="VkSubpassDescription2"/>
        <type category="struct" name="VkSubpassDependency2">
            <member values="VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>uint32_t</type>                          <name>srcSubpass</name></member>
            <member><type>uint32_t</type>                          <name>dstSubpass</name></member>
            <member optional="true"><type>VkPipelineStageFlags</type> <name>srcStageMask</name></member>
            <member optional="true"><type>VkPipelineStageFlags</type> <name>dstStageMask</name></member>
            <member optional="true"><type>VkAccessFlags</type>     <name>srcAccessMask</name></member>
            <member optional="true"><type>VkAccessFlags</type>     <name>dstAccessMask</name></member>
            <member optional="true"><type>VkDependencyFlags</type> <name>dependencyFlags</name></member>
            <member><type>int32_t</type>                           <name>viewOffset</name></member>
        </type>
        <type category="struct" name="VkSubpassDependency2KHR"                                 alias="VkSubpassDependency2"/>
        <type category="struct" name="VkRenderPassCreateInfo2">
            <member values="VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                              <name>pNext</name></member>
            <member optional="true"><type>VkRenderPassCreateFlags</type>                  <name>flags</name></member>
            <member optional="true"><type>uint32_t</type>                                 <name>attachmentCount</name></member>
            <member len="attachmentCount">const <type>VkAttachmentDescription2</type>*    <name>pAttachments</name></member>
            <member><type>uint32_t</type>                                                 <name>subpassCount</name></member>
            <member len="subpassCount">const <type>VkSubpassDescription2</type>*          <name>pSubpasses</name></member>
            <member optional="true"><type>uint32_t</type>                                 <name>dependencyCount</name></member>
            <member len="dependencyCount">const <type>VkSubpassDependency2</type>*        <name>pDependencies</name></member>
            <member optional="true"><type>uint32_t</type>                                 <name>correlatedViewMaskCount</name></member>
            <member len="correlatedViewMaskCount">const <type>uint32_t</type>*            <name>pCorrelatedViewMasks</name></member>
        </type>
        <type category="struct" name="VkRenderPassCreateInfo2KHR"                              alias="VkRenderPassCreateInfo2"/>
        <type category="struct" name="VkSubpassBeginInfo">
            <member values="VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkSubpassContents</type>      <name>contents</name></member>
        </type>
        <type category="struct" name="VkSubpassBeginInfoKHR"                                   alias="VkSubpassBeginInfo"/>
        <type category="struct" name="VkSubpassEndInfo">
            <member values="VK_STRUCTURE_TYPE_SUBPASS_END_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
        </type>
        <type category="struct" name="VkSubpassEndInfoKHR"                                     alias="VkSubpassEndInfo"/>
        <type category="struct" name="VkPhysicalDeviceTimelineSemaphoreFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member><type>VkBool32</type>               <name>timelineSemaphore</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceTimelineSemaphoreFeaturesKHR"            alias="VkPhysicalDeviceTimelineSemaphoreFeatures"/>
        <type category="struct" name="VkPhysicalDeviceTimelineSemaphoreProperties" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member limittype="max"><type>uint64_t</type>               <name>maxTimelineSemaphoreValueDifference</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceTimelineSemaphorePropertiesKHR"          alias="VkPhysicalDeviceTimelineSemaphoreProperties"/>
        <type category="struct" name="VkSemaphoreTypeCreateInfo" structextends="VkSemaphoreCreateInfo,VkPhysicalDeviceExternalSemaphoreInfo">
            <member values="VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkSemaphoreType</type>        <name>semaphoreType</name></member>
            <member><type>uint64_t</type>               <name>initialValue</name></member>
        </type>
        <type category="struct" name="VkSemaphoreTypeCreateInfoKHR"                            alias="VkSemaphoreTypeCreateInfo"/>
        <type category="struct" name="VkTimelineSemaphoreSubmitInfo" structextends="VkSubmitInfo,VkBindSparseInfo">
            <member values="VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>         <name>waitSemaphoreValueCount</name></member>
            <member optional="true" len="waitSemaphoreValueCount">const <type>uint64_t</type>* <name>pWaitSemaphoreValues</name></member>
            <member optional="true"><type>uint32_t</type>         <name>signalSemaphoreValueCount</name></member>
            <member optional="true" len="signalSemaphoreValueCount">const <type>uint64_t</type>* <name>pSignalSemaphoreValues</name></member>
        </type>
        <type category="struct" name="VkTimelineSemaphoreSubmitInfoKHR"                        alias="VkTimelineSemaphoreSubmitInfo"/>
        <type category="struct" name="VkSemaphoreWaitInfo">
            <member values="VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkSemaphoreWaitFlags</type> <name>flags</name></member>
            <member><type>uint32_t</type>               <name>semaphoreCount</name></member>
            <member len="semaphoreCount">const <type>VkSemaphore</type>* <name>pSemaphores</name></member>
            <member len="semaphoreCount">const <type>uint64_t</type>*    <name>pValues</name></member>
        </type>
        <type category="struct" name="VkSemaphoreWaitInfoKHR"                                  alias="VkSemaphoreWaitInfo"/>
        <type category="struct" name="VkSemaphoreSignalInfo">
            <member values="VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkSemaphore</type>            <name>semaphore</name></member>
            <member><type>uint64_t</type>               <name>value</name></member>
        </type>
        <type category="struct" name="VkSemaphoreSignalInfoKHR"                                alias="VkSemaphoreSignalInfo"/>
        <type category="struct" name="VkVertexInputBindingDivisorDescription">
            <member><type>uint32_t</type>          <name>binding</name></member>
            <member><type>uint32_t</type>          <name>divisor</name></member>
        </type>
        <type category="struct" name="VkVertexInputBindingDivisorDescriptionKHR" alias="VkVertexInputBindingDivisorDescription"/>
        <type category="struct" name="VkVertexInputBindingDivisorDescriptionEXT" alias="VkVertexInputBindingDivisorDescription"/>
        <type category="struct" name="VkPipelineVertexInputDivisorStateCreateInfo" structextends="VkPipelineVertexInputStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                         <name>pNext</name></member>
            <member><type>uint32_t</type>                            <name>vertexBindingDivisorCount</name></member>
            <member len="vertexBindingDivisorCount">const <type>VkVertexInputBindingDivisorDescription</type>*         <name>pVertexBindingDivisors</name></member>
        </type>
        <type category="struct" name="VkPipelineVertexInputDivisorStateCreateInfoKHR" alias="VkPipelineVertexInputDivisorStateCreateInfo"/>
        <type category="struct" name="VkPipelineVertexInputDivisorStateCreateInfoEXT" alias="VkPipelineVertexInputDivisorStateCreateInfo"/>
        <type category="struct" name="VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxVertexAttribDivisor</name><comment>max value of vertex attribute divisor</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVertexAttributeDivisorProperties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxVertexAttribDivisor</name><comment>max value of vertex attribute divisor</comment></member>
            <member limittype="max"><type>VkBool32</type>               <name>supportsNonZeroFirstInstance</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR" alias="VkPhysicalDeviceVertexAttributeDivisorProperties"/>
        <type category="struct" name="VkPhysicalDevicePCIBusInfoPropertiesEXT" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member limittype="noauto"><type>uint32_t</type>               <name>pciDomain</name></member>
            <member limittype="noauto"><type>uint32_t</type>               <name>pciBus</name></member>
            <member limittype="noauto"><type>uint32_t</type>               <name>pciDevice</name></member>
            <member limittype="noauto"><type>uint32_t</type>               <name>pciFunction</name></member>
        </type>
        <type category="struct" name="VkImportAndroidHardwareBufferInfoANDROID" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                        <name>pNext</name></member>
            <member>struct <type>AHardwareBuffer</type>*            <name>buffer</name></member>
        </type>
        <type category="struct" name="VkAndroidHardwareBufferUsageANDROID" structextends="VkImageFormatProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                              <name>pNext</name></member>
            <member><type>uint64_t</type>                           <name>androidHardwareBufferUsage</name></member>
        </type>
        <type category="struct" name="VkAndroidHardwareBufferPropertiesANDROID" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                              <name>pNext</name></member>
            <member><type>VkDeviceSize</type>                       <name>allocationSize</name></member>
            <member><type>uint32_t</type>                           <name>memoryTypeBits</name></member>
        </type>
        <type category="struct" name="VkMemoryGetAndroidHardwareBufferInfoANDROID">
            <member values="VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                        <name>pNext</name></member>
            <member><type>VkDeviceMemory</type>                     <name>memory</name></member>
        </type>
        <type category="struct" name="VkAndroidHardwareBufferFormatPropertiesANDROID" structextends="VkAndroidHardwareBufferPropertiesANDROID" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                              <name>pNext</name></member>
            <member><type>VkFormat</type>                           <name>format</name></member>
            <member><type>uint64_t</type>                           <name>externalFormat</name></member>
            <member><type>VkFormatFeatureFlags</type>               <name>formatFeatures</name></member>
            <member><type>VkComponentMapping</type>                 <name>samplerYcbcrConversionComponents</name></member>
            <member><type>VkSamplerYcbcrModelConversion</type>      <name>suggestedYcbcrModel</name></member>
            <member><type>VkSamplerYcbcrRange</type>                <name>suggestedYcbcrRange</name></member>
            <member><type>VkChromaLocation</type>                   <name>suggestedXChromaOffset</name></member>
            <member><type>VkChromaLocation</type>                   <name>suggestedYChromaOffset</name></member>
        </type>
        <type category="struct" name="VkCommandBufferInheritanceConditionalRenderingInfoEXT" structextends="VkCommandBufferInheritanceInfo">
            <member values="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                         <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>conditionalRenderingEnable</name><comment>Whether this secondary command buffer may be executed during an active conditional rendering</comment></member>
        </type>
        <type category="struct" name="VkExternalFormatANDROID" structextends="VkImageCreateInfo,VkSamplerYcbcrConversionCreateInfo,VkAttachmentDescription2,VkGraphicsPipelineCreateInfo,VkCommandBufferInheritanceInfo">
            <member values="VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                              <name>pNext</name></member>
            <member><type>uint64_t</type>                           <name>externalFormat</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevice8BitStorageFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*      <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>storageBuffer8BitAccess</name><comment>8-bit integer variables supported in StorageBuffer</comment></member>
            <member><type>VkBool32</type>                         <name>uniformAndStorageBuffer8BitAccess</name><comment>8-bit integer variables supported in StorageBuffer and Uniform</comment></member>
            <member><type>VkBool32</type>                         <name>storagePushConstant8</name><comment>8-bit integer variables supported in PushConstant</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDevice8BitStorageFeaturesKHR"                  alias="VkPhysicalDevice8BitStorageFeatures"/>
        <type category="struct" name="VkPhysicalDeviceConditionalRenderingFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>conditionalRendering</name></member>
            <member><type>VkBool32</type>                           <name>inheritedConditionalRendering</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVulkanMemoryModelFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*      <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>vulkanMemoryModel</name></member>
            <member><type>VkBool32</type>                         <name>vulkanMemoryModelDeviceScope</name></member>
            <member><type>VkBool32</type>                         <name>vulkanMemoryModelAvailabilityVisibilityChains</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVulkanMemoryModelFeaturesKHR"            alias="VkPhysicalDeviceVulkanMemoryModelFeatures"/>
        <type category="struct" name="VkPhysicalDeviceShaderAtomicInt64Features" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>shaderBufferInt64Atomics</name></member>
            <member><type>VkBool32</type>                            <name>shaderSharedInt64Atomics</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderAtomicInt64FeaturesKHR"            alias="VkPhysicalDeviceShaderAtomicInt64Features"/>
        <type category="struct" name="VkPhysicalDeviceShaderAtomicFloatFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>shaderBufferFloat32Atomics</name></member>
            <member><type>VkBool32</type>                            <name>shaderBufferFloat32AtomicAdd</name></member>
            <member><type>VkBool32</type>                            <name>shaderBufferFloat64Atomics</name></member>
            <member><type>VkBool32</type>                            <name>shaderBufferFloat64AtomicAdd</name></member>
            <member><type>VkBool32</type>                            <name>shaderSharedFloat32Atomics</name></member>
            <member><type>VkBool32</type>                            <name>shaderSharedFloat32AtomicAdd</name></member>
            <member><type>VkBool32</type>                            <name>shaderSharedFloat64Atomics</name></member>
            <member><type>VkBool32</type>                            <name>shaderSharedFloat64AtomicAdd</name></member>
            <member><type>VkBool32</type>                            <name>shaderImageFloat32Atomics</name></member>
            <member><type>VkBool32</type>                            <name>shaderImageFloat32AtomicAdd</name></member>
            <member><type>VkBool32</type>                            <name>sparseImageFloat32Atomics</name></member>
            <member><type>VkBool32</type>                            <name>sparseImageFloat32AtomicAdd</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>shaderBufferFloat16Atomics</name></member>
            <member><type>VkBool32</type>                            <name>shaderBufferFloat16AtomicAdd</name></member>
            <member><type>VkBool32</type>                            <name>shaderBufferFloat16AtomicMinMax</name></member>
            <member><type>VkBool32</type>                            <name>shaderBufferFloat32AtomicMinMax</name></member>
            <member><type>VkBool32</type>                            <name>shaderBufferFloat64AtomicMinMax</name></member>
            <member><type>VkBool32</type>                            <name>shaderSharedFloat16Atomics</name></member>
            <member><type>VkBool32</type>                            <name>shaderSharedFloat16AtomicAdd</name></member>
            <member><type>VkBool32</type>                            <name>shaderSharedFloat16AtomicMinMax</name></member>
            <member><type>VkBool32</type>                            <name>shaderSharedFloat32AtomicMinMax</name></member>
            <member><type>VkBool32</type>                            <name>shaderSharedFloat64AtomicMinMax</name></member>
            <member><type>VkBool32</type>                            <name>shaderImageFloat32AtomicMinMax</name></member>
            <member><type>VkBool32</type>                            <name>sparseImageFloat32AtomicMinMax</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVertexAttributeDivisorFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>vertexAttributeInstanceRateDivisor</name></member>
            <member><type>VkBool32</type>                           <name>vertexAttributeInstanceRateZeroDivisor</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR" alias="VkPhysicalDeviceVertexAttributeDivisorFeatures"/>
        <type category="struct" name="VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT" alias="VkPhysicalDeviceVertexAttributeDivisorFeatures"/>
        <type category="struct" name="VkQueueFamilyCheckpointPropertiesNV" structextends="VkQueueFamilyProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*           <name>pNext</name></member>
            <member limittype="bitmask"><type>VkPipelineStageFlags</type> <name>checkpointExecutionStageMask</name></member>
        </type>
        <type category="struct" name="VkCheckpointDataNV" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member><type>VkPipelineStageFlagBits</type>   <name>stage</name></member>
            <member noautovalidity="true"><type>void</type>* <name>pCheckpointMarker</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDepthStencilResolveProperties" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                                <name>pNext</name></member>
            <member limittype="bitmask"><type>VkResolveModeFlags</type>                   <name>supportedDepthResolveModes</name><comment>supported depth resolve modes</comment></member>
            <member limittype="bitmask"><type>VkResolveModeFlags</type>                   <name>supportedStencilResolveModes</name><comment>supported stencil resolve modes</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                             <name>independentResolveNone</name><comment>depth and stencil resolve modes can be set independently if one of them is none</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                             <name>independentResolve</name><comment>depth and stencil resolve modes can be set independently</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDepthStencilResolvePropertiesKHR"        alias="VkPhysicalDeviceDepthStencilResolveProperties"/>
        <type category="struct" name="VkSubpassDescriptionDepthStencilResolve" structextends="VkSubpassDescription2">
            <member values="VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                              <name>pNext</name></member>
            <member noautovalidity="true"><type>VkResolveModeFlagBits</type>              <name>depthResolveMode</name><comment>depth resolve mode</comment></member>
            <member noautovalidity="true"><type>VkResolveModeFlagBits</type>              <name>stencilResolveMode</name><comment>stencil resolve mode</comment></member>
            <member optional="true">const <type>VkAttachmentReference2</type>*            <name>pDepthStencilResolveAttachment</name><comment>depth/stencil resolve attachment</comment></member>
        </type>
        <type category="struct" name="VkSubpassDescriptionDepthStencilResolveKHR"              alias="VkSubpassDescriptionDepthStencilResolve"/>
        <type category="struct" name="VkImageViewASTCDecodeModeEXT" structextends="VkImageViewCreateInfo">
            <member values="VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkFormat</type>                         <name>decodeMode</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceASTCDecodeFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*      <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>decodeModeSharedExponent</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceTransformFeedbackFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member><type>VkBool32</type>               <name>transformFeedback</name></member>
            <member><type>VkBool32</type>               <name>geometryStreams</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceTransformFeedbackPropertiesEXT" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxTransformFeedbackStreams</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxTransformFeedbackBuffers</name></member>
            <member limittype="max"><type>VkDeviceSize</type>           <name>maxTransformFeedbackBufferSize</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxTransformFeedbackStreamDataSize</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxTransformFeedbackBufferDataSize</name></member>
            <member limittype="max"><type>uint32_t</type>               <name>maxTransformFeedbackBufferDataStride</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>transformFeedbackQueries</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>transformFeedbackStreamsLinesTriangles</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>transformFeedbackRasterizationStreamSelect</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>transformFeedbackDraw</name></member>
        </type>
        <type category="struct" name="VkPipelineRasterizationStateStreamCreateInfoEXT" structextends="VkPipelineRasterizationStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                                      <name>pNext</name></member>
            <member optional="true"><type>VkPipelineRasterizationStateStreamCreateFlagsEXT</type>                 <name>flags</name></member>
            <member><type>uint32_t</type>                                                                         <name>rasterizationStream</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                       <name>representativeFragmentTest</name></member>
        </type>
        <type category="struct" name="VkPipelineRepresentativeFragmentTestStateCreateInfoNV" structextends="VkGraphicsPipelineCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>       <name>representativeFragmentTestEnable</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExclusiveScissorFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>exclusiveScissor</name></member>
        </type>
        <type category="struct" name="VkPipelineViewportExclusiveScissorStateCreateInfoNV" structextends="VkPipelineViewportStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                       <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                                          <name>exclusiveScissorCount</name></member>
            <member noautovalidity="true" len="exclusiveScissorCount">const <type>VkRect2D</type>* <name>pExclusiveScissors</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCornerSampledImageFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                              <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>cornerSampledImage</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>computeDerivativeGroupQuads</name></member>
            <member><type>VkBool32</type>                         <name>computeDerivativeGroupLinear</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceComputeShaderDerivativesFeaturesNV" alias="VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR"/>
        <type category="struct" name="VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>meshAndTaskShaderDerivatives</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV"   alias="VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR"/>
        <type category="struct" name="VkPhysicalDeviceShaderImageFootprintFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                              <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>imageFootprint</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>dedicatedAllocationImageAliasing</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCopyMemoryIndirectFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>indirectCopy</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCopyMemoryIndirectPropertiesNV" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*     <name>pNext</name></member>
            <member limittype="bitmask" noautovalidity="true"><type>VkQueueFlags</type>        <name>supportedQueues</name><comment>Bitfield of which queues are supported for indirect copy</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMemoryDecompressionFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*       <name>pNext</name></member>
            <member><type>VkBool32</type>                    <name>memoryDecompression</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMemoryDecompressionPropertiesNV" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*     <name>pNext</name></member>
            <member limittype="bitmask"><type>VkMemoryDecompressionMethodFlagsNV</type>    <name>decompressionMethods</name></member>
            <member limittype="max"><type>uint64_t</type>             <name>maxDecompressionIndirectCount</name></member>
        </type>
        <type category="struct" name="VkShadingRatePaletteNV">
            <member><type>uint32_t</type>                                                               <name>shadingRatePaletteEntryCount</name></member>
            <member len="shadingRatePaletteEntryCount">const <type>VkShadingRatePaletteEntryNV</type>*  <name>pShadingRatePaletteEntries</name></member>
        </type>
        <type category="struct" name="VkPipelineViewportShadingRateImageStateCreateInfoNV" structextends="VkPipelineViewportStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                             <name>pNext</name></member>
            <member><type>VkBool32</type>                                                                <name>shadingRateImageEnable</name></member>
            <member optional="true"><type>uint32_t</type>                                                <name>viewportCount</name></member>
            <member noautovalidity="true" len="viewportCount">const <type>VkShadingRatePaletteNV</type>* <name>pShadingRatePalettes</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShadingRateImageFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>shadingRateImage</name></member>
            <member><type>VkBool32</type>                            <name>shadingRateCoarseSampleOrder</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShadingRateImagePropertiesNV" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member limittype="exact"><type>VkExtent2D</type>                     <name>shadingRateTexelSize</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>shadingRatePaletteSize</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>shadingRateMaxCoarseSamples</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceInvocationMaskFeaturesHUAWEI" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>invocationMask</name></member>
        </type>
        <type category="struct" name="VkCoarseSampleLocationNV">
            <member><type>uint32_t</type>                            <name>pixelX</name></member>
            <member><type>uint32_t</type>                            <name>pixelY</name></member>
            <member><type>uint32_t</type>                            <name>sample</name></member>
        </type>
        <type category="struct" name="VkCoarseSampleOrderCustomNV">
            <member><type>VkShadingRatePaletteEntryNV</type>         <name>shadingRate</name></member>
            <member><type>uint32_t</type>                            <name>sampleCount</name></member>
            <member><type>uint32_t</type>                            <name>sampleLocationCount</name></member>
            <member len="sampleLocationCount">const <type>VkCoarseSampleLocationNV</type>* <name>pSampleLocations</name></member>
        </type>
        <type category="struct" name="VkPipelineViewportCoarseSampleOrderStateCreateInfoNV" structextends="VkPipelineViewportStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                            <name>pNext</name></member>
            <member><type>VkCoarseSampleOrderTypeNV</type>                                              <name>sampleOrderType</name></member>
            <member optional="true"><type>uint32_t</type>                                               <name>customSampleOrderCount</name></member>
            <member len="customSampleOrderCount">const <type>VkCoarseSampleOrderCustomNV</type>*        <name>pCustomSampleOrders</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMeshShaderFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member featurelink="taskShaderNV"><type>VkBool32</type>                            <name>taskShader</name></member>
            <member featurelink="meshShaderNV"><type>VkBool32</type>                            <name>meshShader</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMeshShaderPropertiesNV" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxDrawMeshTasksCount</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxTaskWorkGroupInvocations</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxTaskWorkGroupSize</name>[3]</member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxTaskTotalMemorySize</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxTaskOutputCount</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshWorkGroupInvocations</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshWorkGroupSize</name>[3]</member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshTotalMemorySize</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshOutputVertices</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshOutputPrimitives</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshMultiviewViewCount</name></member>
            <member limittype="min,mul"><type>uint32_t</type>                         <name>meshOutputPerVertexGranularity</name></member>
            <member limittype="min,mul"><type>uint32_t</type>                         <name>meshOutputPerPrimitiveGranularity</name></member>
        </type>
        <type category="struct" name="VkDrawMeshTasksIndirectCommandNV">
            <member><type>uint32_t</type>               <name>taskCount</name></member>
            <member><type>uint32_t</type>               <name>firstTask</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMeshShaderFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>taskShader</name></member>
            <member><type>VkBool32</type>                            <name>meshShader</name></member>
            <member><type>VkBool32</type>                            <name>multiviewMeshShader</name></member>
            <member><type>VkBool32</type>                            <name>primitiveFragmentShadingRateMeshShader</name></member>
            <member><type>VkBool32</type>                            <name>meshShaderQueries</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMeshShaderPropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxTaskWorkGroupTotalCount</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxTaskWorkGroupCount</name>[3]</member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxTaskWorkGroupInvocations</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxTaskWorkGroupSize</name>[3]</member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxTaskPayloadSize</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxTaskSharedMemorySize</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxTaskPayloadAndSharedMemorySize</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshWorkGroupTotalCount</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshWorkGroupCount</name>[3]</member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshWorkGroupInvocations</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshWorkGroupSize</name>[3]</member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshSharedMemorySize</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshPayloadAndSharedMemorySize</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshOutputMemorySize</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshPayloadAndOutputMemorySize</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshOutputComponents</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshOutputVertices</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshOutputPrimitives</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshOutputLayers</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxMeshMultiviewViewCount</name></member>
            <member limittype="noauto"><type>uint32_t</type>                         <name>meshOutputPerVertexGranularity</name></member>
            <member limittype="noauto"><type>uint32_t</type>                         <name>meshOutputPerPrimitiveGranularity</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxPreferredTaskWorkGroupInvocations</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxPreferredMeshWorkGroupInvocations</name></member>
            <member limittype="noauto"><type>VkBool32</type>                         <name>prefersLocalInvocationVertexOutput</name></member>
            <member limittype="noauto"><type>VkBool32</type>                         <name>prefersLocalInvocationPrimitiveOutput</name></member>
            <member limittype="noauto"><type>VkBool32</type>                         <name>prefersCompactVertexOutput</name></member>
            <member limittype="noauto"><type>VkBool32</type>                         <name>prefersCompactPrimitiveOutput</name></member>
        </type>
        <type category="struct" name="VkDrawMeshTasksIndirectCommandEXT">
            <member noautovalidity="true"><type>uint32_t</type> <name>groupCountX</name></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>groupCountY</name></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>groupCountZ</name></member>
        </type>
        <type category="struct" name="VkRayTracingShaderGroupCreateInfoNV">
            <member values="VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkRayTracingShaderGroupTypeKHR</type> <name>type</name></member>
            <member><type>uint32_t</type>               <name>generalShader</name></member>
            <member><type>uint32_t</type>               <name>closestHitShader</name></member>
            <member><type>uint32_t</type>               <name>anyHitShader</name></member>
            <member><type>uint32_t</type>               <name>intersectionShader</name></member>
        </type>
        <type category="struct" name="VkRayTracingShaderGroupCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkRayTracingShaderGroupTypeKHR</type> <name>type</name></member>
            <member><type>uint32_t</type>               <name>generalShader</name></member>
            <member><type>uint32_t</type>               <name>closestHitShader</name></member>
            <member><type>uint32_t</type>               <name>anyHitShader</name></member>
            <member><type>uint32_t</type>               <name>intersectionShader</name></member>
            <member optional="true">const <type>void</type>* <name>pShaderGroupCaptureReplayHandle</name></member>
        </type>
        <type category="struct" name="VkRayTracingPipelineCreateInfoNV">
            <member values="VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member noautovalidity="true" optional="true"><type>VkPipelineCreateFlags</type>  <name>flags</name><comment>Pipeline creation flags</comment></member>
            <member><type>uint32_t</type>               <name>stageCount</name></member>
            <member len="stageCount">const <type>VkPipelineShaderStageCreateInfo</type>* <name>pStages</name><comment>One entry for each active shader stage</comment></member>
            <member><type>uint32_t</type>               <name>groupCount</name></member>
            <member len="groupCount">const <type>VkRayTracingShaderGroupCreateInfoNV</type>* <name>pGroups</name></member>
            <member><type>uint32_t</type>               <name>maxRecursionDepth</name></member>
            <member><type>VkPipelineLayout</type>       <name>layout</name><comment>Interface layout of the pipeline</comment></member>
            <member noautovalidity="true" optional="true"><type>VkPipeline</type>      <name>basePipelineHandle</name><comment>If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of</comment></member>
            <member><type>int32_t</type>                <name>basePipelineIndex</name><comment>If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of</comment></member>
        </type>
        <type category="struct" name="VkRayTracingPipelineCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member noautovalidity="true" optional="true"><type>VkPipelineCreateFlags</type>  <name>flags</name><comment>Pipeline creation flags</comment></member>
            <member optional="true"><type>uint32_t</type> <name>stageCount</name></member>
            <member len="stageCount">const <type>VkPipelineShaderStageCreateInfo</type>* <name>pStages</name><comment>One entry for each active shader stage</comment></member>
            <member optional="true"><type>uint32_t</type> <name>groupCount</name></member>
            <member len="groupCount">const <type>VkRayTracingShaderGroupCreateInfoKHR</type>* <name>pGroups</name></member>
            <member><type>uint32_t</type>               <name>maxPipelineRayRecursionDepth</name></member>
            <member optional="true">const <type>VkPipelineLibraryCreateInfoKHR</type>* <name>pLibraryInfo</name></member>
            <member optional="true">const <type>VkRayTracingPipelineInterfaceCreateInfoKHR</type>* <name>pLibraryInterface</name></member>
            <member optional="true">const <type>VkPipelineDynamicStateCreateInfo</type>* <name>pDynamicState</name></member>
            <member><type>VkPipelineLayout</type>       <name>layout</name><comment>Interface layout of the pipeline</comment></member>
            <member noautovalidity="true" optional="true"><type>VkPipeline</type>      <name>basePipelineHandle</name><comment>If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of</comment></member>
            <member><type>int32_t</type>                <name>basePipelineIndex</name><comment>If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of</comment></member>
        </type>
        <type category="struct" name="VkGeometryTrianglesNV">
            <member values="VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member optional="true"><type>VkBuffer</type>   <name>vertexData</name></member>
            <member><type>VkDeviceSize</type>               <name>vertexOffset</name></member>
            <member><type>uint32_t</type>                   <name>vertexCount</name></member>
            <member><type>VkDeviceSize</type>               <name>vertexStride</name></member>
            <member><type>VkFormat</type>                   <name>vertexFormat</name></member>
            <member optional="true"><type>VkBuffer</type>   <name>indexData</name></member>
            <member><type>VkDeviceSize</type>               <name>indexOffset</name></member>
            <member><type>uint32_t</type>                   <name>indexCount</name></member>
            <member><type>VkIndexType</type>                <name>indexType</name></member>
            <member optional="true"><type>VkBuffer</type>   <name>transformData</name><comment>Optional reference to array of floats representing a 3x4 row major affine transformation matrix.</comment></member>
            <member><type>VkDeviceSize</type>               <name>transformOffset</name></member>
        </type>
        <type category="struct" name="VkGeometryAABBNV">
            <member values="VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member optional="true"><type>VkBuffer</type>   <name>aabbData</name></member>
            <member><type>uint32_t</type>                   <name>numAABBs</name></member>
            <member><type>uint32_t</type>                   <name>stride</name><comment>Stride in bytes between AABBs</comment></member>
            <member><type>VkDeviceSize</type>               <name>offset</name><comment>Offset in bytes of the first AABB in aabbData</comment></member>
        </type>
        <type category="struct" name="VkGeometryDataNV">
            <member><type>VkGeometryTrianglesNV</type>                  <name>triangles</name></member>
            <member><type>VkGeometryAABBNV</type>                       <name>aabbs</name></member>
        </type>
        <type category="struct" name="VkGeometryNV">
            <member values="VK_STRUCTURE_TYPE_GEOMETRY_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                   <name>pNext</name></member>
            <member><type>VkGeometryTypeKHR</type>                  <name>geometryType</name></member>
            <member><type>VkGeometryDataNV</type>                              <name>geometry</name></member>
            <member optional="true"><type>VkGeometryFlagsKHR</type> <name>flags</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureInfoNV">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member><type>VkAccelerationStructureTypeNV</type>         <name>type</name></member>
            <member optional="true"><type>VkBuildAccelerationStructureFlagsNV</type> <name>flags</name></member>
            <member optional="true"><type>uint32_t</type>               <name>instanceCount</name></member>
            <member optional="true"><type>uint32_t</type>               <name>geometryCount</name></member>
            <member len="geometryCount">const <type>VkGeometryNV</type>* <name>pGeometries</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureCreateInfoNV">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member><type>VkDeviceSize</type>                           <name>compactedSize</name></member>
            <member><type>VkAccelerationStructureInfoNV</type>          <name>info</name></member>
        </type>
        <type category="struct" name="VkBindAccelerationStructureMemoryInfoNV">
            <member values="VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*     <name>pNext</name></member>
            <member><type>VkAccelerationStructureNV</type>       <name>accelerationStructure</name></member>
            <member><type>VkDeviceMemory</type>                   <name>memory</name></member>
            <member><type>VkDeviceSize</type>                     <name>memoryOffset</name></member>
            <member optional="true"><type>uint32_t</type>         <name>deviceIndexCount</name></member>
            <member len="deviceIndexCount">const <type>uint32_t</type>*  <name>pDeviceIndices</name></member>
        </type>
        <type category="struct" name="VkWriteDescriptorSetAccelerationStructureKHR" structextends="VkWriteDescriptorSet">
            <member values="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>accelerationStructureCount</name></member>
            <member optional="false,true" len="accelerationStructureCount">const <type>VkAccelerationStructureKHR</type>* <name>pAccelerationStructures</name></member>
        </type>
        <type category="struct" name="VkWriteDescriptorSetAccelerationStructureNV" structextends="VkWriteDescriptorSet">
            <member values="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*      <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>accelerationStructureCount</name></member>
            <member optional="false,true" len="accelerationStructureCount">const <type>VkAccelerationStructureNV</type>* <name>pAccelerationStructures</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureMemoryRequirementsInfoNV">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                          <name>pNext</name></member>
            <member><type>VkAccelerationStructureMemoryRequirementsTypeNV</type>                     <name>type</name></member>
            <member><type>VkAccelerationStructureNV</type>                                           <name>accelerationStructure</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceAccelerationStructureFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>accelerationStructure</name></member>
            <member><type>VkBool32</type>                         <name>accelerationStructureCaptureReplay</name></member>
            <member><type>VkBool32</type>                         <name>accelerationStructureIndirectBuild</name></member>
            <member><type>VkBool32</type>                         <name>accelerationStructureHostCommands</name></member>
            <member><type>VkBool32</type>                         <name>descriptorBindingAccelerationStructureUpdateAfterBind</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRayTracingPipelineFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>rayTracingPipeline</name></member>
            <member><type>VkBool32</type>                         <name>rayTracingPipelineShaderGroupHandleCaptureReplay</name></member>
            <member><type>VkBool32</type>                         <name>rayTracingPipelineShaderGroupHandleCaptureReplayMixed</name></member>
            <member><type>VkBool32</type>                         <name>rayTracingPipelineTraceRaysIndirect</name></member>
            <member><type>VkBool32</type>                         <name>rayTraversalPrimitiveCulling</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRayQueryFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>rayQuery</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceAccelerationStructurePropertiesKHR" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member limittype="max"><type>uint64_t</type>                         <name>maxGeometryCount</name></member>
            <member limittype="max"><type>uint64_t</type>                         <name>maxInstanceCount</name></member>
            <member limittype="max"><type>uint64_t</type>                         <name>maxPrimitiveCount</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxPerStageDescriptorAccelerationStructures</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxPerStageDescriptorUpdateAfterBindAccelerationStructures</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxDescriptorSetAccelerationStructures</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxDescriptorSetUpdateAfterBindAccelerationStructures</name></member>
            <member limittype="min"><type>uint32_t</type>                         <name>minAccelerationStructureScratchOffsetAlignment</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRayTracingPipelinePropertiesKHR" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member limittype="exact"><type>uint32_t</type>                    <name>shaderGroupHandleSize</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxRayRecursionDepth</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxShaderGroupStride</name></member>
            <member limittype="exact"><type>uint32_t</type>                    <name>shaderGroupBaseAlignment</name></member>
            <member limittype="exact"><type>uint32_t</type>                    <name>shaderGroupHandleCaptureReplaySize</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxRayDispatchInvocationCount</name></member>
            <member limittype="min,pot"><type>uint32_t</type>                      <name>shaderGroupHandleAlignment</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxRayHitAttributeSize</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRayTracingPropertiesNV" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="exact"><type>uint32_t</type>                    <name>shaderGroupHandleSize</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxRecursionDepth</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxShaderGroupStride</name></member>
            <member limittype="exact"><type>uint32_t</type>                    <name>shaderGroupBaseAlignment</name></member>
            <member limittype="max"><type>uint64_t</type>                         <name>maxGeometryCount</name></member>
            <member limittype="max"><type>uint64_t</type>                         <name>maxInstanceCount</name></member>
            <member limittype="max"><type>uint64_t</type>                         <name>maxTriangleCount</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxDescriptorSetAccelerationStructures</name></member>
        </type>
        <type category="struct" name="VkStridedDeviceAddressRegionKHR">
            <member optional="true"><type>VkDeviceAddress</type>  <name>deviceAddress</name></member>
            <member><type>VkDeviceSize</type>                     <name>stride</name></member>
            <member><type>VkDeviceSize</type>                     <name>size</name></member>
        </type>
        <type category="struct" name="VkTraceRaysIndirectCommandKHR">
            <member><type>uint32_t</type>               <name>width</name></member>
            <member><type>uint32_t</type>               <name>height</name></member>
            <member><type>uint32_t</type>               <name>depth</name></member>
        </type>
        <type category="struct" name="VkTraceRaysIndirectCommand2KHR">
            <member><type>VkDeviceAddress</type>        <name>raygenShaderRecordAddress</name></member>
            <member><type>VkDeviceSize</type>           <name>raygenShaderRecordSize</name></member>
            <member><type>VkDeviceAddress</type>        <name>missShaderBindingTableAddress</name></member>
            <member><type>VkDeviceSize</type>           <name>missShaderBindingTableSize</name></member>
            <member><type>VkDeviceSize</type>           <name>missShaderBindingTableStride</name></member>
            <member><type>VkDeviceAddress</type>        <name>hitShaderBindingTableAddress</name></member>
            <member><type>VkDeviceSize</type>           <name>hitShaderBindingTableSize</name></member>
            <member><type>VkDeviceSize</type>           <name>hitShaderBindingTableStride</name></member>
            <member><type>VkDeviceAddress</type>        <name>callableShaderBindingTableAddress</name></member>
            <member><type>VkDeviceSize</type>           <name>callableShaderBindingTableSize</name></member>
            <member><type>VkDeviceSize</type>           <name>callableShaderBindingTableStride</name></member>
            <member><type>uint32_t</type>               <name>width</name></member>
            <member><type>uint32_t</type>               <name>height</name></member>
            <member><type>uint32_t</type>               <name>depth</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>rayTracingMaintenance1</name></member>
            <member><type>VkBool32</type>                         <name>rayTracingPipelineTraceRaysIndirect2</name></member>
        </type>
        <type category="struct" name="VkDrmFormatModifierPropertiesListEXT" returnedonly="true" structextends="VkFormatProperties2">
            <member values="VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type> <name>drmFormatModifierCount</name></member>
            <member optional="true" len="drmFormatModifierCount"><type>VkDrmFormatModifierPropertiesEXT</type>* <name>pDrmFormatModifierProperties</name></member>
        </type>
        <type category="struct" name="VkDrmFormatModifierPropertiesEXT" returnedonly="true">
            <member><type>uint64_t</type> <name>drmFormatModifier</name></member>
            <member><type>uint32_t</type> <name>drmFormatModifierPlaneCount</name></member>
            <member><type>VkFormatFeatureFlags</type> <name>drmFormatModifierTilingFeatures</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImageDrmFormatModifierInfoEXT" structextends="VkPhysicalDeviceImageFormatInfo2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>uint64_t</type> <name>drmFormatModifier</name></member>
            <member><type>VkSharingMode</type> <name>sharingMode</name></member>
            <member optional="true"><type>uint32_t</type> <name>queueFamilyIndexCount</name></member>
            <member noautovalidity="true" len="queueFamilyIndexCount">const <type>uint32_t</type>* <name>pQueueFamilyIndices</name></member>
        </type>
        <type category="struct" name="VkImageDrmFormatModifierListCreateInfoEXT" structextends="VkImageCreateInfo">
            <member values="VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>uint32_t</type> <name>drmFormatModifierCount</name></member>
            <member len="drmFormatModifierCount">const <type>uint64_t</type>* <name>pDrmFormatModifiers</name></member>
        </type>
        <type category="struct" name="VkImageDrmFormatModifierExplicitCreateInfoEXT" structextends="VkImageCreateInfo">
            <member values="VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>uint64_t</type> <name>drmFormatModifier</name></member>
            <member><type>uint32_t</type> <name>drmFormatModifierPlaneCount</name></member>
            <member len="drmFormatModifierPlaneCount">const <type>VkSubresourceLayout</type>* <name>pPlaneLayouts</name></member>
        </type>
        <type category="struct" name="VkImageDrmFormatModifierPropertiesEXT" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member><type>uint64_t</type> <name>drmFormatModifier</name></member>
        </type>
        <type category="struct" name="VkImageStencilUsageCreateInfo" structextends="VkImageCreateInfo,VkPhysicalDeviceImageFormatInfo2">
            <member values="VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkImageUsageFlags</type> <name>stencilUsage</name></member>
        </type>
        <type category="struct" name="VkImageStencilUsageCreateInfoEXT"                        alias="VkImageStencilUsageCreateInfo"/>
        <type category="struct" name="VkDeviceMemoryOverallocationCreateInfoAMD"  structextends="VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkMemoryOverallocationBehaviorAMD</type> <name>overallocationBehavior</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFragmentDensityMapFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>fragmentDensityMap</name></member>
            <member><type>VkBool32</type>                         <name>fragmentDensityMapDynamic</name></member>
            <member><type>VkBool32</type>                         <name>fragmentDensityMapNonSubsampledImages</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFragmentDensityMap2FeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>fragmentDensityMapDeferred</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>fragmentDensityMapOffset</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFragmentDensityMapPropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="min"><type>VkExtent2D</type>                       <name>minFragmentDensityTexelSize</name></member>
            <member limittype="max"><type>VkExtent2D</type>                       <name>maxFragmentDensityTexelSize</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                     <name>fragmentDensityInvocations</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFragmentDensityMap2PropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member limittype="exact"><type>VkBool32</type>                  <name>subsampledLoads</name></member>
            <member limittype="exact"><type>VkBool32</type>                  <name>subsampledCoarseReconstructionEarlyAccess</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>maxSubsampledArrayLayers</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>maxDescriptorSetSubsampledSamplers</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="min,mul"><type>VkExtent2D</type>                       <name>fragmentDensityOffsetGranularity</name></member>
        </type>
        <type category="struct" name="VkRenderPassFragmentDensityMapCreateInfoEXT" structextends="VkRenderPassCreateInfo,VkRenderPassCreateInfo2">
            <member values="VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkAttachmentReference</type>            <name>fragmentDensityMapAttachment</name></member>
        </type>
        <type category="struct" name="VkSubpassFragmentDensityMapOffsetEndInfoQCOM" structextends="VkSubpassEndInfo">
            <member values="VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                        <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                           <name>fragmentDensityOffsetCount</name></member>
            <member len="fragmentDensityOffsetCount">const <type>VkOffset2D</type>* <name>pFragmentDensityOffsets</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceScalarBlockLayoutFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>scalarBlockLayout</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceScalarBlockLayoutFeaturesEXT"            alias="VkPhysicalDeviceScalarBlockLayoutFeatures"/>
        <type category="struct" name="VkSurfaceProtectedCapabilitiesKHR" structextends="VkSurfaceCapabilities2KHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkBool32</type> <name>supportsProtected</name><comment>Represents if surface can be protected</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceUniformBufferStandardLayoutFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>uniformBufferStandardLayout</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR"  alias="VkPhysicalDeviceUniformBufferStandardLayoutFeatures"/>
        <type category="struct" name="VkPhysicalDeviceDepthClipEnableFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member><type>VkBool32</type>               <name>depthClipEnable</name></member>
        </type>
        <type category="struct" name="VkPipelineRasterizationDepthClipStateCreateInfoEXT" structextends="VkPipelineRasterizationStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                                 <name>pNext</name></member>
            <member optional="true"><type>VkPipelineRasterizationDepthClipStateCreateFlagsEXT</type>         <name>flags</name><comment>Reserved</comment></member>
            <member><type>VkBool32</type>                                                                    <name>depthClipEnable</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMemoryBudgetPropertiesEXT" structextends="VkPhysicalDeviceMemoryProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkDeviceSize</type>                       <name>heapBudget</name>[<enum>VK_MAX_MEMORY_HEAPS</enum>]</member>
            <member><type>VkDeviceSize</type>                       <name>heapUsage</name>[<enum>VK_MAX_MEMORY_HEAPS</enum>]</member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMemoryPriorityFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>memoryPriority</name></member>
        </type>
        <type category="struct" name="VkMemoryPriorityAllocateInfoEXT" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                        <name>pNext</name></member>
            <member><type>float</type>                              <name>priority</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>pageableDeviceLocalMemory</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceBufferDeviceAddressFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>bufferDeviceAddress</name></member>
            <member><type>VkBool32</type>                           <name>bufferDeviceAddressCaptureReplay</name></member>
            <member><type>VkBool32</type>                           <name>bufferDeviceAddressMultiDevice</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceBufferDeviceAddressFeaturesKHR"          alias="VkPhysicalDeviceBufferDeviceAddressFeatures"/>
        <type category="struct" name="VkPhysicalDeviceBufferDeviceAddressFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member featurelink="bufferDeviceAddressEXT"><type>VkBool32</type>                           <name>bufferDeviceAddress</name></member>
            <member featurelink="bufferDeviceAddressCaptureReplayEXT"><type>VkBool32</type>              <name>bufferDeviceAddressCaptureReplay</name></member>
            <member featurelink="bufferDeviceAddressMultiDeviceEXT"><type>VkBool32</type>                <name>bufferDeviceAddressMultiDevice</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceBufferAddressFeaturesEXT"                alias="VkPhysicalDeviceBufferDeviceAddressFeaturesEXT"/>
        <type category="struct" name="VkBufferDeviceAddressInfo">
            <member values="VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                            <name>pNext</name></member>
            <member><type>VkBuffer</type>                                               <name>buffer</name></member>
        </type>
        <type category="struct" name="VkBufferDeviceAddressInfoKHR"                            alias="VkBufferDeviceAddressInfo"/>
        <type category="struct" name="VkBufferDeviceAddressInfoEXT"                            alias="VkBufferDeviceAddressInfo"/>
        <type category="struct" name="VkBufferOpaqueCaptureAddressCreateInfo" structextends="VkBufferCreateInfo">
            <member values="VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>uint64_t</type>                         <name>opaqueCaptureAddress</name></member>
        </type>
        <type category="struct" name="VkBufferOpaqueCaptureAddressCreateInfoKHR"               alias="VkBufferOpaqueCaptureAddressCreateInfo"/>
        <type category="struct" name="VkBufferDeviceAddressCreateInfoEXT" structextends="VkBufferCreateInfo">
            <member values="VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkDeviceAddress</type>                  <name>deviceAddress</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImageViewImageFormatInfoEXT" structextends="VkPhysicalDeviceImageFormatInfo2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkImageViewType</type>                  <name>imageViewType</name></member>
        </type>
        <type category="struct" name="VkFilterCubicImageViewImageFormatPropertiesEXT" returnedonly="true" structextends="VkImageFormatProperties2">
            <member values="VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>filterCubic</name><comment>The combinations of format, image type (and image view type if provided) can be filtered with VK_FILTER_CUBIC_EXT</comment></member>
            <member><type>VkBool32</type>                         <name>filterCubicMinmax</name><comment>The combination of format, image type (and image view type if provided) can be filtered with VK_FILTER_CUBIC_EXT and ReductionMode of Min or Max</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImagelessFramebufferFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                                    <name>pNext</name></member>
            <member><type>VkBool32</type>                                 <name>imagelessFramebuffer</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImagelessFramebufferFeaturesKHR"         alias="VkPhysicalDeviceImagelessFramebufferFeatures"/>
        <type category="struct" name="VkFramebufferAttachmentsCreateInfo" structextends="VkFramebufferCreateInfo">
            <member values="VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                              <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                 <name>attachmentImageInfoCount</name></member>
            <member len="attachmentImageInfoCount">const <type>VkFramebufferAttachmentImageInfo</type>* <name>pAttachmentImageInfos</name></member>
        </type>
        <type category="struct" name="VkFramebufferAttachmentsCreateInfoKHR"                   alias="VkFramebufferAttachmentsCreateInfo"/>
        <type category="struct" name="VkFramebufferAttachmentImageInfo">
            <member values="VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                              <name>pNext</name></member>
            <member optional="true"><type>VkImageCreateFlags</type>       <name>flags</name><comment>Image creation flags</comment></member>
            <member><type>VkImageUsageFlags</type>                        <name>usage</name><comment>Image usage flags</comment></member>
            <member><type>uint32_t</type>                                 <name>width</name></member>
            <member><type>uint32_t</type>                                 <name>height</name></member>
            <member><type>uint32_t</type>                                 <name>layerCount</name></member>
            <member optional="true"><type>uint32_t</type>                 <name>viewFormatCount</name></member>
            <member len="viewFormatCount">const <type>VkFormat</type>*    <name>pViewFormats</name></member>
        </type>
        <type category="struct" name="VkFramebufferAttachmentImageInfoKHR"                     alias="VkFramebufferAttachmentImageInfo"/>
        <type category="struct" name="VkRenderPassAttachmentBeginInfo" structextends="VkRenderPassBeginInfo">
            <member values="VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                              <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                 <name>attachmentCount</name></member>
            <member len="attachmentCount">const <type>VkImageView</type>* <name>pAttachments</name></member>
        </type>
        <type category="struct" name="VkRenderPassAttachmentBeginInfoKHR"                      alias="VkRenderPassAttachmentBeginInfo"/>
        <type category="struct" name="VkPhysicalDeviceTextureCompressionASTCHDRFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*  <name>pNext</name></member>
            <member><type>VkBool32</type>               <name>textureCompressionASTC_HDR</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT" alias="VkPhysicalDeviceTextureCompressionASTCHDRFeatures"/>
        <type category="struct" name="VkPhysicalDeviceCooperativeMatrixFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member featurelink="cooperativeMatrixNV"><type>VkBool32</type>                             <name>cooperativeMatrix</name></member>
            <member featurelink="cooperativeMatrixRobustBufferAccessNV"><type>VkBool32</type>           <name>cooperativeMatrixRobustBufferAccess</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCooperativeMatrixPropertiesNV" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member limittype="bitmask"><type>VkShaderStageFlags</type>                  <name>cooperativeMatrixSupportedStages</name></member>
        </type>
        <type category="struct" name="VkCooperativeMatrixPropertiesNV" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member><type>uint32_t</type>                            <name>MSize</name></member>
            <member><type>uint32_t</type>                            <name>NSize</name></member>
            <member><type>uint32_t</type>                            <name>KSize</name></member>
            <member><type>VkComponentTypeNV</type>                   <name>AType</name></member>
            <member><type>VkComponentTypeNV</type>                   <name>BType</name></member>
            <member><type>VkComponentTypeNV</type>                   <name>CType</name></member>
            <member><type>VkComponentTypeNV</type>                   <name>DType</name></member>
            <member><type>VkScopeNV</type>                           <name>scope</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceYcbcrImageArraysFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>ycbcrImageArrays</name></member>
        </type>
        <type category="struct" name="VkImageViewHandleInfoNVX">
            <member values="VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkImageView</type>                         <name>imageView</name></member>
            <member><type>VkDescriptorType</type>                    <name>descriptorType</name></member>
            <member optional="true"><type>VkSampler</type>           <name>sampler</name></member>
        </type>
        <type category="struct" name="VkImageViewAddressPropertiesNVX" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>VkDeviceAddress</type>    <name>deviceAddress</name></member>
            <member><type>VkDeviceSize</type>       <name>size</name></member>
        </type>
        <type category="struct" name="VkPresentFrameTokenGGP" structextends="VkPresentInfoKHR">
            <member values="VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>GgpFrameToken</type>                    <name>frameToken</name></member>
        </type>
        <type category="struct" name="VkPipelineCreationFeedback" returnedonly="true">
            <member><type>VkPipelineCreationFeedbackFlags</type>     <name>flags</name></member>
            <member><type>uint64_t</type>                            <name>duration</name></member>
        </type>
        <type category="struct" name="VkPipelineCreationFeedbackEXT" alias="VkPipelineCreationFeedback"/>
        <type category="struct" name="VkPipelineCreationFeedbackCreateInfo" structextends="VkGraphicsPipelineCreateInfo,VkComputePipelineCreateInfo,VkRayTracingPipelineCreateInfoNV,VkRayTracingPipelineCreateInfoKHR,VkExecutionGraphPipelineCreateInfoAMDX">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*         <name>pNext</name></member>
            <member><type>VkPipelineCreationFeedback</type>*         <name>pPipelineCreationFeedback</name><comment>Output pipeline creation feedback.</comment></member>
            <member optional="true"><type>uint32_t</type>            <name>pipelineStageCreationFeedbackCount</name></member>
            <member len="pipelineStageCreationFeedbackCount"><type>VkPipelineCreationFeedback</type>* <name>pPipelineStageCreationFeedbacks</name><comment>One entry for each shader stage specified in the parent Vk*PipelineCreateInfo struct</comment></member>
        </type>
        <type category="struct" name="VkPipelineCreationFeedbackCreateInfoEXT" alias="VkPipelineCreationFeedbackCreateInfo"/>
        <type category="struct" name="VkSurfaceFullScreenExclusiveInfoEXT" structextends="VkPhysicalDeviceSurfaceInfo2KHR,VkSwapchainCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkFullScreenExclusiveEXT</type>         <name>fullScreenExclusive</name></member>
        </type>
        <type category="struct" name="VkSurfaceFullScreenExclusiveWin32InfoEXT" structextends="VkPhysicalDeviceSurfaceInfo2KHR,VkSwapchainCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*      <name>pNext</name></member>
            <member><type>HMONITOR</type>         <name>hmonitor</name></member>
        </type>
        <type category="struct" name="VkSurfaceCapabilitiesFullScreenExclusiveEXT" structextends="VkSurfaceCapabilities2KHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>         <name>fullScreenExclusiveSupported</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePresentBarrierFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>presentBarrier</name></member>
        </type>
        <type category="struct" name="VkSurfaceCapabilitiesPresentBarrierNV" structextends="VkSurfaceCapabilities2KHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>       <name>presentBarrierSupported</name></member>
        </type>
        <type category="struct" name="VkSwapchainPresentBarrierCreateInfoNV" structextends="VkSwapchainCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>    <name>presentBarrierEnable</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePerformanceQueryFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*      <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>performanceCounterQueryPools</name><comment>performance counters supported in query pools</comment></member>
            <member><type>VkBool32</type>                         <name>performanceCounterMultipleQueryPools</name><comment>performance counters from multiple query pools can be accessed in the same primary command buffer</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePerformanceQueryPropertiesKHR" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member limittype="bitmask" noautovalidity="true"><type>VkBool32</type> <name>allowCommandBufferQueryCopies</name><comment>Flag to specify whether performance queries are allowed to be used in vkCmdCopyQueryPoolResults</comment></member>
        </type>
        <type category="struct" name="VkPerformanceCounterKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>VkPerformanceCounterUnitKHR</type>        <name>unit</name></member>
            <member><type>VkPerformanceCounterScopeKHR</type>       <name>scope</name></member>
            <member><type>VkPerformanceCounterStorageKHR</type>     <name>storage</name></member>
            <member><type>uint8_t</type> <name>uuid</name>[<enum>VK_UUID_SIZE</enum>]</member>
        </type>
        <type category="struct" name="VkPerformanceCounterDescriptionKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                   <name>pNext</name></member>
            <member optional="true"><type>VkPerformanceCounterDescriptionFlagsKHR</type> <name>flags</name></member>
            <member len="null-terminated"><type>char</type>              <name>name</name>[<enum>VK_MAX_DESCRIPTION_SIZE</enum>]</member>
            <member len="null-terminated"><type>char</type>              <name>category</name>[<enum>VK_MAX_DESCRIPTION_SIZE</enum>]</member>
            <member len="null-terminated"><type>char</type>              <name>description</name>[<enum>VK_MAX_DESCRIPTION_SIZE</enum>]</member>
        </type>
        <type category="struct" name="VkQueryPoolPerformanceCreateInfoKHR" structextends="VkQueryPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                             <name>pNext</name></member>
            <member><type>uint32_t</type>                                <name>queueFamilyIndex</name></member>
            <member><type>uint32_t</type>                                <name>counterIndexCount</name></member>
            <member len="counterIndexCount">const <type>uint32_t</type>* <name>pCounterIndices</name></member>
        </type>
        <type category="union" name="VkPerformanceCounterResultKHR" comment="// Union of all the possible return types a counter result could return">
            <member><type>int32_t</type>  <name>int32</name></member>
            <member><type>int64_t</type>  <name>int64</name></member>
            <member><type>uint32_t</type> <name>uint32</name></member>
            <member><type>uint64_t</type> <name>uint64</name></member>
            <member><type>float</type>    <name>float32</name></member>
            <member><type>double</type>   <name>float64</name></member>
        </type>
        <type category="struct" name="VkAcquireProfilingLockInfoKHR">
            <member values="VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkAcquireProfilingLockFlagsKHR</type> <name>flags</name><comment>Acquire profiling lock flags</comment></member>
            <member><type>uint64_t</type> <name>timeout</name></member>
        </type>
        <type category="struct" name="VkPerformanceQuerySubmitInfoKHR" structextends="VkSubmitInfo,VkSubmitInfo2">
            <member values="VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*         <name>pNext</name></member>
            <member><type>uint32_t</type>            <name>counterPassIndex</name><comment>Index for which counter pass to submit</comment></member>
        </type>
        <type category="struct" name="VkPerformanceQueryReservationInfoKHR" allowduplicate="true" structextends="VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_RESERVATION_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*         <name>pNext</name></member>
            <member><type>uint32_t</type>            <name>maxPerformanceQueriesPerPool</name><comment>Maximum number of VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR queries in a query pool</comment></member>
        </type>
        <type category="struct" name="VkHeadlessSurfaceCreateInfoEXT">
            <member values="VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkHeadlessSurfaceCreateFlagsEXT</type>   <name>flags</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCoverageReductionModeFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                       <name>coverageReductionMode</name></member>
        </type>
        <type category="struct" name="VkPipelineCoverageReductionStateCreateInfoNV" structextends="VkPipelineMultisampleStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                        <name>pNext</name></member>
            <member optional="true"><type>VkPipelineCoverageReductionStateCreateFlagsNV</type>      <name>flags</name></member>
            <member><type>VkCoverageReductionModeNV</type>                                          <name>coverageReductionMode</name></member>
        </type>
        <type category="struct" name="VkFramebufferMixedSamplesCombinationNV" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                      <name>pNext</name></member>
            <member><type>VkCoverageReductionModeNV</type>  <name>coverageReductionMode</name></member>
            <member><type>VkSampleCountFlagBits</type>      <name>rasterizationSamples</name></member>
            <member><type>VkSampleCountFlags</type>         <name>depthStencilSamples</name></member>
            <member><type>VkSampleCountFlags</type>         <name>colorSamples</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>shaderIntegerFunctions2</name></member>
        </type>
        <type category="union" name="VkPerformanceValueDataINTEL">
            <member selection="VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL"><type>uint32_t</type>                           <name>value32</name></member>
            <member selection="VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL"><type>uint64_t</type>                           <name>value64</name></member>
            <member selection="VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL"><type>float</type>                               <name>valueFloat</name></member>
            <member selection="VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL"><type>VkBool32</type>                             <name>valueBool</name></member>
            <member selection="VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL" len="null-terminated">const <type>char</type>*  <name>valueString</name></member>
        </type>
        <type category="struct" name="VkPerformanceValueINTEL" returnedonly="true">
            <member><type>VkPerformanceValueTypeINTEL</type>        <name>type</name></member>
            <member selector="type" noautovalidity="true"><type>VkPerformanceValueDataINTEL</type>        <name>data</name></member>
        </type>
        <type category="struct" name="VkInitializePerformanceApiInfoINTEL">
            <member values="VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                         <name>pNext</name></member>
            <member optional="true"><type>void</type>*               <name>pUserData</name></member>
        </type>
        <type category="struct" name="VkQueryPoolPerformanceQueryCreateInfoINTEL" structextends="VkQueryPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                         <name>pNext</name></member>
            <member><type>VkQueryPoolSamplingModeINTEL</type>        <name>performanceCountersSampling</name></member>
        </type>
        <type category="struct" name="VkQueryPoolCreateInfoINTEL"                              alias="VkQueryPoolPerformanceQueryCreateInfoINTEL"/>
        <type category="struct" name="VkPerformanceMarkerInfoINTEL">
            <member values="VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                         <name>pNext</name></member>
            <member><type>uint64_t</type>                            <name>marker</name></member>
        </type>
        <type category="struct" name="VkPerformanceStreamMarkerInfoINTEL">
            <member values="VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                         <name>pNext</name></member>
            <member><type>uint32_t</type>                            <name>marker</name></member>
        </type>
        <type category="struct" name="VkPerformanceOverrideInfoINTEL">
            <member values="VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                         <name>pNext</name></member>
            <member><type>VkPerformanceOverrideTypeINTEL</type>      <name>type</name></member>
            <member><type>VkBool32</type>                            <name>enable</name></member>
            <member><type>uint64_t</type>                            <name>parameter</name></member>
        </type>
        <type category="struct" name="VkPerformanceConfigurationAcquireInfoINTEL">
            <member values="VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                         <name>pNext</name></member>
            <member><type>VkPerformanceConfigurationTypeINTEL</type> <name>type</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderClockFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>shaderSubgroupClock</name></member>
            <member><type>VkBool32</type>                            <name>shaderDeviceClock</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceIndexTypeUint8Features" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>indexTypeUint8</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceIndexTypeUint8FeaturesKHR" alias="VkPhysicalDeviceIndexTypeUint8Features"/>
        <type category="struct" name="VkPhysicalDeviceIndexTypeUint8FeaturesEXT"  alias="VkPhysicalDeviceIndexTypeUint8Features"/>
        <type category="struct" name="VkPhysicalDeviceShaderSMBuiltinsPropertiesNV" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>shaderSMCount</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>shaderWarpsPerSM</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderSMBuiltinsFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                       <name>shaderSMBuiltins</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name><comment>Pointer to next structure</comment></member>
            <member><type>VkBool32</type>               <name>fragmentShaderSampleInterlock</name></member>
            <member><type>VkBool32</type>               <name>fragmentShaderPixelInterlock</name></member>
            <member><type>VkBool32</type>               <name>fragmentShaderShadingRateInterlock</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                       <name>separateDepthStencilLayouts</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR"  alias="VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures"/>
        <type category="struct" name="VkAttachmentReferenceStencilLayout" structextends="VkAttachmentReference2">
            <member values="VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkImageLayout</type>                  <name>stencilLayout</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                     <name>primitiveTopologyListRestart</name></member>
            <member><type>VkBool32</type>                     <name>primitiveTopologyPatchListRestart</name></member>
        </type>
        <type category="struct" name="VkAttachmentReferenceStencilLayoutKHR"                   alias="VkAttachmentReferenceStencilLayout"/>
        <type category="struct" name="VkAttachmentDescriptionStencilLayout" structextends="VkAttachmentDescription2">
            <member values="VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkImageLayout</type>                  <name>stencilInitialLayout</name></member>
            <member><type>VkImageLayout</type>                  <name>stencilFinalLayout</name></member>
        </type>
        <type category="struct" name="VkAttachmentDescriptionStencilLayoutKHR"                 alias="VkAttachmentDescriptionStencilLayout"/>
        <type category="struct" name="VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>VkBool32</type>           <name>pipelineExecutableInfo</name></member>
        </type>
        <type category="struct" name="VkPipelineInfoKHR">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>VkPipeline</type>         <name>pipeline</name></member>
        </type>
        <type category="struct" name="VkPipelineInfoEXT" alias="VkPipelineInfoKHR"/>
        <type category="struct" name="VkPipelineExecutablePropertiesKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>VkShaderStageFlags</type>                 <name>stages</name></member>
            <member len="null-terminated"><type>char</type>         <name>name</name>[<enum>VK_MAX_DESCRIPTION_SIZE</enum>]</member>
            <member len="null-terminated"><type>char</type>         <name>description</name>[<enum>VK_MAX_DESCRIPTION_SIZE</enum>]</member>
            <member><type>uint32_t</type>                           <name>subgroupSize</name></member>
        </type>
        <type category="struct" name="VkPipelineExecutableInfoKHR">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>VkPipeline</type>         <name>pipeline</name></member>
            <member><type>uint32_t</type>           <name>executableIndex</name></member>
        </type>
        <type category="union" name="VkPipelineExecutableStatisticValueKHR" returnedonly="true">
            <member selection="VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR"><type>VkBool32</type>           <name>b32</name></member>
            <member selection="VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR"><type>int64_t</type>            <name>i64</name></member>
            <member selection="VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR"><type>uint64_t</type>           <name>u64</name></member>
            <member selection="VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR"><type>double</type>             <name>f64</name></member>
        </type>
        <type category="struct" name="VkPipelineExecutableStatisticKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member len="null-terminated"><type>char</type>             <name>name</name>[<enum>VK_MAX_DESCRIPTION_SIZE</enum>]</member>
            <member len="null-terminated"><type>char</type>             <name>description</name>[<enum>VK_MAX_DESCRIPTION_SIZE</enum>]</member>
            <member><type>VkPipelineExecutableStatisticFormatKHR</type> <name>format</name></member>
            <member selector="format" noautovalidity="true"><type>VkPipelineExecutableStatisticValueKHR</type>  <name>value</name></member>
        </type>
        <type category="struct" name="VkPipelineExecutableInternalRepresentationKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                <name>pNext</name></member>
            <member len="null-terminated"><type>char</type>           <name>name</name>[<enum>VK_MAX_DESCRIPTION_SIZE</enum>]</member>
            <member len="null-terminated"><type>char</type>           <name>description</name>[<enum>VK_MAX_DESCRIPTION_SIZE</enum>]</member>
            <member><type>VkBool32</type>                             <name>isText</name></member>
            <member><type>size_t</type>                               <name>dataSize</name></member>
            <member optional="true" len="dataSize"><type>void</type>* <name>pData</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*      <name>pNext</name></member>
            <member><type>VkBool32</type>                   <name>shaderDemoteToHelperInvocation</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT" alias="VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures"/>
        <type category="struct" name="VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>texelBufferAlignment</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceTexelBufferAlignmentProperties" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member limittype="min,pot"><type>VkDeviceSize</type>                       <name>storageTexelBufferOffsetAlignmentBytes</name></member>
            <member limittype="exact"><type>VkBool32</type>                         <name>storageTexelBufferOffsetSingleTexelAlignment</name></member>
            <member limittype="min,pot"><type>VkDeviceSize</type>                       <name>uniformTexelBufferOffsetAlignmentBytes</name></member>
            <member limittype="exact"><type>VkBool32</type>                         <name>uniformTexelBufferOffsetSingleTexelAlignment</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT" alias="VkPhysicalDeviceTexelBufferAlignmentProperties"/>
        <type category="struct" name="VkPhysicalDeviceSubgroupSizeControlFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*  <name>pNext</name></member>
            <member><type>VkBool32</type>               <name>subgroupSizeControl</name></member>
            <member><type>VkBool32</type>               <name>computeFullSubgroups</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSubgroupSizeControlFeaturesEXT" alias="VkPhysicalDeviceSubgroupSizeControlFeatures"/>
        <type category="struct" name="VkPhysicalDeviceSubgroupSizeControlProperties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member limittype="min,pot" noautovalidity="true"><type>uint32_t</type> <name>minSubgroupSize</name><comment>The minimum subgroup size supported by this device</comment></member>
            <member limittype="max,pot" noautovalidity="true"><type>uint32_t</type> <name>maxSubgroupSize</name><comment>The maximum subgroup size supported by this device</comment></member>
            <member limittype="max" noautovalidity="true"><type>uint32_t</type> <name>maxComputeWorkgroupSubgroups</name><comment>The maximum number of subgroups supported in a workgroup</comment></member>
            <member limittype="bitmask"><type>VkShaderStageFlags</type>         <name>requiredSubgroupSizeStages</name><comment>The shader stages that support specifying a subgroup size</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSubgroupSizeControlPropertiesEXT" alias="VkPhysicalDeviceSubgroupSizeControlProperties"/>
        <type category="struct" name="VkPipelineShaderStageRequiredSubgroupSizeCreateInfo" returnedonly="true" structextends="VkPipelineShaderStageCreateInfo,VkShaderCreateInfoEXT">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*  <name>pNext</name></member>
            <member><type>uint32_t</type>               <name>requiredSubgroupSize</name></member>
        </type>
        <type category="struct" name="VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT" alias="VkPipelineShaderStageRequiredSubgroupSizeCreateInfo"/>
        <type category="struct" name="VkShaderRequiredSubgroupSizeCreateInfoEXT" alias="VkPipelineShaderStageRequiredSubgroupSizeCreateInfo"/>
        <type category="struct" name="VkSubpassShadingPipelineCreateInfoHUAWEI" structextends="VkComputePipelineCreateInfo">
            <member values="VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member><type>VkRenderPass</type>           <name>renderPass</name></member>
            <member><type>uint32_t</type>               <name>subpass</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSubpassShadingPropertiesHUAWEI" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member limittype="max,pot"><type>uint32_t</type>               <name>maxSubpassShadingWorkgroupSizeAspectRatio</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member limittype="max,pot"><type>uint32_t</type>           <name>maxWorkGroupCount</name>[3]</member>
            <member limittype="max,pot"><type>uint32_t</type>           <name>maxWorkGroupSize</name>[3]</member>
            <member limittype="max"><type>uint32_t</type>               <name>maxOutputClusterCount</name></member>
            <member limittype="exact"><type>VkDeviceSize</type>         <name>indirectBufferOffsetAlignment</name></member>
        </type>
        <type category="struct" name="VkMemoryOpaqueCaptureAddressAllocateInfo" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                   <name>pNext</name></member>
            <member><type>uint64_t</type>                      <name>opaqueCaptureAddress</name></member>
        </type>
        <type category="struct" name="VkMemoryOpaqueCaptureAddressAllocateInfoKHR"             alias="VkMemoryOpaqueCaptureAddressAllocateInfo"/>
        <type category="struct" name="VkDeviceMemoryOpaqueCaptureAddressInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member><type>VkDeviceMemory</type>                   <name>memory</name></member>
        </type>
        <type category="struct" name="VkDeviceMemoryOpaqueCaptureAddressInfoKHR"               alias="VkDeviceMemoryOpaqueCaptureAddressInfo"/>
        <type category="struct" name="VkPhysicalDeviceLineRasterizationFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>rectangularLines</name></member>
            <member><type>VkBool32</type>                           <name>bresenhamLines</name></member>
            <member><type>VkBool32</type>                           <name>smoothLines</name></member>
            <member><type>VkBool32</type>                           <name>stippledRectangularLines</name></member>
            <member><type>VkBool32</type>                           <name>stippledBresenhamLines</name></member>
            <member><type>VkBool32</type>                           <name>stippledSmoothLines</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceLineRasterizationFeaturesKHR" alias="VkPhysicalDeviceLineRasterizationFeatures"/>
        <type category="struct" name="VkPhysicalDeviceLineRasterizationFeaturesEXT" alias="VkPhysicalDeviceLineRasterizationFeatures"/>
        <type category="struct" name="VkPhysicalDeviceLineRasterizationProperties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member limittype="bits"><type>uint32_t</type>                            <name>lineSubPixelPrecisionBits</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceLineRasterizationPropertiesKHR" alias="VkPhysicalDeviceLineRasterizationProperties"/>
        <type category="struct" name="VkPhysicalDeviceLineRasterizationPropertiesEXT" alias="VkPhysicalDeviceLineRasterizationProperties"/>
        <type category="struct" name="VkPipelineRasterizationLineStateCreateInfo" structextends="VkPipelineRasterizationStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                      <name>pNext</name></member>
            <member><type>VkLineRasterizationMode</type>                                          <name>lineRasterizationMode</name></member>
            <member><type>VkBool32</type>                                                         <name>stippledLineEnable</name></member>
            <member><type>uint32_t</type>                                                         <name>lineStippleFactor</name></member>
            <member><type>uint16_t</type>                                                         <name>lineStipplePattern</name></member>
        </type>
        <type category="struct" name="VkPipelineRasterizationLineStateCreateInfoKHR" alias="VkPipelineRasterizationLineStateCreateInfo"/>
        <type category="struct" name="VkPipelineRasterizationLineStateCreateInfoEXT" alias="VkPipelineRasterizationLineStateCreateInfo"/>
        <type category="struct" name="VkPhysicalDevicePipelineCreationCacheControlFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkBool32</type>              <name>pipelineCreationCacheControl</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT" alias="VkPhysicalDevicePipelineCreationCacheControlFeatures"/>
        <type category="struct" name="VkPhysicalDeviceVulkan11Features" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>storageBuffer16BitAccess</name><comment>16-bit integer/floating-point variables supported in BufferBlock</comment></member>
            <member><type>VkBool32</type>                         <name>uniformAndStorageBuffer16BitAccess</name><comment>16-bit integer/floating-point variables supported in BufferBlock and Block</comment></member>
            <member><type>VkBool32</type>                         <name>storagePushConstant16</name><comment>16-bit integer/floating-point variables supported in PushConstant</comment></member>
            <member><type>VkBool32</type>                         <name>storageInputOutput16</name><comment>16-bit integer/floating-point variables supported in shader inputs and outputs</comment></member>
            <member><type>VkBool32</type>                         <name>multiview</name><comment>Multiple views in a render pass</comment></member>
            <member><type>VkBool32</type>                         <name>multiviewGeometryShader</name><comment>Multiple views in a render pass w/ geometry shader</comment></member>
            <member><type>VkBool32</type>                         <name>multiviewTessellationShader</name><comment>Multiple views in a render pass w/ tessellation shader</comment></member>
            <member><type>VkBool32</type>                         <name>variablePointersStorageBuffer</name></member>
            <member><type>VkBool32</type>                         <name>variablePointers</name></member>
            <member><type>VkBool32</type>                         <name>protectedMemory</name></member>
            <member><type>VkBool32</type>                         <name>samplerYcbcrConversion</name><comment>Sampler color conversion supported</comment></member>
            <member><type>VkBool32</type>                         <name>shaderDrawParameters</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVulkan11Properties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*      <name>pNext</name></member>
            <member limittype="exact"><type>uint8_t</type>                          <name>deviceUUID</name>[<enum>VK_UUID_SIZE</enum>]</member>
            <member limittype="exact"><type>uint8_t</type>                          <name>driverUUID</name>[<enum>VK_UUID_SIZE</enum>]</member>
            <member limittype="exact"><type>uint8_t</type>                          <name>deviceLUID</name>[<enum>VK_LUID_SIZE</enum>]</member>
            <member limittype="exact"><type>uint32_t</type>                         <name>deviceNodeMask</name></member>
            <member limittype="exact"><type>VkBool32</type>                         <name>deviceLUIDValid</name></member>
            <member limittype="max,pot" noautovalidity="true"><type>uint32_t</type>                      <name>subgroupSize</name><comment>The size of a subgroup for this queue.</comment></member>
            <member limittype="bitmask" noautovalidity="true"><type>VkShaderStageFlags</type>            <name>subgroupSupportedStages</name><comment>Bitfield of what shader stages support subgroup operations</comment></member>
            <member limittype="bitmask" noautovalidity="true"><type>VkSubgroupFeatureFlags</type>        <name>subgroupSupportedOperations</name><comment>Bitfield of what subgroup operations are supported.</comment></member>
            <member limittype="bitmask" noautovalidity="true"><type>VkBool32</type>                      <name>subgroupQuadOperationsInAllStages</name><comment>Flag to specify whether quad operations are available in all stages.</comment></member>
            <member limittype="exact"><type>VkPointClippingBehavior</type>     <name>pointClippingBehavior</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxMultiviewViewCount</name><comment>max number of views in a subpass</comment></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxMultiviewInstanceIndex</name><comment>max instance index for a draw in a multiview subpass</comment></member>
            <member limittype="exact"><type>VkBool32</type>                    <name>protectedNoFault</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxPerSetDescriptors</name></member>
            <member limittype="max"><type>VkDeviceSize</type>                     <name>maxMemoryAllocationSize</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVulkan12Features" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>samplerMirrorClampToEdge</name></member>
            <member><type>VkBool32</type>                         <name>drawIndirectCount</name></member>
            <member><type>VkBool32</type>                         <name>storageBuffer8BitAccess</name><comment>8-bit integer variables supported in StorageBuffer</comment></member>
            <member><type>VkBool32</type>                         <name>uniformAndStorageBuffer8BitAccess</name><comment>8-bit integer variables supported in StorageBuffer and Uniform</comment></member>
            <member><type>VkBool32</type>                         <name>storagePushConstant8</name><comment>8-bit integer variables supported in PushConstant</comment></member>
            <member><type>VkBool32</type>                         <name>shaderBufferInt64Atomics</name></member>
            <member><type>VkBool32</type>                         <name>shaderSharedInt64Atomics</name></member>
            <member><type>VkBool32</type>                         <name>shaderFloat16</name><comment>16-bit floats (halfs) in shaders</comment></member>
            <member><type>VkBool32</type>                         <name>shaderInt8</name><comment>8-bit integers in shaders</comment></member>
            <member><type>VkBool32</type>                         <name>descriptorIndexing</name></member>
            <member><type>VkBool32</type>                         <name>shaderInputAttachmentArrayDynamicIndexing</name></member>
            <member><type>VkBool32</type>                         <name>shaderUniformTexelBufferArrayDynamicIndexing</name></member>
            <member><type>VkBool32</type>                         <name>shaderStorageTexelBufferArrayDynamicIndexing</name></member>
            <member><type>VkBool32</type>                         <name>shaderUniformBufferArrayNonUniformIndexing</name></member>
            <member><type>VkBool32</type>                         <name>shaderSampledImageArrayNonUniformIndexing</name></member>
            <member><type>VkBool32</type>                         <name>shaderStorageBufferArrayNonUniformIndexing</name></member>
            <member><type>VkBool32</type>                         <name>shaderStorageImageArrayNonUniformIndexing</name></member>
            <member><type>VkBool32</type>                         <name>shaderInputAttachmentArrayNonUniformIndexing</name></member>
            <member><type>VkBool32</type>                         <name>shaderUniformTexelBufferArrayNonUniformIndexing</name></member>
            <member><type>VkBool32</type>                         <name>shaderStorageTexelBufferArrayNonUniformIndexing</name></member>
            <member><type>VkBool32</type>                         <name>descriptorBindingUniformBufferUpdateAfterBind</name></member>
            <member><type>VkBool32</type>                         <name>descriptorBindingSampledImageUpdateAfterBind</name></member>
            <member><type>VkBool32</type>                         <name>descriptorBindingStorageImageUpdateAfterBind</name></member>
            <member><type>VkBool32</type>                         <name>descriptorBindingStorageBufferUpdateAfterBind</name></member>
            <member><type>VkBool32</type>                         <name>descriptorBindingUniformTexelBufferUpdateAfterBind</name></member>
            <member><type>VkBool32</type>                         <name>descriptorBindingStorageTexelBufferUpdateAfterBind</name></member>
            <member><type>VkBool32</type>                         <name>descriptorBindingUpdateUnusedWhilePending</name></member>
            <member><type>VkBool32</type>                         <name>descriptorBindingPartiallyBound</name></member>
            <member><type>VkBool32</type>                         <name>descriptorBindingVariableDescriptorCount</name></member>
            <member><type>VkBool32</type>                         <name>runtimeDescriptorArray</name></member>
            <member><type>VkBool32</type>                         <name>samplerFilterMinmax</name></member>
            <member><type>VkBool32</type>                         <name>scalarBlockLayout</name></member>
            <member><type>VkBool32</type>                         <name>imagelessFramebuffer</name></member>
            <member><type>VkBool32</type>                         <name>uniformBufferStandardLayout</name></member>
            <member><type>VkBool32</type>                         <name>shaderSubgroupExtendedTypes</name></member>
            <member><type>VkBool32</type>                         <name>separateDepthStencilLayouts</name></member>
            <member><type>VkBool32</type>                         <name>hostQueryReset</name></member>
            <member><type>VkBool32</type>                         <name>timelineSemaphore</name></member>
            <member><type>VkBool32</type>                         <name>bufferDeviceAddress</name></member>
            <member><type>VkBool32</type>                         <name>bufferDeviceAddressCaptureReplay</name></member>
            <member><type>VkBool32</type>                         <name>bufferDeviceAddressMultiDevice</name></member>
            <member><type>VkBool32</type>                         <name>vulkanMemoryModel</name></member>
            <member><type>VkBool32</type>                         <name>vulkanMemoryModelDeviceScope</name></member>
            <member><type>VkBool32</type>                         <name>vulkanMemoryModelAvailabilityVisibilityChains</name></member>
            <member><type>VkBool32</type>                         <name>shaderOutputViewportIndex</name></member>
            <member><type>VkBool32</type>                         <name>shaderOutputLayer</name></member>
            <member><type>VkBool32</type>                         <name>subgroupBroadcastDynamicId</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVulkan12Properties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member limittype="noauto"><type>VkDriverId</type>                       <name>driverID</name></member>
            <member limittype="noauto" len="null-terminated"><type>char</type>       <name>driverName</name>[<enum>VK_MAX_DRIVER_NAME_SIZE</enum>]</member>
            <member limittype="noauto" len="null-terminated"><type>char</type>       <name>driverInfo</name>[<enum>VK_MAX_DRIVER_INFO_SIZE</enum>]</member>
            <member limittype="noauto"><type>VkConformanceVersion</type>             <name>conformanceVersion</name></member>
            <member limittype="exact"><type>VkShaderFloatControlsIndependence</type> <name>denormBehaviorIndependence</name></member>
            <member limittype="exact"><type>VkShaderFloatControlsIndependence</type> <name>roundingModeIndependence</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderSignedZeroInfNanPreserveFloat16</name><comment>An implementation can preserve signed zero, nan, inf</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderSignedZeroInfNanPreserveFloat32</name><comment>An implementation can preserve signed zero, nan, inf</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderSignedZeroInfNanPreserveFloat64</name><comment>An implementation can preserve signed zero, nan, inf</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderDenormPreserveFloat16</name><comment>An implementation can preserve  denormals</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderDenormPreserveFloat32</name><comment>An implementation can preserve  denormals</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderDenormPreserveFloat64</name><comment>An implementation can preserve  denormals</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderDenormFlushToZeroFloat16</name><comment>An implementation can flush to zero  denormals</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderDenormFlushToZeroFloat32</name><comment>An implementation can flush to zero  denormals</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderDenormFlushToZeroFloat64</name><comment>An implementation can flush to zero  denormals</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderRoundingModeRTEFloat16</name><comment>An implementation can support RTE</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderRoundingModeRTEFloat32</name><comment>An implementation can support RTE</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderRoundingModeRTEFloat64</name><comment>An implementation can support RTE</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderRoundingModeRTZFloat16</name><comment>An implementation can support RTZ</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderRoundingModeRTZFloat32</name><comment>An implementation can support RTZ</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderRoundingModeRTZFloat64</name><comment>An implementation can support RTZ</comment></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxUpdateAfterBindDescriptorsInAllPools</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderUniformBufferArrayNonUniformIndexingNative</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderSampledImageArrayNonUniformIndexingNative</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderStorageBufferArrayNonUniformIndexingNative</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderStorageImageArrayNonUniformIndexingNative</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>shaderInputAttachmentArrayNonUniformIndexingNative</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>robustBufferAccessUpdateAfterBind</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>quadDivergentImplicitLod</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxPerStageDescriptorUpdateAfterBindSamplers</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxPerStageDescriptorUpdateAfterBindUniformBuffers</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxPerStageDescriptorUpdateAfterBindStorageBuffers</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxPerStageDescriptorUpdateAfterBindSampledImages</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxPerStageDescriptorUpdateAfterBindStorageImages</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxPerStageDescriptorUpdateAfterBindInputAttachments</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxPerStageUpdateAfterBindResources</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxDescriptorSetUpdateAfterBindSamplers</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxDescriptorSetUpdateAfterBindUniformBuffers</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxDescriptorSetUpdateAfterBindUniformBuffersDynamic</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxDescriptorSetUpdateAfterBindStorageBuffers</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxDescriptorSetUpdateAfterBindStorageBuffersDynamic</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxDescriptorSetUpdateAfterBindSampledImages</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxDescriptorSetUpdateAfterBindStorageImages</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxDescriptorSetUpdateAfterBindInputAttachments</name></member>
            <member limittype="bitmask"><type>VkResolveModeFlags</type>              <name>supportedDepthResolveModes</name><comment>supported depth resolve modes</comment></member>
            <member limittype="bitmask"><type>VkResolveModeFlags</type>              <name>supportedStencilResolveModes</name><comment>supported stencil resolve modes</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>independentResolveNone</name><comment>depth and stencil resolve modes can be set independently if one of them is none</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>independentResolve</name><comment>depth and stencil resolve modes can be set independently</comment></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>filterMinmaxSingleComponentFormats</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                        <name>filterMinmaxImageComponentMapping</name></member>
            <member limittype="max"><type>uint64_t</type>                            <name>maxTimelineSemaphoreValueDifference</name></member>
            <member limittype="bitmask" optional="true"><type>VkSampleCountFlags</type> <name>framebufferIntegerColorSampleCounts</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVulkan13Features" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>robustImageAccess</name></member>
            <member><type>VkBool32</type>                         <name>inlineUniformBlock</name></member>
            <member><type>VkBool32</type>                         <name>descriptorBindingInlineUniformBlockUpdateAfterBind</name></member>
            <member><type>VkBool32</type>                         <name>pipelineCreationCacheControl</name></member>
            <member><type>VkBool32</type>                         <name>privateData</name></member>
            <member><type>VkBool32</type>                         <name>shaderDemoteToHelperInvocation</name></member>
            <member><type>VkBool32</type>                         <name>shaderTerminateInvocation</name></member>
            <member><type>VkBool32</type>                         <name>subgroupSizeControl</name></member>
            <member><type>VkBool32</type>                         <name>computeFullSubgroups</name></member>
            <member><type>VkBool32</type>                         <name>synchronization2</name></member>
            <member><type>VkBool32</type>                         <name>textureCompressionASTC_HDR</name></member>
            <member><type>VkBool32</type>                         <name>shaderZeroInitializeWorkgroupMemory</name></member>
            <member><type>VkBool32</type>                         <name>dynamicRendering</name></member>
            <member><type>VkBool32</type>                         <name>shaderIntegerDotProduct</name></member>
            <member><type>VkBool32</type>                         <name>maintenance4</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVulkan13Properties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member limittype="min,pot" noautovalidity="true"><type>uint32_t</type> <name>minSubgroupSize</name><comment>The minimum subgroup size supported by this device</comment></member>
            <member limittype="max,pot" noautovalidity="true"><type>uint32_t</type> <name>maxSubgroupSize</name><comment>The maximum subgroup size supported by this device</comment></member>
            <member limittype="max" noautovalidity="true"><type>uint32_t</type> <name>maxComputeWorkgroupSubgroups</name><comment>The maximum number of subgroups supported in a workgroup</comment></member>
            <member limittype="bitmask"><type>VkShaderStageFlags</type>         <name>requiredSubgroupSizeStages</name><comment>The shader stages that support specifying a subgroup size</comment></member>
            <member limittype="max"><type>uint32_t</type>                       <name>maxInlineUniformBlockSize</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>maxPerStageDescriptorInlineUniformBlocks</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>maxDescriptorSetInlineUniformBlocks</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>maxDescriptorSetUpdateAfterBindInlineUniformBlocks</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>maxInlineUniformTotalSize</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProduct8BitUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProduct8BitSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProduct8BitMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProduct4x8BitPackedUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProduct4x8BitPackedSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProduct4x8BitPackedMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProduct16BitUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProduct16BitSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProduct16BitMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProduct32BitUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProduct32BitSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProduct32BitMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProduct64BitUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProduct64BitSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProduct64BitMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProductAccumulatingSaturating8BitUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProductAccumulatingSaturating8BitSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProductAccumulatingSaturating16BitUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProductAccumulatingSaturating16BitSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProductAccumulatingSaturating32BitUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProductAccumulatingSaturating32BitSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProductAccumulatingSaturating64BitUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProductAccumulatingSaturating64BitSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                   <name>integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated</name></member>
            <member limittype="min,pot"><type>VkDeviceSize</type>               <name>storageTexelBufferOffsetAlignmentBytes</name></member>
            <member limittype="exact"><type>VkBool32</type>                     <name>storageTexelBufferOffsetSingleTexelAlignment</name></member>
            <member limittype="min,pot"><type>VkDeviceSize</type>               <name>uniformTexelBufferOffsetAlignmentBytes</name></member>
            <member limittype="exact"><type>VkBool32</type>                     <name>uniformTexelBufferOffsetSingleTexelAlignment</name></member>
            <member limittype="max"><type>VkDeviceSize</type>                   <name>maxBufferSize</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVulkan14Features" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>globalPriorityQuery</name></member>
            <member><type>VkBool32</type>                         <name>shaderSubgroupRotate</name></member>
            <member><type>VkBool32</type>                         <name>shaderSubgroupRotateClustered</name></member>
            <member><type>VkBool32</type>                         <name>shaderFloatControls2</name></member>
            <member><type>VkBool32</type>                         <name>shaderExpectAssume</name></member>
            <member><type>VkBool32</type>                         <name>rectangularLines</name></member>
            <member><type>VkBool32</type>                         <name>bresenhamLines</name></member>
            <member><type>VkBool32</type>                         <name>smoothLines</name></member>
            <member><type>VkBool32</type>                         <name>stippledRectangularLines</name></member>
            <member><type>VkBool32</type>                         <name>stippledBresenhamLines</name></member>
            <member><type>VkBool32</type>                         <name>stippledSmoothLines</name></member>
            <member><type>VkBool32</type>                         <name>vertexAttributeInstanceRateDivisor</name></member>
            <member><type>VkBool32</type>                         <name>vertexAttributeInstanceRateZeroDivisor</name></member>
            <member><type>VkBool32</type>                         <name>indexTypeUint8</name></member>
            <member><type>VkBool32</type>                         <name>dynamicRenderingLocalRead</name></member>
            <member><type>VkBool32</type>                         <name>maintenance5</name></member>
            <member><type>VkBool32</type>                         <name>maintenance6</name></member>
            <member><type>VkBool32</type>                         <name>pipelineProtectedAccess</name></member>
            <member><type>VkBool32</type>                         <name>pipelineRobustness</name></member>
            <member><type>VkBool32</type>                         <name>hostImageCopy</name></member>
            <member><type>VkBool32</type>                         <name>pushDescriptor</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVulkan14Properties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                                                      <name>pNext</name></member>
            <member limittype="bits"><type>uint32_t</type>                                                  <name>lineSubPixelPrecisionBits</name></member>
            <member limittype="max"><type>uint32_t</type>                                                   <name>maxVertexAttribDivisor</name><comment>max value of vertex attribute divisor</comment></member>
            <member limittype="max"><type>VkBool32</type>                                                   <name>supportsNonZeroFirstInstance</name></member>
            <member limittype="max"><type>uint32_t</type>                                                   <name>maxPushDescriptors</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                                               <name>dynamicRenderingLocalReadDepthStencilAttachments</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                                               <name>dynamicRenderingLocalReadMultisampledAttachments</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                                               <name>earlyFragmentMultisampleCoverageAfterSampleCounting</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                                               <name>earlyFragmentSampleMaskTestBeforeSampleCounting</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                                               <name>depthStencilSwizzleOneSupport</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                                               <name>polygonModePointSize</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                                               <name>nonStrictSinglePixelWideLinesUseParallelogram</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                                               <name>nonStrictWideLinesUseParallelogram</name></member>
            <member><type>VkBool32</type>                                                                   <name>blockTexelViewCompatibleMultipleLayers</name></member>
            <member limittype="max"><type>uint32_t</type>                                                   <name>maxCombinedImageSamplerDescriptorCount</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                                               <name>fragmentShadingRateClampCombinerInputs</name></member>
            <member limittype="exact"><type>VkPipelineRobustnessBufferBehavior</type>                       <name>defaultRobustnessStorageBuffers</name></member>
            <member limittype="exact"><type>VkPipelineRobustnessBufferBehavior</type>                       <name>defaultRobustnessUniformBuffers</name></member>
            <member limittype="exact"><type>VkPipelineRobustnessBufferBehavior</type>                       <name>defaultRobustnessVertexInputs</name></member>
            <member limittype="exact"><type>VkPipelineRobustnessImageBehavior</type>                        <name>defaultRobustnessImages</name></member>
            <member optional="true" limittype="noauto"><type>uint32_t</type>                                <name>copySrcLayoutCount</name></member>
            <member optional="true" limittype="noauto" len="copySrcLayoutCount"><type>VkImageLayout</type>* <name>pCopySrcLayouts</name></member>
            <member optional="true" limittype="noauto"><type>uint32_t</type>                                <name>copyDstLayoutCount</name></member>
            <member optional="true" limittype="noauto" len="copyDstLayoutCount"><type>VkImageLayout</type>* <name>pCopyDstLayouts</name></member>
            <member optional="true" limittype="noauto"><type>uint8_t</type>                                 <name>optimalTilingLayoutUUID</name>[<enum>VK_UUID_SIZE</enum>]</member>
            <member limittype="bitmask"><type>VkBool32</type>                                               <name>identicalMemoryTypeRequirements</name></member>
        </type>
        <type category="struct" name="VkPipelineCompilerControlCreateInfoAMD" structextends="VkGraphicsPipelineCreateInfo,VkComputePipelineCreateInfo,VkExecutionGraphPipelineCreateInfoAMDX">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD"><type>VkStructureType</type>   <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                                            <name>pNext</name></member>
            <member optional="true"><type>VkPipelineCompilerControlFlagsAMD</type>                                      <name>compilerControlFlags</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCoherentMemoryFeaturesAMD" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>deviceCoherentMemory</name></member>
        </type>
        <type category="struct" name="VkFaultData" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_FAULT_DATA"><type>VkStructureType</type> <name>sType</name></member>
            <member noautovalidity="true" optional="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkFaultLevel</type>                    <name>faultLevel</name></member>
            <member><type>VkFaultType</type>                     <name>faultType</name></member>
        </type>
        <type category="struct" name="VkFaultCallbackInfo" structextends="VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_FAULT_CALLBACK_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>           <name>faultCount</name></member>
            <member optional="true" len="faultCount"><type>VkFaultData</type>*<name>pFaults</name></member>
            <member><type>PFN_vkFaultCallbackFunction</type>        <name>pfnFaultCallback</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceToolProperties" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*      <name>pNext</name></member>
            <member len="null-terminated"><type>char</type> <name>name</name>[<enum>VK_MAX_EXTENSION_NAME_SIZE</enum>]</member>
            <member len="null-terminated"><type>char</type> <name>version</name>[<enum>VK_MAX_EXTENSION_NAME_SIZE</enum>]</member>
            <member><type>VkToolPurposeFlags</type>         <name>purposes</name></member>
            <member len="null-terminated"><type>char</type> <name>description</name>[<enum>VK_MAX_DESCRIPTION_SIZE</enum>]</member>
            <member len="null-terminated"><type>char</type> <name>layer</name>[<enum>VK_MAX_EXTENSION_NAME_SIZE</enum>]</member>
        </type>
        <type category="struct" name="VkPhysicalDeviceToolPropertiesEXT" alias="VkPhysicalDeviceToolProperties"/>
        <type category="struct" name="VkSamplerCustomBorderColorCreateInfoEXT" structextends="VkSamplerCreateInfo">
            <member values="VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                                            <name>pNext</name></member>
            <member noautovalidity="true"><type>VkClearColorValue</type>                                                                      <name>customBorderColor</name></member>
            <member><type>VkFormat</type>                                                                               <name>format</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCustomBorderColorPropertiesEXT" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                                                                   <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>                                                                                      <name>maxCustomBorderColorSamplers</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCustomBorderColorFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>customBorderColors</name></member>
            <member><type>VkBool32</type>                           <name>customBorderColorWithoutFormat</name></member>
        </type>
        <type category="struct" name="VkSamplerBorderColorComponentMappingCreateInfoEXT" structextends="VkSamplerCreateInfo">
            <member values="VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                                       <name>pNext</name></member>
            <member><type>VkComponentMapping</type>                                                                                <name>components</name></member>
            <member><type>VkBool32</type>                                                                                          <name>srgb</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceBorderColorSwizzleFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                     <name>borderColorSwizzle</name></member>
            <member><type>VkBool32</type>                     <name>borderColorSwizzleFromImage</name></member>
        </type>
        <type category="union" name="VkDeviceOrHostAddressKHR">
            <member noautovalidity="true"><type>VkDeviceAddress</type>            <name>deviceAddress</name></member>
            <member noautovalidity="true"><type>void</type>*                      <name>hostAddress</name></member>
        </type>
        <type category="union" name="VkDeviceOrHostAddressConstKHR">
            <member noautovalidity="true"><type>VkDeviceAddress</type>            <name>deviceAddress</name></member>
            <member noautovalidity="true">const <type>void</type>*                <name>hostAddress</name></member>
        </type>
        <type category="union" name="VkDeviceOrHostAddressConstAMDX">
            <member noautovalidity="true"><type>VkDeviceAddress</type>            <name>deviceAddress</name></member>
            <member noautovalidity="true">const <type>void</type>*                <name>hostAddress</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureGeometryTrianglesDataKHR">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                   <name>pNext</name></member>
            <member><type>VkFormat</type>                                      <name>vertexFormat</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstKHR</type>                 <name>vertexData</name></member>
            <member><type>VkDeviceSize</type>                                  <name>vertexStride</name></member>
            <member><type>uint32_t</type>                                      <name>maxVertex</name></member>
            <member><type>VkIndexType</type>                                   <name>indexType</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstKHR</type>                 <name>indexData</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstKHR</type>                 <name>transformData</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureGeometryAabbsDataKHR">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                           <name>pNext</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstKHR</type>         <name>data</name></member>
            <member><type>VkDeviceSize</type>                          <name>stride</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureGeometryInstancesDataKHR">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                           <name>pNext</name></member>
            <member><type>VkBool32</type>                              <name>arrayOfPointers</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstKHR</type>         <name>data</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureGeometryLinearSweptSpheresDataNV">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_LINEAR_SWEPT_SPHERES_DATA_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                         <name>pNext</name></member>
            <member><type>VkFormat</type>                                            <name>vertexFormat</name></member>
            <member><type>VkDeviceOrHostAddressConstKHR</type>                       <name>vertexData</name></member>
            <member><type>VkDeviceSize</type>                                        <name>vertexStride</name></member>
            <member><type>VkFormat</type>                                            <name>radiusFormat</name></member>
            <member><type>VkDeviceOrHostAddressConstKHR</type>                       <name>radiusData</name></member>
            <member><type>VkDeviceSize</type>                                        <name>radiusStride</name></member>
            <member><type>VkIndexType</type>                                         <name>indexType</name></member>
            <member><type>VkDeviceOrHostAddressConstKHR</type>                       <name>indexData</name></member>
            <member><type>VkDeviceSize</type>                                        <name>indexStride</name></member>
            <member><type>VkRayTracingLssIndexingModeNV</type>                       <name>indexingMode</name></member>
            <member><type>VkRayTracingLssPrimitiveEndCapsModeNV</type>               <name>endCapsMode</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureGeometrySpheresDataNV">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_SPHERES_DATA_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                         <name>pNext</name></member>
            <member><type>VkFormat</type>                                            <name>vertexFormat</name></member>
            <member><type>VkDeviceOrHostAddressConstKHR</type>                       <name>vertexData</name></member>
            <member><type>VkDeviceSize</type>                                        <name>vertexStride</name></member>
            <member><type>VkFormat</type>                                            <name>radiusFormat</name></member>
            <member><type>VkDeviceOrHostAddressConstKHR</type>                       <name>radiusData</name></member>
            <member><type>VkDeviceSize</type>                                        <name>radiusStride</name></member>
            <member><type>VkIndexType</type>                                         <name>indexType</name></member>
            <member><type>VkDeviceOrHostAddressConstKHR</type>                       <name>indexData</name></member>
            <member><type>VkDeviceSize</type>                                        <name>indexStride</name></member>
        </type>
        <type category="union" name="VkAccelerationStructureGeometryDataKHR">
            <member selection="VK_GEOMETRY_TYPE_TRIANGLES_KHR"><type>VkAccelerationStructureGeometryTrianglesDataKHR</type> <name>triangles</name></member>
            <member selection="VK_GEOMETRY_TYPE_AABBS_KHR"><type>VkAccelerationStructureGeometryAabbsDataKHR</type>         <name>aabbs</name></member>
            <member selection="VK_GEOMETRY_TYPE_INSTANCES_KHR"><type>VkAccelerationStructureGeometryInstancesDataKHR</type> <name>instances</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureGeometryKHR">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member><type>VkGeometryTypeKHR</type>                      <name>geometryType</name></member>
            <member selector="geometryType"><type>VkAccelerationStructureGeometryDataKHR</type> <name>geometry</name></member>
            <member optional="true"><type>VkGeometryFlagsKHR</type>     <name>flags</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureBuildGeometryInfoKHR">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                        <name>pNext</name></member>
            <member><type>VkAccelerationStructureTypeKHR</type>                                     <name>type</name></member>
            <member optional="true"><type>VkBuildAccelerationStructureFlagsKHR</type>               <name>flags</name></member>
            <member noautovalidity="true"><type>VkBuildAccelerationStructureModeKHR</type>          <name>mode</name></member>
            <member optional="true" noautovalidity="true"><type>VkAccelerationStructureKHR</type>                   <name>srcAccelerationStructure</name></member>
            <member optional="true" noautovalidity="true"><type>VkAccelerationStructureKHR</type>                   <name>dstAccelerationStructure</name></member>
            <member optional="true"><type>uint32_t</type>                                           <name>geometryCount</name></member>
            <member len="geometryCount" optional="true">const <type>VkAccelerationStructureGeometryKHR</type>*    <name>pGeometries</name></member>
            <member len="geometryCount,1" optional="true,false">const <type>VkAccelerationStructureGeometryKHR</type>* const*   <name>ppGeometries</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressKHR</type>                                           <name>scratchData</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureBuildRangeInfoKHR">
            <member><type>uint32_t</type>                                                <name>primitiveCount</name></member>
            <member><type>uint32_t</type>                                                <name>primitiveOffset</name></member>
            <member><type>uint32_t</type>                                                <name>firstVertex</name></member>
            <member><type>uint32_t</type>                                                <name>transformOffset</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                             <name>pNext</name></member>
            <member optional="true"><type>VkAccelerationStructureCreateFlagsKHR</type>   <name>createFlags</name></member>
            <member><type>VkBuffer</type>                                                <name>buffer</name></member>
            <member><type>VkDeviceSize</type>                                            <name>offset</name><comment>Specified in bytes</comment></member>
            <member><type>VkDeviceSize</type>                                            <name>size</name></member>
            <member><type>VkAccelerationStructureTypeKHR</type>                          <name>type</name></member>
            <member optional="true"><type>VkDeviceAddress</type>                         <name>deviceAddress</name></member>
        </type>
        <type category="struct" name="VkAabbPositionsKHR">
            <member><type>float</type>                                                   <name>minX</name></member>
            <member><type>float</type>                                                   <name>minY</name></member>
            <member><type>float</type>                                                   <name>minZ</name></member>
            <member><type>float</type>                                                   <name>maxX</name></member>
            <member><type>float</type>                                                   <name>maxY</name></member>
            <member><type>float</type>                                                   <name>maxZ</name></member>
        </type>
        <type category="struct" name="VkAabbPositionsNV"                                       alias="VkAabbPositionsKHR"/>
        <type category="struct" name="VkTransformMatrixKHR">
            <member><type>float</type>                                                   <name>matrix</name>[3][4]</member>
        </type>
        <type category="struct" name="VkTransformMatrixNV"                                     alias="VkTransformMatrixKHR"/>
        <type category="struct" name="VkAccelerationStructureInstanceKHR">
            <comment>The bitfields in this structure are non-normative since bitfield ordering is implementation-defined in C. The specification defines the normative layout.</comment>
            <member><type>VkTransformMatrixKHR</type>                                    <name>transform</name></member>
            <member><type>uint32_t</type>                                                <name>instanceCustomIndex</name>:24</member>
            <member><type>uint32_t</type>                                                <name>mask</name>:8</member>
            <member><type>uint32_t</type>                                                <name>instanceShaderBindingTableRecordOffset</name>:24</member>
            <member optional="true"><type>VkGeometryInstanceFlagsKHR</type>              <name>flags</name>:8</member>
            <member><type>uint64_t</type>                                                <name>accelerationStructureReference</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureInstanceNV"                       alias="VkAccelerationStructureInstanceKHR"/>
        <type category="struct" name="VkAccelerationStructureDeviceAddressInfoKHR">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                            <name>pNext</name></member>
            <member><type>VkAccelerationStructureKHR</type>                             <name>accelerationStructure</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureVersionInfoKHR">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                            <name>pNext</name></member>
            <member len="latexmath:[2 \times \mathtt{VK\_UUID\_SIZE}]" altlen="2*VK_UUID_SIZE">const <type>uint8_t</type>*                    <name>pVersionData</name></member>
        </type>
        <type category="struct" name="VkCopyAccelerationStructureInfoKHR">
            <member values="VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                            <name>pNext</name></member>
            <member><type>VkAccelerationStructureKHR</type>                             <name>src</name></member>
            <member><type>VkAccelerationStructureKHR</type>                             <name>dst</name></member>
            <member><type>VkCopyAccelerationStructureModeKHR</type>                     <name>mode</name></member>
        </type>
        <type category="struct" name="VkCopyAccelerationStructureToMemoryInfoKHR">
            <member values="VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                            <name>pNext</name></member>
            <member><type>VkAccelerationStructureKHR</type>                             <name>src</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressKHR</type>                               <name>dst</name></member>
            <member><type>VkCopyAccelerationStructureModeKHR</type>                     <name>mode</name></member>
        </type>
        <type category="struct" name="VkCopyMemoryToAccelerationStructureInfoKHR">
            <member values="VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                            <name>pNext</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstKHR</type>                          <name>src</name></member>
            <member><type>VkAccelerationStructureKHR</type>                             <name>dst</name></member>
            <member><type>VkCopyAccelerationStructureModeKHR</type>                     <name>mode</name></member>
        </type>
        <type category="struct" name="VkRayTracingPipelineInterfaceCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member><type>uint32_t</type>                                               <name>maxPipelineRayPayloadSize</name></member>
            <member><type>uint32_t</type>                                               <name>maxPipelineRayHitAttributeSize</name></member>
        </type>
        <type category="struct" name="VkPipelineLibraryCreateInfoKHR" structextends="VkGraphicsPipelineCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                            <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                               <name>libraryCount</name></member>
            <member len="libraryCount">const <type>VkPipeline</type>*                   <name>pLibraries</name></member>
        </type>
        <type category="struct" name="VkRefreshObjectKHR">
            <member><type>VkObjectType</type>                                       <name>objectType</name></member>
            <member objecttype="objectType" externsync="true"><type>uint64_t</type> <name>objectHandle</name></member>
            <member optional="true"><type>VkRefreshObjectFlagsKHR</type>            <name>flags</name></member>
        </type>
        <type category="struct" name="VkRefreshObjectListKHR">
            <member values="VK_STRUCTURE_TYPE_REFRESH_OBJECT_LIST_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                        <name>pNext</name></member>
            <member><type>uint32_t</type>                                           <name>objectCount</name></member>
            <member len="objectCount">const <type>VkRefreshObjectKHR</type>*        <name>pObjects</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExtendedDynamicStateFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>extendedDynamicState</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExtendedDynamicState2FeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState2</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState2LogicOp</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState2PatchControlPoints</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExtendedDynamicState3FeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3TessellationDomainOrigin</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3DepthClampEnable</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3PolygonMode</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3RasterizationSamples</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3SampleMask</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3AlphaToCoverageEnable</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3AlphaToOneEnable</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3LogicOpEnable</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3ColorBlendEnable</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3ColorBlendEquation</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3ColorWriteMask</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3RasterizationStream</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3ConservativeRasterizationMode</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3ExtraPrimitiveOverestimationSize</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3DepthClipEnable</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3SampleLocationsEnable</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3ColorBlendAdvanced</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3ProvokingVertexMode</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3LineRasterizationMode</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3LineStippleEnable</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3DepthClipNegativeOneToOne</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3ViewportWScalingEnable</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3ViewportSwizzle</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3CoverageToColorEnable</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3CoverageToColorLocation</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3CoverageModulationMode</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3CoverageModulationTableEnable</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3CoverageModulationTable</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3CoverageReductionMode</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3RepresentativeFragmentTestEnable</name></member>
            <member><type>VkBool32</type>                     <name>extendedDynamicState3ShadingRateImageEnable</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExtendedDynamicState3PropertiesEXT" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member limittype="bitmask"><type>VkBool32</type> <name>dynamicPrimitiveTopologyUnrestricted</name></member>
        </type>
        <type category="struct" name="VkColorBlendEquationEXT">
            <member><type>VkBlendFactor</type>               <name>srcColorBlendFactor</name></member>
            <member><type>VkBlendFactor</type>               <name>dstColorBlendFactor</name></member>
            <member><type>VkBlendOp</type>                   <name>colorBlendOp</name></member>
            <member><type>VkBlendFactor</type>               <name>srcAlphaBlendFactor</name></member>
            <member><type>VkBlendFactor</type>               <name>dstAlphaBlendFactor</name></member>
            <member><type>VkBlendOp</type>                   <name>alphaBlendOp</name></member>
        </type>
        <type category="struct" name="VkColorBlendAdvancedEXT">
            <member><type>VkBlendOp</type>                   <name>advancedBlendOp</name></member>
            <member><type>VkBool32</type>                    <name>srcPremultiplied</name></member>
            <member><type>VkBool32</type>                    <name>dstPremultiplied</name></member>
            <member><type>VkBlendOverlapEXT</type>           <name>blendOverlap</name></member>
            <member><type>VkBool32</type>                    <name>clampResults</name></member>
        </type>
        <type category="struct" name="VkRenderPassTransformBeginInfoQCOM" structextends="VkRenderPassBeginInfo">
            <member values="VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                           <name>pNext</name><comment>Pointer to next structure</comment></member>
            <member noautovalidity="true"><type>VkSurfaceTransformFlagBitsKHR</type>   <name>transform</name></member>
        </type>
        <type category="struct" name="VkCopyCommandTransformInfoQCOM" structextends="VkBufferImageCopy2,VkImageBlit2">
            <member values="VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>*     <name>pNext</name></member>
            <member noautovalidity="true"><type>VkSurfaceTransformFlagBitsKHR</type>   <name>transform</name></member>
        </type>
        <type category="struct" name="VkCommandBufferInheritanceRenderPassTransformInfoQCOM" structextends="VkCommandBufferInheritanceInfo">
            <member values="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                           <name>pNext</name><comment>Pointer to next structure</comment></member>
            <member noautovalidity="true"><type>VkSurfaceTransformFlagBitsKHR</type>   <name>transform</name></member>
            <member><type>VkRect2D</type>                        <name>renderArea</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member><type>VkBool32</type>                                       <name>partitionedAccelerationStructure</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*    <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>maxPartitionCount</name></member>
        </type>
        <type category="struct" name="VkBuildPartitionedAccelerationStructureIndirectCommandNV">
            <member><type>VkPartitionedAccelerationStructureOpTypeNV</type>    <name>opType</name></member>
            <member><type>uint32_t</type>                                       <name>argCount</name></member>
            <member><type>VkStridedDeviceAddressNV</type>                      <name>argData</name></member>
        </type>
        <type category="struct" name="VkPartitionedAccelerationStructureFlagsNV" structextends="VkPartitionedAccelerationStructureInstancesInputNV">
            <member values="VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_FLAGS_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                           <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>enablePartitionTranslation</name></member>
        </type>
        <type category="struct" name="VkPartitionedAccelerationStructureWriteInstanceDataNV">
            <member><type>VkTransformMatrixKHR</type>                           <name>transform</name></member>
            <member><type>float</type>                                          <name>explicitAABB</name>[6]</member>
            <member><type>uint32_t</type>                                       <name>instanceID</name></member>
            <member><type>uint32_t</type>                                       <name>instanceMask</name></member>
            <member><type>uint32_t</type>                                       <name>instanceContributionToHitGroupIndex</name></member>
            <member optional="true"><type>VkPartitionedAccelerationStructureInstanceFlagsNV</type> <name>instanceFlags</name></member>
            <member><type>uint32_t</type>                                       <name>instanceIndex</name></member>
            <member><type>uint32_t</type>                                       <name>partitionIndex</name></member>
            <member><type>VkDeviceAddress</type>                                <name>accelerationStructure</name></member>
        </type>
        <type category="struct" name="VkPartitionedAccelerationStructureUpdateInstanceDataNV">
            <member><type>uint32_t</type>                                       <name>instanceIndex</name></member>
            <member><type>uint32_t</type>                                       <name>instanceContributionToHitGroupIndex</name></member>
            <member><type>VkDeviceAddress</type>                                <name>accelerationStructure</name></member>
        </type>
        <type category="struct" name="VkPartitionedAccelerationStructureWritePartitionTranslationDataNV">
            <member><type>uint32_t</type>                                       <name>partitionIndex</name></member>
            <member><type>float</type>                                          <name>partitionTranslation</name>[3]</member>
        </type>
        <type category="struct" name="VkWriteDescriptorSetPartitionedAccelerationStructureNV" structextends="VkWriteDescriptorSet">
            <member values="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_PARTITIONED_ACCELERATION_STRUCTURE_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member><type>uint32_t</type>                                       <name>accelerationStructureCount</name></member>
            <member optional="false,true" len="accelerationStructureCount">const <type>VkDeviceAddress</type>* <name>pAccelerationStructures</name></member>
        </type>
        <type category="struct" name="VkPartitionedAccelerationStructureInstancesInputNV">
            <member values="VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCES_INPUT_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member optional="true"><type>VkBuildAccelerationStructureFlagsKHR</type> <name>flags</name></member>
            <member><type>uint32_t</type>                                       <name>instanceCount</name></member>
            <member><type>uint32_t</type>                                       <name>maxInstancePerPartitionCount</name></member>
            <member><type>uint32_t</type>                                       <name>partitionCount</name></member>
            <member><type>uint32_t</type>                                       <name>maxInstanceInGlobalPartitionCount</name></member>
        </type>
        <type category="struct" name="VkBuildPartitionedAccelerationStructureInfoNV">
            <member values="VK_STRUCTURE_TYPE_BUILD_PARTITIONED_ACCELERATION_STRUCTURE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member><type>VkPartitionedAccelerationStructureInstancesInputNV</type> <name>input</name></member>
            <member><type>VkDeviceAddress</type>                                <name>srcAccelerationStructureData</name></member>
            <member><type>VkDeviceAddress</type>                                <name>dstAccelerationStructureData</name></member>
            <member><type>VkDeviceAddress</type>                                <name>scratchData</name></member>
            <member><type>VkDeviceAddress</type>                                <name>srcInfos</name></member>
            <member><type>VkDeviceAddress</type>                                <name>srcInfosCount</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDiagnosticsConfigFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                       <name>diagnosticsConfig</name></member>
        </type>
        <type category="struct" name="VkDeviceDiagnosticsConfigCreateInfoNV" structextends="VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                         <name>pNext</name></member>
            <member optional="true"><type>VkDeviceDiagnosticsConfigFlagsNV</type>    <name>flags</name></member>
        </type>
        <type category="struct" name="VkPipelineOfflineCreateInfo" structextends="VkGraphicsPipelineCreateInfo,VkComputePipelineCreateInfo,VkRayTracingPipelineCreateInfoKHR,VkRayTracingPipelineCreateInfoNV">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_OFFLINE_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                    <name>pNext</name></member>
            <member><type>uint8_t</type>                                       <name>pipelineIdentifier</name>[<enum>VK_UUID_SIZE</enum>]</member>
            <member><type>VkPipelineMatchControl</type>                        <name>matchControl</name></member>
            <member><type>VkDeviceSize</type>                                  <name>poolEntrySize</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*          <name>pNext</name></member>
            <member><type>VkBool32</type>       <name>shaderZeroInitializeWorkgroupMemory</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR" alias="VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures"/>
        <type category="struct" name="VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type> <name>shaderSubgroupUniformControlFlow</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRobustness2FeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>robustBufferAccess2</name></member>
            <member><type>VkBool32</type>                           <name>robustImageAccess2</name></member>
            <member><type>VkBool32</type>                           <name>nullDescriptor</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRobustness2PropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member limittype="min,pot"><type>VkDeviceSize</type>    <name>robustStorageBufferAccessSizeAlignment</name></member>
            <member limittype="min,pot"><type>VkDeviceSize</type>    <name>robustUniformBufferAccessSizeAlignment</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImageRobustnessFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>robustImageAccess</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImageRobustnessFeaturesEXT" alias="VkPhysicalDeviceImageRobustnessFeatures"/>
        <type category="struct" name="VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>workgroupMemoryExplicitLayout</name></member>
            <member><type>VkBool32</type>                           <name>workgroupMemoryExplicitLayoutScalarBlockLayout</name></member>
            <member><type>VkBool32</type>                           <name>workgroupMemoryExplicitLayout8BitAccess</name></member>
            <member><type>VkBool32</type>                           <name>workgroupMemoryExplicitLayout16BitAccess</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePortabilitySubsetFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>constantAlphaColorBlendFactors</name></member>
            <member><type>VkBool32</type>                           <name>events</name></member>
            <member><type>VkBool32</type>                           <name>imageViewFormatReinterpretation</name></member>
            <member><type>VkBool32</type>                           <name>imageViewFormatSwizzle</name></member>
            <member><type>VkBool32</type>                           <name>imageView2DOn3DImage</name></member>
            <member><type>VkBool32</type>                           <name>multisampleArrayImage</name></member>
            <member><type>VkBool32</type>                           <name>mutableComparisonSamplers</name></member>
            <member><type>VkBool32</type>                           <name>pointPolygons</name></member>
            <member><type>VkBool32</type>                           <name>samplerMipLodBias</name></member>
            <member><type>VkBool32</type>                           <name>separateStencilMaskRef</name></member>
            <member><type>VkBool32</type>                           <name>shaderSampleRateInterpolationFunctions</name></member>
            <member><type>VkBool32</type>                           <name>tessellationIsolines</name></member>
            <member><type>VkBool32</type>                           <name>tessellationPointMode</name></member>
            <member><type>VkBool32</type>                           <name>triangleFans</name></member>
            <member><type>VkBool32</type>                           <name>vertexAttributeAccessBeyondStride</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePortabilitySubsetPropertiesKHR" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member limittype="min,pot"><type>uint32_t</type>  <name>minVertexInputBindingStrideAlignment</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevice4444FormatsFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>formatA4R4G4B4</name></member>
            <member><type>VkBool32</type>                           <name>formatA4B4G4R4</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSubpassShadingFeaturesHUAWEI" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>subpassShading</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI"><type>VkStructureType</type>  <name>sType</name></member>
            <member optional="true"><type>void</type>*<name>pNext</name></member>
            <member><type>VkBool32</type> <name>clustercullingShader</name></member>
            <member><type>VkBool32</type> <name>multiviewClusterCullingShader</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI" structextends="VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI"><type>VkStructureType</type>  <name>sType</name></member>
            <member optional="true"><type>void</type>*<name>pNext</name></member>
            <member><type>VkBool32</type> <name>clusterShadingRate</name></member>
        </type>
        <type category="struct" name="VkBufferCopy2">
            <member values="VK_STRUCTURE_TYPE_BUFFER_COPY_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>VkDeviceSize</type>                       <name>srcOffset</name><comment>Specified in bytes</comment></member>
            <member><type>VkDeviceSize</type>                       <name>dstOffset</name><comment>Specified in bytes</comment></member>
            <member noautovalidity="true"><type>VkDeviceSize</type> <name>size</name><comment>Specified in bytes</comment></member>
        </type>
        <type category="struct" name="VkBufferCopy2KHR" alias="VkBufferCopy2"/>
        <type category="struct" name="VkImageCopy2">
            <member values="VK_STRUCTURE_TYPE_IMAGE_COPY_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>VkImageSubresourceLayers</type>           <name>srcSubresource</name></member>
            <member><type>VkOffset3D</type>                         <name>srcOffset</name><comment>Specified in pixels for both compressed and uncompressed images</comment></member>
            <member><type>VkImageSubresourceLayers</type>           <name>dstSubresource</name></member>
            <member><type>VkOffset3D</type>                         <name>dstOffset</name><comment>Specified in pixels for both compressed and uncompressed images</comment></member>
            <member><type>VkExtent3D</type>                         <name>extent</name><comment>Specified in pixels for both compressed and uncompressed images</comment></member>
        </type>
        <type category="struct" name="VkImageCopy2KHR" alias="VkImageCopy2"/>
        <type category="struct" name="VkImageBlit2">
            <member values="VK_STRUCTURE_TYPE_IMAGE_BLIT_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>VkImageSubresourceLayers</type>           <name>srcSubresource</name></member>
            <member><type>VkOffset3D</type>                         <name>srcOffsets</name>[2]<comment>Specified in pixels for both compressed and uncompressed images</comment></member>
            <member><type>VkImageSubresourceLayers</type>           <name>dstSubresource</name></member>
            <member><type>VkOffset3D</type>                         <name>dstOffsets</name>[2]<comment>Specified in pixels for both compressed and uncompressed images</comment></member>
        </type>
        <type category="struct" name="VkImageBlit2KHR" alias="VkImageBlit2"/>
        <type category="struct" name="VkBufferImageCopy2">
            <member values="VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>VkDeviceSize</type>                       <name>bufferOffset</name><comment>Specified in bytes</comment></member>
            <member><type>uint32_t</type>                           <name>bufferRowLength</name><comment>Specified in texels</comment></member>
            <member><type>uint32_t</type>                           <name>bufferImageHeight</name></member>
            <member><type>VkImageSubresourceLayers</type>           <name>imageSubresource</name></member>
            <member><type>VkOffset3D</type>                         <name>imageOffset</name><comment>Specified in pixels for both compressed and uncompressed images</comment></member>
            <member><type>VkExtent3D</type>                         <name>imageExtent</name><comment>Specified in pixels for both compressed and uncompressed images</comment></member>
        </type>
        <type category="struct" name="VkBufferImageCopy2KHR" alias="VkBufferImageCopy2"/>
        <type category="struct" name="VkImageResolve2">
            <member values="VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>VkImageSubresourceLayers</type>           <name>srcSubresource</name></member>
            <member><type>VkOffset3D</type>                         <name>srcOffset</name></member>
            <member><type>VkImageSubresourceLayers</type>           <name>dstSubresource</name></member>
            <member><type>VkOffset3D</type>                         <name>dstOffset</name></member>
            <member><type>VkExtent3D</type>                         <name>extent</name></member>
        </type>
        <type category="struct" name="VkImageResolve2KHR" alias="VkImageResolve2"/>
        <type category="struct" name="VkCopyBufferInfo2">
            <member values="VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>VkBuffer</type>                           <name>srcBuffer</name></member>
            <member><type>VkBuffer</type>                           <name>dstBuffer</name></member>
            <member><type>uint32_t</type>                           <name>regionCount</name></member>
            <member len="regionCount">const <type>VkBufferCopy2</type>* <name>pRegions</name></member>
        </type>
        <type category="struct" name="VkCopyBufferInfo2KHR" alias="VkCopyBufferInfo2"/>
        <type category="struct" name="VkCopyImageInfo2">
            <member values="VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>VkImage</type>                            <name>srcImage</name></member>
            <member><type>VkImageLayout</type>                      <name>srcImageLayout</name></member>
            <member><type>VkImage</type>                            <name>dstImage</name></member>
            <member><type>VkImageLayout</type>                      <name>dstImageLayout</name></member>
            <member><type>uint32_t</type>                           <name>regionCount</name></member>
            <member len="regionCount">const <type>VkImageCopy2</type>* <name>pRegions</name></member>
        </type>
        <type category="struct" name="VkCopyImageInfo2KHR" alias="VkCopyImageInfo2"/>
        <type category="struct" name="VkBlitImageInfo2">
            <member values="VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkImage</type>                                <name>srcImage</name></member>
            <member><type>VkImageLayout</type>                          <name>srcImageLayout</name></member>
            <member><type>VkImage</type>                                <name>dstImage</name></member>
            <member><type>VkImageLayout</type>                          <name>dstImageLayout</name></member>
            <member><type>uint32_t</type>                               <name>regionCount</name></member>
            <member len="regionCount">const <type>VkImageBlit2</type>*  <name>pRegions</name></member>
            <member><type>VkFilter</type>                               <name>filter</name></member>
        </type>
        <type category="struct" name="VkBlitImageInfo2KHR" alias="VkBlitImageInfo2"/>
        <type category="struct" name="VkCopyBufferToImageInfo2">
            <member values="VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                 <name>pNext</name></member>
            <member><type>VkBuffer</type>                                    <name>srcBuffer</name></member>
            <member><type>VkImage</type>                                     <name>dstImage</name></member>
            <member><type>VkImageLayout</type>                               <name>dstImageLayout</name></member>
            <member><type>uint32_t</type>                                    <name>regionCount</name></member>
            <member len="regionCount">const <type>VkBufferImageCopy2</type>* <name>pRegions</name></member>
        </type>
        <type category="struct" name="VkCopyBufferToImageInfo2KHR" alias="VkCopyBufferToImageInfo2"/>
        <type category="struct" name="VkCopyImageToBufferInfo2">
            <member values="VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                   <name>pNext</name></member>
            <member><type>VkImage</type>                                       <name>srcImage</name></member>
            <member><type>VkImageLayout</type>                                 <name>srcImageLayout</name></member>
            <member><type>VkBuffer</type>                                      <name>dstBuffer</name></member>
            <member><type>uint32_t</type>                                      <name>regionCount</name></member>
            <member len="regionCount">const <type>VkBufferImageCopy2</type>*   <name>pRegions</name></member>
        </type>
        <type category="struct" name="VkCopyImageToBufferInfo2KHR" alias="VkCopyImageToBufferInfo2"/>
        <type category="struct" name="VkResolveImageInfo2">
            <member values="VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member><type>VkImage</type>                                    <name>srcImage</name></member>
            <member><type>VkImageLayout</type>                              <name>srcImageLayout</name></member>
            <member><type>VkImage</type>                                    <name>dstImage</name></member>
            <member><type>VkImageLayout</type>                              <name>dstImageLayout</name></member>
            <member><type>uint32_t</type>                                   <name>regionCount</name></member>
            <member len="regionCount">const <type>VkImageResolve2</type>*   <name>pRegions</name></member>
        </type>
        <type category="struct" name="VkResolveImageInfo2KHR" alias="VkResolveImageInfo2"/>
        <type category="struct" name="VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>shaderImageInt64Atomics</name></member>
            <member><type>VkBool32</type>                            <name>sparseImageInt64Atomics</name></member>
        </type>
        <type category="struct" name="VkFragmentShadingRateAttachmentInfoKHR" structextends="VkSubpassDescription2">
            <member values="VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member optional="true">const <type>VkAttachmentReference2</type>* <name>pFragmentShadingRateAttachment</name></member>
            <member><type>VkExtent2D</type>                 <name>shadingRateAttachmentTexelSize</name></member>
        </type>
        <type category="struct" name="VkPipelineFragmentShadingRateStateCreateInfoKHR" structextends="VkGraphicsPipelineCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                <name>pNext</name></member>
            <member><type>VkExtent2D</type>                                 <name>fragmentSize</name></member>
            <member noautovalidity="true"><type>VkFragmentShadingRateCombinerOpKHR</type>         <name>combinerOps</name>[2]</member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFragmentShadingRateFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>VkBool32</type>           <name>pipelineFragmentShadingRate</name></member>
            <member><type>VkBool32</type>           <name>primitiveFragmentShadingRate</name></member>
            <member><type>VkBool32</type>           <name>attachmentFragmentShadingRate</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFragmentShadingRatePropertiesKHR" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member limittype="min"><type>VkExtent2D</type>             <name>minFragmentShadingRateAttachmentTexelSize</name></member>
            <member limittype="max"><type>VkExtent2D</type>             <name>maxFragmentShadingRateAttachmentTexelSize</name></member>
            <member limittype="max,pot"><type>uint32_t</type>                <name>maxFragmentShadingRateAttachmentTexelSizeAspectRatio</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>primitiveFragmentShadingRateWithMultipleViewports</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>layeredShadingRateAttachments</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>fragmentShadingRateNonTrivialCombinerOps</name></member>
            <member limittype="max"><type>VkExtent2D</type>             <name>maxFragmentSize</name></member>
            <member limittype="max,pot"><type>uint32_t</type>                <name>maxFragmentSizeAspectRatio</name></member>
            <member limittype="max"><type>uint32_t</type>                   <name>maxFragmentShadingRateCoverageSamples</name></member>
            <member limittype="max"><type>VkSampleCountFlagBits</type>  <name>maxFragmentShadingRateRasterizationSamples</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>fragmentShadingRateWithShaderDepthStencilWrites</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>fragmentShadingRateWithSampleMask</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>fragmentShadingRateWithShaderSampleMask</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>fragmentShadingRateWithConservativeRasterization</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>fragmentShadingRateWithFragmentShaderInterlock</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>fragmentShadingRateWithCustomSampleLocations</name></member>
            <member limittype="bitmask"><type>VkBool32</type>               <name>fragmentShadingRateStrictMultiplyCombiner</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFragmentShadingRateKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>VkSampleCountFlags</type> <name>sampleCounts</name></member>
            <member><type>VkExtent2D</type>         <name>fragmentSize</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderTerminateInvocationFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                                       <name>shaderTerminateInvocation</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR" alias="VkPhysicalDeviceShaderTerminateInvocationFeatures"/>
        <type category="struct" name="VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>fragmentShadingRateEnums</name></member>
            <member><type>VkBool32</type>                           <name>supersampleFragmentShadingRates</name></member>
            <member><type>VkBool32</type>                           <name>noInvocationFragmentShadingRates</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                              <name>pNext</name></member>
            <member limittype="max"><type>VkSampleCountFlagBits</type>              <name>maxFragmentShadingRateInvocationCount</name></member>
        </type>
        <type category="struct" name="VkPipelineFragmentShadingRateEnumStateCreateInfoNV" structextends="VkGraphicsPipelineCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                        <name>pNext</name></member>
            <member noautovalidity="true"><type>VkFragmentShadingRateTypeNV</type>        <name>shadingRateType</name></member>
            <member noautovalidity="true"><type>VkFragmentShadingRateNV</type>            <name>shadingRate</name></member>
            <member noautovalidity="true"><type>VkFragmentShadingRateCombinerOpKHR</type> <name>combinerOps</name>[2]</member>
        </type>
        <type category="struct" name="VkAccelerationStructureBuildSizesInfoKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>VkDeviceSize</type>                       <name>accelerationStructureSize</name></member>
            <member><type>VkDeviceSize</type>                       <name>updateScratchSize</name></member>
            <member><type>VkDeviceSize</type>                       <name>buildScratchSize</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImage2DViewOf3DFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*                     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>image2DViewOf3D</name></member>
            <member><type>VkBool32</type>                                        <name>sampler2DViewOf3D</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*                     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>imageSlicedViewOf3D</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>attachmentFeedbackLoopDynamicState</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>legacyVertexAttributes</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>nativeUnalignedPerformance</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>mutableDescriptorType</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE" alias="VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT"/>
        <type category="struct" name="VkMutableDescriptorTypeListEXT">
            <member optional="true"><type>uint32_t</type>                          <name>descriptorTypeCount</name></member>
            <member len="descriptorTypeCount">const <type>VkDescriptorType</type>* <name>pDescriptorTypes</name></member>
        </type>
        <type category="struct" name="VkMutableDescriptorTypeListVALVE" alias="VkMutableDescriptorTypeListEXT"/>
        <type category="struct" name="VkMutableDescriptorTypeCreateInfoEXT" structextends="VkDescriptorSetLayoutCreateInfo,VkDescriptorPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                       <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                          <name>mutableDescriptorTypeListCount</name></member>
            <member len="mutableDescriptorTypeListCount">const <type>VkMutableDescriptorTypeListEXT</type>* <name>pMutableDescriptorTypeLists</name></member>
        </type>
        <type category="struct" name="VkMutableDescriptorTypeCreateInfoVALVE" alias="VkMutableDescriptorTypeCreateInfoEXT"/>
        <type category="struct" name="VkPhysicalDeviceDepthClipControlFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkBool32</type>                                    <name>depthClipControl</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkBool32</type>                                    <name>deviceGeneratedCommands</name></member>
            <member><type>VkBool32</type>                                    <name>dynamicGeneratedPipelineLayout</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxIndirectPipelineCount</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxIndirectShaderObjectCount</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxIndirectSequenceCount</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxIndirectCommandsTokenCount</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxIndirectCommandsTokenOffset</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxIndirectCommandsIndirectStride</name></member>
            <member limittype="bitmask"><type>VkIndirectCommandsInputModeFlagsEXT</type> <name>supportedIndirectCommandsInputModes</name></member>
            <member limittype="bitmask"><type>VkShaderStageFlags</type>              <name>supportedIndirectCommandsShaderStages</name></member>
            <member limittype="bitmask"><type>VkShaderStageFlags</type>              <name>supportedIndirectCommandsShaderStagesPipelineBinding</name></member>
            <member limittype="bitmask"><type>VkShaderStageFlags</type>              <name>supportedIndirectCommandsShaderStagesShaderBinding</name></member>
            <member><type>VkBool32</type>                                            <name>deviceGeneratedCommandsTransformFeedback</name></member>
            <member><type>VkBool32</type>                                            <name>deviceGeneratedCommandsMultiDrawIndirectCount</name></member>
        </type>
        <type category="struct" name="VkGeneratedCommandsPipelineInfoEXT" structextends="VkGeneratedCommandsInfoEXT,VkGeneratedCommandsMemoryRequirementsInfoEXT">
            <member values="VK_STRUCTURE_TYPE_GENERATED_COMMANDS_PIPELINE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member><type>VkPipeline</type>                                       <name>pipeline</name></member>
        </type>
        <type category="struct" name="VkGeneratedCommandsShaderInfoEXT" structextends="VkGeneratedCommandsInfoEXT,VkGeneratedCommandsMemoryRequirementsInfoEXT">
            <member values="VK_STRUCTURE_TYPE_GENERATED_COMMANDS_SHADER_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member><type>uint32_t</type>                                       <name>shaderCount</name></member>
            <member len="shaderCount">const <type>VkShaderEXT</type>*                              <name>pShaders</name></member>
        </type>
        <type category="struct" name="VkGeneratedCommandsMemoryRequirementsInfoEXT">
            <member values="VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                    <name>pNext</name></member>
            <member optional="true"><type>VkIndirectExecutionSetEXT</type>      <name>indirectExecutionSet</name></member>
            <member><type>VkIndirectCommandsLayoutEXT</type>                    <name>indirectCommandsLayout</name></member>
            <member><type>uint32_t</type>                                       <name>maxSequenceCount</name></member>
            <member><type>uint32_t</type>                                       <name>maxDrawCount</name></member>
        </type>
        <type category="struct" name="VkIndirectExecutionSetPipelineInfoEXT">
            <member values="VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_PIPELINE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkPipeline</type>                                          <name>initialPipeline</name></member>
            <member><type>uint32_t</type>                                            <name>maxPipelineCount</name></member>
        </type>
        <type category="struct" name="VkIndirectExecutionSetShaderLayoutInfoEXT">
            <member values="VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_LAYOUT_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>* <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                                                                <name>setLayoutCount</name></member>
            <member len="setLayoutCount" optional="false,true">const <type>VkDescriptorSetLayout</type>*             <name>pSetLayouts</name></member>
        </type>
        <type category="struct" name="VkIndirectExecutionSetShaderInfoEXT">
            <member values="VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>uint32_t</type>                                                                <name>shaderCount</name></member>
            <member len="shaderCount">const <type>VkShaderEXT</type>*                               <name>pInitialShaders</name></member>
            <member len="shaderCount" optional="true">const <type>VkIndirectExecutionSetShaderLayoutInfoEXT</type>*  <name>pSetLayoutInfos</name></member>
            <member><type>uint32_t</type>                                                                <name>maxShaderCount</name></member>
            <member optional="true"><type>uint32_t</type>                                                <name>pushConstantRangeCount</name></member>
            <member len="pushConstantRangeCount">const <type>VkPushConstantRange</type>*                 <name>pPushConstantRanges</name></member>
        </type>
        <type category="union" name="VkIndirectExecutionSetInfoEXT">
            <member selection="VK_INDIRECT_EXECUTION_SET_INFO_TYPE_PIPELINES_EXT">const <type>VkIndirectExecutionSetPipelineInfoEXT</type>*     <name>pPipelineInfo</name></member>
            <member selection="VK_INDIRECT_EXECUTION_SET_INFO_TYPE_SHADER_OBJECTS_EXT">const <type>VkIndirectExecutionSetShaderInfoEXT</type>*  <name>pShaderInfo</name></member>
        </type>
        <type category="struct" name="VkIndirectExecutionSetCreateInfoEXT">
            <member values="VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkIndirectExecutionSetInfoTypeEXT</type>                 <name>type</name></member>
            <member selector="type" noautovalidity="true"><type>VkIndirectExecutionSetInfoEXT</type>  <name>info</name></member>
        </type>
        <type category="struct" name="VkGeneratedCommandsInfoEXT">
            <member values="VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkShaderStageFlags</type>                          <name>shaderStages</name></member>
            <member optional="true"><type>VkIndirectExecutionSetEXT</type>   <name>indirectExecutionSet</name></member>
            <member><type>VkIndirectCommandsLayoutEXT</type>                 <name>indirectCommandsLayout</name></member>
            <member><type>VkDeviceAddress</type>                             <name>indirectAddress</name></member>
            <member><type>VkDeviceSize</type>                                <name>indirectAddressSize</name></member>
            <member optional="true"><type>VkDeviceAddress</type>             <name>preprocessAddress</name></member>
            <member><type>VkDeviceSize</type>                                <name>preprocessSize</name></member>
            <member><type>uint32_t</type>                                    <name>maxSequenceCount</name></member>
            <member optional="true"><type>VkDeviceAddress</type>             <name>sequenceCountAddress</name></member>
            <member><type>uint32_t</type>                                    <name>maxDrawCount</name></member>
        </type>
        <type category="struct" name="VkWriteIndirectExecutionSetPipelineEXT">
            <member values="VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_PIPELINE_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>uint32_t</type>                                            <name>index</name></member>
            <member><type>VkPipeline</type>                                          <name>pipeline</name></member>
        </type>
        <type category="struct" name="VkWriteIndirectExecutionSetShaderEXT">
            <member values="VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_SHADER_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>uint32_t</type>                                            <name>index</name></member>
            <member><type>VkShaderEXT</type>                                         <name>shader</name></member>
        </type>
        <type category="struct" name="VkIndirectCommandsLayoutCreateInfoEXT">
            <member values="VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member optional="true"><type>VkIndirectCommandsLayoutUsageFlagsEXT</type> <name>flags</name></member>
            <member><type>VkShaderStageFlags</type>                                    <name>shaderStages</name></member>
            <member><type>uint32_t</type>                                              <name>indirectStride</name></member>
            <member optional="true"><type>VkPipelineLayout</type>                      <name>pipelineLayout</name></member>
            <member><type>uint32_t</type>                                              <name>tokenCount</name></member>
            <member len="tokenCount">const <type>VkIndirectCommandsLayoutTokenEXT</type>*                   <name>pTokens</name></member>
        </type>
        <type category="struct" name="VkIndirectCommandsLayoutTokenEXT">
            <member values="VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkIndirectCommandsTokenTypeEXT</type>              <name>type</name></member>
            <member selector="type" noautovalidity="true"><type>VkIndirectCommandsTokenDataEXT</type> <name>data</name></member>
            <member><type>uint32_t</type>                                    <name>offset</name></member>
        </type>
        <type category="struct" name="VkDrawIndirectCountIndirectCommandEXT">
            <member><type>VkDeviceAddress</type>      <name>bufferAddress</name></member>
            <member><type>uint32_t</type>             <name>stride</name></member>
            <member><type>uint32_t</type>             <name>commandCount</name></member>
        </type>
        <type category="struct" name="VkIndirectCommandsVertexBufferTokenEXT">
            <member><type>uint32_t</type>             <name>vertexBindingUnit</name></member>
        </type>
        <type category="struct" name="VkBindVertexBufferIndirectCommandEXT">
            <member><type>VkDeviceAddress</type>      <name>bufferAddress</name></member>
            <member><type>uint32_t</type>             <name>size</name></member>
            <member><type>uint32_t</type>             <name>stride</name></member>
        </type>
        <type category="struct" name="VkIndirectCommandsIndexBufferTokenEXT">
            <member><type>VkIndirectCommandsInputModeFlagBitsEXT</type>              <name>mode</name></member>
        </type>
        <type category="struct" name="VkBindIndexBufferIndirectCommandEXT">
            <member><type>VkDeviceAddress</type>      <name>bufferAddress</name></member>
            <member><type>uint32_t</type>             <name>size</name></member>
            <member><type>VkIndexType</type>          <name>indexType</name></member>
        </type>
        <type category="struct" name="VkIndirectCommandsPushConstantTokenEXT">
            <member><type>VkPushConstantRange</type>      <name>updateRange</name></member>
        </type>
        <type category="struct" name="VkIndirectCommandsExecutionSetTokenEXT">
            <member><type>VkIndirectExecutionSetInfoTypeEXT</type>        <name>type</name></member>
            <member><type>VkShaderStageFlags</type>                            <name>shaderStages</name></member>
        </type>
        <type category="union" name="VkIndirectCommandsTokenDataEXT">
            <member selection="VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_EXT,VK_INDIRECT_COMMANDS_TOKEN_TYPE_SEQUENCE_INDEX_EXT">const <type>VkIndirectCommandsPushConstantTokenEXT</type>*  <name>pPushConstant</name></member>
            <member selection="VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_EXT">const <type>VkIndirectCommandsVertexBufferTokenEXT</type>*  <name>pVertexBuffer</name></member>
            <member selection="VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_EXT">const <type>VkIndirectCommandsIndexBufferTokenEXT</type>*    <name>pIndexBuffer</name></member>
            <member selection="VK_INDIRECT_COMMANDS_TOKEN_TYPE_EXECUTION_SET_EXT">const <type>VkIndirectCommandsExecutionSetTokenEXT</type>*  <name>pExecutionSet</name></member>
        </type>
        <type category="struct" name="VkPipelineViewportDepthClipControlCreateInfoEXT" structextends="VkPipelineViewportStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkBool32</type>                    <name>negativeOneToOne</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDepthClampControlFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_CONTROL_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkBool32</type>                                    <name>depthClampControl</name></member>
        </type>
        <type category="struct" name="VkPipelineViewportDepthClampControlCreateInfoEXT" structextends="VkPipelineViewportStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLAMP_CONTROL_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                    <name>pNext</name></member>
            <member><type>VkDepthClampModeEXT</type>                            <name>depthClampMode</name></member>
            <member optional="true">const <type>VkDepthClampRangeEXT</type>*    <name>pDepthClampRange</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>vertexInputDynamicState</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExternalMemoryRDMAFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>externalMemoryRDMA</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>shaderRelaxedExtendedInstruction</name></member>
        </type>
        <type category="struct" name="VkVertexInputBindingDescription2EXT">
            <member values="VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>uint32_t</type>                       <name>binding</name></member>
            <member><type>uint32_t</type>                       <name>stride</name></member>
            <member><type>VkVertexInputRate</type>              <name>inputRate</name></member>
            <member><type>uint32_t</type>                       <name>divisor</name></member>
        </type>
        <type category="struct" name="VkVertexInputAttributeDescription2EXT">
            <member values="VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>uint32_t</type>                       <name>location</name><comment>location of the shader vertex attrib</comment></member>
            <member><type>uint32_t</type>                       <name>binding</name><comment>Vertex buffer binding id</comment></member>
            <member><type>VkFormat</type>                       <name>format</name><comment>format of source data</comment></member>
            <member><type>uint32_t</type>                       <name>offset</name><comment>Offset of first element in bytes from base of vertex</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceColorWriteEnableFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                     <name>colorWriteEnable</name></member>
        </type>
        <type category="struct" name="VkPipelineColorWriteCreateInfoEXT" structextends="VkPipelineColorBlendStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>               <name>attachmentCount</name><comment># of pAttachments</comment></member>
            <member len="attachmentCount">const <type>VkBool32</type>*  <name>pColorWriteEnables</name></member>
        </type>
        <type category="struct" name="VkMemoryBarrier2" structextends="VkSubpassDependency2">
            <member values="VK_STRUCTURE_TYPE_MEMORY_BARRIER_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member optional="true"><type>VkPipelineStageFlags2</type>  <name>srcStageMask</name></member>
            <member optional="true"><type>VkAccessFlags2</type>         <name>srcAccessMask</name></member>
            <member optional="true"><type>VkPipelineStageFlags2</type>  <name>dstStageMask</name></member>
            <member optional="true"><type>VkAccessFlags2</type>         <name>dstAccessMask</name></member>
        </type>
        <type category="struct" name="VkMemoryBarrier2KHR" alias="VkMemoryBarrier2"/>
        <type category="struct" name="VkImageMemoryBarrier2">
            <member values="VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member optional="true"><type>VkPipelineStageFlags2</type>  <name>srcStageMask</name></member>
            <member optional="true"><type>VkAccessFlags2</type>         <name>srcAccessMask</name></member>
            <member optional="true"><type>VkPipelineStageFlags2</type>  <name>dstStageMask</name></member>
            <member optional="true"><type>VkAccessFlags2</type>         <name>dstAccessMask</name></member>
            <member><type>VkImageLayout</type>                          <name>oldLayout</name></member>
            <member><type>VkImageLayout</type>                          <name>newLayout</name></member>
            <member><type>uint32_t</type>                               <name>srcQueueFamilyIndex</name></member>
            <member><type>uint32_t</type>                               <name>dstQueueFamilyIndex</name></member>
            <member><type>VkImage</type>                                <name>image</name></member>
            <member><type>VkImageSubresourceRange</type>                <name>subresourceRange</name></member>
        </type>
        <type category="struct" name="VkImageMemoryBarrier2KHR" alias="VkImageMemoryBarrier2"/>
        <type category="struct" name="VkBufferMemoryBarrier2">
            <member values="VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member optional="true"><type>VkPipelineStageFlags2</type>  <name>srcStageMask</name></member>
            <member optional="true"><type>VkAccessFlags2</type>         <name>srcAccessMask</name></member>
            <member optional="true"><type>VkPipelineStageFlags2</type>  <name>dstStageMask</name></member>
            <member optional="true"><type>VkAccessFlags2</type>         <name>dstAccessMask</name></member>
            <member><type>uint32_t</type>                               <name>srcQueueFamilyIndex</name></member>
            <member><type>uint32_t</type>                               <name>dstQueueFamilyIndex</name></member>
            <member><type>VkBuffer</type>                               <name>buffer</name></member>
            <member><type>VkDeviceSize</type>                           <name>offset</name></member>
            <member><type>VkDeviceSize</type>                           <name>size</name></member>
        </type>
        <type category="struct" name="VkBufferMemoryBarrier2KHR" alias="VkBufferMemoryBarrier2"/>
        <type category="struct" name="VkMemoryBarrierAccessFlags3KHR" structextends="VkMemoryBarrier2,VkBufferMemoryBarrier2,VkImageMemoryBarrier2">
            <member values="VK_STRUCTURE_TYPE_MEMORY_BARRIER_ACCESS_FLAGS_3_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                  <name>pNext</name></member>
            <member optional="true"><type>VkAccessFlags3KHR</type>         <name>srcAccessMask3</name></member>
            <member optional="true"><type>VkAccessFlags3KHR</type>         <name>dstAccessMask3</name></member>
        </type>
        <type category="struct" name="VkDependencyInfo">
            <member values="VK_STRUCTURE_TYPE_DEPENDENCY_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                  <name>pNext</name></member>
            <member optional="true"><type>VkDependencyFlags</type>                            <name>dependencyFlags</name></member>
            <member optional="true"><type>uint32_t</type>                                     <name>memoryBarrierCount</name></member>
            <member len="memoryBarrierCount">const <type>VkMemoryBarrier2</type>*             <name>pMemoryBarriers</name></member>
            <member optional="true"><type>uint32_t</type>                                     <name>bufferMemoryBarrierCount</name></member>
            <member len="bufferMemoryBarrierCount">const <type>VkBufferMemoryBarrier2</type>* <name>pBufferMemoryBarriers</name></member>
            <member optional="true"><type>uint32_t</type>                                     <name>imageMemoryBarrierCount</name></member>
            <member len="imageMemoryBarrierCount">const <type>VkImageMemoryBarrier2</type>*   <name>pImageMemoryBarriers</name></member>
        </type>
        <type category="struct" name="VkDependencyInfoKHR" alias="VkDependencyInfo"/>
        <type category="struct" name="VkSemaphoreSubmitInfo">
            <member values="VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO"><type>VkStructureType</type>           <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                                <name>pNext</name></member>
            <member><type>VkSemaphore</type>                                                                <name>semaphore</name></member>
            <member><type>uint64_t</type>                                                                   <name>value</name></member>
            <member optional="true"><type>VkPipelineStageFlags2</type>                                      <name>stageMask</name></member>
            <member><type>uint32_t</type>                                                                   <name>deviceIndex</name></member>
        </type>
        <type category="struct" name="VkSemaphoreSubmitInfoKHR" alias="VkSemaphoreSubmitInfo"/>
        <type category="struct" name="VkCommandBufferSubmitInfo">
            <member values="VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO"><type>VkStructureType</type>      <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                                <name>pNext</name></member>
            <member><type>VkCommandBuffer</type>                                                            <name>commandBuffer</name></member>
            <member><type>uint32_t</type>                                                                   <name>deviceMask</name></member>
        </type>
        <type category="struct" name="VkCommandBufferSubmitInfoKHR" alias="VkCommandBufferSubmitInfo"/>
        <type category="struct" name="VkSubmitInfo2">
            <member values="VK_STRUCTURE_TYPE_SUBMIT_INFO_2"><type>VkStructureType</type>                   <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                                <name>pNext</name></member>
            <member optional="true"><type>VkSubmitFlags</type>                                              <name>flags</name></member>
            <member optional="true"><type>uint32_t</type>                                                   <name>waitSemaphoreInfoCount</name></member>
            <member len="waitSemaphoreInfoCount">const <type>VkSemaphoreSubmitInfo</type>*                  <name>pWaitSemaphoreInfos</name></member>
            <member optional="true"><type>uint32_t</type>                                                   <name>commandBufferInfoCount</name></member>
            <member len="commandBufferInfoCount">const <type>VkCommandBufferSubmitInfo</type>*              <name>pCommandBufferInfos</name></member>
            <member optional="true"><type>uint32_t</type>                                                   <name>signalSemaphoreInfoCount</name></member>
            <member len="signalSemaphoreInfoCount">const <type>VkSemaphoreSubmitInfo</type>*                <name>pSignalSemaphoreInfos</name></member>
        </type>
        <type category="struct" name="VkSubmitInfo2KHR" alias="VkSubmitInfo2"/>
        <type category="struct" name="VkQueueFamilyCheckpointProperties2NV" structextends="VkQueueFamilyProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*           <name>pNext</name></member>
            <member limittype="bitmask"><type>VkPipelineStageFlags2</type> <name>checkpointExecutionStageMask</name></member>
        </type>
        <type category="struct" name="VkCheckpointData2NV" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member><type>VkPipelineStageFlags2</type>   <name>stage</name></member>
            <member noautovalidity="true"><type>void</type>* <name>pCheckpointMarker</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSynchronization2Features" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>synchronization2</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSynchronization2FeaturesKHR" alias="VkPhysicalDeviceSynchronization2Features"/>
        <type category="struct" name="VkPhysicalDeviceHostImageCopyFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                     <name>hostImageCopy</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceHostImageCopyFeaturesEXT" alias="VkPhysicalDeviceHostImageCopyFeatures"/>
        <type category="struct" name="VkPhysicalDeviceHostImageCopyProperties" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                                                        <name>pNext</name></member>
            <member optional="true" limittype="noauto"><type>uint32_t</type>                                  <name>copySrcLayoutCount</name></member>
            <member optional="true" limittype="noauto" len="copySrcLayoutCount"><type>VkImageLayout</type>*   <name>pCopySrcLayouts</name></member>
            <member optional="true" limittype="noauto"><type>uint32_t</type>                                  <name>copyDstLayoutCount</name></member>
            <member optional="true" limittype="noauto" len="copyDstLayoutCount"><type>VkImageLayout</type>*   <name>pCopyDstLayouts</name></member>
            <member optional="true" limittype="noauto"><type>uint8_t</type>                                   <name>optimalTilingLayoutUUID</name>[<enum>VK_UUID_SIZE</enum>]</member>
            <member limittype="bitmask"><type>VkBool32</type>                                                 <name>identicalMemoryTypeRequirements</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceHostImageCopyPropertiesEXT" alias="VkPhysicalDeviceHostImageCopyProperties"/>
        <type category="struct" name="VkMemoryToImageCopy">
            <member values="VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                    <name>pNext</name></member>
            <member>const <type>void</type>*                                    <name>pHostPointer</name></member>
            <member><type>uint32_t</type>                                       <name>memoryRowLength</name><comment>Specified in texels</comment></member>
            <member><type>uint32_t</type>                                       <name>memoryImageHeight</name></member>
            <member><type>VkImageSubresourceLayers</type>                       <name>imageSubresource</name></member>
            <member><type>VkOffset3D</type>                                     <name>imageOffset</name></member>
            <member><type>VkExtent3D</type>                                     <name>imageExtent</name></member>
        </type>
        <type category="struct" name="VkMemoryToImageCopyEXT" alias="VkMemoryToImageCopy"/>
        <type category="struct" name="VkImageToMemoryCopy">
            <member values="VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                    <name>pNext</name></member>
            <member><type>void</type>*                                          <name>pHostPointer</name></member>
            <member><type>uint32_t</type>                                       <name>memoryRowLength</name><comment>Specified in texels</comment></member>
            <member><type>uint32_t</type>                                       <name>memoryImageHeight</name></member>
            <member><type>VkImageSubresourceLayers</type>                       <name>imageSubresource</name></member>
            <member><type>VkOffset3D</type>                                     <name>imageOffset</name></member>
            <member><type>VkExtent3D</type>                                     <name>imageExtent</name></member>
        </type>
        <type category="struct" name="VkImageToMemoryCopyEXT" alias="VkImageToMemoryCopy"/>
        <type category="struct" name="VkCopyMemoryToImageInfo">
            <member values="VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member optional="true"><type>VkHostImageCopyFlags</type>       <name>flags</name></member>
            <member><type>VkImage</type>                                    <name>dstImage</name></member>
            <member><type>VkImageLayout</type>                              <name>dstImageLayout</name></member>
            <member><type>uint32_t</type>                                   <name>regionCount</name></member>
            <member len="regionCount">const <type>VkMemoryToImageCopy</type>*    <name>pRegions</name></member>
        </type>
        <type category="struct" name="VkCopyMemoryToImageInfoEXT" alias="VkCopyMemoryToImageInfo"/>
        <type category="struct" name="VkCopyImageToMemoryInfo">
            <member values="VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member optional="true"><type>VkHostImageCopyFlags</type>       <name>flags</name></member>
            <member><type>VkImage</type>                                    <name>srcImage</name></member>
            <member><type>VkImageLayout</type>                              <name>srcImageLayout</name></member>
            <member><type>uint32_t</type>                                   <name>regionCount</name></member>
            <member len="regionCount">const <type>VkImageToMemoryCopy</type>*    <name>pRegions</name></member>
        </type>
        <type category="struct" name="VkCopyImageToMemoryInfoEXT" alias="VkCopyImageToMemoryInfo"/>
        <type category="struct" name="VkCopyImageToImageInfo">
            <member values="VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member optional="true"><type>VkHostImageCopyFlags</type>       <name>flags</name></member>
            <member><type>VkImage</type>                                    <name>srcImage</name></member>
            <member><type>VkImageLayout</type>                              <name>srcImageLayout</name></member>
            <member><type>VkImage</type>                                    <name>dstImage</name></member>
            <member><type>VkImageLayout</type>                              <name>dstImageLayout</name></member>
            <member><type>uint32_t</type>                                   <name>regionCount</name></member>
            <member len="regionCount">const <type>VkImageCopy2</type>*      <name>pRegions</name></member>
        </type>
        <type category="struct" name="VkCopyImageToImageInfoEXT" alias="VkCopyImageToImageInfo"/>
        <type category="struct" name="VkHostImageLayoutTransitionInfo">
            <member values="VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*  <name>pNext</name></member>
            <member><type>VkImage</type>                      <name>image</name></member>
            <member><type>VkImageLayout</type>                <name>oldLayout</name></member>
            <member><type>VkImageLayout</type>                <name>newLayout</name></member>
            <member><type>VkImageSubresourceRange</type>      <name>subresourceRange</name></member>
        </type>
        <type category="struct" name="VkHostImageLayoutTransitionInfoEXT" alias="VkHostImageLayoutTransitionInfo"/>
        <type category="struct" name="VkSubresourceHostMemcpySize" returnedonly="true" structextends="VkSubresourceLayout2">
            <member values="VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkDeviceSize</type>                 <name>size</name><comment>Specified in bytes</comment></member>
        </type>
        <type category="struct" name="VkSubresourceHostMemcpySizeEXT" alias="VkSubresourceHostMemcpySize"/>
        <type category="struct" name="VkHostImageCopyDevicePerformanceQuery" returnedonly="true" structextends="VkImageFormatProperties2">
            <member values="VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                     <name>optimalDeviceAccess</name><comment>Specifies if device access is optimal</comment></member>
            <member><type>VkBool32</type>                     <name>identicalMemoryLayout</name><comment>Specifies if memory layout is identical</comment></member>
        </type>
        <type category="struct" name="VkHostImageCopyDevicePerformanceQueryEXT" alias="VkHostImageCopyDevicePerformanceQuery"/>
        <type category="struct" name="VkPhysicalDeviceVulkanSC10Properties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_SC_1_0_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*          <name>pNext</name></member>
            <member limittype="bitmask"><type>VkBool32</type>   <name>deviceNoDynamicHostAllocations</name></member>
            <member limittype="bitmask"><type>VkBool32</type>   <name>deviceDestroyFreesMemory</name></member>
            <member limittype="bitmask"><type>VkBool32</type>   <name>commandPoolMultipleCommandBuffersRecording</name></member>
            <member limittype="bitmask"><type>VkBool32</type>   <name>commandPoolResetCommandBuffer</name></member>
            <member limittype="bitmask"><type>VkBool32</type>   <name>commandBufferSimultaneousUse</name></member>
            <member limittype="bitmask"><type>VkBool32</type>   <name>secondaryCommandBufferNullOrImagelessFramebuffer</name></member>
            <member limittype="bitmask"><type>VkBool32</type>   <name>recycleDescriptorSetMemory</name></member>
            <member limittype="bitmask"><type>VkBool32</type>   <name>recyclePipelineMemory</name></member>
            <member limittype="max"><type>uint32_t</type>       <name>maxRenderPassSubpasses</name></member>
            <member limittype="max"><type>uint32_t</type>       <name>maxRenderPassDependencies</name></member>
            <member limittype="max"><type>uint32_t</type>       <name>maxSubpassInputAttachments</name></member>
            <member limittype="max"><type>uint32_t</type>       <name>maxSubpassPreserveAttachments</name></member>
            <member limittype="max"><type>uint32_t</type>       <name>maxFramebufferAttachments</name></member>
            <member limittype="max"><type>uint32_t</type>       <name>maxDescriptorSetLayoutBindings</name></member>
            <member limittype="max"><type>uint32_t</type>       <name>maxQueryFaultCount</name></member>
            <member limittype="max"><type>uint32_t</type>       <name>maxCallbackFaultCount</name></member>
            <member limittype="max"><type>uint32_t</type>       <name>maxCommandPoolCommandBuffers</name></member>
            <member limittype="max"><type>VkDeviceSize</type>   <name>maxCommandBufferSize</name></member>
        </type>
        <type category="struct" name="VkPipelinePoolSize">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_POOL_SIZE"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*    <name>pNext</name></member>
            <member><type>VkDeviceSize</type>                   <name>poolEntrySize</name></member>
            <member><type>uint32_t</type>                       <name>poolEntryCount</name></member>
        </type>
        <type category="struct" name="VkDeviceObjectReservationCreateInfo" allowduplicate="true" structextends="VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_OBJECT_RESERVATION_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*    <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>       <name>pipelineCacheCreateInfoCount</name></member>
            <member len="pipelineCacheCreateInfoCount">const <type>VkPipelineCacheCreateInfo</type>* <name>pPipelineCacheCreateInfos</name></member>
            <member optional="true"><type>uint32_t</type>       <name>pipelinePoolSizeCount</name></member>
            <member len="pipelinePoolSizeCount">const <type>VkPipelinePoolSize</type>* <name>pPipelinePoolSizes</name></member>
            <member optional="true"><type>uint32_t</type>       <name>semaphoreRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>commandBufferRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>fenceRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>deviceMemoryRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>bufferRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>imageRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>eventRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>queryPoolRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>bufferViewRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>imageViewRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>layeredImageViewRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>pipelineCacheRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>pipelineLayoutRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>renderPassRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>graphicsPipelineRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>computePipelineRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>descriptorSetLayoutRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>samplerRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>descriptorPoolRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>descriptorSetRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>framebufferRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>commandPoolRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>samplerYcbcrConversionRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>surfaceRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>swapchainRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>displayModeRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>subpassDescriptionRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>attachmentDescriptionRequestCount</name></member>
            <member optional="true"><type>uint32_t</type>       <name>descriptorSetLayoutBindingRequestCount</name></member>
            <member><type>uint32_t</type>                       <name>descriptorSetLayoutBindingLimit</name></member>
            <member><type>uint32_t</type>                       <name>maxImageViewMipLevels</name></member>
            <member><type>uint32_t</type>                       <name>maxImageViewArrayLayers</name></member>
            <member><type>uint32_t</type>                       <name>maxLayeredImageViewMipLevels</name></member>
            <member><type>uint32_t</type>                       <name>maxOcclusionQueriesPerPool</name></member>
            <member><type>uint32_t</type>                       <name>maxPipelineStatisticsQueriesPerPool</name></member>
            <member><type>uint32_t</type>                       <name>maxTimestampQueriesPerPool</name></member>
            <member><type>uint32_t</type>                       <name>maxImmutableSamplersPerDescriptorSetLayout</name></member>
        </type>
        <type category="struct" name="VkCommandPoolMemoryReservationCreateInfo" structextends="VkCommandPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_COMMAND_POOL_MEMORY_RESERVATION_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*    <name>pNext</name></member>
            <member><type>VkDeviceSize</type>  <name>commandPoolReservedSize</name></member>
            <member><type>uint32_t</type>      <name>commandPoolMaxCommandBuffers</name></member>
        </type>
        <type category="struct" name="VkCommandPoolMemoryConsumption" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_COMMAND_POOL_MEMORY_CONSUMPTION"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*          <name>pNext</name></member>
            <member><type>VkDeviceSize</type>                   <name>commandPoolAllocated</name></member>
            <member><type>VkDeviceSize</type>                   <name>commandPoolReservedSize</name></member>
            <member><type>VkDeviceSize</type>                   <name>commandBufferAllocated</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVulkanSC10Features" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_SC_1_0_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*          <name>pNext</name></member>
            <member><type>VkBool32</type>                       <name>shaderAtomicInstructions</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member><type>VkBool32</type>               <name>primitivesGeneratedQuery</name></member>
            <member><type>VkBool32</type>               <name>primitivesGeneratedQueryWithRasterizerDiscard</name></member>
            <member><type>VkBool32</type>               <name>primitivesGeneratedQueryWithNonZeroStreams</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceLegacyDitheringFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member><type>VkBool32</type>               <name>legacyDithering</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*   <name>pNext</name></member>
            <member><type>VkBool32</type>                <name>multisampledRenderToSingleSampled</name></member>
        </type>
        <type category="struct" name="VkSubpassResolvePerformanceQueryEXT" returnedonly="true" structextends="VkFormatProperties2">
            <member values="VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkBool32</type> <name>optimal</name></member>
        </type>
        <type category="struct" name="VkMultisampledRenderToSingleSampledInfoEXT" structextends="VkSubpassDescription2,VkRenderingInfo">
            <member values="VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*   <name>pNext</name></member>
            <member><type>VkBool32</type>                      <name>multisampledRenderToSingleSampledEnable</name></member>
            <member><type>VkSampleCountFlagBits</type>         <name>rasterizationSamples</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePipelineProtectedAccessFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*  <name>pNext</name></member>
            <member><type>VkBool32</type>               <name>pipelineProtectedAccess</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePipelineProtectedAccessFeaturesEXT" alias="VkPhysicalDevicePipelineProtectedAccessFeatures"/>
        <type category="struct" name="VkQueueFamilyVideoPropertiesKHR" returnedonly="true" structextends="VkQueueFamilyProperties2">
            <member values="VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                              <name>pNext</name></member>
            <member limittype="bitmask"><type>VkVideoCodecOperationFlagsKHR</type>  <name>videoCodecOperations</name></member>
        </type>
        <type category="struct" name="VkQueueFamilyQueryResultStatusPropertiesKHR" returnedonly="true" structextends="VkQueueFamilyProperties2">
            <member values="VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                              <name>pNext</name></member>
            <member><type>VkBool32</type>                                           <name>queryResultStatusSupport</name></member>
        </type>
        <type category="struct" name="VkVideoProfileListInfoKHR" structextends="VkPhysicalDeviceImageFormatInfo2,VkPhysicalDeviceVideoFormatInfoKHR,VkImageCreateInfo,VkBufferCreateInfo">
            <member values="VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                   <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                                      <name>profileCount</name></member>
            <member len="profileCount">const <type>VkVideoProfileInfoKHR</type>*               <name>pProfiles</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVideoFormatInfoKHR">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                          <name>pNext</name></member>
            <member><type>VkImageUsageFlags</type>                                    <name>imageUsage</name></member>
        </type>
        <type category="struct" name="VkVideoFormatPropertiesKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                                                  <name>pNext</name></member>
            <member limittype="exact"><type>VkFormat</type>                                             <name>format</name></member>
            <member limittype="exact"><type>VkComponentMapping</type>                                   <name>componentMapping</name></member>
            <member limittype="bitmask"><type>VkImageCreateFlags</type>                                 <name>imageCreateFlags</name></member>
            <member limittype="exact"><type>VkImageType</type>                                          <name>imageType</name></member>
            <member limittype="exact"><type>VkImageTiling</type>                                        <name>imageTiling</name></member>
            <member limittype="bitmask"><type>VkImageUsageFlags</type>                                  <name>imageUsageFlags</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeQuantizationMapCapabilitiesKHR" returnedonly="true" structextends="VkVideoCapabilitiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_CAPABILITIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member limittype="max"><type>VkExtent2D</type>         <name>maxQuantizationMapExtent</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH264QuantizationMapCapabilitiesKHR" returnedonly="true" structextends="VkVideoCapabilitiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUANTIZATION_MAP_CAPABILITIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member limittype="min"><type>int32_t</type>            <name>minQpDelta</name></member>
            <member limittype="max"><type>int32_t</type>            <name>maxQpDelta</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH265QuantizationMapCapabilitiesKHR" returnedonly="true" structextends="VkVideoCapabilitiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUANTIZATION_MAP_CAPABILITIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member limittype="min"><type>int32_t</type>            <name>minQpDelta</name></member>
            <member limittype="max"><type>int32_t</type>            <name>maxQpDelta</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeAV1QuantizationMapCapabilitiesKHR" returnedonly="true" structextends="VkVideoCapabilitiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUANTIZATION_MAP_CAPABILITIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>int32_t</type>                            <name>minQIndexDelta</name></member>
            <member><type>int32_t</type>                            <name>maxQIndexDelta</name></member>
        </type>
        <type category="struct" name="VkVideoFormatQuantizationMapPropertiesKHR" returnedonly="true" structextends="VkVideoFormatPropertiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_FORMAT_QUANTIZATION_MAP_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member limittype="exact"><type>VkExtent2D</type>       <name>quantizationMapTexelSize</name></member>
        </type>
        <type category="struct" name="VkVideoFormatH265QuantizationMapPropertiesKHR" returnedonly="true" structextends="VkVideoFormatPropertiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_FORMAT_H265_QUANTIZATION_MAP_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member limittype="bitmask"><type>VkVideoEncodeH265CtbSizeFlagsKHR</type> <name>compatibleCtbSizes</name></member>
        </type>
        <type category="struct" name="VkVideoFormatAV1QuantizationMapPropertiesKHR" returnedonly="true" structextends="VkVideoFormatPropertiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_FORMAT_AV1_QUANTIZATION_MAP_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member limittype="bitmask"><type>VkVideoEncodeAV1SuperblockSizeFlagsKHR</type> <name>compatibleSuperblockSizes</name></member>
        </type>
        <type category="struct" name="VkVideoProfileInfoKHR" structextends="VkQueryPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>VkVideoCodecOperationFlagBitsKHR</type>   <name>videoCodecOperation</name></member>
            <member><type>VkVideoChromaSubsamplingFlagsKHR</type>   <name>chromaSubsampling</name></member>
            <member><type>VkVideoComponentBitDepthFlagsKHR</type>   <name>lumaBitDepth</name></member>
            <member optional="true"><type>VkVideoComponentBitDepthFlagsKHR</type> <name>chromaBitDepth</name></member>
        </type>
        <type category="struct" name="VkVideoCapabilitiesKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member limittype="bitmask"><type>VkVideoCapabilityFlagsKHR</type>  <name>flags</name></member>
            <member limittype="min,pot"><type>VkDeviceSize</type>               <name>minBitstreamBufferOffsetAlignment</name></member>
            <member limittype="min,pot"><type>VkDeviceSize</type>               <name>minBitstreamBufferSizeAlignment</name></member>
            <member limittype="min"><type>VkExtent2D</type>                     <name>pictureAccessGranularity</name></member>
            <member limittype="min"><type>VkExtent2D</type>                     <name>minCodedExtent</name></member>
            <member limittype="max"><type>VkExtent2D</type>                     <name>maxCodedExtent</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>maxDpbSlots</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>maxActiveReferencePictures</name></member>
            <member limittype="noauto"><type>VkExtensionProperties</type>       <name>stdHeaderVersion</name></member>
        </type>
        <type category="struct" name="VkVideoSessionMemoryRequirementsKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*             <name>pNext</name></member>
            <member><type>uint32_t</type>                          <name>memoryBindIndex</name></member>
            <member><type>VkMemoryRequirements</type>              <name>memoryRequirements</name></member>
        </type>
        <type category="struct" name="VkBindVideoSessionMemoryInfoKHR">
            <member values="VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*       <name>pNext</name></member>
            <member><type>uint32_t</type>                          <name>memoryBindIndex</name></member>
            <member><type>VkDeviceMemory</type>                    <name>memory</name></member>
            <member><type>VkDeviceSize</type>                      <name>memoryOffset</name></member>
            <member><type>VkDeviceSize</type>                      <name>memorySize</name></member>
        </type>
        <type category="struct" name="VkVideoPictureResourceInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>VkOffset2D</type>         <name>codedOffset</name><comment>The offset to be used for the picture resource, currently only used in field mode</comment></member>
            <member><type>VkExtent2D</type>         <name>codedExtent</name><comment>The extent to be used for the picture resource</comment></member>
            <member><type>uint32_t</type>           <name>baseArrayLayer</name><comment>The first array layer to be accessed for the Decode or Encode Operations</comment></member>
            <member><type>VkImageView</type>        <name>imageViewBinding</name><comment>The ImageView binding of the resource</comment></member>
        </type>
        <type category="struct" name="VkVideoReferenceSlotInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>int32_t</type>                            <name>slotIndex</name><comment>The reference slot index</comment></member>
            <member optional="true">const <type>VkVideoPictureResourceInfoKHR</type>* <name>pPictureResource</name><comment>The reference picture resource</comment></member>
        </type>
        <type category="struct" name="VkVideoDecodeCapabilitiesKHR" returnedonly="true" structextends="VkVideoCapabilitiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                                 <name>pNext</name></member>
            <member limittype="bitmask" noautovalidity="true"><type>VkVideoDecodeCapabilityFlagsKHR</type> <name>flags</name></member>
        </type>
        <type category="struct" name="VkVideoDecodeUsageInfoKHR" structextends="VkVideoProfileInfoKHR,VkQueryPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member optional="true"><type>VkVideoDecodeUsageFlagsKHR</type> <name>videoUsageHints</name></member>
        </type>
        <type category="struct" name="VkVideoDecodeInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member optional="true"><type>VkVideoDecodeFlagsKHR</type>  <name>flags</name></member>
            <member><type>VkBuffer</type>                               <name>srcBuffer</name></member>
            <member><type>VkDeviceSize</type>                           <name>srcBufferOffset</name></member>
            <member><type>VkDeviceSize</type>                           <name>srcBufferRange</name></member>
            <member><type>VkVideoPictureResourceInfoKHR</type>          <name>dstPictureResource</name></member>
            <member optional="true">const <type>VkVideoReferenceSlotInfoKHR</type>* <name>pSetupReferenceSlot</name></member>
            <member optional="true"><type>uint32_t</type>               <name>referenceSlotCount</name></member>
            <member len="referenceSlotCount">const <type>VkVideoReferenceSlotInfoKHR</type>* <name>pReferenceSlots</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVideoMaintenance1FeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>videoMaintenance1</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVideoMaintenance2FeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_2_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>videoMaintenance2</name></member>
        </type>
        <type category="struct" name="VkVideoInlineQueryInfoKHR" structextends="VkVideoDecodeInfoKHR,VkVideoEncodeInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkQueryPool</type>            <name>queryPool</name></member>
            <member><type>uint32_t</type>                               <name>firstQuery</name></member>
            <member><type>uint32_t</type>                               <name>queryCount</name></member>
        </type>
            <comment>Video Decode Codec Standard specific structures</comment>
        <type category="include" name="vk_video/vulkan_video_codec_h264std.h">#include "vk_video/vulkan_video_codec_h264std.h"</type>
        <type requires="vk_video/vulkan_video_codec_h264std.h" name="StdVideoH264ProfileIdc"/>
        <type requires="vk_video/vulkan_video_codec_h264std.h" name="StdVideoH264LevelIdc"/>
        <type category="include" name="vk_video/vulkan_video_codec_h264std_decode.h">#include "vk_video/vulkan_video_codec_h264std_decode.h"</type>
        <type requires="vk_video/vulkan_video_codec_h264std_decode.h" name="StdVideoDecodeH264PictureInfo"/>
        <type requires="vk_video/vulkan_video_codec_h264std_decode.h" name="StdVideoDecodeH264ReferenceInfo"/>
        <type category="struct" name="VkVideoDecodeH264ProfileInfoKHR" structextends="VkVideoProfileInfoKHR,VkQueryPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                  <name>pNext</name></member>
            <member><type>StdVideoH264ProfileIdc</type>                                       <name>stdProfileIdc</name></member>
            <member optional="true"><type>VkVideoDecodeH264PictureLayoutFlagBitsKHR</type>    <name>pictureLayout</name></member>
        </type>
        <type category="struct" name="VkVideoDecodeH264CapabilitiesKHR" returnedonly="true" structextends="VkVideoCapabilitiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member limittype="max"><type>StdVideoH264LevelIdc</type>   <name>maxLevelIdc</name></member>
            <member limittype="noauto"><type>VkOffset2D</type>          <name>fieldOffsetGranularity</name></member>
        </type>
        <type requires="vk_video/vulkan_video_codec_h264std.h" name="StdVideoH264SequenceParameterSet"/>
        <type requires="vk_video/vulkan_video_codec_h264std.h" name="StdVideoH264PictureParameterSet"/>
        <type category="struct" name="VkVideoDecodeH264SessionParametersAddInfoKHR" structextends="VkVideoSessionParametersUpdateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                    <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                                       <name>stdSPSCount</name></member>
            <member len="stdSPSCount">const <type>StdVideoH264SequenceParameterSet</type>*      <name>pStdSPSs</name></member>
            <member optional="true"><type>uint32_t</type>                                       <name>stdPPSCount</name></member>
            <member len="stdPPSCount">const <type>StdVideoH264PictureParameterSet</type>*       <name>pStdPPSs</name><comment>List of Picture Parameters associated with the spsStd, above</comment></member>
        </type>
        <type category="struct" name="VkVideoDecodeH264SessionParametersCreateInfoKHR" structextends="VkVideoSessionParametersCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                               <name>pNext</name></member>
            <member><type>uint32_t</type>                                                                  <name>maxStdSPSCount</name></member>
            <member><type>uint32_t</type>                                                                  <name>maxStdPPSCount</name></member>
            <member optional="true">const <type>VkVideoDecodeH264SessionParametersAddInfoKHR</type>*       <name>pParametersAddInfo</name></member>
        </type>
        <type category="struct" name="VkVideoDecodeH264InlineSessionParametersInfoKHR" structextends="VkVideoDecodeInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_INLINE_SESSION_PARAMETERS_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                    <name>pNext</name></member>
            <member optional="true">const <type>StdVideoH264SequenceParameterSet</type>*        <name>pStdSPS</name></member>
            <member optional="true">const <type>StdVideoH264PictureParameterSet</type>*         <name>pStdPPS</name></member>
        </type>
        <type category="struct" name="VkVideoDecodeH264PictureInfoKHR" structextends="VkVideoDecodeInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*           <name>pNext</name></member>
            <member>const <type>StdVideoDecodeH264PictureInfo</type>*  <name>pStdPictureInfo</name></member>
            <member><type>uint32_t</type>                              <name>sliceCount</name></member>
            <member len="sliceCount">const <type>uint32_t</type>*      <name>pSliceOffsets</name></member>
        </type>
        <type category="struct" name="VkVideoDecodeH264DpbSlotInfoKHR" structextends="VkVideoReferenceSlotInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member>const <type>StdVideoDecodeH264ReferenceInfo</type>* <name>pStdReferenceInfo</name></member>
        </type>
        <type category="include" name="vk_video/vulkan_video_codec_h265std.h">#include "vk_video/vulkan_video_codec_h265std.h"</type>
        <type requires="vk_video/vulkan_video_codec_h265std.h" name="StdVideoH265ProfileIdc"/>
        <type requires="vk_video/vulkan_video_codec_h265std.h" name="StdVideoH265VideoParameterSet"/>
        <type requires="vk_video/vulkan_video_codec_h265std.h" name="StdVideoH265SequenceParameterSet"/>
        <type requires="vk_video/vulkan_video_codec_h265std.h" name="StdVideoH265PictureParameterSet"/>
        <type requires="vk_video/vulkan_video_codec_h265std.h" name="StdVideoH265LevelIdc"/>
        <type category="include" name="vk_video/vulkan_video_codec_h265std_decode.h">#include "vk_video/vulkan_video_codec_h265std_decode.h"</type>
        <type requires="vk_video/vulkan_video_codec_h265std_decode.h" name="StdVideoDecodeH265PictureInfo"/>
        <type requires="vk_video/vulkan_video_codec_h265std_decode.h" name="StdVideoDecodeH265ReferenceInfo"/>
        <type category="struct" name="VkVideoDecodeH265ProfileInfoKHR" structextends="VkVideoProfileInfoKHR,VkQueryPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                    <name>pNext</name></member>
            <member><type>StdVideoH265ProfileIdc</type>         <name>stdProfileIdc</name></member>
        </type>
        <type category="struct" name="VkVideoDecodeH265CapabilitiesKHR" returnedonly="true" structextends="VkVideoCapabilitiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="max"><type>StdVideoH265LevelIdc</type>             <name>maxLevelIdc</name></member>
        </type>
        <type category="struct" name="VkVideoDecodeH265SessionParametersAddInfoKHR" structextends="VkVideoSessionParametersUpdateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                                   <name>stdVPSCount</name></member>
            <member len="stdVPSCount">const <type>StdVideoH265VideoParameterSet</type>*     <name>pStdVPSs</name></member>
            <member optional="true"><type>uint32_t</type>                                   <name>stdSPSCount</name></member>
            <member len="stdSPSCount">const <type>StdVideoH265SequenceParameterSet</type>*  <name>pStdSPSs</name></member>
            <member optional="true"><type>uint32_t</type>                                   <name>stdPPSCount</name></member>
            <member len="stdPPSCount">const <type>StdVideoH265PictureParameterSet</type>*   <name>pStdPPSs</name><comment>List of Picture Parameters associated with the spsStd, above</comment></member>
        </type>
        <type category="struct" name="VkVideoDecodeH265SessionParametersCreateInfoKHR" structextends="VkVideoSessionParametersCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                         <name>pNext</name></member>
            <member><type>uint32_t</type>                                                            <name>maxStdVPSCount</name></member>
            <member><type>uint32_t</type>                                                            <name>maxStdSPSCount</name></member>
            <member><type>uint32_t</type>                                                            <name>maxStdPPSCount</name></member>
            <member optional="true">const <type>VkVideoDecodeH265SessionParametersAddInfoKHR</type>* <name>pParametersAddInfo</name></member>
        </type>
        <type category="struct" name="VkVideoDecodeH265InlineSessionParametersInfoKHR" structextends="VkVideoDecodeInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_INLINE_SESSION_PARAMETERS_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                    <name>pNext</name></member>
            <member optional="true">const <type>StdVideoH265VideoParameterSet</type>*           <name>pStdVPS</name></member>
            <member optional="true">const <type>StdVideoH265SequenceParameterSet</type>*        <name>pStdSPS</name></member>
            <member optional="true">const <type>StdVideoH265PictureParameterSet</type>*         <name>pStdPPS</name></member>
        </type>
        <type category="struct" name="VkVideoDecodeH265PictureInfoKHR" structextends="VkVideoDecodeInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member>const <type>StdVideoDecodeH265PictureInfo</type>*       <name>pStdPictureInfo</name></member>
            <member><type>uint32_t</type>                                   <name>sliceSegmentCount</name></member>
            <member len="sliceSegmentCount">const <type>uint32_t</type>*    <name>pSliceSegmentOffsets</name></member>
        </type>
        <type category="struct" name="VkVideoDecodeH265DpbSlotInfoKHR" structextends="VkVideoReferenceSlotInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*             <name>pNext</name></member>
            <member>const <type>StdVideoDecodeH265ReferenceInfo</type>*  <name>pStdReferenceInfo</name></member>
        </type>
        <type category="include" name="vk_video/vulkan_video_codec_av1std.h">#include "vk_video/vulkan_video_codec_av1std.h"</type>
        <type requires="vk_video/vulkan_video_codec_av1std.h" name="StdVideoAV1Profile"/>
        <type requires="vk_video/vulkan_video_codec_av1std.h" name="StdVideoAV1Level"/>
        <type requires="vk_video/vulkan_video_codec_av1std.h" name="StdVideoAV1SequenceHeader"/>
        <type category="include" name="vk_video/vulkan_video_codec_av1std_decode.h">#include "vk_video/vulkan_video_codec_av1std_decode.h"</type>
        <type requires="vk_video/vulkan_video_codec_av1std_decode.h" name="StdVideoDecodeAV1PictureInfo"/>
        <type requires="vk_video/vulkan_video_codec_av1std_decode.h" name="StdVideoDecodeAV1ReferenceInfo"/>
        <type category="struct" name="VkVideoDecodeAV1ProfileInfoKHR" structextends="VkVideoProfileInfoKHR,VkQueryPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>StdVideoAV1Profile</type>                     <name>stdProfile</name></member>
            <member><type>VkBool32</type>                               <name>filmGrainSupport</name></member>
        </type>
        <type category="struct" name="VkVideoDecodeAV1CapabilitiesKHR" returnedonly="true" structextends="VkVideoCapabilitiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member limittype="max"><type>StdVideoAV1Level</type>       <name>maxLevel</name></member>
        </type>
        <type category="struct" name="VkVideoDecodeAV1SessionParametersCreateInfoKHR" structextends="VkVideoSessionParametersCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member>const <type>StdVideoAV1SequenceHeader</type>*       <name>pStdSequenceHeader</name></member>
        </type>
        <type category="struct" name="VkVideoDecodeAV1InlineSessionParametersInfoKHR" structextends="VkVideoDecodeInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_INLINE_SESSION_PARAMETERS_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                        <name>pNext</name></member>
            <member optional="true">const <type>StdVideoAV1SequenceHeader</type>*   <name>pStdSequenceHeader</name></member>
        </type>
        <type category="struct" name="VkVideoDecodeAV1PictureInfoKHR" structextends="VkVideoDecodeInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member>const <type>StdVideoDecodeAV1PictureInfo</type>*    <name>pStdPictureInfo</name></member>
            <member><type>int32_t</type>                                <name>referenceNameSlotIndices</name>[<enum>VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR</enum>]</member>
            <member><type>uint32_t</type>                               <name>frameHeaderOffset</name></member>
            <member><type>uint32_t</type>                               <name>tileCount</name></member>
            <member len="tileCount">const <type>uint32_t</type>*        <name>pTileOffsets</name></member>
            <member len="tileCount">const <type>uint32_t</type>*        <name>pTileSizes</name></member>
        </type>
        <type category="struct" name="VkVideoDecodeAV1DpbSlotInfoKHR" structextends="VkVideoReferenceSlotInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member>const <type>StdVideoDecodeAV1ReferenceInfo</type>*  <name>pStdReferenceInfo</name></member>
        </type>
        <type category="struct" name="VkVideoSessionCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                   <name>pNext</name></member>
            <member><type>uint32_t</type>                                      <name>queueFamilyIndex</name></member>
            <member optional="true"><type>VkVideoSessionCreateFlagsKHR</type>  <name>flags</name></member>
            <member>const <type>VkVideoProfileInfoKHR</type>*                  <name>pVideoProfile</name></member>
            <member><type>VkFormat</type>                                      <name>pictureFormat</name></member>
            <member><type>VkExtent2D</type>                                    <name>maxCodedExtent</name></member>
            <member><type>VkFormat</type>                                      <name>referencePictureFormat</name></member>
            <member><type>uint32_t</type>                                      <name>maxDpbSlots</name></member>
            <member><type>uint32_t</type>                                      <name>maxActiveReferencePictures</name></member>
            <member>const <type>VkExtensionProperties</type>*                  <name>pStdHeaderVersion</name></member>
        </type>
        <type category="struct" name="VkVideoSessionParametersCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member optional="true"><type>VkVideoSessionParametersCreateFlagsKHR</type> <name>flags</name></member>
            <member optional="true"><type>VkVideoSessionParametersKHR</type>            <name>videoSessionParametersTemplate</name></member>
            <member><type>VkVideoSessionKHR</type>                                      <name>videoSession</name></member>
        </type>
        <type category="struct" name="VkVideoSessionParametersUpdateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                            <name>pNext</name></member>
            <member><type>uint32_t</type>                                               <name>updateSequenceCount</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeSessionParametersGetInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                    <name>pNext</name></member>
            <member><type>VkVideoSessionParametersKHR</type>                    <name>videoSessionParameters</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeSessionParametersFeedbackInfoKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member><type>VkBool32</type>                                       <name>hasOverrides</name></member>
        </type>
        <type category="struct" name="VkVideoBeginCodingInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                             <name>pNext</name></member>
            <member optional="true"><type>VkVideoBeginCodingFlagsKHR</type>              <name>flags</name></member>
            <member><type>VkVideoSessionKHR</type>                                       <name>videoSession</name></member>
            <member optional="true"><type>VkVideoSessionParametersKHR</type>             <name>videoSessionParameters</name></member>
            <member optional="true"><type>uint32_t</type>                                <name>referenceSlotCount</name></member>
            <member len="referenceSlotCount">const <type>VkVideoReferenceSlotInfoKHR</type>* <name>pReferenceSlots</name></member>
        </type>
        <type category="struct" name="VkVideoEndCodingInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                              <name>pNext</name></member>
            <member optional="true"><type>VkVideoEndCodingFlagsKHR</type> <name>flags</name></member>
        </type>
        <type category="struct" name="VkVideoCodingControlInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                    <name>pNext</name></member>
            <member><type>VkVideoCodingControlFlagsKHR</type>                   <name>flags</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeUsageInfoKHR" structextends="VkVideoProfileInfoKHR,VkQueryPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                    <name>pNext</name></member>
            <member optional="true"><type>VkVideoEncodeUsageFlagsKHR</type>     <name>videoUsageHints</name></member>
            <member optional="true"><type>VkVideoEncodeContentFlagsKHR</type>   <name>videoContentHints</name></member>
            <member optional="true"><type>VkVideoEncodeTuningModeKHR</type>     <name>tuningMode</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkVideoEncodeFlagsKHR</type>  <name>flags</name></member>
            <member><type>VkBuffer</type>                               <name>dstBuffer</name></member>
            <member><type>VkDeviceSize</type>                           <name>dstBufferOffset</name></member>
            <member><type>VkDeviceSize</type>                           <name>dstBufferRange</name></member>
            <member><type>VkVideoPictureResourceInfoKHR</type>          <name>srcPictureResource</name></member>
            <member optional="true">const <type>VkVideoReferenceSlotInfoKHR</type>* <name>pSetupReferenceSlot</name></member>
            <member optional="true"><type>uint32_t</type>               <name>referenceSlotCount</name></member>
            <member len="referenceSlotCount">const <type>VkVideoReferenceSlotInfoKHR</type>* <name>pReferenceSlots</name></member>
            <member><type>uint32_t</type>                               <name>precedingExternallyEncodedBytes</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeQuantizationMapInfoKHR" structextends="VkVideoEncodeInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkImageView</type>            <name>quantizationMap</name></member>
            <member><type>VkExtent2D</type>                             <name>quantizationMapExtent</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR" structextends="VkVideoSessionParametersCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_SESSION_PARAMETERS_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkExtent2D</type>                             <name>quantizationMapTexelSize</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUANTIZATION_MAP_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                       <name>pNext</name></member>
            <member><type>VkBool32</type>                                    <name>videoEncodeQuantizationMap</name></member>
        </type>
        <type category="struct" name="VkQueryPoolVideoEncodeFeedbackCreateInfoKHR" structextends="VkQueryPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkVideoEncodeFeedbackFlagsKHR</type>          <name>encodeFeedbackFlags</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeQualityLevelInfoKHR" structextends="VkVideoCodingControlInfoKHR,VkVideoSessionParametersCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>uint32_t</type>                               <name>qualityLevel</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member>const <type>VkVideoProfileInfoKHR</type>*           <name>pVideoProfile</name></member>
            <member><type>uint32_t</type>                               <name>qualityLevel</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeQualityLevelPropertiesKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member><type>VkVideoEncodeRateControlModeFlagBitsKHR</type> <name>preferredRateControlMode</name></member>
            <member><type>uint32_t</type>                               <name>preferredRateControlLayerCount</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeRateControlInfoKHR" structextends="VkVideoCodingControlInfoKHR,VkVideoBeginCodingInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkVideoEncodeRateControlFlagsKHR</type> <name>flags</name></member>
            <member optional="true"><type>VkVideoEncodeRateControlModeFlagBitsKHR</type> <name>rateControlMode</name></member>
            <member optional="true"><type>uint32_t</type>               <name>layerCount</name></member>
            <member len="layerCount">const <type>VkVideoEncodeRateControlLayerInfoKHR</type>* <name>pLayers</name></member>
            <member><type>uint32_t</type>                               <name>virtualBufferSizeInMs</name></member>
            <member><type>uint32_t</type>                               <name>initialVirtualBufferSizeInMs</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeRateControlLayerInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>uint64_t</type>                               <name>averageBitrate</name></member>
            <member><type>uint64_t</type>                               <name>maxBitrate</name></member>
            <member><type>uint32_t</type>                               <name>frameRateNumerator</name></member>
            <member><type>uint32_t</type>                               <name>frameRateDenominator</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeCapabilitiesKHR" returnedonly="true" structextends="VkVideoCapabilitiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                 <name>pNext</name></member>
            <member limittype="bitmask" noautovalidity="true"><type>VkVideoEncodeCapabilityFlagsKHR</type> <name>flags</name></member>
            <member limittype="bitmask"><type>VkVideoEncodeRateControlModeFlagsKHR</type> <name>rateControlModes</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxRateControlLayers</name></member>
            <member limittype="max"><type>uint64_t</type>              <name>maxBitrate</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxQualityLevels</name></member>
            <member limittype="min"><type>VkExtent2D</type>            <name>encodeInputPictureGranularity</name></member>
            <member limittype="bitmask"><type>VkVideoEncodeFeedbackFlagsKHR</type> <name>supportedEncodeFeedbackFlags</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH264CapabilitiesKHR" returnedonly="true" structextends="VkVideoCapabilitiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                 <name>pNext</name></member>
            <member limittype="bitmask" noautovalidity="true"><type>VkVideoEncodeH264CapabilityFlagsKHR</type> <name>flags</name></member>
            <member limittype="max"><type>StdVideoH264LevelIdc</type>  <name>maxLevelIdc</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxSliceCount</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxPPictureL0ReferenceCount</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxBPictureL0ReferenceCount</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxL1ReferenceCount</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxTemporalLayerCount</name></member>
            <member limittype="not"><type>VkBool32</type>              <name>expectDyadicTemporalLayerPattern</name></member>
            <member limittype="min"><type>int32_t</type>               <name>minQp</name></member>
            <member limittype="max"><type>int32_t</type>               <name>maxQp</name></member>
            <member limittype="not"><type>VkBool32</type>              <name>prefersGopRemainingFrames</name></member>
            <member limittype="not"><type>VkBool32</type>              <name>requiresGopRemainingFrames</name></member>
            <member limittype="bitmask" noautovalidity="true"><type>VkVideoEncodeH264StdFlagsKHR</type> <name>stdSyntaxFlags</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH264QualityLevelPropertiesKHR" returnedonly="true" structextends="VkVideoEncodeQualityLevelPropertiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member><type>VkVideoEncodeH264RateControlFlagsKHR</type>   <name>preferredRateControlFlags</name></member>
            <member><type>uint32_t</type>                               <name>preferredGopFrameCount</name></member>
            <member><type>uint32_t</type>                               <name>preferredIdrPeriod</name></member>
            <member><type>uint32_t</type>                               <name>preferredConsecutiveBFrameCount</name></member>
            <member><type>uint32_t</type>                               <name>preferredTemporalLayerCount</name></member>
            <member><type>VkVideoEncodeH264QpKHR</type>                 <name>preferredConstantQp</name></member>
            <member><type>uint32_t</type>                               <name>preferredMaxL0ReferenceCount</name></member>
            <member><type>uint32_t</type>                               <name>preferredMaxL1ReferenceCount</name></member>
            <member><type>VkBool32</type>                               <name>preferredStdEntropyCodingModeFlag</name></member>
        </type>
        <type category="include" name="vk_video/vulkan_video_codec_h264std_encode.h">#include "vk_video/vulkan_video_codec_h264std_encode.h"</type>
        <type requires="vk_video/vulkan_video_codec_h264std_encode.h" name="StdVideoEncodeH264SliceHeader"/>
        <type requires="vk_video/vulkan_video_codec_h264std_encode.h" name="StdVideoEncodeH264PictureInfo"/>
        <type requires="vk_video/vulkan_video_codec_h264std_encode.h" name="StdVideoEncodeH264ReferenceInfo"/>
        <type category="struct" name="VkVideoEncodeH264SessionCreateInfoKHR" structextends="VkVideoSessionCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                               <name>useMaxLevelIdc</name></member>
            <member><type>StdVideoH264LevelIdc</type>                   <name>maxLevelIdc</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH264SessionParametersAddInfoKHR" structextends="VkVideoSessionParametersUpdateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                               <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                                                  <name>stdSPSCount</name></member>
            <member len="stdSPSCount" optional="true">const <type>StdVideoH264SequenceParameterSet</type>* <name>pStdSPSs</name></member>
            <member optional="true"><type>uint32_t</type>                                                  <name>stdPPSCount</name></member>
            <member len="stdPPSCount" optional="true">const <type>StdVideoH264PictureParameterSet</type>*  <name>pStdPPSs</name><comment>List of Picture Parameters associated with the spsStd, above</comment></member>
        </type>
        <type category="struct" name="VkVideoEncodeH264SessionParametersCreateInfoKHR" structextends="VkVideoSessionParametersCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                         <name>pNext</name></member>
            <member><type>uint32_t</type>                                                            <name>maxStdSPSCount</name></member>
            <member><type>uint32_t</type>                                                            <name>maxStdPPSCount</name></member>
            <member optional="true">const <type>VkVideoEncodeH264SessionParametersAddInfoKHR</type>* <name>pParametersAddInfo</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH264SessionParametersGetInfoKHR" structextends="VkVideoEncodeSessionParametersGetInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                               <name>writeStdSPS</name></member>
            <member><type>VkBool32</type>                               <name>writeStdPPS</name></member>
            <member><type>uint32_t</type>                               <name>stdSPSId</name></member>
            <member><type>uint32_t</type>                               <name>stdPPSId</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH264SessionParametersFeedbackInfoKHR" structextends="VkVideoEncodeSessionParametersFeedbackInfoKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member><type>VkBool32</type>                               <name>hasStdSPSOverrides</name></member>
            <member><type>VkBool32</type>                               <name>hasStdPPSOverrides</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH264DpbSlotInfoKHR" structextends="VkVideoReferenceSlotInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                          <name>pNext</name></member>
            <member>const <type>StdVideoEncodeH264ReferenceInfo</type>*                               <name>pStdReferenceInfo</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH264PictureInfoKHR" structextends="VkVideoEncodeInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                        <name>pNext</name></member>
            <member><type>uint32_t</type>                                                           <name>naluSliceEntryCount</name></member>
            <member len="naluSliceEntryCount">const <type>VkVideoEncodeH264NaluSliceInfoKHR</type>* <name>pNaluSliceEntries</name></member>
            <member>const <type>StdVideoEncodeH264PictureInfo</type>*                               <name>pStdPictureInfo</name></member>
            <member><type>VkBool32</type>                                                           <name>generatePrefixNalu</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH264ProfileInfoKHR" structextends="VkVideoProfileInfoKHR,VkQueryPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*             <name>pNext</name></member>
            <member><type>StdVideoH264ProfileIdc</type>                  <name>stdProfileIdc</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH264NaluSliceInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                     <name>pNext</name></member>
            <member><type>int32_t</type>                                         <name>constantQp</name></member>
            <member>const <type>StdVideoEncodeH264SliceHeader</type>*            <name>pStdSliceHeader</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH264RateControlInfoKHR" structextends="VkVideoCodingControlInfoKHR,VkVideoBeginCodingInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                     <name>pNext</name></member>
            <member optional="true"><type>VkVideoEncodeH264RateControlFlagsKHR</type> <name>flags</name></member>
            <member><type>uint32_t</type>                                        <name>gopFrameCount</name></member>
            <member><type>uint32_t</type>                                        <name>idrPeriod</name></member>
            <member><type>uint32_t</type>                                        <name>consecutiveBFrameCount</name></member>
            <member><type>uint32_t</type>                                        <name>temporalLayerCount</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH264QpKHR">
            <member noautovalidity="true"><type>int32_t</type> <name>qpI</name></member>
            <member noautovalidity="true"><type>int32_t</type> <name>qpP</name></member>
            <member noautovalidity="true"><type>int32_t</type> <name>qpB</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH264FrameSizeKHR">
            <member noautovalidity="true"><type>uint32_t</type> <name>frameISize</name></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>framePSize</name></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>frameBSize</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH264GopRemainingFrameInfoKHR" structextends="VkVideoBeginCodingInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                       <name>useGopRemainingFrames</name></member>
            <member><type>uint32_t</type>                       <name>gopRemainingI</name></member>
            <member><type>uint32_t</type>                       <name>gopRemainingP</name></member>
            <member><type>uint32_t</type>                       <name>gopRemainingB</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH264RateControlLayerInfoKHR" structextends="VkVideoEncodeRateControlLayerInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>useMinQp</name></member>
            <member><type>VkVideoEncodeH264QpKHR</type>                          <name>minQp</name></member>
            <member><type>VkBool32</type>                                        <name>useMaxQp</name></member>
            <member><type>VkVideoEncodeH264QpKHR</type>                          <name>maxQp</name></member>
            <member><type>VkBool32</type>                                        <name>useMaxFrameSize</name></member>
            <member><type>VkVideoEncodeH264FrameSizeKHR</type>                   <name>maxFrameSize</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH265CapabilitiesKHR" returnedonly="true" structextends="VkVideoCapabilitiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                 <name>pNext</name></member>
            <member limittype="bitmask" noautovalidity="true"><type>VkVideoEncodeH265CapabilityFlagsKHR</type> <name>flags</name></member>
            <member limittype="max"><type>StdVideoH265LevelIdc</type>  <name>maxLevelIdc</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxSliceSegmentCount</name></member>
            <member limittype="max"><type>VkExtent2D</type>            <name>maxTiles</name></member>
            <member limittype="bitmask"><type>VkVideoEncodeH265CtbSizeFlagsKHR</type> <name>ctbSizes</name></member>
            <member limittype="bitmask"><type>VkVideoEncodeH265TransformBlockSizeFlagsKHR</type> <name>transformBlockSizes</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxPPictureL0ReferenceCount</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxBPictureL0ReferenceCount</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxL1ReferenceCount</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxSubLayerCount</name></member>
            <member limittype="not"><type>VkBool32</type>              <name>expectDyadicTemporalSubLayerPattern</name></member>
            <member limittype="min"><type>int32_t</type>               <name>minQp</name></member>
            <member limittype="max"><type>int32_t</type>               <name>maxQp</name></member>
            <member limittype="not"><type>VkBool32</type>              <name>prefersGopRemainingFrames</name></member>
            <member limittype="not"><type>VkBool32</type>              <name>requiresGopRemainingFrames</name></member>
            <member limittype="bitmask" noautovalidity="true"><type>VkVideoEncodeH265StdFlagsKHR</type> <name>stdSyntaxFlags</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH265QualityLevelPropertiesKHR" returnedonly="true" structextends="VkVideoEncodeQualityLevelPropertiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member><type>VkVideoEncodeH265RateControlFlagsKHR</type>   <name>preferredRateControlFlags</name></member>
            <member><type>uint32_t</type>                               <name>preferredGopFrameCount</name></member>
            <member><type>uint32_t</type>                               <name>preferredIdrPeriod</name></member>
            <member><type>uint32_t</type>                               <name>preferredConsecutiveBFrameCount</name></member>
            <member><type>uint32_t</type>                               <name>preferredSubLayerCount</name></member>
            <member><type>VkVideoEncodeH265QpKHR</type>                 <name>preferredConstantQp</name></member>
            <member><type>uint32_t</type>                               <name>preferredMaxL0ReferenceCount</name></member>
            <member><type>uint32_t</type>                               <name>preferredMaxL1ReferenceCount</name></member>
        </type>
        <type category="include" name="vk_video/vulkan_video_codec_h265std_encode.h">#include "vk_video/vulkan_video_codec_h265std_encode.h"</type>
        <type requires="vk_video/vulkan_video_codec_h265std_encode.h" name="StdVideoEncodeH265PictureInfo"/>
        <type requires="vk_video/vulkan_video_codec_h265std_encode.h" name="StdVideoEncodeH265SliceSegmentHeader"/>
        <type requires="vk_video/vulkan_video_codec_h265std_encode.h" name="StdVideoEncodeH265ReferenceInfo"/>
        <type category="struct" name="VkVideoEncodeH265SessionCreateInfoKHR" structextends="VkVideoSessionCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                               <name>useMaxLevelIdc</name></member>
            <member><type>StdVideoH265LevelIdc</type>                   <name>maxLevelIdc</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH265SessionParametersAddInfoKHR" structextends="VkVideoSessionParametersUpdateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                               <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                                                  <name>stdVPSCount</name></member>
            <member len="stdVPSCount" optional="true">const <type>StdVideoH265VideoParameterSet</type>*    <name>pStdVPSs</name></member>
            <member optional="true"><type>uint32_t</type>                                                  <name>stdSPSCount</name></member>
            <member len="stdSPSCount" optional="true">const <type>StdVideoH265SequenceParameterSet</type>* <name>pStdSPSs</name></member>
            <member optional="true"><type>uint32_t</type>                                                  <name>stdPPSCount</name></member>
            <member len="stdPPSCount" optional="true">const <type>StdVideoH265PictureParameterSet</type>*  <name>pStdPPSs</name><comment>List of Picture Parameters associated with the spsStd, above</comment></member>
        </type>
        <type category="struct" name="VkVideoEncodeH265SessionParametersCreateInfoKHR" structextends="VkVideoSessionParametersCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                         <name>pNext</name></member>
            <member><type>uint32_t</type>                                                            <name>maxStdVPSCount</name></member>
            <member><type>uint32_t</type>                                                            <name>maxStdSPSCount</name></member>
            <member><type>uint32_t</type>                                                            <name>maxStdPPSCount</name></member>
            <member optional="true">const <type>VkVideoEncodeH265SessionParametersAddInfoKHR</type>* <name>pParametersAddInfo</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH265SessionParametersGetInfoKHR" structextends="VkVideoEncodeSessionParametersGetInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                               <name>writeStdVPS</name></member>
            <member><type>VkBool32</type>                               <name>writeStdSPS</name></member>
            <member><type>VkBool32</type>                               <name>writeStdPPS</name></member>
            <member><type>uint32_t</type>                               <name>stdVPSId</name></member>
            <member><type>uint32_t</type>                               <name>stdSPSId</name></member>
            <member><type>uint32_t</type>                               <name>stdPPSId</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH265SessionParametersFeedbackInfoKHR" structextends="VkVideoEncodeSessionParametersFeedbackInfoKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member><type>VkBool32</type>                               <name>hasStdVPSOverrides</name></member>
            <member><type>VkBool32</type>                               <name>hasStdSPSOverrides</name></member>
            <member><type>VkBool32</type>                               <name>hasStdPPSOverrides</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH265PictureInfoKHR" structextends="VkVideoEncodeInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                       <name>pNext</name></member>
            <member><type>uint32_t</type>                                                          <name>naluSliceSegmentEntryCount</name></member>
            <member len="naluSliceSegmentEntryCount">const <type>VkVideoEncodeH265NaluSliceSegmentInfoKHR</type>* <name>pNaluSliceSegmentEntries</name></member>
            <member>const <type>StdVideoEncodeH265PictureInfo</type>*                              <name>pStdPictureInfo</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH265NaluSliceSegmentInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                <name>pNext</name></member>
            <member><type>int32_t</type>                                                    <name>constantQp</name></member>
            <member>const <type>StdVideoEncodeH265SliceSegmentHeader</type>*                <name>pStdSliceSegmentHeader</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH265RateControlInfoKHR" structextends="VkVideoCodingControlInfoKHR,VkVideoBeginCodingInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                     <name>pNext</name></member>
            <member optional="true"><type>VkVideoEncodeH265RateControlFlagsKHR</type> <name>flags</name></member>
            <member><type>uint32_t</type>                                        <name>gopFrameCount</name></member>
            <member><type>uint32_t</type>                                        <name>idrPeriod</name></member>
            <member><type>uint32_t</type>                                        <name>consecutiveBFrameCount</name></member>
            <member><type>uint32_t</type>                                        <name>subLayerCount</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH265QpKHR">
            <member noautovalidity="true"><type>int32_t</type> <name>qpI</name></member>
            <member noautovalidity="true"><type>int32_t</type> <name>qpP</name></member>
            <member noautovalidity="true"><type>int32_t</type> <name>qpB</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH265FrameSizeKHR">
            <member noautovalidity="true"><type>uint32_t</type> <name>frameISize</name></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>framePSize</name></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>frameBSize</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH265GopRemainingFrameInfoKHR" structextends="VkVideoBeginCodingInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                       <name>useGopRemainingFrames</name></member>
            <member><type>uint32_t</type>                       <name>gopRemainingI</name></member>
            <member><type>uint32_t</type>                       <name>gopRemainingP</name></member>
            <member><type>uint32_t</type>                       <name>gopRemainingB</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH265RateControlLayerInfoKHR" structextends="VkVideoEncodeRateControlLayerInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>useMinQp</name></member>
            <member><type>VkVideoEncodeH265QpKHR</type>                          <name>minQp</name></member>
            <member><type>VkBool32</type>                                        <name>useMaxQp</name></member>
            <member><type>VkVideoEncodeH265QpKHR</type>                          <name>maxQp</name></member>
            <member><type>VkBool32</type>                                        <name>useMaxFrameSize</name></member>
            <member><type>VkVideoEncodeH265FrameSizeKHR</type>                   <name>maxFrameSize</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH265ProfileInfoKHR" structextends="VkVideoProfileInfoKHR,VkQueryPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*    <name>pNext</name></member>
            <member><type>StdVideoH265ProfileIdc</type>         <name>stdProfileIdc</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeH265DpbSlotInfoKHR" structextends="VkVideoReferenceSlotInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*              <name>pNext</name></member>
            <member>const <type>StdVideoEncodeH265ReferenceInfo</type>*   <name>pStdReferenceInfo</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeAV1CapabilitiesKHR" returnedonly="true" structextends="VkVideoCapabilitiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_CAPABILITIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                 <name>pNext</name></member>
            <member limittype="bitmask" noautovalidity="true"><type>VkVideoEncodeAV1CapabilityFlagsKHR</type> <name>flags</name></member>
            <member limittype="max"><type>StdVideoAV1Level</type>      <name>maxLevel</name></member>
            <member limittype="min,pot"><type>VkExtent2D</type>        <name>codedPictureAlignment</name></member>
            <member limittype="max"><type>VkExtent2D</type>            <name>maxTiles</name></member>
            <member limittype="min"><type>VkExtent2D</type>            <name>minTileSize</name></member>
            <member limittype="max"><type>VkExtent2D</type>            <name>maxTileSize</name></member>
            <member limittype="bitmask"><type>VkVideoEncodeAV1SuperblockSizeFlagsKHR</type> <name>superblockSizes</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxSingleReferenceCount</name></member>
            <member limittype="bitmask"><type>uint32_t</type>          <name>singleReferenceNameMask</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxUnidirectionalCompoundReferenceCount</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxUnidirectionalCompoundGroup1ReferenceCount</name></member>
            <member limittype="bitmask"><type>uint32_t</type>          <name>unidirectionalCompoundReferenceNameMask</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxBidirectionalCompoundReferenceCount</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxBidirectionalCompoundGroup1ReferenceCount</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxBidirectionalCompoundGroup2ReferenceCount</name></member>
            <member limittype="bitmask"><type>uint32_t</type>          <name>bidirectionalCompoundReferenceNameMask</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxTemporalLayerCount</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxSpatialLayerCount</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxOperatingPoints</name></member>
            <member limittype="min"><type>uint32_t</type>              <name>minQIndex</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>maxQIndex</name></member>
            <member limittype="not"><type>VkBool32</type>              <name>prefersGopRemainingFrames</name></member>
            <member limittype="not"><type>VkBool32</type>              <name>requiresGopRemainingFrames</name></member>
            <member limittype="bitmask" noautovalidity="true"><type>VkVideoEncodeAV1StdFlagsKHR</type> <name>stdSyntaxFlags</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeAV1QualityLevelPropertiesKHR" returnedonly="true" structextends="VkVideoEncodeQualityLevelPropertiesKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUALITY_LEVEL_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                  <name>pNext</name></member>
            <member><type>VkVideoEncodeAV1RateControlFlagsKHR</type>    <name>preferredRateControlFlags</name></member>
            <member><type>uint32_t</type>                               <name>preferredGopFrameCount</name></member>
            <member><type>uint32_t</type>                               <name>preferredKeyFramePeriod</name></member>
            <member><type>uint32_t</type>                               <name>preferredConsecutiveBipredictiveFrameCount</name></member>
            <member><type>uint32_t</type>                               <name>preferredTemporalLayerCount</name></member>
            <member><type>VkVideoEncodeAV1QIndexKHR</type>              <name>preferredConstantQIndex</name></member>
            <member><type>uint32_t</type>                               <name>preferredMaxSingleReferenceCount</name></member>
            <member><type>uint32_t</type>                               <name>preferredSingleReferenceNameMask</name></member>
            <member><type>uint32_t</type>                               <name>preferredMaxUnidirectionalCompoundReferenceCount</name></member>
            <member><type>uint32_t</type>                               <name>preferredMaxUnidirectionalCompoundGroup1ReferenceCount</name></member>
            <member><type>uint32_t</type>                               <name>preferredUnidirectionalCompoundReferenceNameMask</name></member>
            <member><type>uint32_t</type>                               <name>preferredMaxBidirectionalCompoundReferenceCount</name></member>
            <member><type>uint32_t</type>                               <name>preferredMaxBidirectionalCompoundGroup1ReferenceCount</name></member>
            <member><type>uint32_t</type>                               <name>preferredMaxBidirectionalCompoundGroup2ReferenceCount</name></member>
            <member><type>uint32_t</type>                               <name>preferredBidirectionalCompoundReferenceNameMask</name></member>
        </type>
        <type category="include" name="vk_video/vulkan_video_codec_av1std_encode.h">#include "vk_video/vulkan_video_codec_av1std_encode.h"</type>
        <type requires="vk_video/vulkan_video_codec_av1std_encode.h" name="StdVideoEncodeAV1ExtensionHeader"/>
        <type requires="vk_video/vulkan_video_codec_av1std_encode.h" name="StdVideoEncodeAV1DecoderModelInfo"/>
        <type requires="vk_video/vulkan_video_codec_av1std_encode.h" name="StdVideoEncodeAV1OperatingPointInfo"/>
        <type requires="vk_video/vulkan_video_codec_av1std_encode.h" name="StdVideoEncodeAV1PictureInfo"/>
        <type requires="vk_video/vulkan_video_codec_av1std_encode.h" name="StdVideoEncodeAV1ReferenceInfo"/>
        <type category="struct" name="VkPhysicalDeviceVideoEncodeAV1FeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_AV1_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>videoEncodeAV1</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeAV1SessionCreateInfoKHR" structextends="VkVideoSessionCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                               <name>useMaxLevel</name></member>
            <member><type>StdVideoAV1Level</type>                       <name>maxLevel</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeAV1SessionParametersCreateInfoKHR" structextends="VkVideoSessionParametersCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member>const <type>StdVideoAV1SequenceHeader</type>*       <name>pStdSequenceHeader</name></member>
            <member optional="true">const <type>StdVideoEncodeAV1DecoderModelInfo</type>* <name>pStdDecoderModelInfo</name></member>
            <member optional="true"><type>uint32_t</type>               <name>stdOperatingPointCount</name></member>
            <member optional="true" len="stdOperatingPointCount">const <type>StdVideoEncodeAV1OperatingPointInfo</type>* <name>pStdOperatingPoints</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeAV1DpbSlotInfoKHR" structextends="VkVideoReferenceSlotInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_DPB_SLOT_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member>const <type>StdVideoEncodeAV1ReferenceInfo</type>*  <name>pStdReferenceInfo</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeAV1PictureInfoKHR" structextends="VkVideoEncodeInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PICTURE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkVideoEncodeAV1PredictionModeKHR</type>      <name>predictionMode</name></member>
            <member><type>VkVideoEncodeAV1RateControlGroupKHR</type>    <name>rateControlGroup</name></member>
            <member><type>uint32_t</type>                               <name>constantQIndex</name></member>
            <member>const <type>StdVideoEncodeAV1PictureInfo</type>*    <name>pStdPictureInfo</name></member>
            <member><type>int32_t</type>                                <name>referenceNameSlotIndices</name>[<enum>VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR</enum>]</member>
            <member><type>VkBool32</type>                               <name>primaryReferenceCdfOnly</name></member>
            <member><type>VkBool32</type>                               <name>generateObuExtensionHeader</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeAV1ProfileInfoKHR" structextends="VkVideoProfileInfoKHR,VkQueryPoolCreateInfo">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PROFILE_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>StdVideoAV1Profile</type>                     <name>stdProfile</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeAV1RateControlInfoKHR" structextends="VkVideoCodingControlInfoKHR,VkVideoBeginCodingInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkVideoEncodeAV1RateControlFlagsKHR</type> <name>flags</name></member>
            <member><type>uint32_t</type>                               <name>gopFrameCount</name></member>
            <member><type>uint32_t</type>                               <name>keyFramePeriod</name></member>
            <member><type>uint32_t</type>                               <name>consecutiveBipredictiveFrameCount</name></member>
            <member><type>uint32_t</type>                               <name>temporalLayerCount</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeAV1QIndexKHR">
            <member noautovalidity="true"><type>uint32_t</type> <name>intraQIndex</name></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>predictiveQIndex</name></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>bipredictiveQIndex</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeAV1FrameSizeKHR">
            <member noautovalidity="true"><type>uint32_t</type> <name>intraFrameSize</name></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>predictiveFrameSize</name></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>bipredictiveFrameSize</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeAV1GopRemainingFrameInfoKHR" structextends="VkVideoBeginCodingInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_GOP_REMAINING_FRAME_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                       <name>useGopRemainingFrames</name></member>
            <member><type>uint32_t</type>                       <name>gopRemainingIntra</name></member>
            <member><type>uint32_t</type>                       <name>gopRemainingPredictive</name></member>
            <member><type>uint32_t</type>                       <name>gopRemainingBipredictive</name></member>
        </type>
        <type category="struct" name="VkVideoEncodeAV1RateControlLayerInfoKHR" structextends="VkVideoEncodeRateControlLayerInfoKHR">
            <member values="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_LAYER_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                               <name>useMinQIndex</name></member>
            <member><type>VkVideoEncodeAV1QIndexKHR</type>              <name>minQIndex</name></member>
            <member><type>VkBool32</type>                               <name>useMaxQIndex</name></member>
            <member><type>VkVideoEncodeAV1QIndexKHR</type>              <name>maxQIndex</name></member>
            <member><type>VkBool32</type>                               <name>useMaxFrameSize</name></member>
            <member><type>VkVideoEncodeAV1FrameSizeKHR</type>           <name>maxFrameSize</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceInheritedViewportScissorFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>inheritedViewportScissor2D</name></member>
        </type>
        <type category="struct" name="VkCommandBufferInheritanceViewportScissorInfoNV" structextends="VkCommandBufferInheritanceInfo">
            <member values="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                    <name>pNext</name></member>
            <member><type>VkBool32</type>                                       <name>viewportScissor2D</name></member>
            <member><type>uint32_t</type>                                       <name>viewportDepthCount</name></member>
            <member noautovalidity="true">const <type>VkViewport</type>*        <name>pViewportDepths</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                     <name>ycbcr2plane444Formats</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceProvokingVertexFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>provokingVertexLast</name></member>
            <member><type>VkBool32</type>                           <name>transformFeedbackPreservesProvokingVertex</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceProvokingVertexPropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                            <name>provokingVertexModePerPipeline</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                            <name>transformFeedbackPreservesTriangleFanProvokingVertex</name></member>
        </type>
        <type category="struct" name="VkPipelineRasterizationProvokingVertexStateCreateInfoEXT" structextends="VkPipelineRasterizationStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                        <name>pNext</name></member>
            <member><type>VkProvokingVertexModeEXT</type>           <name>provokingVertexMode</name></member>
        </type>
        <type category="struct" name="VkCuModuleCreateInfoNVX">
            <member values="VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>size_t</type>                 <name>dataSize</name></member>
            <member len="dataSize">const <type>void</type>*             <name>pData</name></member>
        </type>
        <type category="struct" name="VkCuModuleTexturingModeCreateInfoNVX" structextends="VkCuModuleCreateInfoNVX">
            <member values="VK_STRUCTURE_TYPE_CU_MODULE_TEXTURING_MODE_CREATE_INFO_NVX"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type> <name>use64bitTexturing</name></member>
        </type>
        <type category="struct" name="VkCuFunctionCreateInfoNVX">
            <member values="VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                        <name>pNext</name></member>
            <member><type>VkCuModuleNVX</type>                      <name>module</name></member>
            <member len="null-terminated">const <type>char</type>*  <name>pName</name></member>
        </type>
        <type category="struct" name="VkCuLaunchInfoNVX">
            <member values="VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkCuFunctionNVX</type>        <name>function</name></member>
            <member><type>uint32_t</type>               <name>gridDimX</name></member>
            <member><type>uint32_t</type>               <name>gridDimY</name></member>
            <member><type>uint32_t</type>               <name>gridDimZ</name></member>
            <member><type>uint32_t</type>               <name>blockDimX</name></member>
            <member><type>uint32_t</type>               <name>blockDimY</name></member>
            <member><type>uint32_t</type>               <name>blockDimZ</name></member>
            <member><type>uint32_t</type>               <name>sharedMemBytes</name></member>
            <member optional="true"><type>size_t</type>                 <name>paramCount</name></member>
            <member len="paramCount">const <type>void</type>* const *    <name>pParams</name></member>
            <member optional="true"><type>size_t</type>                 <name>extraCount</name></member>
            <member len="extraCount">const <type>void</type>* const *    <name>pExtras</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDescriptorBufferFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>descriptorBuffer</name></member>
            <member><type>VkBool32</type>                           <name>descriptorBufferCaptureReplay</name></member>
            <member><type>VkBool32</type>                           <name>descriptorBufferImageLayoutIgnored</name></member>
            <member><type>VkBool32</type>                           <name>descriptorBufferPushDescriptors</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDescriptorBufferPropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member limittype="noauto"><type>VkBool32</type>                         <name>combinedImageSamplerDescriptorSingleArray</name></member>
            <member limittype="noauto"><type>VkBool32</type>                         <name>bufferlessPushDescriptors</name></member>
            <member limittype="noauto"><type>VkBool32</type>                         <name>allowSamplerImageViewPostSubmitCreation</name></member>
            <member limittype="noauto"><type>VkDeviceSize</type>                     <name>descriptorBufferOffsetAlignment</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxDescriptorBufferBindings</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxResourceDescriptorBufferBindings</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxSamplerDescriptorBufferBindings</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxEmbeddedImmutableSamplerBindings</name></member>
            <member limittype="max"><type>uint32_t</type>                            <name>maxEmbeddedImmutableSamplers</name></member>
            <member limittype="noauto"><type>size_t</type>                           <name>bufferCaptureReplayDescriptorDataSize</name></member>
            <member limittype="noauto"><type>size_t</type>                           <name>imageCaptureReplayDescriptorDataSize</name></member>
            <member limittype="noauto"><type>size_t</type>                           <name>imageViewCaptureReplayDescriptorDataSize</name></member>
            <member limittype="noauto"><type>size_t</type>                           <name>samplerCaptureReplayDescriptorDataSize</name></member>
            <member limittype="noauto"><type>size_t</type>                           <name>accelerationStructureCaptureReplayDescriptorDataSize</name></member>
            <member limittype="max"><type>size_t</type>                              <name>samplerDescriptorSize</name></member>
            <member limittype="max"><type>size_t</type>                              <name>combinedImageSamplerDescriptorSize</name></member>
            <member limittype="max"><type>size_t</type>                              <name>sampledImageDescriptorSize</name></member>
            <member limittype="max"><type>size_t</type>                              <name>storageImageDescriptorSize</name></member>
            <member limittype="max"><type>size_t</type>                              <name>uniformTexelBufferDescriptorSize</name></member>
            <member limittype="max"><type>size_t</type>                              <name>robustUniformTexelBufferDescriptorSize</name></member>
            <member limittype="max"><type>size_t</type>                              <name>storageTexelBufferDescriptorSize</name></member>
            <member limittype="max"><type>size_t</type>                              <name>robustStorageTexelBufferDescriptorSize</name></member>
            <member limittype="max"><type>size_t</type>                              <name>uniformBufferDescriptorSize</name></member>
            <member limittype="max"><type>size_t</type>                              <name>robustUniformBufferDescriptorSize</name></member>
            <member limittype="max"><type>size_t</type>                              <name>storageBufferDescriptorSize</name></member>
            <member limittype="max"><type>size_t</type>                              <name>robustStorageBufferDescriptorSize</name></member>
            <member limittype="max"><type>size_t</type>                              <name>inputAttachmentDescriptorSize</name></member>
            <member limittype="max"><type>size_t</type>                              <name>accelerationStructureDescriptorSize</name></member>
            <member limittype="max"><type>VkDeviceSize</type>                        <name>maxSamplerDescriptorBufferRange</name></member>
            <member limittype="max"><type>VkDeviceSize</type>                        <name>maxResourceDescriptorBufferRange</name></member>
            <member limittype="max"><type>VkDeviceSize</type>                        <name>samplerDescriptorBufferAddressSpaceSize</name></member>
            <member limittype="max"><type>VkDeviceSize</type>                        <name>resourceDescriptorBufferAddressSpaceSize</name></member>
            <member limittype="max"><type>VkDeviceSize</type>                        <name>descriptorBufferAddressSpaceSize</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member limittype="max"><type>size_t</type>                              <name>combinedImageSamplerDensityMapDescriptorSize</name></member>
        </type>
        <type category="struct" name="VkDescriptorAddressInfoEXT">
            <member values="VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                   <name>pNext</name></member>
            <member><type>VkDeviceAddress</type>                         <name>address</name></member>
            <member><type>VkDeviceSize</type>                            <name>range</name></member>
            <member><type>VkFormat</type>                                <name>format</name></member>
        </type>
        <type category="struct" name="VkDescriptorBufferBindingInfoEXT">
            <member values="VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*             <name>pNext</name></member>
            <member><type>VkDeviceAddress</type>                         <name>address</name></member>
            <member optional="true" noautovalidity="true"><type>VkBufferUsageFlags</type> <name>usage</name></member>
        </type>
        <type category="struct" name="VkDescriptorBufferBindingPushDescriptorBufferHandleEXT" structextends="VkDescriptorBufferBindingInfoEXT">
            <member values="VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*             <name>pNext</name></member>
            <member><type>VkBuffer</type>                                <name>buffer</name></member>
        </type>
        <type category="union" name="VkDescriptorDataEXT">
            <member selection="VK_DESCRIPTOR_TYPE_SAMPLER">const <type>VkSampler</type>*                                                     <name>pSampler</name></member>
            <member selection="VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER">const <type>VkDescriptorImageInfo</type>*                          <name>pCombinedImageSampler</name></member>
            <member selection="VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT">const <type>VkDescriptorImageInfo</type>*                                <name>pInputAttachmentImage</name></member>
            <member selection="VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE" optional="true">const <type>VkDescriptorImageInfo</type>*                   <name>pSampledImage</name></member>
            <member selection="VK_DESCRIPTOR_TYPE_STORAGE_IMAGE" optional="true">const <type>VkDescriptorImageInfo</type>*                   <name>pStorageImage</name></member>
            <member selection="VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER" optional="true">const <type>VkDescriptorAddressInfoEXT</type>*       <name>pUniformTexelBuffer</name></member>
            <member selection="VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER" optional="true">const <type>VkDescriptorAddressInfoEXT</type>*       <name>pStorageTexelBuffer</name></member>
            <member selection="VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER" optional="true">const <type>VkDescriptorAddressInfoEXT</type>*             <name>pUniformBuffer</name></member>
            <member selection="VK_DESCRIPTOR_TYPE_STORAGE_BUFFER" optional="true">const <type>VkDescriptorAddressInfoEXT</type>*             <name>pStorageBuffer</name></member>
            <member selection="VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR,VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV"><type>VkDeviceAddress</type> <name>accelerationStructure</name></member>
        </type>
        <type category="struct" name="VkDescriptorGetInfoEXT">
            <member values="VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkDescriptorType</type>       <name>type</name></member>
            <member selector="type" noautovalidity="true"><type>VkDescriptorDataEXT</type>  <name>data</name></member>
        </type>
        <type category="struct" name="VkBufferCaptureDescriptorDataInfoEXT">
            <member values="VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkBuffer</type>               <name>buffer</name></member>
        </type>
        <type category="struct" name="VkImageCaptureDescriptorDataInfoEXT">
            <member values="VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkImage</type>                <name>image</name></member>
        </type>
        <type category="struct" name="VkImageViewCaptureDescriptorDataInfoEXT">
            <member values="VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkImageView</type>                <name>imageView</name></member>
        </type>
        <type category="struct" name="VkSamplerCaptureDescriptorDataInfoEXT">
            <member values="VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkSampler</type>              <name>sampler</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureCaptureDescriptorDataInfoEXT">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkAccelerationStructureKHR</type>             <name>accelerationStructure</name></member>
            <member optional="true"><type>VkAccelerationStructureNV</type>              <name>accelerationStructureNV</name></member>
        </type>
        <type category="struct" name="VkOpaqueCaptureDescriptorDataCreateInfoEXT" structextends="VkBufferCreateInfo,VkImageCreateInfo,VkImageViewCreateInfo,VkSamplerCreateInfo,VkAccelerationStructureCreateInfoKHR,VkAccelerationStructureCreateInfoNV">
            <member values="VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member>const <type>void</type>*            <name>opaqueCaptureDescriptorData</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderIntegerDotProductFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>shaderIntegerDotProduct</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR" alias="VkPhysicalDeviceShaderIntegerDotProductFeatures"/>
        <type category="struct" name="VkPhysicalDeviceShaderIntegerDotProductProperties" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*               <name>pNext</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProduct8BitUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProduct8BitSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProduct8BitMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProduct4x8BitPackedUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProduct4x8BitPackedSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProduct4x8BitPackedMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProduct16BitUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProduct16BitSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProduct16BitMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProduct32BitUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProduct32BitSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProduct32BitMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProduct64BitUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProduct64BitSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProduct64BitMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProductAccumulatingSaturating8BitUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProductAccumulatingSaturating8BitSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProductAccumulatingSaturating16BitUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProductAccumulatingSaturating16BitSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProductAccumulatingSaturating32BitUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProductAccumulatingSaturating32BitSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProductAccumulatingSaturating64BitUnsignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProductAccumulatingSaturating64BitSignedAccelerated</name></member>
            <member limittype="bitmask"><type>VkBool32</type>        <name>integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR" alias="VkPhysicalDeviceShaderIntegerDotProductProperties"/>
        <type category="struct" name="VkPhysicalDeviceDrmPropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member limittype="bitmask"><type>VkBool32</type> <name>hasPrimary</name></member>
            <member limittype="bitmask"><type>VkBool32</type> <name>hasRender</name></member>
            <member limittype="noauto"><type>int64_t</type> <name>primaryMajor</name></member>
            <member limittype="noauto"><type>int64_t</type> <name>primaryMinor</name></member>
            <member limittype="noauto"><type>int64_t</type> <name>renderMajor</name></member>
            <member limittype="noauto"><type>int64_t</type> <name>renderMinor</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*  <name>pNext</name></member>
            <member><type>VkBool32</type>               <name>fragmentShaderBarycentric</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*  <name>pNext</name></member>
            <member limittype="bitmask"><type>VkBool32</type>              <name>triStripVertexOrderIndependentOfProvokingVertex</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRayTracingMotionBlurFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>rayTracingMotionBlur</name></member>
            <member><type>VkBool32</type>                           <name>rayTracingMotionBlurPipelineTraceRaysIndirect</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRayTracingValidationFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                              <name>pNext</name></member>
            <member><type>VkBool32</type>                                           <name>rayTracingValidation</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_LINEAR_SWEPT_SPHERES_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*  <name>pNext</name></member>
            <member><type>VkBool32</type>                                     <name>spheres</name></member>
            <member><type>VkBool32</type>                                     <name>linearSweptSpheres</name></member>
        </type>
        <type name="VkAccelerationStructureMotionInstanceTypeNV" category="enum"/>
        <type category="struct" name="VkAccelerationStructureGeometryMotionTrianglesDataNV" structextends="VkAccelerationStructureGeometryTrianglesDataKHR">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                   <name>pNext</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstKHR</type>                 <name>vertexData</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureMotionInfoNV" structextends="VkAccelerationStructureCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                    <name>pNext</name></member>
            <member><type>uint32_t</type>                                       <name>maxInstances</name></member>
            <member optional="true"><type>VkAccelerationStructureMotionInfoFlagsNV</type> <name>flags</name></member>
        </type>
        <type category="struct" name="VkSRTDataNV">
            <member><type>float</type> <name>sx</name></member>
            <member><type>float</type> <name>a</name></member>
            <member><type>float</type> <name>b</name></member>
            <member><type>float</type> <name>pvx</name></member>
            <member><type>float</type> <name>sy</name></member>
            <member><type>float</type> <name>c</name></member>
            <member><type>float</type> <name>pvy</name></member>
            <member><type>float</type> <name>sz</name></member>
            <member><type>float</type> <name>pvz</name></member>
            <member><type>float</type> <name>qx</name></member>
            <member><type>float</type> <name>qy</name></member>
            <member><type>float</type> <name>qz</name></member>
            <member><type>float</type> <name>qw</name></member>
            <member><type>float</type> <name>tx</name></member>
            <member><type>float</type> <name>ty</name></member>
            <member><type>float</type> <name>tz</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureSRTMotionInstanceNV">
            <comment>The bitfields in this structure are non-normative since bitfield ordering is implementation-defined in C. The specification defines the normative layout.</comment>
            <member><type>VkSRTDataNV</type>                                             <name>transformT0</name></member>
            <member><type>VkSRTDataNV</type>                                             <name>transformT1</name></member>
            <member><type>uint32_t</type>                                                <name>instanceCustomIndex</name>:24</member>
            <member><type>uint32_t</type>                                                <name>mask</name>:8</member>
            <member><type>uint32_t</type>                                                <name>instanceShaderBindingTableRecordOffset</name>:24</member>
            <member optional="true"><type>VkGeometryInstanceFlagsKHR</type>              <name>flags</name>:8</member>
            <member><type>uint64_t</type>                                                <name>accelerationStructureReference</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureMatrixMotionInstanceNV">
            <comment>The bitfields in this structure are non-normative since bitfield ordering is implementation-defined in C. The specification defines the normative layout.</comment>
            <member><type>VkTransformMatrixKHR</type>                                    <name>transformT0</name></member>
            <member><type>VkTransformMatrixKHR</type>                                    <name>transformT1</name></member>
            <member><type>uint32_t</type>                                                <name>instanceCustomIndex</name>:24</member>
            <member><type>uint32_t</type>                                                <name>mask</name>:8</member>
            <member><type>uint32_t</type>                                                <name>instanceShaderBindingTableRecordOffset</name>:24</member>
            <member optional="true"><type>VkGeometryInstanceFlagsKHR</type>              <name>flags</name>:8</member>
            <member><type>uint64_t</type>                                                <name>accelerationStructureReference</name></member>
        </type>
        <type category="union" name="VkAccelerationStructureMotionInstanceDataNV">
            <member selection="VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV"><type>VkAccelerationStructureInstanceKHR</type>            <name>staticInstance</name></member>
            <member selection="VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV"><type>VkAccelerationStructureMatrixMotionInstanceNV</type> <name>matrixMotionInstance</name></member>
            <member selection="VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV"><type>VkAccelerationStructureSRTMotionInstanceNV</type>    <name>srtMotionInstance</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureMotionInstanceNV">
            <member><type>VkAccelerationStructureMotionInstanceTypeNV</type> <name>type</name></member>
            <member optional="true"><type>VkAccelerationStructureMotionInstanceFlagsNV</type> <name>flags</name></member>
            <member selector="type"><type>VkAccelerationStructureMotionInstanceDataNV</type> <name>data</name></member>
        </type>
        <type category="basetype">typedef <type>void</type>* <name>VkRemoteAddressNV</name>;</type>
        <type category="struct" name="VkMemoryGetRemoteAddressInfoNV">
            <member values="VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>VkDeviceMemory</type>                     <name>memory</name></member>
            <member><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></member>
        </type>
        <type category="struct" name="VkImportMemoryBufferCollectionFUCHSIA" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*      <name>pNext</name></member>
            <member><type>VkBufferCollectionFUCHSIA</type>        <name>collection</name></member>
            <member><type>uint32_t</type>                         <name>index</name></member>
        </type>
        <type category="struct" name="VkBufferCollectionImageCreateInfoFUCHSIA" structextends="VkImageCreateInfo">
            <member values="VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*      <name>pNext</name></member>
            <member><type>VkBufferCollectionFUCHSIA</type>        <name>collection</name></member>
            <member><type>uint32_t</type>                         <name>index</name></member>
        </type>
        <type category="struct" name="VkBufferCollectionBufferCreateInfoFUCHSIA" structextends="VkBufferCreateInfo">
            <member values="VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*      <name>pNext</name></member>
            <member><type>VkBufferCollectionFUCHSIA</type>        <name>collection</name></member>
            <member><type>uint32_t</type>                         <name>index</name></member>
        </type>
        <type category="struct" name="VkBufferCollectionCreateInfoFUCHSIA">
            <member values="VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*      <name>pNext</name></member>
            <member><type>zx_handle_t</type>                      <name>collectionToken</name></member>
        </type>
        <type category="struct" name="VkBufferCollectionPropertiesFUCHSIA" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>memoryTypeBits</name></member>
            <member><type>uint32_t</type>                         <name>bufferCount</name></member>
            <member><type>uint32_t</type>                         <name>createInfoIndex</name></member>
            <member><type>uint64_t</type>                         <name>sysmemPixelFormat</name></member>
            <member><type>VkFormatFeatureFlags</type>             <name>formatFeatures</name></member>
            <member><type>VkSysmemColorSpaceFUCHSIA</type>        <name>sysmemColorSpaceIndex</name></member>
            <member><type>VkComponentMapping</type>               <name>samplerYcbcrConversionComponents</name></member>
            <member><type>VkSamplerYcbcrModelConversion</type>    <name>suggestedYcbcrModel</name></member>
            <member><type>VkSamplerYcbcrRange</type>              <name>suggestedYcbcrRange</name></member>
            <member><type>VkChromaLocation</type>                 <name>suggestedXChromaOffset</name></member>
            <member><type>VkChromaLocation</type>                 <name>suggestedYChromaOffset</name></member>
        </type>
        <type category="struct" name="VkBufferConstraintsInfoFUCHSIA">
            <member values="VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*               <name>pNext</name></member>
            <member><type>VkBufferCreateInfo</type>                        <name>createInfo</name></member>
            <member optional="true"><type>VkFormatFeatureFlags</type>      <name>requiredFormatFeatures</name></member>
            <member><type>VkBufferCollectionConstraintsInfoFUCHSIA</type>  <name>bufferCollectionConstraints</name></member>
        </type>
        <type category="struct" name="VkSysmemColorSpaceFUCHSIA">
            <member values="VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*     <name>pNext</name></member>
            <member><type>uint32_t</type>                        <name>colorSpace</name></member>
        </type>
        <type category="struct" name="VkImageFormatConstraintsInfoFUCHSIA">
            <member values="VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                            <name>pNext</name></member>
            <member><type>VkImageCreateInfo</type>                                      <name>imageCreateInfo</name></member>
            <member><type>VkFormatFeatureFlags</type>                                   <name>requiredFormatFeatures</name></member>
            <member optional="true"><type>VkImageFormatConstraintsFlagsFUCHSIA</type>   <name>flags</name></member>
            <member optional="true"><type>uint64_t</type>                               <name>sysmemPixelFormat</name></member>
            <member><type>uint32_t</type>                                               <name>colorSpaceCount</name></member>
            <member len="colorSpaceCount">const <type>VkSysmemColorSpaceFUCHSIA</type>* <name>pColorSpaces</name></member>
        </type>
        <type category="struct" name="VkImageConstraintsInfoFUCHSIA">
            <member values="VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                      <name>pNext</name></member>
            <member><type>uint32_t</type>                                                         <name>formatConstraintsCount</name></member>
            <member len="formatConstraintsCount">const <type>VkImageFormatConstraintsInfoFUCHSIA</type>* <name>pFormatConstraints</name></member>
            <member><type>VkBufferCollectionConstraintsInfoFUCHSIA</type>                         <name>bufferCollectionConstraints</name></member>
            <member optional="true"><type>VkImageConstraintsInfoFlagsFUCHSIA</type>               <name>flags</name></member>
        </type>
        <type category="struct" name="VkBufferCollectionConstraintsInfoFUCHSIA">
            <member values="VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*     <name>pNext</name></member>
            <member><type>uint32_t</type>                        <name>minBufferCount</name></member>
            <member><type>uint32_t</type>                        <name>maxBufferCount</name></member>
            <member><type>uint32_t</type>                        <name>minBufferCountForCamping</name></member>
            <member><type>uint32_t</type>                        <name>minBufferCountForDedicatedSlack</name></member>
            <member><type>uint32_t</type>                        <name>minBufferCountForSharedSlack</name></member>
        </type>
        <type category="handle" parent="VkDevice" objtypeenum="VK_OBJECT_TYPE_CUDA_MODULE_NV"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkCudaModuleNV</name>)</type>
        <type category="handle" parent="VkDevice" objtypeenum="VK_OBJECT_TYPE_CUDA_FUNCTION_NV"><type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkCudaFunctionNV</name>)</type>
        <type category="struct" name="VkCudaModuleCreateInfoNV">
            <member values="VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>size_t</type>                 <name>dataSize</name></member>
            <member len="dataSize">const <type>void</type>*            <name>pData</name></member>
        </type>
        <type category="struct" name="VkCudaFunctionCreateInfoNV">
            <member values="VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkCudaModuleNV</type>         <name>module</name></member>
            <member len="null-terminated">const <type>char</type>*            <name>pName</name></member>
        </type>
        <type category="struct" name="VkCudaLaunchInfoNV">
            <member values="VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkCudaFunctionNV</type>       <name>function</name></member>
            <member><type>uint32_t</type>               <name>gridDimX</name></member>
            <member><type>uint32_t</type>               <name>gridDimY</name></member>
            <member><type>uint32_t</type>               <name>gridDimZ</name></member>
            <member><type>uint32_t</type>               <name>blockDimX</name></member>
            <member><type>uint32_t</type>               <name>blockDimY</name></member>
            <member><type>uint32_t</type>               <name>blockDimZ</name></member>
            <member><type>uint32_t</type>               <name>sharedMemBytes</name></member>
            <member optional="true"><type>size_t</type>                                     <name>paramCount</name></member>
            <member noautovalidity="true" len="paramCount">const <type>void</type>* const * <name>pParams</name></member>
            <member optional="true"><type>size_t</type>                                     <name>extraCount</name></member>
            <member noautovalidity="true" len="extraCount">const <type>void</type>* const * <name>pExtras</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>formatRgba10x6WithoutYCbCrSampler</name></member>
        </type>
        <type category="struct" name="VkFormatProperties3" returnedonly="true" structextends="VkFormatProperties2">
            <member values="VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member optional="true" limittype="bitmask"><type>VkFormatFeatureFlags2</type>            <name>linearTilingFeatures</name></member>
            <member optional="true" limittype="bitmask"><type>VkFormatFeatureFlags2</type>            <name>optimalTilingFeatures</name></member>
            <member optional="true" limittype="bitmask"><type>VkFormatFeatureFlags2</type>            <name>bufferFeatures</name></member>
        </type>
        <type category="struct" name="VkFormatProperties3KHR" alias="VkFormatProperties3"/>
        <type category="struct" name="VkDrmFormatModifierPropertiesList2EXT" returnedonly="true" structextends="VkFormatProperties2">
            <member values="VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type> <name>drmFormatModifierCount</name></member>
            <member optional="true" len="drmFormatModifierCount"><type>VkDrmFormatModifierProperties2EXT</type>* <name>pDrmFormatModifierProperties</name></member>
        </type>
        <type category="struct" name="VkDrmFormatModifierProperties2EXT" returnedonly="true">
            <member><type>uint64_t</type> <name>drmFormatModifier</name></member>
            <member><type>uint32_t</type> <name>drmFormatModifierPlaneCount</name></member>
            <member><type>VkFormatFeatureFlags2</type> <name>drmFormatModifierTilingFeatures</name></member>
        </type>
        <type category="struct" name="VkAndroidHardwareBufferFormatProperties2ANDROID" structextends="VkAndroidHardwareBufferPropertiesANDROID" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                              <name>pNext</name></member>
            <member><type>VkFormat</type>                           <name>format</name></member>
            <member><type>uint64_t</type>                           <name>externalFormat</name></member>
            <member><type>VkFormatFeatureFlags2</type>              <name>formatFeatures</name></member>
            <member><type>VkComponentMapping</type>                 <name>samplerYcbcrConversionComponents</name></member>
            <member><type>VkSamplerYcbcrModelConversion</type>      <name>suggestedYcbcrModel</name></member>
            <member><type>VkSamplerYcbcrRange</type>                <name>suggestedYcbcrRange</name></member>
            <member><type>VkChromaLocation</type>                   <name>suggestedXChromaOffset</name></member>
            <member><type>VkChromaLocation</type>                   <name>suggestedYChromaOffset</name></member>
        </type>
        <type category="struct" name="VkPipelineRenderingCreateInfo" structextends="VkGraphicsPipelineCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                <name>pNext</name></member>
            <member><type>uint32_t</type>                                                                   <name>viewMask</name></member>
            <member optional="true"><type>uint32_t</type>                                                   <name>colorAttachmentCount</name></member>
            <member noautovalidity="true" len="colorAttachmentCount">const <type>VkFormat</type>*           <name>pColorAttachmentFormats</name></member>
            <member noautovalidity="true"><type>VkFormat</type>                                             <name>depthAttachmentFormat</name></member>
            <member noautovalidity="true"><type>VkFormat</type>                                             <name>stencilAttachmentFormat</name></member>
        </type>
        <type category="struct" name="VkPipelineRenderingCreateInfoKHR" alias="VkPipelineRenderingCreateInfo"/>
        <type category="struct" name="VkRenderingInfo">
            <member values="VK_STRUCTURE_TYPE_RENDERING_INFO"><type>VkStructureType</type>                  <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                <name>pNext</name></member>
            <member optional="true"><type>VkRenderingFlags</type>                                           <name>flags</name></member>
            <member><type>VkRect2D</type>                                                                   <name>renderArea</name></member>
            <member><type>uint32_t</type>                                                                   <name>layerCount</name></member>
            <member><type>uint32_t</type>                                                                   <name>viewMask</name></member>
            <member optional="true"><type>uint32_t</type>                                                   <name>colorAttachmentCount</name></member>
            <member len="colorAttachmentCount">const <type>VkRenderingAttachmentInfo</type>*                <name>pColorAttachments</name></member>
            <member optional="true">const <type>VkRenderingAttachmentInfo</type>*                           <name>pDepthAttachment</name></member>
            <member optional="true">const <type>VkRenderingAttachmentInfo</type>*                           <name>pStencilAttachment</name></member>
        </type>
        <type category="struct" name="VkRenderingInfoKHR" alias="VkRenderingInfo"/>
        <type category="struct" name="VkRenderingAttachmentInfo">
            <member values="VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO"><type>VkStructureType</type>       <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                <name>pNext</name></member>
            <member optional="true"><type>VkImageView</type>                                                <name>imageView</name></member>
            <member><type>VkImageLayout</type>                                                              <name>imageLayout</name></member>
            <member optional="true"><type>VkResolveModeFlagBits</type>                                      <name>resolveMode</name></member>
            <member optional="true"><type>VkImageView</type>                                                <name>resolveImageView</name></member>
            <member><type>VkImageLayout</type>                                                              <name>resolveImageLayout</name></member>
            <member><type>VkAttachmentLoadOp</type>                                                         <name>loadOp</name></member>
            <member><type>VkAttachmentStoreOp</type>                                                        <name>storeOp</name></member>
            <member><type>VkClearValue</type>                                                               <name>clearValue</name></member>
        </type>
        <type category="struct" name="VkRenderingAttachmentInfoKHR" alias="VkRenderingAttachmentInfo"/>
        <type category="struct" name="VkRenderingFragmentShadingRateAttachmentInfoKHR" structextends="VkRenderingInfo">
            <member values="VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member  optional="true">const <type>void</type>*                                               <name>pNext</name></member>
            <member optional="true"><type>VkImageView</type>                                                <name>imageView</name></member>
            <member><type>VkImageLayout</type>                                                              <name>imageLayout</name></member>
            <member><type>VkExtent2D</type>                                                                 <name>shadingRateAttachmentTexelSize</name></member>
        </type>
        <type category="struct" name="VkRenderingFragmentDensityMapAttachmentInfoEXT" structextends="VkRenderingInfo">
            <member values="VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                <name>pNext</name></member>
            <member><type>VkImageView</type>                                                                <name>imageView</name></member>
            <member><type>VkImageLayout</type>                                                              <name>imageLayout</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDynamicRenderingFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*                                <name>pNext</name></member>
            <member><type>VkBool32</type>                                                                   <name>dynamicRendering</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDynamicRenderingFeaturesKHR" alias="VkPhysicalDeviceDynamicRenderingFeatures"/>
        <type category="struct" name="VkCommandBufferInheritanceRenderingInfo" structextends="VkCommandBufferInheritanceInfo">
            <member values="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                <name>pNext</name></member>
            <member optional="true"><type>VkRenderingFlags</type>                                           <name>flags</name></member>
            <member><type>uint32_t</type>                                                                   <name>viewMask</name></member>
            <member api="vulkan" optional="true"><type>uint32_t</type>                                      <name>colorAttachmentCount</name></member>
            <member api="vulkansc"><type>uint32_t</type>                                                    <name>colorAttachmentCount</name></member>
            <member len="colorAttachmentCount">const <type>VkFormat</type>*                                 <name>pColorAttachmentFormats</name></member>
            <member><type>VkFormat</type>                                                                   <name>depthAttachmentFormat</name></member>
            <member><type>VkFormat</type>                                                                   <name>stencilAttachmentFormat</name></member>
            <member optional="true"><type>VkSampleCountFlagBits</type>                                      <name>rasterizationSamples</name></member>
        </type>
        <type category="struct" name="VkCommandBufferInheritanceRenderingInfoKHR" alias="VkCommandBufferInheritanceRenderingInfo"/>
        <type category="struct" name="VkAttachmentSampleCountInfoAMD" structextends="VkCommandBufferInheritanceInfo,VkGraphicsPipelineCreateInfo">
            <member values="VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                                                   <name>colorAttachmentCount</name></member>
            <member noautovalidity="true" len="colorAttachmentCount">const <type>VkSampleCountFlagBits</type>* <name>pColorAttachmentSamples</name></member>
            <member noautovalidity="true" optional="true"><type>VkSampleCountFlagBits</type>                <name>depthStencilAttachmentSamples</name></member>
        </type>
        <type category="struct" name="VkAttachmentSampleCountInfoNV" alias="VkAttachmentSampleCountInfoAMD"/>
        <type category="struct" name="VkMultiviewPerViewAttributesInfoNVX" structextends="VkCommandBufferInheritanceInfo,VkGraphicsPipelineCreateInfo,VkRenderingInfo">
            <member values="VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                               <name>perViewAttributes</name></member>
            <member><type>VkBool32</type>                               <name>perViewAttributesPositionXOnly</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImageViewMinLodFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>minLod</name></member>
        </type>
        <type category="struct" name="VkImageViewMinLodCreateInfoEXT" structextends="VkImageViewCreateInfo">
            <member values="VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>float</type>                       <name>minLod</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>rasterizationOrderColorAttachmentAccess</name></member>
            <member><type>VkBool32</type>                         <name>rasterizationOrderDepthAttachmentAccess</name></member>
            <member><type>VkBool32</type>                         <name>rasterizationOrderStencilAttachmentAccess</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM" alias="VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT"/>
        <type category="struct" name="VkPhysicalDeviceLinearColorAttachmentFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>linearColorAttachment</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                     <name>graphicsPipelineLibrary</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePipelineBinaryFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                     <name>pipelineBinaries</name></member>
        </type>
        <type category="struct" name="VkDevicePipelineBinaryInternalCacheControlKHR" structextends="VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_PIPELINE_BINARY_INTERNAL_CACHE_CONTROL_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*  <name>pNext</name></member>
            <member><type>VkBool32</type>                     <name>disableInternalCache</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePipelineBinaryPropertiesKHR" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                     <name>pipelineBinaryInternalCache</name></member>
            <member><type>VkBool32</type>                     <name>pipelineBinaryInternalCacheControl</name></member>
            <member><type>VkBool32</type>                     <name>pipelineBinaryPrefersInternalCache</name></member>
            <member><type>VkBool32</type>                     <name>pipelineBinaryPrecompiledInternalCache</name></member>
            <member><type>VkBool32</type>                     <name>pipelineBinaryCompressedData</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                     <name>graphicsPipelineLibraryFastLinking</name></member>
            <member limittype="bitmask"><type>VkBool32</type>                     <name>graphicsPipelineLibraryIndependentInterpolationDecoration</name></member>
        </type>
        <type category="struct" name="VkGraphicsPipelineLibraryCreateInfoEXT" structextends="VkGraphicsPipelineCreateInfo">
            <member values="VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*       <name>pNext</name></member>
            <member><type>VkGraphicsPipelineLibraryFlagsEXT</type> <name>flags</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*                                                           <name>pNext</name></member>
            <member><type>VkBool32</type>                                                                                              <name>descriptorSetHostMapping</name></member>
        </type>
        <type category="struct" name="VkDescriptorSetBindingReferenceVALVE">
            <member values="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                       <name>pNext</name></member>
            <member><type>VkDescriptorSetLayout</type>                                                             <name>descriptorSetLayout</name></member>
            <member><type>uint32_t</type>                                                                          <name>binding</name></member>
        </type>
        <type category="struct" name="VkDescriptorSetLayoutHostMappingInfoVALVE">
            <member values="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                                                                    <name>pNext</name></member>
            <member><type>size_t</type>                                                                                   <name>descriptorOffset</name></member>
            <member><type>uint32_t</type>                                                                                 <name>descriptorSize</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceNestedCommandBufferFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>nestedCommandBuffer</name></member>
            <member><type>VkBool32</type>                                        <name>nestedCommandBufferRendering</name></member>
            <member><type>VkBool32</type>                                        <name>nestedCommandBufferSimultaneousUse</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceNestedCommandBufferPropertiesEXT" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                           <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>                        <name>maxCommandBufferNestingLevel</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*                                                      <name>pNext</name></member>
            <member><type>VkBool32</type>                                                                                         <name>shaderModuleIdentifier</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>* <name>pNext</name></member>
            <member limittype="noauto"><type>uint8_t</type> <name>shaderModuleIdentifierAlgorithmUUID</name>[<enum>VK_UUID_SIZE</enum>]</member>
        </type>
        <type category="struct" name="VkPipelineShaderStageModuleIdentifierCreateInfoEXT" structextends="VkPipelineShaderStageCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*         <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>            <name>identifierSize</name></member>
            <member len="identifierSize">const <type>uint8_t</type>* <name>pIdentifier</name></member>
        </type>
        <type category="struct" name="VkShaderModuleIdentifierEXT" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*          <name>pNext</name></member>
            <member noautovalidity="true"><type>uint32_t</type> <name>identifierSize</name></member>
            <member len="identifierSize"><type>uint8_t</type>   <name>identifier</name>[<enum>VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT</enum>]</member>
        </type>
        <type category="struct" name="VkImageCompressionControlEXT" structextends="VkImageCreateInfo,VkSwapchainCreateInfoKHR,VkPhysicalDeviceImageFormatInfo2">
            <member values="VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                        <name>pNext</name></member>
            <member noautovalidity="true"><type>VkImageCompressionFlagsEXT</type>   <name>flags</name></member>
            <member optional="true"><type>uint32_t</type>             <name>compressionControlPlaneCount</name></member>
            <member noautovalidity="true" len="compressionControlPlaneCount"><type>VkImageCompressionFixedRateFlagsEXT</type>* <name>pFixedRateFlags</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImageCompressionControlFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkBool32</type>                             <name>imageCompressionControl</name></member>
        </type>
        <type category="struct" name="VkImageCompressionPropertiesEXT" structextends="VkImageFormatProperties2,VkSurfaceFormat2KHR,VkSubresourceLayout2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                <name>pNext</name></member>
            <member><type>VkImageCompressionFlagsEXT</type>           <name>imageCompressionFlags</name></member>
            <member><type>VkImageCompressionFixedRateFlagsEXT</type>  <name>imageCompressionFixedRateFlags</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkBool32</type>                             <name>imageCompressionControlSwapchain</name></member>
        </type>
        <type category="struct" name="VkImageSubresource2">
            <member values="VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*  <name>pNext</name></member>
            <member><type>VkImageSubresource</type>     <name>imageSubresource</name></member>
        </type>
        <type category="struct" name="VkImageSubresource2KHR" alias="VkImageSubresource2"/>
        <type category="struct" name="VkImageSubresource2EXT" alias="VkImageSubresource2"/>
        <type category="struct" name="VkSubresourceLayout2"  returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*  <name>pNext</name></member>
            <member><type>VkSubresourceLayout</type>    <name>subresourceLayout</name></member>
        </type>
        <type category="struct" name="VkSubresourceLayout2KHR" alias="VkSubresourceLayout2"/>
        <type category="struct" name="VkSubresourceLayout2EXT" alias="VkSubresourceLayout2"/>
        <type category="struct" name="VkRenderPassCreationControlEXT" structextends="VkRenderPassCreateInfo2,VkSubpassDescription2">
            <member values="VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                 <name>pNext</name></member>
            <member><type>VkBool32</type>                                                                    <name>disallowMerging</name></member>
        </type>
        <type category="struct" name="VkRenderPassCreationFeedbackInfoEXT" returnedonly="true">
            <member><type>uint32_t</type>                                                                          <name>postMergeSubpassCount</name></member>
        </type>
        <type category="struct" name="VkRenderPassCreationFeedbackCreateInfoEXT" structextends="VkRenderPassCreateInfo2">
            <member values="VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                              <name>pNext</name></member>
            <member><type>VkRenderPassCreationFeedbackInfoEXT</type>*                                                     <name>pRenderPassFeedback</name></member>
        </type>
        <type category="struct" name="VkRenderPassSubpassFeedbackInfoEXT" returnedonly="true">
            <member><type>VkSubpassMergeStatusEXT</type>                                                          <name>subpassMergeStatus</name></member>
            <member len="null-terminated"><type>char</type>                                                       <name>description</name>[<enum>VK_MAX_DESCRIPTION_SIZE</enum>]</member>
            <member><type>uint32_t</type>                                                                         <name>postMergeIndex</name></member>
        </type>
        <type category="struct" name="VkRenderPassSubpassFeedbackCreateInfoEXT" structextends="VkSubpassDescription2">
            <member values="VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT"><type>VkStructureType</type>     <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                                 <name>pNext</name></member>
            <member><type>VkRenderPassSubpassFeedbackInfoEXT</type>*                                                         <name>pSubpassFeedback</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*                                                    <name>pNext</name></member>
            <member><type>VkBool32</type>                                                                                       <name>subpassMergeFeedback</name></member>
        </type>
        <type category="struct" name="VkMicromapBuildInfoEXT">
            <member values="VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                        <name>pNext</name></member>
            <member><type>VkMicromapTypeEXT</type>                                     <name>type</name></member>
            <member optional="true"><type>VkBuildMicromapFlagsEXT</type>               <name>flags</name></member>
            <member noautovalidity="true"><type>VkBuildMicromapModeEXT</type>          <name>mode</name></member>
            <member optional="true" noautovalidity="true"><type>VkMicromapEXT</type>                   <name>dstMicromap</name></member>
            <member optional="true"><type>uint32_t</type>                                           <name>usageCountsCount</name></member>
            <member len="usageCountsCount" optional="true">const <type>VkMicromapUsageEXT</type>*    <name>pUsageCounts</name></member>
            <member len="usageCountsCount,1" optional="true,false">const <type>VkMicromapUsageEXT</type>* const*   <name>ppUsageCounts</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstKHR</type>                               <name>data</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressKHR</type>                                    <name>scratchData</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstKHR</type>                               <name>triangleArray</name></member>
            <member><type>VkDeviceSize</type>                                                                      <name>triangleArrayStride</name></member>
        </type>
        <type category="struct" name="VkMicromapCreateInfoEXT">
            <member values="VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                             <name>pNext</name></member>
            <member optional="true"><type>VkMicromapCreateFlagsEXT</type>   <name>createFlags</name></member>
            <member><type>VkBuffer</type>                                                <name>buffer</name></member>
            <member><type>VkDeviceSize</type>                                            <name>offset</name><comment>Specified in bytes</comment></member>
            <member><type>VkDeviceSize</type>                                            <name>size</name></member>
            <member><type>VkMicromapTypeEXT</type>                          <name>type</name></member>
            <member optional="true"><type>VkDeviceAddress</type>                         <name>deviceAddress</name></member>
        </type>
        <type category="struct" name="VkMicromapVersionInfoEXT">
            <member values="VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                            <name>pNext</name></member>
            <member len="latexmath:[2 \times \mathtt{VK\_UUID\_SIZE}]" altlen="2*VK_UUID_SIZE">const <type>uint8_t</type>*                    <name>pVersionData</name></member>
        </type>
        <type category="struct" name="VkCopyMicromapInfoEXT">
            <member values="VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                            <name>pNext</name></member>
            <member><type>VkMicromapEXT</type>                             <name>src</name></member>
            <member><type>VkMicromapEXT</type>                             <name>dst</name></member>
            <member><type>VkCopyMicromapModeEXT</type>                     <name>mode</name></member>
        </type>
        <type category="struct" name="VkCopyMicromapToMemoryInfoEXT">
            <member values="VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                            <name>pNext</name></member>
            <member><type>VkMicromapEXT</type>                             <name>src</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressKHR</type>                               <name>dst</name></member>
            <member><type>VkCopyMicromapModeEXT</type>                     <name>mode</name></member>
        </type>
        <type category="struct" name="VkCopyMemoryToMicromapInfoEXT">
            <member values="VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                            <name>pNext</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstKHR</type>                          <name>src</name></member>
            <member><type>VkMicromapEXT</type>                             <name>dst</name></member>
            <member><type>VkCopyMicromapModeEXT</type>                     <name>mode</name></member>
        </type>
        <type category="struct" name="VkMicromapBuildSizesInfoEXT">
            <member values="VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>VkDeviceSize</type>                       <name>micromapSize</name></member>
            <member><type>VkDeviceSize</type>                       <name>buildScratchSize</name></member>
            <member><type>VkBool32</type>                           <name>discardable</name></member>
        </type>
        <type category="struct" name="VkMicromapUsageEXT">
            <member><type>uint32_t</type>                                               <name>count</name></member>
            <member><type>uint32_t</type>                                               <name>subdivisionLevel</name></member>
            <member><type>uint32_t</type>                                               <name>format</name><comment>Interpretation depends on parent type</comment></member>
        </type>
        <type category="struct" name="VkMicromapTriangleEXT">
            <member><type>uint32_t</type>                                               <name>dataOffset</name><comment>Specified in bytes</comment></member>
            <member><type>uint16_t</type>                                               <name>subdivisionLevel</name></member>
            <member><type>uint16_t</type>                                               <name>format</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceOpacityMicromapFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>micromap</name></member>
            <member><type>VkBool32</type>                         <name>micromapCaptureReplay</name></member>
            <member><type>VkBool32</type>                         <name>micromapHostCommands</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceOpacityMicromapPropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxOpacity2StateSubdivisionLevel</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxOpacity4StateSubdivisionLevel</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureTrianglesOpacityMicromapEXT" structextends="VkAccelerationStructureGeometryTrianglesDataKHR">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                                  <name>pNext</name></member>
            <member><type>VkIndexType</type>                                            <name>indexType</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstKHR</type>    <name>indexBuffer</name></member>
            <member><type>VkDeviceSize</type>                                           <name>indexStride</name></member>
            <member><type>uint32_t</type>                                               <name>baseTriangle</name></member>
            <member optional="true"><type>uint32_t</type>                               <name>usageCountsCount</name></member>
            <member len="usageCountsCount" optional="true">const <type>VkMicromapUsageEXT</type>*  <name>pUsageCounts</name></member>
            <member len="usageCountsCount,1" optional="true,false">const <type>VkMicromapUsageEXT</type>* const* <name>ppUsageCounts</name></member>
            <member optional="true"><type>VkMicromapEXT</type>                          <name>micromap</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDisplacementMicromapFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>displacementMicromap</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDisplacementMicromapPropertiesNV" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>                         <name>maxDisplacementMicromapSubdivisionLevel</name></member>
        </type>
        <type category="struct" name="VkAccelerationStructureTrianglesDisplacementMicromapNV" structextends="VkAccelerationStructureGeometryTrianglesDataKHR">
            <member values="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_DISPLACEMENT_MICROMAP_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                                  <name>pNext</name></member>

            <member><type>VkFormat</type>                                               <name>displacementBiasAndScaleFormat</name></member>
            <member><type>VkFormat</type>                                               <name>displacementVectorFormat</name></member>

            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstKHR</type>    <name>displacementBiasAndScaleBuffer</name></member>
            <member><type>VkDeviceSize</type>                                           <name>displacementBiasAndScaleStride</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstKHR</type>    <name>displacementVectorBuffer</name></member>
            <member><type>VkDeviceSize</type>                                           <name>displacementVectorStride</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstKHR</type>    <name>displacedMicromapPrimitiveFlags</name></member>
            <member><type>VkDeviceSize</type>                                           <name>displacedMicromapPrimitiveFlagsStride</name></member>
            <member><type>VkIndexType</type>                                            <name>indexType</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstKHR</type>    <name>indexBuffer</name></member>
            <member><type>VkDeviceSize</type>                                           <name>indexStride</name></member>

            <member><type>uint32_t</type>                                               <name>baseTriangle</name></member>

            <member optional="true"><type>uint32_t</type>                                                          <name>usageCountsCount</name></member>
            <member len="usageCountsCount" optional="true">const <type>VkMicromapUsageEXT</type>*                  <name>pUsageCounts</name></member>
            <member len="usageCountsCount,1" optional="true,false">const <type>VkMicromapUsageEXT</type>* const*   <name>ppUsageCounts</name></member>

            <member optional="true"><type>VkMicromapEXT</type>                          <name>micromap</name></member>
        </type>
        <type category="struct" name="VkPipelinePropertiesIdentifierEXT" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>uint8_t</type>                            <name>pipelineIdentifier</name>[<enum>VK_UUID_SIZE</enum>]</member>
        </type>
        <type category="struct" name="VkPhysicalDevicePipelinePropertiesFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>* <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>pipelinePropertiesIdentifier</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD"><type>VkStructureType</type> <name>sType</name></member>
            <member noautovalidity="true" optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>shaderEarlyAndLateFragmentTests</name></member>
        </type>
        <type category="struct" name="VkExternalMemoryAcquireUnmodifiedEXT" structextends="VkBufferMemoryBarrier,VkBufferMemoryBarrier2,VkImageMemoryBarrier,VkImageMemoryBarrier2">
            <member values="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                       <name>acquireUnmodifiedMemory</name></member>
        </type>
        <type category="struct" name="VkExportMetalObjectCreateInfoEXT" structextends="VkInstanceCreateInfo,VkMemoryAllocateInfo,VkImageCreateInfo,VkImageViewCreateInfo,VkBufferViewCreateInfo,VkSemaphoreCreateInfo,VkEventCreateInfo" allowduplicate="true">
            <member values="VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member optional="true"><type>VkExportMetalObjectTypeFlagBitsEXT</type>  <name>exportObjectType</name></member>
        </type>
        <type category="struct" name="VkExportMetalObjectsInfoEXT">
            <member values="VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
        </type>
        <type category="struct" name="VkExportMetalDeviceInfoEXT" structextends="VkExportMetalObjectsInfoEXT">
            <member values="VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member><type>MTLDevice_id</type>                               <name>mtlDevice</name></member>
        </type>
        <type category="struct" name="VkExportMetalCommandQueueInfoEXT" structextends="VkExportMetalObjectsInfoEXT" allowduplicate="true">
            <member values="VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member><type>VkQueue</type>                                    <name>queue</name></member>
            <member><type>MTLCommandQueue_id</type>                         <name>mtlCommandQueue</name></member>
        </type>
        <type category="struct" name="VkExportMetalBufferInfoEXT" structextends="VkExportMetalObjectsInfoEXT" allowduplicate="true">
            <member values="VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member><type>VkDeviceMemory</type>                             <name>memory</name></member>
            <member><type>MTLBuffer_id</type>                               <name>mtlBuffer</name></member>
        </type>
        <type category="struct" name="VkImportMetalBufferInfoEXT" structextends="VkMemoryAllocateInfo" allowduplicate="false">
            <member values="VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member><type>MTLBuffer_id</type>                               <name>mtlBuffer</name></member>
        </type>
        <type category="struct" name="VkExportMetalTextureInfoEXT" structextends="VkExportMetalObjectsInfoEXT" allowduplicate="true">
            <member values="VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member optional="true"><type>VkImage</type>                    <name>image</name></member>
            <member optional="true"><type>VkImageView</type>                <name>imageView</name></member>
            <member optional="true"><type>VkBufferView</type>               <name>bufferView</name></member>
            <member><type>VkImageAspectFlagBits</type>                      <name>plane</name></member>
            <member><type>MTLTexture_id</type>                              <name>mtlTexture</name></member>
        </type>
        <type category="struct" name="VkImportMetalTextureInfoEXT" structextends="VkImageCreateInfo" allowduplicate="true">
            <member values="VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member><type>VkImageAspectFlagBits</type>                      <name>plane</name></member>
            <member><type>MTLTexture_id</type>                              <name>mtlTexture</name></member>
        </type>
        <type category="struct" name="VkExportMetalIOSurfaceInfoEXT" structextends="VkExportMetalObjectsInfoEXT" allowduplicate="true">
            <member values="VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member><type>VkImage</type>                                    <name>image</name></member>
            <member><type>IOSurfaceRef</type>                               <name>ioSurface</name></member>
        </type>
        <type category="struct" name="VkImportMetalIOSurfaceInfoEXT" structextends="VkImageCreateInfo" allowduplicate="false">
            <member values="VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member optional="true"><type>IOSurfaceRef</type>               <name>ioSurface</name></member>
        </type>
        <type category="struct" name="VkExportMetalSharedEventInfoEXT" structextends="VkExportMetalObjectsInfoEXT" allowduplicate="true">
            <member values="VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member optional="true"><type>VkSemaphore</type>                <name>semaphore</name></member>
            <member optional="true"><type>VkEvent</type>                    <name>event</name></member>
            <member><type>MTLSharedEvent_id</type>                          <name>mtlSharedEvent</name></member>
        </type>
        <type category="struct" name="VkImportMetalSharedEventInfoEXT" structextends="VkSemaphoreCreateInfo,VkEventCreateInfo" allowduplicate="false">
            <member values="VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                <name>pNext</name></member>
            <member><type>MTLSharedEvent_id</type>                          <name>mtlSharedEvent</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*                                                   <name>pNext</name></member>
            <member><type>VkBool32</type>                                                                                      <name>nonSeamlessCubeMap</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePipelineRobustnessFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member noautovalidity="true" optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                                       <name>pipelineRobustness</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePipelineRobustnessFeaturesEXT" alias="VkPhysicalDevicePipelineRobustnessFeatures"/>
        <type category="struct" name="VkPipelineRobustnessCreateInfo" structextends="VkGraphicsPipelineCreateInfo,VkComputePipelineCreateInfo,VkPipelineShaderStageCreateInfo,VkRayTracingPipelineCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member noautovalidity="true" optional="true">const <type>void</type>*      <name>pNext</name></member>
            <member><type>VkPipelineRobustnessBufferBehavior</type>      <name>storageBuffers</name></member>
            <member><type>VkPipelineRobustnessBufferBehavior</type>      <name>uniformBuffers</name></member>
            <member><type>VkPipelineRobustnessBufferBehavior</type>      <name>vertexInputs</name></member>
            <member><type>VkPipelineRobustnessImageBehavior</type>       <name>images</name></member>
        </type>
        <type category="struct" name="VkPipelineRobustnessCreateInfoEXT" alias="VkPipelineRobustnessCreateInfo"/>
        <type category="struct" name="VkPhysicalDevicePipelineRobustnessProperties" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member limittype="exact"><type>VkPipelineRobustnessBufferBehavior</type>      <name>defaultRobustnessStorageBuffers</name></member>
            <member limittype="exact"><type>VkPipelineRobustnessBufferBehavior</type>      <name>defaultRobustnessUniformBuffers</name></member>
            <member limittype="exact"><type>VkPipelineRobustnessBufferBehavior</type>      <name>defaultRobustnessVertexInputs</name></member>
            <member limittype="exact"><type>VkPipelineRobustnessImageBehavior</type>       <name>defaultRobustnessImages</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePipelineRobustnessPropertiesEXT" alias="VkPhysicalDevicePipelineRobustnessProperties"/>
        <type category="struct" name="VkImageViewSampleWeightCreateInfoQCOM" structextends="VkImageViewCreateInfo">
            <member values="VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*       <name>pNext</name></member>
            <member><type>VkOffset2D</type>                        <name>filterCenter</name></member>
            <member><type>VkExtent2D</type>                        <name>filterSize</name></member>
            <member><type>uint32_t</type>                          <name>numPhases</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImageProcessingFeaturesQCOM" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>textureSampleWeighted</name></member>
            <member><type>VkBool32</type>                           <name>textureBoxFilter</name></member>
            <member><type>VkBool32</type>                           <name>textureBlockMatch</name></member>
         </type>
        <type category="struct" name="VkPhysicalDeviceImageProcessingPropertiesQCOM" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member limittype="max" optional="true"><type>uint32_t</type>         <name>maxWeightFilterPhases</name></member>
            <member limittype="max" optional="true"><type>VkExtent2D</type>       <name>maxWeightFilterDimension</name></member>
            <member limittype="max" optional="true"><type>VkExtent2D</type>       <name>maxBlockMatchRegion</name></member>
            <member limittype="max" optional="true"><type>VkExtent2D</type>       <name>maxBoxFilterBlockSize</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceTilePropertiesFeaturesQCOM" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>tileProperties</name></member>
        </type>
        <type category="struct" name="VkTilePropertiesQCOM">
            <member values="VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkExtent3D</type>                       <name>tileSize</name></member>
            <member><type>VkExtent2D</type>                       <name>apronSize</name></member>
            <member><type>VkOffset2D</type>                       <name>origin</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceAmigoProfilingFeaturesSEC" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>amigoProfiling</name></member>
        </type>
        <type category="struct" name="VkAmigoProfilingSubmitInfoSEC" structextends="VkSubmitInfo">
            <member values="VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*      <name>pNext</name></member>
            <member><type>uint64_t</type>                         <name>firstDrawTimestamp</name></member>
            <member><type>uint64_t</type>                         <name>swapBufferTimestamp</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>attachmentFeedbackLoopLayout</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDepthClampZeroOneFeaturesEXT" alias="VkPhysicalDeviceDepthClampZeroOneFeaturesKHR" />
        <type category="struct" name="VkPhysicalDeviceAddressBindingReportFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>reportAddressBinding</name></member>
        </type>
        <type category="struct" name="VkDeviceAddressBindingCallbackDataEXT" structextends="VkDebugUtilsMessengerCallbackDataEXT">
            <member values="VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member optional="true"><type>VkDeviceAddressBindingFlagsEXT</type>     <name>flags</name></member>
            <member><type>VkDeviceAddress</type>                    <name>baseAddress</name></member>
            <member><type>VkDeviceSize</type>                       <name>size</name></member>
            <member><type>VkDeviceAddressBindingTypeEXT</type>      <name>bindingType</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceOpticalFlowFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>opticalFlow</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceOpticalFlowPropertiesNV" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member limittype="bitmask"><type>VkOpticalFlowGridSizeFlagsNV</type> <name>supportedOutputGridSizes</name></member>
            <member limittype="bitmask"><type>VkOpticalFlowGridSizeFlagsNV</type> <name>supportedHintGridSizes</name></member>
            <member limittype="noauto"><type>VkBool32</type> <name>hintSupported</name></member>
            <member limittype="noauto"><type>VkBool32</type> <name>costSupported</name></member>
            <member limittype="noauto"><type>VkBool32</type> <name>bidirectionalFlowSupported</name></member>
            <member limittype="noauto"><type>VkBool32</type> <name>globalFlowSupported</name></member>
            <member limittype="noauto"><type>uint32_t</type>  <name>minWidth</name></member>
            <member limittype="noauto"><type>uint32_t</type>  <name>minHeight</name></member>
            <member limittype="noauto"><type>uint32_t</type>  <name>maxWidth</name></member>
            <member limittype="noauto"><type>uint32_t</type>  <name>maxHeight</name></member>
            <member limittype="noauto"><type>uint32_t</type>  <name>maxNumRegionsOfInterest</name></member>
        </type>
        <type category="struct" name="VkOpticalFlowImageFormatInfoNV" structextends="VkPhysicalDeviceImageFormatInfo2,VkImageCreateInfo">
            <member values="VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*  <name>pNext</name></member>
            <member><type>VkOpticalFlowUsageFlagsNV</type> <name>usage</name></member>
        </type>
        <type category="struct" name="VkOpticalFlowImageFormatPropertiesNV" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*  <name>pNext</name></member>
            <member><type>VkFormat</type> <name>format</name></member>
        </type>
        <type category="struct" name="VkOpticalFlowSessionCreateInfoNV">
            <member values="VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                                              <name>pNext</name></member>
            <member><type>uint32_t</type>                                                           <name>width</name></member>
            <member><type>uint32_t</type>                                                           <name>height</name></member>
            <member><type>VkFormat</type>                                                           <name>imageFormat</name></member>
            <member><type>VkFormat</type>                                                           <name>flowVectorFormat</name></member>
            <member optional="true"><type>VkFormat</type>                                           <name>costFormat</name></member>
            <member><type>VkOpticalFlowGridSizeFlagsNV</type>                                       <name>outputGridSize</name></member>
            <member optional="true"><type>VkOpticalFlowGridSizeFlagsNV</type>                       <name>hintGridSize</name></member>
            <member optional="true"><type>VkOpticalFlowPerformanceLevelNV</type>                    <name>performanceLevel</name></member>
            <member optional="true"><type>VkOpticalFlowSessionCreateFlagsNV</type>                  <name>flags</name></member>
        </type>
        <type category="struct" name="VkOpticalFlowSessionCreatePrivateDataInfoNV" structextends="VkOpticalFlowSessionCreateInfoNV"><comment>NV internal use only</comment>
            <member values="VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                                              <name>pNext</name></member>
            <member><type>uint32_t</type>                                                           <name>id</name></member>
            <member><type>uint32_t</type>                                                           <name>size</name></member>
            <member>const <type>void</type>*                                                        <name>pPrivateData</name></member>
        </type>
        <type category="struct" name="VkOpticalFlowExecuteInfoNV">
            <member values="VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>* <name>pNext</name></member>
            <member optional="true"><type>VkOpticalFlowExecuteFlagsNV</type>        <name>flags</name></member>
            <member optional="true"><type>uint32_t</type>                           <name>regionCount</name></member>
            <member len="regionCount">const <type>VkRect2D</type>*                  <name>pRegions</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFaultFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>deviceFault</name></member>
            <member><type>VkBool32</type>                            <name>deviceFaultVendorBinary</name></member>
        </type>
        <type category="struct" name="VkDeviceFaultAddressInfoEXT">
            <member><type>VkDeviceFaultAddressTypeEXT</type>         <name>addressType</name></member>
            <member><type>VkDeviceAddress</type>                     <name>reportedAddress</name></member>
            <member><type>VkDeviceSize</type>                        <name>addressPrecision</name></member>
        </type>
        <type category="struct" name="VkDeviceFaultVendorInfoEXT">
            <member noautovalidity="true" len="null-terminated"><type>char</type> <name>description</name>[<enum>VK_MAX_DESCRIPTION_SIZE</enum>]<comment>Free-form description of the fault</comment></member>
            <member><type>uint64_t</type>                                         <name>vendorFaultCode</name></member>
            <member><type>uint64_t</type>                                         <name>vendorFaultData</name></member>
        </type>
        <type category="struct" name="VkDeviceFaultCountsEXT">
            <member values="VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*               <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                            <name>addressInfoCount</name></member>
            <member optional="true"><type>uint32_t</type>                            <name>vendorInfoCount</name></member>
            <member optional="true"><type>VkDeviceSize</type>                        <name>vendorBinarySize</name><comment>Specified in bytes</comment></member>
        </type>
        <type category="struct" name="VkDeviceFaultInfoEXT" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                            <name>pNext</name></member>
            <member noautovalidity="true" len="null-terminated"><type>char</type> <name>description</name>[<enum>VK_MAX_DESCRIPTION_SIZE</enum>]<comment>Free-form description of the fault</comment></member>
            <member optional="true"><type>VkDeviceFaultAddressInfoEXT</type>*     <name>pAddressInfos</name></member>
            <member optional="true"><type>VkDeviceFaultVendorInfoEXT</type>*      <name>pVendorInfos</name></member>
            <member optional="true"><type>void</type>*                            <name>pVendorBinaryData</name></member>
        </type>
        <type category="struct" name="VkDeviceFaultVendorBinaryHeaderVersionOneEXT">
            <comment>The fields in this structure are non-normative since structure packing is implementation-defined in C. The specification defines the normative layout.</comment>
            <member><type>uint32_t</type>               <name>headerSize</name></member>
            <member><type>VkDeviceFaultVendorBinaryHeaderVersionEXT</type> <name>headerVersion</name></member>
            <member><type>uint32_t</type>               <name>vendorID</name></member>
            <member><type>uint32_t</type>               <name>deviceID</name></member>
            <member><type>uint32_t</type>               <name>driverVersion</name></member>
            <member><type>uint8_t</type>                <name>pipelineCacheUUID</name>[<enum>VK_UUID_SIZE</enum>]</member>
            <member><type>uint32_t</type>               <name>applicationNameOffset</name></member>
            <member><type>uint32_t</type>               <name>applicationVersion</name></member>
            <member><type>uint32_t</type>               <name>engineNameOffset</name></member>
            <member><type>uint32_t</type>               <name>engineVersion</name></member>
            <member><type>uint32_t</type>               <name>apiVersion</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*                                                            <name>pNext</name></member>
            <member><type>VkBool32</type>                                                                                               <name>pipelineLibraryGroupHandles</name></member>
        </type>
        <type category="struct" name="VkDepthBiasInfoEXT">
            <member values="VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>float</type>                              <name>depthBiasConstantFactor</name></member>
            <member><type>float</type>                              <name>depthBiasClamp</name></member>
            <member><type>float</type>                              <name>depthBiasSlopeFactor</name></member>
        </type>
        <type category="struct" name="VkDepthBiasRepresentationInfoEXT" structextends="VkDepthBiasInfoEXT,VkPipelineRasterizationStateCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*        <name>pNext</name></member>
            <member><type>VkDepthBiasRepresentationEXT</type>       <name>depthBiasRepresentation</name></member>
            <member><type>VkBool32</type>                           <name>depthBiasExact</name></member>
        </type>
        <type category="struct" name="VkDecompressMemoryRegionNV">
            <member><type>VkDeviceAddress</type>   <name>srcAddress</name></member>
            <member><type>VkDeviceAddress</type>   <name>dstAddress</name></member>
            <member><type>VkDeviceSize</type>      <name>compressedSize</name><comment>Specified in bytes</comment></member>
            <member><type>VkDeviceSize</type>      <name>decompressedSize</name><comment>Specified in bytes</comment></member>
            <member><type>VkMemoryDecompressionMethodFlagsNV</type> <name>decompressionMethod</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member limittype="bitmask"><type>uint64_t</type>                   <name>shaderCoreMask</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>shaderCoreCount</name></member>
            <member limittype="max"><type>uint32_t</type>                       <name>shaderWarpsPerCore</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                 <name>shaderCoreBuiltins</name></member>
        </type>
        <type category="struct" name="VkFrameBoundaryEXT" structextends="VkSubmitInfo,VkSubmitInfo2,VkPresentInfoKHR,VkBindSparseInfo">
            <member values="VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                        <name>pNext</name></member>
            <member optional="true"><type>VkFrameBoundaryFlagsEXT</type>            <name>flags</name></member>
            <member><type>uint64_t</type>                                           <name>frameID</name></member>
            <member optional="true"><type>uint32_t</type>                           <name>imageCount</name></member>
            <member optional="true" len="imageCount">const <type>VkImage</type>*    <name>pImages</name></member>
            <member optional="true"><type>uint32_t</type>                           <name>bufferCount</name></member>
            <member optional="true" len="bufferCount">const <type>VkBuffer</type>*  <name>pBuffers</name></member>
            <member optional="true"><type>uint64_t</type>                           <name>tagName</name></member>
            <member optional="true"><type>size_t</type>                             <name>tagSize</name></member>
            <member optional="true" len="tagSize">const <type>void</type>*          <name>pTag</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceFrameBoundaryFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                 <name>frameBoundary</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                 <name>dynamicRenderingUnusedAttachments</name></member>
        </type>
        <type category="struct" name="VkSurfacePresentModeEXT" structextends="VkPhysicalDeviceSurfaceInfo2KHR">
            <member values="VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*               <name>pNext</name></member>
            <member><type>VkPresentModeKHR</type>                    <name>presentMode</name></member>
        </type>
        <type category="struct" name="VkSurfacePresentScalingCapabilitiesEXT" structextends="VkSurfaceCapabilities2KHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                    <name>pNext</name></member>
            <member optional="true"><type>VkPresentScalingFlagsEXT</type> <name>supportedPresentScaling</name></member>
            <member optional="true"><type>VkPresentGravityFlagsEXT</type> <name>supportedPresentGravityX</name></member>
            <member optional="true"><type>VkPresentGravityFlagsEXT</type> <name>supportedPresentGravityY</name></member>
            <member optional="true"><type>VkExtent2D</type>               <name>minScaledImageExtent</name><comment>Supported minimum image width and height for the surface when scaling is used</comment></member>
            <member optional="true"><type>VkExtent2D</type>               <name>maxScaledImageExtent</name><comment>Supported maximum image width and height for the surface when scaling is used</comment></member>
        </type>
        <type category="struct" name="VkSurfacePresentModeCompatibilityEXT" structextends="VkSurfaceCapabilities2KHR">
            <member values="VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                                    <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                                 <name>presentModeCount</name></member>
            <member optional="true" len="presentModeCount"><type>VkPresentModeKHR</type>* <name>pPresentModes</name><comment>Output list of present modes compatible with the one specified in VkSurfacePresentModeEXT</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>swapchainMaintenance1</name></member>
        </type>
        <type category="struct" name="VkSwapchainPresentFenceInfoEXT" structextends="VkPresentInfoKHR">
            <member values="VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*         <name>pNext</name></member>
            <member><type>uint32_t</type>                            <name>swapchainCount</name><comment>Copy of VkPresentInfoKHR::swapchainCount</comment></member>
            <member len="swapchainCount" optional="false,true">const <type>VkFence</type>* <name>pFences</name><comment>Fence to signal for each swapchain</comment></member>
        </type>
        <type category="struct" name="VkSwapchainPresentModesCreateInfoEXT" structextends="VkSwapchainCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*         <name>pNext</name></member>
            <member><type>uint32_t</type>                            <name>presentModeCount</name></member><comment>Length of the pPresentModes array</comment>
            <member len="presentModeCount">const <type>VkPresentModeKHR</type>* <name>pPresentModes</name></member><comment>Presentation modes which will be usable with this swapchain</comment>
        </type>
        <type category="struct" name="VkSwapchainPresentModeInfoEXT" structextends="VkPresentInfoKHR">
            <member values="VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*         <name>pNext</name></member>
            <member><type>uint32_t</type>                            <name>swapchainCount</name><comment>Copy of VkPresentInfoKHR::swapchainCount</comment></member>
            <member len="swapchainCount">const <type>VkPresentModeKHR</type>* <name>pPresentModes</name><comment>Presentation mode for each swapchain</comment></member>
        </type>
        <type category="struct" name="VkSwapchainPresentScalingCreateInfoEXT" structextends="VkSwapchainCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                 <name>pNext</name></member>
            <member optional="true"><type>VkPresentScalingFlagsEXT</type>    <name>scalingBehavior</name></member>
            <member optional="true"><type>VkPresentGravityFlagsEXT</type>    <name>presentGravityX</name></member>
            <member optional="true"><type>VkPresentGravityFlagsEXT</type>    <name>presentGravityY</name></member>
        </type>
        <type category="struct" name="VkReleaseSwapchainImagesInfoEXT">
            <member values="VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                 <name>pNext</name></member>
            <member externsync="true"><type>VkSwapchainKHR</type>            <name>swapchain</name><comment>Swapchain for which images are being released</comment></member>
            <member><type>uint32_t</type>                                    <name>imageIndexCount</name><comment>Number of indices to release</comment></member>
            <member len="imageIndexCount">const <type>uint32_t</type>*       <name>pImageIndices</name><comment>Indices of which presentable images to release</comment></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDepthBiasControlFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>depthBiasControl</name></member>
            <member><type>VkBool32</type>                           <name>leastRepresentableValueForceUnormRepresentation</name></member>
            <member><type>VkBool32</type>                           <name>floatRepresentation</name></member>
            <member><type>VkBool32</type>                           <name>depthBiasExact</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*                                                      <name>pNext</name></member>
            <member><type>VkBool32</type>                                                                                         <name>rayTracingInvocationReorder</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>* <name>pNext</name></member>
            <member limittype="noauto"><type>VkRayTracingInvocationReorderModeNV</type>                                    <name>rayTracingInvocationReorderReorderingHint</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*  <name>pNext</name></member>
            <member><type>VkBool32</type>                                     <name>extendedSparseAddressSpace</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                        <name>pNext</name></member>
            <member limittype="max"><type>VkDeviceSize</type>                 <name>extendedSparseAddressSpaceSize</name><comment>Total address space available for extended sparse allocations (bytes)</comment></member>
            <member limittype="bitmask"><type>VkImageUsageFlags</type>        <name>extendedSparseImageUsageFlags</name><comment>Bitfield of which image usages are supported for extended sparse allocations</comment></member>
            <member limittype="bitmask"><type>VkBufferUsageFlags</type>       <name>extendedSparseBufferUsageFlags</name><comment>Bitfield of which buffer usages are supported for extended sparse allocations</comment></member>
        </type>
        <type category="struct" name="VkDirectDriverLoadingInfoLUNARG">
            <member values="VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*                                  <name>pNext</name></member>
            <member><type>VkDirectDriverLoadingFlagsLUNARG</type>                                             <name>flags</name></member>
            <member noautovalidity="true"><type>PFN_vkGetInstanceProcAddrLUNARG</type>                        <name>pfnGetInstanceProcAddr</name></member>
        </type>
        <type category="struct" name="VkDirectDriverLoadingListLUNARG" structextends="VkInstanceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>*           <name>pNext</name></member>
            <member><type>VkDirectDriverLoadingModeLUNARG</type>                             <name>mode</name></member>
            <member><type>uint32_t</type>                                                    <name>driverCount</name></member>
            <member len="driverCount">const <type>VkDirectDriverLoadingInfoLUNARG</type>*    <name>pDrivers</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>multiviewPerViewViewports</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                     <name>rayTracingPositionFetch</name></member>
        </type>
        <type category="struct" name="VkDeviceImageSubresourceInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                              <name>pNext</name></member>
            <member>const <type>VkImageCreateInfo</type>*                                                 <name>pCreateInfo</name></member>
            <member>const <type>VkImageSubresource2</type>*                                               <name>pSubresource</name></member>
        </type>
        <type category="struct" name="VkDeviceImageSubresourceInfoKHR" alias="VkDeviceImageSubresourceInfo"/>
        <type category="struct" name="VkPhysicalDeviceShaderCorePropertiesARM" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                          <name>pNext</name></member>
            <member limittype="exact"><type>uint32_t</type>         <name>pixelRate</name></member>
            <member limittype="exact"><type>uint32_t</type>         <name>texelRate</name></member>
            <member limittype="exact"><type>uint32_t</type>         <name>fmaRate</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>multiviewPerViewRenderAreas</name></member>
        </type>
        <type category="struct" name="VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM" structextends="VkRenderPassBeginInfo,VkRenderingInfo">
            <member values="VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                      <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>         <name>perViewRenderAreaCount</name></member>
            <member len="perViewRenderAreaCount">const <type>VkRect2D</type>*  <name>pPerViewRenderAreas</name></member>
        </type>
        <type category="struct" name="VkQueryLowLatencySupportNV" structextends="VkSemaphoreCreateInfo">
            <member values="VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>void</type>*                                       <name>pQueriedLowLatencyData</name></member>
        </type>
        <type category="struct" name="VkMemoryMapInfo">
            <member values="VK_STRUCTURE_TYPE_MEMORY_MAP_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*      <name>pNext</name></member>
            <member optional="true"><type>VkMemoryMapFlags</type> <name>flags</name></member>
            <member externsync="true"><type>VkDeviceMemory</type> <name>memory</name></member>
            <member><type>VkDeviceSize</type>                     <name>offset</name></member>
            <member><type>VkDeviceSize</type>                     <name>size</name></member>
        </type>
        <type category="struct" name="VkMemoryMapInfoKHR" alias="VkMemoryMapInfo"/>
        <type category="struct" name="VkMemoryUnmapInfo">
            <member values="VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*            <name>pNext</name></member>
            <member optional="true"><type>VkMemoryUnmapFlags</type>  <name>flags</name></member>
            <member externsync="true"><type>VkDeviceMemory</type>       <name>memory</name></member>
        </type>
        <type category="struct" name="VkMemoryUnmapInfoKHR" alias="VkMemoryUnmapInfo"/>
        <type category="struct" name="VkPhysicalDeviceShaderObjectFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*                                           <name>pNext</name></member>
            <member><type>VkBool32</type>                                                                              <name>shaderObject</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderObjectPropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*                                             <name>pNext</name></member>
            <member limittype="noauto"><type>uint8_t</type>                                                              <name>shaderBinaryUUID</name>[<enum>VK_UUID_SIZE</enum>]</member>
            <member limittype="noauto"><type>uint32_t</type>                                                             <name>shaderBinaryVersion</name></member>
        </type>
        <type category="struct" name="VkShaderCreateInfoEXT">
            <member values="VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT"><type>VkStructureType</type>       <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                             <name>pNext</name></member>
            <member optional="true"><type>VkShaderCreateFlagsEXT</type>                                  <name>flags</name></member>
            <member><type>VkShaderStageFlagBits</type>                                                   <name>stage</name></member>
            <member optional="true"><type>VkShaderStageFlags</type>                                      <name>nextStage</name></member>
            <member><type>VkShaderCodeTypeEXT</type>                                                     <name>codeType</name></member>
            <member><type>size_t</type>                                                                  <name>codeSize</name></member>
            <member len="codeSize">const <type>void</type>*                                              <name>pCode</name></member>
            <member optional="true" len="null-terminated">const <type>char</type>*                       <name>pName</name></member>
            <member optional="true"><type>uint32_t</type>                                                <name>setLayoutCount</name></member>
            <member optional="true" len="setLayoutCount">const <type>VkDescriptorSetLayout</type>*       <name>pSetLayouts</name></member>
            <member optional="true"><type>uint32_t</type>                                                <name>pushConstantRangeCount</name></member>
            <member optional="true" len="pushConstantRangeCount">const <type>VkPushConstantRange</type>* <name>pPushConstantRanges</name></member>
            <member optional="true">const <type>VkSpecializationInfo</type>*                             <name>pSpecializationInfo</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderTileImageFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>shaderTileImageColorReadAccess</name></member>
            <member><type>VkBool32</type>                           <name>shaderTileImageDepthReadAccess</name></member>
            <member><type>VkBool32</type>                           <name>shaderTileImageStencilReadAccess</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderTileImagePropertiesEXT" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member limittype="noauto"><type>VkBool32</type>        <name>shaderTileImageCoherentReadAccelerated</name></member>
            <member limittype="noauto"><type>VkBool32</type>        <name>shaderTileImageReadSampleFromPixelRateInvocation</name></member>
            <member limittype="noauto"><type>VkBool32</type>        <name>shaderTileImageReadFromHelperInvocation</name></member>
        </type>
        <type category="struct" name="VkImportScreenBufferInfoQNX" structextends="VkMemoryAllocateInfo">
            <member values="VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                        <name>pNext</name></member>
            <member noautovalidity="true">struct <type>_screen_buffer</type>*       <name>buffer</name></member>
        </type>
        <type category="struct" name="VkScreenBufferPropertiesQNX" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                              <name>pNext</name></member>
            <member><type>VkDeviceSize</type>                       <name>allocationSize</name></member>
            <member><type>uint32_t</type>                           <name>memoryTypeBits</name></member>
        </type>
        <type category="struct" name="VkScreenBufferFormatPropertiesQNX" structextends="VkScreenBufferPropertiesQNX" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                              <name>pNext</name></member>
            <member><type>VkFormat</type>                           <name>format</name></member>
            <member><type>uint64_t</type>                           <name>externalFormat</name></member>
            <member><type>uint64_t</type>                           <name>screenUsage</name></member>
            <member><type>VkFormatFeatureFlags</type>               <name>formatFeatures</name></member>
            <member><type>VkComponentMapping</type>                 <name>samplerYcbcrConversionComponents</name></member>
            <member><type>VkSamplerYcbcrModelConversion</type>      <name>suggestedYcbcrModel</name></member>
            <member><type>VkSamplerYcbcrRange</type>                <name>suggestedYcbcrRange</name></member>
            <member><type>VkChromaLocation</type>                   <name>suggestedXChromaOffset</name></member>
            <member><type>VkChromaLocation</type>                   <name>suggestedYChromaOffset</name></member>
        </type>
        <type category="struct" name="VkExternalFormatQNX" structextends="VkImageCreateInfo,VkSamplerYcbcrConversionCreateInfo">
            <member values="VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                              <name>pNext</name></member>
            <member><type>uint64_t</type>                           <name>externalFormat</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                       <name>pNext</name></member>
            <member><type>VkBool32</type>                                    <name>screenBufferImport</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCooperativeMatrixFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>cooperativeMatrix</name></member>
            <member><type>VkBool32</type>                            <name>cooperativeMatrixRobustBufferAccess</name></member>
        </type>
        <type category="struct" name="VkCooperativeMatrixPropertiesKHR" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member><type>uint32_t</type>                            <name>MSize</name></member>
            <member><type>uint32_t</type>                            <name>NSize</name></member>
            <member><type>uint32_t</type>                            <name>KSize</name></member>
            <member><type>VkComponentTypeKHR</type>                  <name>AType</name></member>
            <member><type>VkComponentTypeKHR</type>                  <name>BType</name></member>
            <member><type>VkComponentTypeKHR</type>                  <name>CType</name></member>
            <member><type>VkComponentTypeKHR</type>                  <name>ResultType</name></member>
            <member><type>VkBool32</type>                            <name>saturatingAccumulation</name></member>
            <member><type>VkScopeKHR</type>                          <name>scope</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCooperativeMatrixPropertiesKHR" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member limittype="bitmask"><type>VkShaderStageFlags</type>              <name>cooperativeMatrixSupportedStages</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderEnqueuePropertiesAMDX" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_PROPERTIES_AMDX"><type>VkStructureType</type> <name>sType</name></member>
            <member noautovalidity="true"  optional="true"><type>void</type>*               <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>                                   <name>maxExecutionGraphDepth</name></member>
            <member limittype="max"><type>uint32_t</type>                                   <name>maxExecutionGraphShaderOutputNodes</name></member>
            <member limittype="max"><type>uint32_t</type>                                   <name>maxExecutionGraphShaderPayloadSize</name></member>
            <member limittype="max"><type>uint32_t</type>                                   <name>maxExecutionGraphShaderPayloadCount</name></member>
            <member limittype="noauto"><type>uint32_t</type>                                <name>executionGraphDispatchAddressAlignment</name></member>
            <member limittype="max"><type>uint32_t</type>                                   <name>maxExecutionGraphWorkgroupCount</name>[3]</member>
            <member limittype="max"><type>uint32_t</type>                                   <name>maxExecutionGraphWorkgroups</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderEnqueueFeaturesAMDX" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX"><type>VkStructureType</type> <name>sType</name></member>
            <member noautovalidity="true" optional="true"><type>void</type>*                <name>pNext</name></member>
            <member><type>VkBool32</type>                                                   <name>shaderEnqueue</name></member>
            <member><type>VkBool32</type>                                                   <name>shaderMeshEnqueue</name></member>
        </type>
        <type category="struct" name="VkExecutionGraphPipelineCreateInfoAMDX">
            <member values="VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_CREATE_INFO_AMDX"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                <name>pNext</name></member>
            <member noautovalidity="true" optional="true"><type>VkPipelineCreateFlags</type>                      <name>flags</name></member>
            <member optional="true"><type>uint32_t</type>                                   <name>stageCount</name></member>
            <member optional="true" len="stageCount">const <type>VkPipelineShaderStageCreateInfo</type>*    <name>pStages</name></member>
            <member optional="true">const <type>VkPipelineLibraryCreateInfoKHR</type>*      <name>pLibraryInfo</name></member>
            <member><type>VkPipelineLayout</type>                                           <name>layout</name></member>
            <member noautovalidity="true" optional="true"><type>VkPipeline</type>           <name>basePipelineHandle</name></member>
            <member><type>int32_t</type>                                                    <name>basePipelineIndex</name></member>
        </type>
        <type category="struct" name="VkPipelineShaderStageNodeCreateInfoAMDX" structextends="VkPipelineShaderStageCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_NODE_CREATE_INFO_AMDX">  <type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                <name>pNext</name></member>
            <member optional="true" len="null-terminated">const <type>char</type>*          <name>pName</name></member>
            <member><type>uint32_t</type>                                                   <name>index</name></member>
        </type>
        <type category="struct" name="VkExecutionGraphPipelineScratchSizeAMDX">
            <member values="VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_SCRATCH_SIZE_AMDX"><type>VkStructureType</type> <name>sType</name></member>
            <member noautovalidity="true" optional="true"><type>void</type>*                <name>pNext</name></member>
            <member><type>VkDeviceSize</type>                                               <name>minSize</name></member>
            <member><type>VkDeviceSize</type>                                               <name>maxSize</name></member>
            <member><type>VkDeviceSize</type>                                               <name>sizeGranularity</name></member>
        </type>
        <type category="struct" name="VkDispatchGraphInfoAMDX">
            <member><type>uint32_t</type>                                                   <name>nodeIndex</name></member>
            <member optional="true"><type>uint32_t</type>                                   <name>payloadCount</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstAMDX</type>           <name>payloads</name></member>
            <member><type>uint64_t</type>                                                   <name>payloadStride</name></member>
        </type>
        <type category="struct" name="VkDispatchGraphCountInfoAMDX">
            <member optional="true"><type>uint32_t</type>                                   <name>count</name></member>
            <member noautovalidity="true"><type>VkDeviceOrHostAddressConstAMDX</type>                  <name>infos</name></member>
            <member><type>uint64_t</type>                                                   <name>stride</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceAntiLagFeaturesAMD" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ANTI_LAG_FEATURES_AMD"><type>VkStructureType</type> <name>sType</name></member>
            <member noautovalidity="true" optional="true"><type>void</type>*                <name>pNext</name></member>
            <member><type>VkBool32</type>                                                   <name>antiLag</name></member>
        </type>
        <type category="struct" name="VkAntiLagDataAMD">
            <member values="VK_STRUCTURE_TYPE_ANTI_LAG_DATA_AMD"><type>VkStructureType</type> <name>sType</name></member>
            <member noautovalidity="true" optional="true">const <type>void</type>*          <name>pNext</name></member>
            <member><type>VkAntiLagModeAMD</type>                                           <name>mode</name></member>
            <member><type>uint32_t</type>                                                   <name>maxFPS</name></member>
            <member optional="true">const <type>VkAntiLagPresentationInfoAMD</type>*        <name>pPresentationInfo</name></member>
        </type>
        <type category="struct" name="VkAntiLagPresentationInfoAMD">
            <member values="VK_STRUCTURE_TYPE_ANTI_LAG_PRESENTATION_INFO_AMD"><type>VkStructureType</type> <name>sType</name></member>
            <member noautovalidity="true" optional="true"><type>void</type>*                <name>pNext</name></member>
            <member><type>VkAntiLagStageAMD</type>                                          <name>stage</name></member>
            <member><type>uint64_t</type>                                                   <name>frameIndex</name></member>
        </type>
        <type category="struct" name="VkBindMemoryStatus" structextends="VkBindBufferMemoryInfo,VkBindImageMemoryInfo">
            <member values="VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                <name>pNext</name></member>
            <member><type>VkResult</type>*                                                  <name>pResult</name></member>
        </type>
        <type category="struct" name="VkBindMemoryStatusKHR" alias="VkBindMemoryStatus"/>
        <type category="struct" name="VkBindDescriptorSetsInfo">
          <member values="VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO"><type>VkStructureType</type> <name>sType</name></member>
          <member optional="true">const <type>void</type>*                                              <name>pNext</name></member>
          <member><type>VkShaderStageFlags</type>                                                       <name>stageFlags</name></member>
          <member optional="true"><type>VkPipelineLayout</type>                                         <name>layout</name></member>
          <member optional="true"><type>uint32_t</type>                                                 <name>firstSet</name></member>
          <member><type>uint32_t</type>                                                                 <name>descriptorSetCount</name></member>
          <member len="descriptorSetCount">const <type>VkDescriptorSet</type>*                          <name>pDescriptorSets</name></member>
          <member optional="true"><type>uint32_t</type>                                                 <name>dynamicOffsetCount</name></member>
          <member optional="true,true" len="dynamicOffsetCount">const <type>uint32_t</type>*            <name>pDynamicOffsets</name></member>
        </type>
        <type category="struct" name="VkBindDescriptorSetsInfoKHR" alias="VkBindDescriptorSetsInfo"/>
        <type category="struct" name="VkPushConstantsInfo">
          <member values="VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO"><type>VkStructureType</type>          <name>sType</name></member>
          <member optional="true">const <type>void</type>*                                                 <name>pNext</name></member>
          <member optional="true"><type>VkPipelineLayout</type>                                            <name>layout</name></member>
          <member><type>VkShaderStageFlags</type>                                                          <name>stageFlags</name></member>
          <member optional="true"><type>uint32_t</type>                                                    <name>offset</name></member>
          <member><type>uint32_t</type>                                                                    <name>size</name></member>
          <member len="size">const <type>void</type>*                                                      <name>pValues</name></member>
        </type>
        <type category="struct" name="VkPushConstantsInfoKHR" alias="VkPushConstantsInfo"/>
        <type category="struct" name="VkPushDescriptorSetInfo">
          <member values="VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO"><type>VkStructureType</type> <name>sType</name></member>
          <member optional="true">const <type>void</type>*                                             <name>pNext</name></member>
          <member><type>VkShaderStageFlags</type>                                                      <name>stageFlags</name></member>
          <member optional="true"><type>VkPipelineLayout</type>                                        <name>layout</name></member>
          <member optional="true"><type>uint32_t</type>                                                <name>set</name></member>
          <member><type>uint32_t</type>                                                                <name>descriptorWriteCount</name></member>
          <member len="descriptorWriteCount">const <type>VkWriteDescriptorSet</type>*                  <name>pDescriptorWrites</name></member>
        </type>
        <type category="struct" name="VkPushDescriptorSetInfoKHR" alias="VkPushDescriptorSetInfo"/>
        <type category="struct" name="VkPushDescriptorSetWithTemplateInfo">
          <member values="VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO"><type>VkStructureType</type> <name>sType</name></member>
          <member optional="true">const <type>void</type>*                                                           <name>pNext</name></member>
          <member><type>VkDescriptorUpdateTemplate</type>                                                            <name>descriptorUpdateTemplate</name></member>
          <member optional="true"><type>VkPipelineLayout</type>                                                      <name>layout</name></member>
          <member optional="true"><type>uint32_t</type>                                                              <name>set</name></member>
          <member>const <type>void</type>*                                                                           <name>pData</name></member>
        </type>
        <type category="struct" name="VkPushDescriptorSetWithTemplateInfoKHR" alias="VkPushDescriptorSetWithTemplateInfo"/>
        <type category="struct" name="VkSetDescriptorBufferOffsetsInfoEXT">
          <member values="VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
          <member optional="true">const <type>void</type>*                                                       <name>pNext</name></member>
          <member><type>VkShaderStageFlags</type>                                                                <name>stageFlags</name></member>
          <member optional="true"><type>VkPipelineLayout</type>                                                  <name>layout</name></member>
          <member optional="true"><type>uint32_t</type>                                                          <name>firstSet</name></member>
          <member><type>uint32_t</type>                                                                          <name>setCount</name></member>
          <member len="setCount">const <type>uint32_t</type>*                                                    <name>pBufferIndices</name></member>
          <member len="setCount">const <type>VkDeviceSize</type>*                                                <name>pOffsets</name></member>
        </type>
        <type category="struct" name="VkBindDescriptorBufferEmbeddedSamplersInfoEXT">
          <member values="VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
          <member optional="true">const <type>void</type>*                                                                  <name>pNext</name></member>
          <member><type>VkShaderStageFlags</type>                                                                           <name>stageFlags</name></member>
          <member optional="true"><type>VkPipelineLayout</type>                                                             <name>layout</name></member>
          <member optional="true"><type>uint32_t</type>                                                                     <name>set</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCubicClampFeaturesQCOM" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>cubicRangeClamp</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceYcbcrDegammaFeaturesQCOM" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                     <name>ycbcrDegamma</name></member>
        </type>
        <type category="struct" name="VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM" structextends="VkSamplerYcbcrConversionCreateInfo">
            <member values="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*              <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>enableYDegamma</name></member>
            <member><type>VkBool32</type>                           <name>enableCbCrDegamma</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCubicWeightsFeaturesQCOM" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>selectableCubicWeights</name></member>
        </type>
        <type category="struct" name="VkSamplerCubicWeightsCreateInfoQCOM" structextends="VkSamplerCreateInfo">
            <member values="VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*      <name>pNext</name></member>
            <member><type>VkCubicFilterWeightsQCOM</type>         <name>cubicWeights</name></member>
        </type>
        <type category="struct" name="VkBlitImageCubicWeightsInfoQCOM" structextends="VkBlitImageInfo2">
            <member values="VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*      <name>pNext</name></member>
            <member><type>VkCubicFilterWeightsQCOM</type>         <name>cubicWeights</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImageProcessing2FeaturesQCOM" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*   <name>pNext</name></member>
            <member><type>VkBool32</type>                                      <name>textureBlockMatch2</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImageProcessing2PropertiesQCOM" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                        <name>pNext</name></member>
            <member limittype="max" optional="true"><type>VkExtent2D</type>  <name>maxBlockMatchWindow</name></member>
        </type>
        <type category="struct" name="VkSamplerBlockMatchWindowCreateInfoQCOM" structextends="VkSamplerCreateInfo">
            <member values="VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                  <name>pNext</name></member>
            <member><type>VkExtent2D</type>                                   <name>windowExtent</name></member>
            <member><type>VkBlockMatchWindowCompareModeQCOM</type>            <name>windowCompareMode</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>descriptorPoolOverallocation</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceLayeredDriverPropertiesMSFT" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                       <name>pNext</name></member>
            <member><type>VkLayeredDriverUnderlyingApiMSFT</type>            <name>underlyingAPI</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePerStageDescriptorSetFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>perStageDescriptorSet</name></member>
            <member><type>VkBool32</type>                                        <name>dynamicPipelineLayout</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExternalFormatResolveFeaturesANDROID" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
          <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID"><type>VkStructureType</type> <name>sType</name></member>
          <member optional="true"><type>void</type>*        <name>pNext</name></member>
          <member><type>VkBool32</type>                     <name>externalFormatResolve</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceExternalFormatResolvePropertiesANDROID" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
          <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID"><type>VkStructureType</type> <name>sType</name></member>
          <member optional="true"><type>void</type>*        <name>pNext</name></member>
          <member limittype="not"><type>VkBool32</type>  <name>nullColorAttachmentWithExternalFormatResolve</name></member>
          <member limittype="noauto"><type>VkChromaLocation</type>  <name>externalFormatResolveChromaOffsetX</name></member>
          <member limittype="noauto"><type>VkChromaLocation</type>  <name>externalFormatResolveChromaOffsetY</name></member>
        </type>
        <type category="struct" name="VkAndroidHardwareBufferFormatResolvePropertiesANDROID" structextends="VkAndroidHardwareBufferPropertiesANDROID" returnedonly="true">
          <member values="VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID"><type>VkStructureType</type> <name>sType</name></member>
          <member optional="true"><type>void</type>*        <name>pNext</name></member>
          <member><type>VkFormat</type>                     <name>colorAttachmentFormat</name></member>
        </type>
        <type category="struct" name="VkLatencySleepModeInfoNV">
            <member values="VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkBool32</type> <name>lowLatencyMode</name></member>
            <member><type>VkBool32</type> <name>lowLatencyBoost</name></member>
            <member><type>uint32_t</type> <name>minimumIntervalUs</name></member>
        </type>
        <type category="struct" name="VkLatencySleepInfoNV">
            <member values="VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkSemaphore</type> <name>signalSemaphore</name></member>
            <member><type>uint64_t</type> <name>value</name></member>
        </type>
        <type category="struct" name="VkSetLatencyMarkerInfoNV">
            <member values="VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>uint64_t</type> <name>presentID</name></member>
            <member><type>VkLatencyMarkerNV</type> <name>marker</name></member>
        </type>
        <type category="struct" name="VkGetLatencyMarkerInfoNV">
            <member values="VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>* <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type> <name>timingCount</name></member>
            <member optional="true" len="timingCount"><type>VkLatencyTimingsFrameReportNV</type>* <name>pTimings</name></member>
        </type>
        <type category="struct" name="VkLatencyTimingsFrameReportNV" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>uint64_t</type>               <name>presentID</name></member>
            <member><type>uint64_t</type>               <name>inputSampleTimeUs</name></member>
            <member><type>uint64_t</type>               <name>simStartTimeUs</name></member>
            <member><type>uint64_t</type>               <name>simEndTimeUs</name></member>
            <member><type>uint64_t</type>               <name>renderSubmitStartTimeUs</name></member>
            <member><type>uint64_t</type>               <name>renderSubmitEndTimeUs</name></member>
            <member><type>uint64_t</type>               <name>presentStartTimeUs</name></member>
            <member><type>uint64_t</type>               <name>presentEndTimeUs</name></member>
            <member><type>uint64_t</type>               <name>driverStartTimeUs</name></member>
            <member><type>uint64_t</type>               <name>driverEndTimeUs</name></member>
            <member><type>uint64_t</type>               <name>osRenderQueueStartTimeUs</name></member>
            <member><type>uint64_t</type>               <name>osRenderQueueEndTimeUs</name></member>
            <member><type>uint64_t</type>               <name>gpuRenderStartTimeUs</name></member>
            <member><type>uint64_t</type>               <name>gpuRenderEndTimeUs</name></member>
        </type>
        <type category="struct" name="VkOutOfBandQueueTypeInfoNV">
            <member values="VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkOutOfBandQueueTypeNV</type> <name>queueType</name></member>
        </type>
        <type category="struct" name="VkLatencySubmissionPresentIdNV" structextends="VkSubmitInfo,VkSubmitInfo2">
            <member values="VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*      <name>pNext</name></member>
            <member><type>uint64_t</type>                         <name>presentID</name></member>
        </type>
        <type category="struct" name="VkSwapchainLatencyCreateInfoNV" structextends="VkSwapchainCreateInfoKHR">
            <member values="VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                        <name>pNext</name></member>
            <member optional="true"><type>VkBool32</type>                           <name>latencyModeEnable</name></member>
        </type>
        <type category="struct" name="VkLatencySurfaceCapabilitiesNV" structextends="VkSurfaceCapabilities2KHR">
            <member values="VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                              <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                                 <name>presentModeCount</name></member>
            <member optional="true" len="presentModeCount"><type>VkPresentModeKHR</type>* <name>pPresentModes</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCudaKernelLaunchFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                       <name>cudaKernelLaunchFeatures</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCudaKernelLaunchPropertiesNV" structextends="VkPhysicalDeviceProperties2" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>         <name>computeCapabilityMinor</name></member>
            <member limittype="min"><type>uint32_t</type>         <name>computeCapabilityMajor</name></member>
        </type>
        <type category="struct" name="VkDeviceQueueShaderCoreControlCreateInfoARM" structextends="VkDeviceQueueCreateInfo,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>uint32_t</type>                         <name>shaderCoreCount</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSchedulingControlsFeaturesARM" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>schedulingControls</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceSchedulingControlsPropertiesARM" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                       <name>pNext</name></member>
            <member><type>VkPhysicalDeviceSchedulingControlsFlagsARM</type>  <name>schedulingControlsFlags</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
          <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG"><type>VkStructureType</type> <name>sType</name></member>
          <member optional="true"><type>void</type>*        <name>pNext</name></member>
          <member><type>VkBool32</type>  <name>relaxedLineRasterization</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRenderPassStripedFeaturesARM" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>renderPassStriped</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRenderPassStripedPropertiesARM" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                           <name>pNext</name></member>
            <member><type>VkExtent2D</type>                                      <name>renderPassStripeGranularity</name></member>
            <member><type>uint32_t</type>                                        <name>maxRenderPassStripes</name></member>
        </type>
        <type category="struct" name="VkRenderPassStripeInfoARM">
            <member values="VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>VkRect2D</type>                                        <name>stripeArea</name></member>
        </type>
        <type category="struct" name="VkRenderPassStripeBeginInfoARM" structextends="VkRenderingInfo,VkRenderPassBeginInfo">
            <member values="VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>uint32_t</type>                                          <name>stripeInfoCount</name></member>
            <member len="stripeInfoCount">const <type>VkRenderPassStripeInfoARM</type>*  <name>pStripeInfos</name></member>
        </type>
        <type category="struct" name="VkRenderPassStripeSubmitInfoARM" structextends="VkCommandBufferSubmitInfo">
            <member values="VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>* <name>pNext</name></member>
            <member><type>uint32_t</type>                                                    <name>stripeSemaphoreInfoCount</name></member>
            <member len="stripeSemaphoreInfoCount">const <type>VkSemaphoreSubmitInfo</type>* <name>pStripeSemaphoreInfos</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePipelineOpacityMicromapFeaturesARM" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_OPACITY_MICROMAP_FEATURES_ARM"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>pipelineOpacityMicromap</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type> <name>shaderMaximalReconvergence</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderSubgroupRotateFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type> <name>shaderSubgroupRotate</name></member>
            <member><type>VkBool32</type> <name>shaderSubgroupRotateClustered</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR" alias="VkPhysicalDeviceShaderSubgroupRotateFeatures"/>
        <type category="struct" name="VkPhysicalDeviceShaderExpectAssumeFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>shaderExpectAssume</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderExpectAssumeFeaturesKHR" alias="VkPhysicalDeviceShaderExpectAssumeFeatures"/>
        <type category="struct" name="VkPhysicalDeviceShaderFloatControls2Features" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
          <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
          <member optional="true"><type>void</type>*        <name>pNext</name></member>
          <member><type>VkBool32</type>                     <name>shaderFloatControls2</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderFloatControls2FeaturesKHR" alias="VkPhysicalDeviceShaderFloatControls2Features"/>
        <type category="struct" name="VkPhysicalDeviceDynamicRenderingLocalReadFeatures" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*                                <name>pNext</name></member>
            <member><type>VkBool32</type>                                                                   <name>dynamicRenderingLocalRead</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR" alias="VkPhysicalDeviceDynamicRenderingLocalReadFeatures"/>
        <type category="struct" name="VkRenderingAttachmentLocationInfo" structextends="VkGraphicsPipelineCreateInfo,VkCommandBufferInheritanceInfo">
            <member values="VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                                                   <name>colorAttachmentCount</name></member>
            <member noautovalidity="true" len="colorAttachmentCount">const <type>uint32_t</type>*           <name>pColorAttachmentLocations</name></member>
        </type>
        <type category="struct" name="VkRenderingAttachmentLocationInfoKHR" alias="VkRenderingAttachmentLocationInfo"/>
        <type category="struct" name="VkRenderingInputAttachmentIndexInfo" structextends="VkGraphicsPipelineCreateInfo,VkCommandBufferInheritanceInfo">
            <member values="VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                                                <name>pNext</name></member>
            <member optional="true"><type>uint32_t</type>                                                   <name>colorAttachmentCount</name></member>
            <member len="colorAttachmentCount" optional="true">const <type>uint32_t</type>*                 <name>pColorAttachmentInputIndices</name></member>
            <member optional="true">const <type>uint32_t</type>*                                            <name>pDepthInputAttachmentIndex</name></member>
            <member optional="true">const <type>uint32_t</type>*                                            <name>pStencilInputAttachmentIndex</name></member>
        </type>
        <type category="struct" name="VkRenderingInputAttachmentIndexInfoKHR" alias="VkRenderingInputAttachmentIndexInfo"/>
        <type category="struct" name="VkPhysicalDeviceShaderQuadControlFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                           <name>shaderQuadControl</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>shaderFloat16VectorAtomics</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMapMemoryPlacedFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member><type>VkBool32</type>                         <name>memoryMapPlaced</name></member>
            <member><type>VkBool32</type>                         <name>memoryMapRangePlaced</name></member>
            <member><type>VkBool32</type>                         <name>memoryUnmapReserve</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceMapMemoryPlacedPropertiesEXT" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*            <name>pNext</name></member>
            <member limittype="min,pot"><type>VkDeviceSize</type> <name>minPlacedMemoryMapAlignment</name></member>
        </type>
        <type category="struct" name="VkMemoryMapPlacedInfoEXT" structextends="VkMemoryMapInfo">
            <member values="VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*  <name>pNext</name></member>
            <member noautovalidity="true"><type>void</type>*  <name>pPlacedAddress</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceRawAccessChainsFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                           <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>shaderRawAccessChains</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCommandBufferInheritanceFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMMAND_BUFFER_INHERITANCE_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                           <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>commandBufferInheritance</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImageAlignmentControlFeaturesMESA" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                           <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>imageAlignmentControl</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceImageAlignmentControlPropertiesMESA" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                           <name>pNext</name></member>
            <member limittype="bitmask"><type>uint32_t</type>                    <name>supportedImageAlignmentMask</name></member>
        </type>
        <type category="struct" name="VkImageAlignmentControlCreateInfoMESA" structextends="VkImageCreateInfo">
            <member values="VK_STRUCTURE_TYPE_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                     <name>pNext</name></member>
            <member><type>uint32_t</type>                                        <name>maximumRequestedAlignment</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*     <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>shaderReplicatedComposites</name></member>
        </type>
        <type category="struct" name="VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_MODE_FIFO_LATEST_READY_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                           <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>presentModeFifoLatestReady</name></member>
        </type>
        <type category="struct" name="VkDepthClampRangeEXT">
            <member><type>float</type>          <name>minDepthClamp</name></member>
            <member><type>float</type>          <name>maxDepthClamp</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCooperativeMatrix2FeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>cooperativeMatrixWorkgroupScope</name></member>
            <member><type>VkBool32</type>                            <name>cooperativeMatrixFlexibleDimensions</name></member>
            <member><type>VkBool32</type>                            <name>cooperativeMatrixReductions</name></member>
            <member><type>VkBool32</type>                            <name>cooperativeMatrixConversions</name></member>
            <member><type>VkBool32</type>                            <name>cooperativeMatrixPerElementOperations</name></member>
            <member><type>VkBool32</type>                            <name>cooperativeMatrixTensorAddressing</name></member>
            <member><type>VkBool32</type>                            <name>cooperativeMatrixBlockLoads</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCooperativeMatrix2PropertiesNV" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                 <name>pNext</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>cooperativeMatrixWorkgroupScopeMaxWorkgroupSize</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>cooperativeMatrixFlexibleDimensionsMaxDimension</name></member>
            <member limittype="max"><type>uint32_t</type>              <name>cooperativeMatrixWorkgroupScopeReservedSharedMemory</name></member>
        </type>
        <type category="struct" name="VkCooperativeMatrixFlexibleDimensionsPropertiesNV" returnedonly="true">
            <member values="VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*               <name>pNext</name></member>
            <member><type>uint32_t</type>                            <name>MGranularity</name></member>
            <member><type>uint32_t</type>                            <name>NGranularity</name></member>
            <member><type>uint32_t</type>                            <name>KGranularity</name></member>
            <member><type>VkComponentTypeKHR</type>                  <name>AType</name></member>
            <member><type>VkComponentTypeKHR</type>                  <name>BType</name></member>
            <member><type>VkComponentTypeKHR</type>                  <name>CType</name></member>
            <member><type>VkComponentTypeKHR</type>                  <name>ResultType</name></member>
            <member><type>VkBool32</type>                            <name>saturatingAccumulation</name></member>
            <member><type>VkScopeKHR</type>                          <name>scope</name></member>
            <member><type>uint32_t</type>                            <name>workgroupInvocations</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceHdrVividFeaturesHUAWEI" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HDR_VIVID_FEATURES_HUAWEI"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true" noautovalidity="true"><type>void</type>*    <name>pNext</name></member>
            <member><type>VkBool32</type>                                       <name>hdrVivid</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_ROBUSTNESS_FEATURES_EXT"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                           <name>pNext</name></member>
            <member><type>VkBool32</type>                                        <name>vertexAttributeRobustness</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceDepthClampZeroOneFeaturesKHR" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_KHR"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*        <name>pNext</name></member>
            <member><type>VkBool32</type>                     <name>depthClampZeroOne</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCooperativeVectorFeaturesNV" structextends="VkPhysicalDeviceFeatures2,VkDeviceCreateInfo">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_FEATURES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*               <name>pNext</name></member>
            <member><type>VkBool32</type>                            <name>cooperativeVector</name></member>
            <member><type>VkBool32</type>                            <name>cooperativeVectorTraining</name></member>
        </type>
        <type category="struct" name="VkCooperativeVectorPropertiesNV">
            <member values="VK_STRUCTURE_TYPE_COOPERATIVE_VECTOR_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*               <name>pNext</name></member>
            <member><type>VkComponentTypeKHR</type>                  <name>inputType</name></member>
            <member><type>VkComponentTypeKHR</type>                  <name>inputInterpretation</name></member>
            <member><type>VkComponentTypeKHR</type>                  <name>matrixInterpretation</name></member>
            <member><type>VkComponentTypeKHR</type>                  <name>biasInterpretation</name></member>
            <member><type>VkComponentTypeKHR</type>                  <name>resultType</name></member>
            <member><type>VkBool32</type>                            <name>transpose</name></member>
        </type>
        <type category="struct" name="VkPhysicalDeviceCooperativeVectorPropertiesNV" returnedonly="true" structextends="VkPhysicalDeviceProperties2">
            <member values="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_PROPERTIES_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true"><type>void</type>*                               <name>pNext</name></member>
            <member limittype="bitmask"><type>VkShaderStageFlags</type>              <name>cooperativeVectorSupportedStages</name></member>
            <member><type>VkBool32</type>                                            <name>cooperativeVectorTrainingFloat16Accumulation</name></member>
            <member><type>VkBool32</type>                                            <name>cooperativeVectorTrainingFloat32Accumulation</name></member>
            <member><type>uint32_t</type>                                            <name>maxCooperativeVectorComponents</name></member>
        </type>
        <type category="struct" name="VkConvertCooperativeVectorMatrixInfoNV">
            <member values="VK_STRUCTURE_TYPE_CONVERT_COOPERATIVE_VECTOR_MATRIX_INFO_NV"><type>VkStructureType</type> <name>sType</name></member>
            <member optional="true">const <type>void</type>*                         <name>pNext</name></member>
            <member><type>size_t</type>                                              <name>srcSize</name></member>
            <member><type>VkDeviceOrHostAddressConstKHR</type>                       <name>srcData</name></member>
            <member optional="false,true"><type>size_t</type>*                       <name>pDstSize</name></member>
            <member><type>VkDeviceOrHostAddressKHR</type>                            <name>dstData</name></member>
            <member><type>VkComponentTypeKHR</type>                                  <name>srcComponentType</name></member>
            <member><type>VkComponentTypeKHR</type>                                  <name>dstComponentType</name></member>
            <member><type>uint32_t</type>                                            <name>numRows</name></member>
            <member><type>uint32_t</type>                                            <name>numColumns</name></member>
            <member><type>VkCooperativeVectorMatrixLayoutNV</type>                   <name>srcLayout</name></member>
            <member><type>size_t</type>                                              <name>srcStride</name></member>
            <member><type>VkCooperativeVectorMatrixLayoutNV</type>                   <name>dstLayout</name></member>
            <member><type>size_t</type>                                              <name>dstStride</name></member>
        </type>
    </types>


    <comment>Vulkan enumerant (token) definitions</comment>

    <enums name="API Constants" type="constants" comment="Vulkan hardcoded constants - not an enumerated type, part of the header boilerplate">
        <enum type="uint32_t" value="256"       name="VK_MAX_PHYSICAL_DEVICE_NAME_SIZE"/>
        <enum type="uint32_t" value="16"        name="VK_UUID_SIZE"/>
        <enum type="uint32_t" value="8"         name="VK_LUID_SIZE"/>
        <enum type="uint32_t" value="256"       name="VK_MAX_EXTENSION_NAME_SIZE"/>
        <enum type="uint32_t" value="256"       name="VK_MAX_DESCRIPTION_SIZE"/>
        <enum type="uint32_t" value="32"        name="VK_MAX_MEMORY_TYPES"/>
        <enum type="uint32_t" value="16"        name="VK_MAX_MEMORY_HEAPS" comment="The maximum number of unique memory heaps, each of which supporting 1 or more memory types"/>
        <enum type="float"    value="1000.0F"   name="VK_LOD_CLAMP_NONE"/>
        <enum type="uint32_t" value="(~0U)"     name="VK_REMAINING_MIP_LEVELS"/>
        <enum type="uint32_t" value="(~0U)"     name="VK_REMAINING_ARRAY_LAYERS"/>
        <enum type="uint32_t" value="(~0U)"     name="VK_REMAINING_3D_SLICES_EXT"/>
        <enum type="uint64_t" value="(~0ULL)"   name="VK_WHOLE_SIZE"/>
        <enum type="uint32_t" value="(~0U)"     name="VK_ATTACHMENT_UNUSED"/>
        <enum type="uint32_t" value="1"         name="VK_TRUE"/>
        <enum type="uint32_t" value="0"         name="VK_FALSE"/>
        <enum type="uint32_t" value="(~0U)"     name="VK_QUEUE_FAMILY_IGNORED"/>
        <enum type="uint32_t" value="(~1U)"     name="VK_QUEUE_FAMILY_EXTERNAL"/>
        <enum type="uint32_t" value="(~2U)"     name="VK_QUEUE_FAMILY_FOREIGN_EXT"/>
        <enum type="uint32_t" value="(~0U)"     name="VK_SUBPASS_EXTERNAL"/>
        <enum type="uint32_t" value="32"        name="VK_MAX_DEVICE_GROUP_SIZE"/>
        <enum type="uint32_t" value="256"       name="VK_MAX_DRIVER_NAME_SIZE"/>
        <enum type="uint32_t" value="256"       name="VK_MAX_DRIVER_INFO_SIZE"/>
        <enum type="uint32_t" value="(~0U)"     name="VK_SHADER_UNUSED_KHR"/>
        <enum type="uint32_t" value="16"        name="VK_MAX_GLOBAL_PRIORITY_SIZE"/>
        <enum type="uint32_t" value="32"        name="VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT"/>
        <enum type="uint32_t" value="32"        name="VK_MAX_PIPELINE_BINARY_KEY_SIZE_KHR"/>
        <enum type="uint32_t" value="7"         name="VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR"/>
        <enum type="uint32_t" value="(~0U)"     name="VK_SHADER_INDEX_UNUSED_AMDX"/>
        <enum type="uint32_t" value="(~0U)"     name="VK_PARTITIONED_ACCELERATION_STRUCTURE_PARTITION_INDEX_GLOBAL_NV"/>
    </enums>

    <comment>
        Unlike OpenGL, most tokens in Vulkan are actual typed enumerants in
        their own numeric namespaces. The "name" attribute is the C enum
        type name, and is pulled in from a type tag definition above
        (slightly clunky, but retains the type / enum distinction). "type"
        attributes of "enum" or "bitmask" indicate that these values should
        be generated inside an appropriate definition.
    </comment>

    <enums name="VkImageLayout" type="enum">
        <enum value="0"     name="VK_IMAGE_LAYOUT_UNDEFINED"                         comment="Implicit layout an image is when its contents are undefined due to various reasons (e.g. right after creation)"/>
        <enum value="1"     name="VK_IMAGE_LAYOUT_GENERAL"                           comment="General layout when image can be used for any kind of access"/>
        <enum value="2"     name="VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL"          comment="Optimal layout when image is only used for color attachment read/write"/>
        <enum value="3"     name="VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL"  comment="Optimal layout when image is only used for depth/stencil attachment read/write"/>
        <enum value="4"     name="VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL"   comment="Optimal layout when image is used for read only depth/stencil attachment and shader access"/>
        <enum value="5"     name="VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL"          comment="Optimal layout when image is used for read only shader access"/>
        <enum value="6"     name="VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL"              comment="Optimal layout when image is used only as source of transfer operations"/>
        <enum value="7"     name="VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL"              comment="Optimal layout when image is used only as destination of transfer operations"/>
        <enum value="8"     name="VK_IMAGE_LAYOUT_PREINITIALIZED"                    comment="Initial layout used when the data is populated by the CPU"/>
    </enums>
    <enums name="VkAttachmentLoadOp" type="enum">
        <enum value="0"     name="VK_ATTACHMENT_LOAD_OP_LOAD"/>
        <enum value="1"     name="VK_ATTACHMENT_LOAD_OP_CLEAR"/>
        <enum value="2"     name="VK_ATTACHMENT_LOAD_OP_DONT_CARE"/>
    </enums>
    <enums name="VkAttachmentStoreOp" type="enum">
        <enum value="0"     name="VK_ATTACHMENT_STORE_OP_STORE"/>
        <enum value="1"     name="VK_ATTACHMENT_STORE_OP_DONT_CARE"/>
    </enums>
    <enums name="VkImageType" type="enum">
        <enum value="0"     name="VK_IMAGE_TYPE_1D"/>
        <enum value="1"     name="VK_IMAGE_TYPE_2D"/>
        <enum value="2"     name="VK_IMAGE_TYPE_3D"/>
    </enums>
    <enums name="VkImageTiling" type="enum">
        <enum value="0"     name="VK_IMAGE_TILING_OPTIMAL"/>
        <enum value="1"     name="VK_IMAGE_TILING_LINEAR"/>
    </enums>
    <enums name="VkImageViewType" type="enum">
        <enum value="0"     name="VK_IMAGE_VIEW_TYPE_1D"/>
        <enum value="1"     name="VK_IMAGE_VIEW_TYPE_2D"/>
        <enum value="2"     name="VK_IMAGE_VIEW_TYPE_3D"/>
        <enum value="3"     name="VK_IMAGE_VIEW_TYPE_CUBE"/>
        <enum value="4"     name="VK_IMAGE_VIEW_TYPE_1D_ARRAY"/>
        <enum value="5"     name="VK_IMAGE_VIEW_TYPE_2D_ARRAY"/>
        <enum value="6"     name="VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"/>
    </enums>
    <enums name="VkCommandBufferLevel" type="enum">
        <enum value="0"     name="VK_COMMAND_BUFFER_LEVEL_PRIMARY"/>
        <enum value="1"     name="VK_COMMAND_BUFFER_LEVEL_SECONDARY"/>
    </enums>
    <enums name="VkComponentSwizzle" type="enum">
        <enum value="0"     name="VK_COMPONENT_SWIZZLE_IDENTITY"/>
        <enum value="1"     name="VK_COMPONENT_SWIZZLE_ZERO"/>
        <enum value="2"     name="VK_COMPONENT_SWIZZLE_ONE"/>
        <enum value="3"     name="VK_COMPONENT_SWIZZLE_R"/>
        <enum value="4"     name="VK_COMPONENT_SWIZZLE_G"/>
        <enum value="5"     name="VK_COMPONENT_SWIZZLE_B"/>
        <enum value="6"     name="VK_COMPONENT_SWIZZLE_A"/>
    </enums>
    <enums name="VkDescriptorType" type="enum">
        <enum value="0"     name="VK_DESCRIPTOR_TYPE_SAMPLER"/>
        <enum value="1"     name="VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER"/>
        <enum value="2"     name="VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE"/>
        <enum value="3"     name="VK_DESCRIPTOR_TYPE_STORAGE_IMAGE"/>
        <enum value="4"     name="VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER"/>
        <enum value="5"     name="VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER"/>
        <enum value="6"     name="VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER"/>
        <enum value="7"     name="VK_DESCRIPTOR_TYPE_STORAGE_BUFFER"/>
        <enum value="8"     name="VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC"/>
        <enum value="9"     name="VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC"/>
        <enum value="10"    name="VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT"/>
    </enums>
    <enums name="VkQueryType" type="enum">
        <enum value="0"     name="VK_QUERY_TYPE_OCCLUSION"/>
        <enum value="1"     name="VK_QUERY_TYPE_PIPELINE_STATISTICS"                 comment="Optional"/>
        <enum value="2"     name="VK_QUERY_TYPE_TIMESTAMP"/>
    </enums>
    <enums name="VkBorderColor" type="enum">
        <enum value="0"     name="VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK"/>
        <enum value="1"     name="VK_BORDER_COLOR_INT_TRANSPARENT_BLACK"/>
        <enum value="2"     name="VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK"/>
        <enum value="3"     name="VK_BORDER_COLOR_INT_OPAQUE_BLACK"/>
        <enum value="4"     name="VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE"/>
        <enum value="5"     name="VK_BORDER_COLOR_INT_OPAQUE_WHITE"/>
    </enums>
    <enums name="VkPipelineBindPoint" type="enum">
        <enum value="0"     name="VK_PIPELINE_BIND_POINT_GRAPHICS"/>
        <enum value="1"     name="VK_PIPELINE_BIND_POINT_COMPUTE"/>
    </enums>
    <enums name="VkPipelineCacheHeaderVersion" type="enum">
        <enum value="1"     name="VK_PIPELINE_CACHE_HEADER_VERSION_ONE"/>
    </enums>
    <enums name="VkPipelineCacheCreateFlagBits" type="bitmask">
    </enums>
    <enums name="VkPrimitiveTopology" type="enum">
        <enum value="0"     name="VK_PRIMITIVE_TOPOLOGY_POINT_LIST"/>
        <enum value="1"     name="VK_PRIMITIVE_TOPOLOGY_LINE_LIST"/>
        <enum value="2"     name="VK_PRIMITIVE_TOPOLOGY_LINE_STRIP"/>
        <enum value="3"     name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST"/>
        <enum value="4"     name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP"/>
        <enum value="5"     name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN"/>
        <enum value="6"     name="VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY"/>
        <enum value="7"     name="VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY"/>
        <enum value="8"     name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY"/>
        <enum value="9"     name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY"/>
        <enum value="10"    name="VK_PRIMITIVE_TOPOLOGY_PATCH_LIST"/>
    </enums>
    <enums name="VkSharingMode" type="enum">
        <enum value="0"     name="VK_SHARING_MODE_EXCLUSIVE"/>
        <enum value="1"     name="VK_SHARING_MODE_CONCURRENT"/>
    </enums>
    <enums name="VkIndexType" type="enum">
        <enum value="0"     name="VK_INDEX_TYPE_UINT16"/>
        <enum value="1"     name="VK_INDEX_TYPE_UINT32"/>
    </enums>
    <enums name="VkFilter" type="enum">
        <enum value="0"     name="VK_FILTER_NEAREST"/>
        <enum value="1"     name="VK_FILTER_LINEAR"/>
    </enums>
    <enums name="VkSamplerMipmapMode" type="enum">
        <enum value="0"     name="VK_SAMPLER_MIPMAP_MODE_NEAREST"                        comment="Choose nearest mip level"/>
        <enum value="1"     name="VK_SAMPLER_MIPMAP_MODE_LINEAR"                         comment="Linear filter between mip levels"/>
    </enums>
    <enums name="VkSamplerAddressMode" type="enum">
        <enum value="0"     name="VK_SAMPLER_ADDRESS_MODE_REPEAT"/>
        <enum value="1"     name="VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT"/>
        <enum value="2"     name="VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE"/>
        <enum value="3"     name="VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER"/>
            <comment>
                value="4" reserved for VK_KHR_sampler_mirror_clamp_to_edge
                enum VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE; do not
                alias!
            </comment>
    </enums>
    <enums name="VkCompareOp" type="enum">
        <enum value="0"     name="VK_COMPARE_OP_NEVER"/>
        <enum value="1"     name="VK_COMPARE_OP_LESS"/>
        <enum value="2"     name="VK_COMPARE_OP_EQUAL"/>
        <enum value="3"     name="VK_COMPARE_OP_LESS_OR_EQUAL"/>
        <enum value="4"     name="VK_COMPARE_OP_GREATER"/>
        <enum value="5"     name="VK_COMPARE_OP_NOT_EQUAL"/>
        <enum value="6"     name="VK_COMPARE_OP_GREATER_OR_EQUAL"/>
        <enum value="7"     name="VK_COMPARE_OP_ALWAYS"/>
    </enums>
    <enums name="VkPolygonMode" type="enum">
        <enum value="0"     name="VK_POLYGON_MODE_FILL"/>
        <enum value="1"     name="VK_POLYGON_MODE_LINE"/>
        <enum value="2"     name="VK_POLYGON_MODE_POINT"/>
    </enums>
    <enums name="VkFrontFace" type="enum">
        <enum value="0"     name="VK_FRONT_FACE_COUNTER_CLOCKWISE"/>
        <enum value="1"     name="VK_FRONT_FACE_CLOCKWISE"/>
    </enums>
    <enums name="VkBlendFactor" type="enum">
        <enum value="0"     name="VK_BLEND_FACTOR_ZERO"/>
        <enum value="1"     name="VK_BLEND_FACTOR_ONE"/>
        <enum value="2"     name="VK_BLEND_FACTOR_SRC_COLOR"/>
        <enum value="3"     name="VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR"/>
        <enum value="4"     name="VK_BLEND_FACTOR_DST_COLOR"/>
        <enum value="5"     name="VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR"/>
        <enum value="6"     name="VK_BLEND_FACTOR_SRC_ALPHA"/>
        <enum value="7"     name="VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA"/>
        <enum value="8"     name="VK_BLEND_FACTOR_DST_ALPHA"/>
        <enum value="9"     name="VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA"/>
        <enum value="10"    name="VK_BLEND_FACTOR_CONSTANT_COLOR"/>
        <enum value="11"    name="VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR"/>
        <enum value="12"    name="VK_BLEND_FACTOR_CONSTANT_ALPHA"/>
        <enum value="13"    name="VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA"/>
        <enum value="14"    name="VK_BLEND_FACTOR_SRC_ALPHA_SATURATE"/>
        <enum value="15"    name="VK_BLEND_FACTOR_SRC1_COLOR"/>
        <enum value="16"    name="VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR"/>
        <enum value="17"    name="VK_BLEND_FACTOR_SRC1_ALPHA"/>
        <enum value="18"    name="VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA"/>
    </enums>
    <enums name="VkBlendOp" type="enum">
        <enum value="0"     name="VK_BLEND_OP_ADD"/>
        <enum value="1"     name="VK_BLEND_OP_SUBTRACT"/>
        <enum value="2"     name="VK_BLEND_OP_REVERSE_SUBTRACT"/>
        <enum value="3"     name="VK_BLEND_OP_MIN"/>
        <enum value="4"     name="VK_BLEND_OP_MAX"/>
    </enums>
    <enums name="VkStencilOp" type="enum">
        <enum value="0"     name="VK_STENCIL_OP_KEEP"/>
        <enum value="1"     name="VK_STENCIL_OP_ZERO"/>
        <enum value="2"     name="VK_STENCIL_OP_REPLACE"/>
        <enum value="3"     name="VK_STENCIL_OP_INCREMENT_AND_CLAMP"/>
        <enum value="4"     name="VK_STENCIL_OP_DECREMENT_AND_CLAMP"/>
        <enum value="5"     name="VK_STENCIL_OP_INVERT"/>
        <enum value="6"     name="VK_STENCIL_OP_INCREMENT_AND_WRAP"/>
        <enum value="7"     name="VK_STENCIL_OP_DECREMENT_AND_WRAP"/>
    </enums>
    <enums name="VkLogicOp" type="enum">
        <enum value="0"     name="VK_LOGIC_OP_CLEAR"/>
        <enum value="1"     name="VK_LOGIC_OP_AND"/>
        <enum value="2"     name="VK_LOGIC_OP_AND_REVERSE"/>
        <enum value="3"     name="VK_LOGIC_OP_COPY"/>
        <enum value="4"     name="VK_LOGIC_OP_AND_INVERTED"/>
        <enum value="5"     name="VK_LOGIC_OP_NO_OP"/>
        <enum value="6"     name="VK_LOGIC_OP_XOR"/>
        <enum value="7"     name="VK_LOGIC_OP_OR"/>
        <enum value="8"     name="VK_LOGIC_OP_NOR"/>
        <enum value="9"     name="VK_LOGIC_OP_EQUIVALENT"/>
        <enum value="10"    name="VK_LOGIC_OP_INVERT"/>
        <enum value="11"    name="VK_LOGIC_OP_OR_REVERSE"/>
        <enum value="12"    name="VK_LOGIC_OP_COPY_INVERTED"/>
        <enum value="13"    name="VK_LOGIC_OP_OR_INVERTED"/>
        <enum value="14"    name="VK_LOGIC_OP_NAND"/>
        <enum value="15"    name="VK_LOGIC_OP_SET"/>
    </enums>
    <enums name="VkInternalAllocationType" type="enum">
        <enum value="0"     name="VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE"/>
    </enums>
    <enums name="VkSystemAllocationScope" type="enum">
        <enum value="0"     name="VK_SYSTEM_ALLOCATION_SCOPE_COMMAND"/>
        <enum value="1"     name="VK_SYSTEM_ALLOCATION_SCOPE_OBJECT"/>
        <enum value="2"     name="VK_SYSTEM_ALLOCATION_SCOPE_CACHE"/>
        <enum value="3"     name="VK_SYSTEM_ALLOCATION_SCOPE_DEVICE"/>
        <enum value="4"     name="VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE"/>
    </enums>
    <enums name="VkPhysicalDeviceType" type="enum">
        <enum value="0"     name="VK_PHYSICAL_DEVICE_TYPE_OTHER"/>
        <enum value="1"     name="VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU"/>
        <enum value="2"     name="VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU"/>
        <enum value="3"     name="VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU"/>
        <enum value="4"     name="VK_PHYSICAL_DEVICE_TYPE_CPU"/>
    </enums>
    <enums name="VkVertexInputRate" type="enum">
        <enum value="0"     name="VK_VERTEX_INPUT_RATE_VERTEX"/>
        <enum value="1"     name="VK_VERTEX_INPUT_RATE_INSTANCE"/>
    </enums>
    <enums name="VkFormat" type="enum" comment="Vulkan format definitions">
        <enum value="0"     name="VK_FORMAT_UNDEFINED"/>
        <enum value="1"     name="VK_FORMAT_R4G4_UNORM_PACK8"/>
        <enum value="2"     name="VK_FORMAT_R4G4B4A4_UNORM_PACK16"/>
        <enum value="3"     name="VK_FORMAT_B4G4R4A4_UNORM_PACK16"/>
        <enum value="4"     name="VK_FORMAT_R5G6B5_UNORM_PACK16"/>
        <enum value="5"     name="VK_FORMAT_B5G6R5_UNORM_PACK16"/>
        <enum value="6"     name="VK_FORMAT_R5G5B5A1_UNORM_PACK16"/>
        <enum value="7"     name="VK_FORMAT_B5G5R5A1_UNORM_PACK16"/>
        <enum value="8"     name="VK_FORMAT_A1R5G5B5_UNORM_PACK16"/>
        <enum value="9"     name="VK_FORMAT_R8_UNORM"/>
        <enum value="10"    name="VK_FORMAT_R8_SNORM"/>
        <enum value="11"    name="VK_FORMAT_R8_USCALED"/>
        <enum value="12"    name="VK_FORMAT_R8_SSCALED"/>
        <enum value="13"    name="VK_FORMAT_R8_UINT"/>
        <enum value="14"    name="VK_FORMAT_R8_SINT"/>
        <enum value="15"    name="VK_FORMAT_R8_SRGB"/>
        <enum value="16"    name="VK_FORMAT_R8G8_UNORM"/>
        <enum value="17"    name="VK_FORMAT_R8G8_SNORM"/>
        <enum value="18"    name="VK_FORMAT_R8G8_USCALED"/>
        <enum value="19"    name="VK_FORMAT_R8G8_SSCALED"/>
        <enum value="20"    name="VK_FORMAT_R8G8_UINT"/>
        <enum value="21"    name="VK_FORMAT_R8G8_SINT"/>
        <enum value="22"    name="VK_FORMAT_R8G8_SRGB"/>
        <enum value="23"    name="VK_FORMAT_R8G8B8_UNORM"/>
        <enum value="24"    name="VK_FORMAT_R8G8B8_SNORM"/>
        <enum value="25"    name="VK_FORMAT_R8G8B8_USCALED"/>
        <enum value="26"    name="VK_FORMAT_R8G8B8_SSCALED"/>
        <enum value="27"    name="VK_FORMAT_R8G8B8_UINT"/>
        <enum value="28"    name="VK_FORMAT_R8G8B8_SINT"/>
        <enum value="29"    name="VK_FORMAT_R8G8B8_SRGB"/>
        <enum value="30"    name="VK_FORMAT_B8G8R8_UNORM"/>
        <enum value="31"    name="VK_FORMAT_B8G8R8_SNORM"/>
        <enum value="32"    name="VK_FORMAT_B8G8R8_USCALED"/>
        <enum value="33"    name="VK_FORMAT_B8G8R8_SSCALED"/>
        <enum value="34"    name="VK_FORMAT_B8G8R8_UINT"/>
        <enum value="35"    name="VK_FORMAT_B8G8R8_SINT"/>
        <enum value="36"    name="VK_FORMAT_B8G8R8_SRGB"/>
        <enum value="37"    name="VK_FORMAT_R8G8B8A8_UNORM"/>
        <enum value="38"    name="VK_FORMAT_R8G8B8A8_SNORM"/>
        <enum value="39"    name="VK_FORMAT_R8G8B8A8_USCALED"/>
        <enum value="40"    name="VK_FORMAT_R8G8B8A8_SSCALED"/>
        <enum value="41"    name="VK_FORMAT_R8G8B8A8_UINT"/>
        <enum value="42"    name="VK_FORMAT_R8G8B8A8_SINT"/>
        <enum value="43"    name="VK_FORMAT_R8G8B8A8_SRGB"/>
        <enum value="44"    name="VK_FORMAT_B8G8R8A8_UNORM"/>
        <enum value="45"    name="VK_FORMAT_B8G8R8A8_SNORM"/>
        <enum value="46"    name="VK_FORMAT_B8G8R8A8_USCALED"/>
        <enum value="47"    name="VK_FORMAT_B8G8R8A8_SSCALED"/>
        <enum value="48"    name="VK_FORMAT_B8G8R8A8_UINT"/>
        <enum value="49"    name="VK_FORMAT_B8G8R8A8_SINT"/>
        <enum value="50"    name="VK_FORMAT_B8G8R8A8_SRGB"/>
        <enum value="51"    name="VK_FORMAT_A8B8G8R8_UNORM_PACK32"/>
        <enum value="52"    name="VK_FORMAT_A8B8G8R8_SNORM_PACK32"/>
        <enum value="53"    name="VK_FORMAT_A8B8G8R8_USCALED_PACK32"/>
        <enum value="54"    name="VK_FORMAT_A8B8G8R8_SSCALED_PACK32"/>
        <enum value="55"    name="VK_FORMAT_A8B8G8R8_UINT_PACK32"/>
        <enum value="56"    name="VK_FORMAT_A8B8G8R8_SINT_PACK32"/>
        <enum value="57"    name="VK_FORMAT_A8B8G8R8_SRGB_PACK32"/>
        <enum value="58"    name="VK_FORMAT_A2R10G10B10_UNORM_PACK32"/>
        <enum value="59"    name="VK_FORMAT_A2R10G10B10_SNORM_PACK32"/>
        <enum value="60"    name="VK_FORMAT_A2R10G10B10_USCALED_PACK32"/>
        <enum value="61"    name="VK_FORMAT_A2R10G10B10_SSCALED_PACK32"/>
        <enum value="62"    name="VK_FORMAT_A2R10G10B10_UINT_PACK32"/>
        <enum value="63"    name="VK_FORMAT_A2R10G10B10_SINT_PACK32"/>
        <enum value="64"    name="VK_FORMAT_A2B10G10R10_UNORM_PACK32"/>
        <enum value="65"    name="VK_FORMAT_A2B10G10R10_SNORM_PACK32"/>
        <enum value="66"    name="VK_FORMAT_A2B10G10R10_USCALED_PACK32"/>
        <enum value="67"    name="VK_FORMAT_A2B10G10R10_SSCALED_PACK32"/>
        <enum value="68"    name="VK_FORMAT_A2B10G10R10_UINT_PACK32"/>
        <enum value="69"    name="VK_FORMAT_A2B10G10R10_SINT_PACK32"/>
        <enum value="70"    name="VK_FORMAT_R16_UNORM"/>
        <enum value="71"    name="VK_FORMAT_R16_SNORM"/>
        <enum value="72"    name="VK_FORMAT_R16_USCALED"/>
        <enum value="73"    name="VK_FORMAT_R16_SSCALED"/>
        <enum value="74"    name="VK_FORMAT_R16_UINT"/>
        <enum value="75"    name="VK_FORMAT_R16_SINT"/>
        <enum value="76"    name="VK_FORMAT_R16_SFLOAT"/>
        <enum value="77"    name="VK_FORMAT_R16G16_UNORM"/>
        <enum value="78"    name="VK_FORMAT_R16G16_SNORM"/>
        <enum value="79"    name="VK_FORMAT_R16G16_USCALED"/>
        <enum value="80"    name="VK_FORMAT_R16G16_SSCALED"/>
        <enum value="81"    name="VK_FORMAT_R16G16_UINT"/>
        <enum value="82"    name="VK_FORMAT_R16G16_SINT"/>
        <enum value="83"    name="VK_FORMAT_R16G16_SFLOAT"/>
        <enum value="84"    name="VK_FORMAT_R16G16B16_UNORM"/>
        <enum value="85"    name="VK_FORMAT_R16G16B16_SNORM"/>
        <enum value="86"    name="VK_FORMAT_R16G16B16_USCALED"/>
        <enum value="87"    name="VK_FORMAT_R16G16B16_SSCALED"/>
        <enum value="88"    name="VK_FORMAT_R16G16B16_UINT"/>
        <enum value="89"    name="VK_FORMAT_R16G16B16_SINT"/>
        <enum value="90"    name="VK_FORMAT_R16G16B16_SFLOAT"/>
        <enum value="91"    name="VK_FORMAT_R16G16B16A16_UNORM"/>
        <enum value="92"    name="VK_FORMAT_R16G16B16A16_SNORM"/>
        <enum value="93"    name="VK_FORMAT_R16G16B16A16_USCALED"/>
        <enum value="94"    name="VK_FORMAT_R16G16B16A16_SSCALED"/>
        <enum value="95"    name="VK_FORMAT_R16G16B16A16_UINT"/>
        <enum value="96"    name="VK_FORMAT_R16G16B16A16_SINT"/>
        <enum value="97"    name="VK_FORMAT_R16G16B16A16_SFLOAT"/>
        <enum value="98"    name="VK_FORMAT_R32_UINT"/>
        <enum value="99"    name="VK_FORMAT_R32_SINT"/>
        <enum value="100"   name="VK_FORMAT_R32_SFLOAT"/>
        <enum value="101"   name="VK_FORMAT_R32G32_UINT"/>
        <enum value="102"   name="VK_FORMAT_R32G32_SINT"/>
        <enum value="103"   name="VK_FORMAT_R32G32_SFLOAT"/>
        <enum value="104"   name="VK_FORMAT_R32G32B32_UINT"/>
        <enum value="105"   name="VK_FORMAT_R32G32B32_SINT"/>
        <enum value="106"   name="VK_FORMAT_R32G32B32_SFLOAT"/>
        <enum value="107"   name="VK_FORMAT_R32G32B32A32_UINT"/>
        <enum value="108"   name="VK_FORMAT_R32G32B32A32_SINT"/>
        <enum value="109"   name="VK_FORMAT_R32G32B32A32_SFLOAT"/>
        <enum value="110"   name="VK_FORMAT_R64_UINT"/>
        <enum value="111"   name="VK_FORMAT_R64_SINT"/>
        <enum value="112"   name="VK_FORMAT_R64_SFLOAT"/>
        <enum value="113"   name="VK_FORMAT_R64G64_UINT"/>
        <enum value="114"   name="VK_FORMAT_R64G64_SINT"/>
        <enum value="115"   name="VK_FORMAT_R64G64_SFLOAT"/>
        <enum value="116"   name="VK_FORMAT_R64G64B64_UINT"/>
        <enum value="117"   name="VK_FORMAT_R64G64B64_SINT"/>
        <enum value="118"   name="VK_FORMAT_R64G64B64_SFLOAT"/>
        <enum value="119"   name="VK_FORMAT_R64G64B64A64_UINT"/>
        <enum value="120"   name="VK_FORMAT_R64G64B64A64_SINT"/>
        <enum value="121"   name="VK_FORMAT_R64G64B64A64_SFLOAT"/>
        <enum value="122"   name="VK_FORMAT_B10G11R11_UFLOAT_PACK32"/>
        <enum value="123"   name="VK_FORMAT_E5B9G9R9_UFLOAT_PACK32"/>
        <enum value="124"   name="VK_FORMAT_D16_UNORM"/>
        <enum value="125"   name="VK_FORMAT_X8_D24_UNORM_PACK32"/>
        <enum value="126"   name="VK_FORMAT_D32_SFLOAT"/>
        <enum value="127"   name="VK_FORMAT_S8_UINT"/>
        <enum value="128"   name="VK_FORMAT_D16_UNORM_S8_UINT"/>
        <enum value="129"   name="VK_FORMAT_D24_UNORM_S8_UINT"/>
        <enum value="130"   name="VK_FORMAT_D32_SFLOAT_S8_UINT"/>
        <enum value="131"   name="VK_FORMAT_BC1_RGB_UNORM_BLOCK"/>
        <enum value="132"   name="VK_FORMAT_BC1_RGB_SRGB_BLOCK"/>
        <enum value="133"   name="VK_FORMAT_BC1_RGBA_UNORM_BLOCK"/>
        <enum value="134"   name="VK_FORMAT_BC1_RGBA_SRGB_BLOCK"/>
        <enum value="135"   name="VK_FORMAT_BC2_UNORM_BLOCK"/>
        <enum value="136"   name="VK_FORMAT_BC2_SRGB_BLOCK"/>
        <enum value="137"   name="VK_FORMAT_BC3_UNORM_BLOCK"/>
        <enum value="138"   name="VK_FORMAT_BC3_SRGB_BLOCK"/>
        <enum value="139"   name="VK_FORMAT_BC4_UNORM_BLOCK"/>
        <enum value="140"   name="VK_FORMAT_BC4_SNORM_BLOCK"/>
        <enum value="141"   name="VK_FORMAT_BC5_UNORM_BLOCK"/>
        <enum value="142"   name="VK_FORMAT_BC5_SNORM_BLOCK"/>
        <enum value="143"   name="VK_FORMAT_BC6H_UFLOAT_BLOCK"/>
        <enum value="144"   name="VK_FORMAT_BC6H_SFLOAT_BLOCK"/>
        <enum value="145"   name="VK_FORMAT_BC7_UNORM_BLOCK"/>
        <enum value="146"   name="VK_FORMAT_BC7_SRGB_BLOCK"/>
        <enum value="147"   name="VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK"/>
        <enum value="148"   name="VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK"/>
        <enum value="149"   name="VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK"/>
        <enum value="150"   name="VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK"/>
        <enum value="151"   name="VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK"/>
        <enum value="152"   name="VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK"/>
        <enum value="153"   name="VK_FORMAT_EAC_R11_UNORM_BLOCK"/>
        <enum value="154"   name="VK_FORMAT_EAC_R11_SNORM_BLOCK"/>
        <enum value="155"   name="VK_FORMAT_EAC_R11G11_UNORM_BLOCK"/>
        <enum value="156"   name="VK_FORMAT_EAC_R11G11_SNORM_BLOCK"/>
        <enum value="157"   name="VK_FORMAT_ASTC_4x4_UNORM_BLOCK"/>
        <enum value="158"   name="VK_FORMAT_ASTC_4x4_SRGB_BLOCK"/>
        <enum value="159"   name="VK_FORMAT_ASTC_5x4_UNORM_BLOCK"/>
        <enum value="160"   name="VK_FORMAT_ASTC_5x4_SRGB_BLOCK"/>
        <enum value="161"   name="VK_FORMAT_ASTC_5x5_UNORM_BLOCK"/>
        <enum value="162"   name="VK_FORMAT_ASTC_5x5_SRGB_BLOCK"/>
        <enum value="163"   name="VK_FORMAT_ASTC_6x5_UNORM_BLOCK"/>
        <enum value="164"   name="VK_FORMAT_ASTC_6x5_SRGB_BLOCK"/>
        <enum value="165"   name="VK_FORMAT_ASTC_6x6_UNORM_BLOCK"/>
        <enum value="166"   name="VK_FORMAT_ASTC_6x6_SRGB_BLOCK"/>
        <enum value="167"   name="VK_FORMAT_ASTC_8x5_UNORM_BLOCK"/>
        <enum value="168"   name="VK_FORMAT_ASTC_8x5_SRGB_BLOCK"/>
        <enum value="169"   name="VK_FORMAT_ASTC_8x6_UNORM_BLOCK"/>
        <enum value="170"   name="VK_FORMAT_ASTC_8x6_SRGB_BLOCK"/>
        <enum value="171"   name="VK_FORMAT_ASTC_8x8_UNORM_BLOCK"/>
        <enum value="172"   name="VK_FORMAT_ASTC_8x8_SRGB_BLOCK"/>
        <enum value="173"   name="VK_FORMAT_ASTC_10x5_UNORM_BLOCK"/>
        <enum value="174"   name="VK_FORMAT_ASTC_10x5_SRGB_BLOCK"/>
        <enum value="175"   name="VK_FORMAT_ASTC_10x6_UNORM_BLOCK"/>
        <enum value="176"   name="VK_FORMAT_ASTC_10x6_SRGB_BLOCK"/>
        <enum value="177"   name="VK_FORMAT_ASTC_10x8_UNORM_BLOCK"/>
        <enum value="178"   name="VK_FORMAT_ASTC_10x8_SRGB_BLOCK"/>
        <enum value="179"   name="VK_FORMAT_ASTC_10x10_UNORM_BLOCK"/>
        <enum value="180"   name="VK_FORMAT_ASTC_10x10_SRGB_BLOCK"/>
        <enum value="181"   name="VK_FORMAT_ASTC_12x10_UNORM_BLOCK"/>
        <enum value="182"   name="VK_FORMAT_ASTC_12x10_SRGB_BLOCK"/>
        <enum value="183"   name="VK_FORMAT_ASTC_12x12_UNORM_BLOCK"/>
        <enum value="184"   name="VK_FORMAT_ASTC_12x12_SRGB_BLOCK"/>
    </enums>
    <enums name="VkStructureType" type="enum" comment="Structure type enumerant">
        <enum value="0"     name="VK_STRUCTURE_TYPE_APPLICATION_INFO"/>
        <enum value="1"     name="VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO"/>
        <enum value="2"     name="VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO"/>
        <enum value="3"     name="VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO"/>
        <enum value="4"     name="VK_STRUCTURE_TYPE_SUBMIT_INFO"/>
        <enum value="5"     name="VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO"/>
        <enum value="6"     name="VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE"/>
        <enum value="7"     name="VK_STRUCTURE_TYPE_BIND_SPARSE_INFO"/>
        <enum value="8"     name="VK_STRUCTURE_TYPE_FENCE_CREATE_INFO"/>
        <enum value="9"     name="VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO"/>
        <enum value="10"    name="VK_STRUCTURE_TYPE_EVENT_CREATE_INFO"/>
        <enum value="11"    name="VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO"/>
        <enum value="12"    name="VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO"/>
        <enum value="13"    name="VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO"/>
        <enum value="14"    name="VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO"/>
        <enum value="15"    name="VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO"/>
        <enum value="16"    name="VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO"/>
        <enum value="17"    name="VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO"/>
        <enum value="18"    name="VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO"/>
        <enum value="19"    name="VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO"/>
        <enum value="20"    name="VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO"/>
        <enum value="21"    name="VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO"/>
        <enum value="22"    name="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO"/>
        <enum value="23"    name="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO"/>
        <enum value="24"    name="VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO"/>
        <enum value="25"    name="VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO"/>
        <enum value="26"    name="VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO"/>
        <enum value="27"    name="VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO"/>
        <enum value="28"    name="VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO"/>
        <enum value="29"    name="VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO"/>
        <enum value="30"    name="VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO"/>
        <enum value="31"    name="VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO"/>
        <enum value="32"    name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO"/>
        <enum value="33"    name="VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO"/>
        <enum value="34"    name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO"/>
        <enum value="35"    name="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET"/>
        <enum value="36"    name="VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET"/>
        <enum value="37"    name="VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO"/>
        <enum value="38"    name="VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO"/>
        <enum value="39"    name="VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO"/>
        <enum value="40"    name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO"/>
        <enum value="41"    name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO"/>
        <enum value="42"    name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO"/>
        <enum value="43"    name="VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO"/>
        <enum value="44"    name="VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER"/>
        <enum value="45"    name="VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER"/>
        <enum value="46"    name="VK_STRUCTURE_TYPE_MEMORY_BARRIER"/>
        <enum value="47"    name="VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO" comment="Reserved for internal use by the loader, layers, and ICDs"/>
        <enum value="48"    name="VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO" comment="Reserved for internal use by the loader, layers, and ICDs"/>
    </enums>
    <enums name="VkSubpassContents" type="enum">
        <enum value="0"     name="VK_SUBPASS_CONTENTS_INLINE"/>
        <enum value="1"     name="VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS"/>
    </enums>
    <enums name="VkResult" type="enum" comment="API result codes">
            <comment>Return codes (positive values)</comment>
        <enum value="0"     name="VK_SUCCESS" comment="Command completed successfully"/>
        <enum value="1"     name="VK_NOT_READY" comment="A fence or query has not yet completed"/>
        <enum value="2"     name="VK_TIMEOUT" comment="A wait operation has not completed in the specified time"/>
        <enum value="3"     name="VK_EVENT_SET" comment="An event is signaled"/>
        <enum value="4"     name="VK_EVENT_RESET" comment="An event is unsignaled"/>
        <enum value="5"     name="VK_INCOMPLETE" comment="A return array was too small for the result"/>
            <comment>Error codes (negative values)</comment>
        <enum value="-1"    name="VK_ERROR_OUT_OF_HOST_MEMORY" comment="A host memory allocation has failed"/>
        <enum value="-2"    name="VK_ERROR_OUT_OF_DEVICE_MEMORY" comment="A device memory allocation has failed"/>
        <enum value="-3"    name="VK_ERROR_INITIALIZATION_FAILED" comment="Initialization of an object has failed"/>
        <enum value="-4"    name="VK_ERROR_DEVICE_LOST" comment="The logical device has been lost. See &lt;&lt;devsandqueues-lost-device&gt;&gt;"/>
        <enum value="-5"    name="VK_ERROR_MEMORY_MAP_FAILED" comment="Mapping of a memory object has failed"/>
        <enum value="-6"    name="VK_ERROR_LAYER_NOT_PRESENT" comment="Layer specified does not exist"/>
        <enum value="-7"    name="VK_ERROR_EXTENSION_NOT_PRESENT" comment="Extension specified does not exist"/>
        <enum value="-8"    name="VK_ERROR_FEATURE_NOT_PRESENT" comment="Requested feature is not available on this device"/>
        <enum value="-9"    name="VK_ERROR_INCOMPATIBLE_DRIVER" comment="Unable to find a Vulkan driver"/>
        <enum value="-10"   name="VK_ERROR_TOO_MANY_OBJECTS" comment="Too many objects of the type have already been created"/>
        <enum value="-11"   name="VK_ERROR_FORMAT_NOT_SUPPORTED" comment="Requested format is not supported on this device"/>
        <enum value="-12"   name="VK_ERROR_FRAGMENTED_POOL" comment="A requested pool allocation has failed due to fragmentation of the pool's memory"/>
        <enum value="-13"   name="VK_ERROR_UNKNOWN" comment="An unknown error has occurred, due to an implementation or application bug"/>
            <unused start="-14" comment="This is the next unused available error code (negative value)"/>
    </enums>
    <enums name="VkDynamicState" type="enum">
        <enum value="0"     name="VK_DYNAMIC_STATE_VIEWPORT"/>
        <enum value="1"     name="VK_DYNAMIC_STATE_SCISSOR"/>
        <enum value="2"     name="VK_DYNAMIC_STATE_LINE_WIDTH"/>
        <enum value="3"     name="VK_DYNAMIC_STATE_DEPTH_BIAS"/>
        <enum value="4"     name="VK_DYNAMIC_STATE_BLEND_CONSTANTS"/>
        <enum value="5"     name="VK_DYNAMIC_STATE_DEPTH_BOUNDS"/>
        <enum value="6"     name="VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK"/>
        <enum value="7"     name="VK_DYNAMIC_STATE_STENCIL_WRITE_MASK"/>
        <enum value="8"     name="VK_DYNAMIC_STATE_STENCIL_REFERENCE"/>
    </enums>
    <enums name="VkDescriptorUpdateTemplateType" type="enum">
        <enum value="0"     name="VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET"   comment="Create descriptor update template for descriptor set updates"/>
    </enums>
    <enums name="VkObjectType" type="enum" comment="Enums to track objects of various types - also see objtypeenum attributes on type tags">
        <enum value="0"     name="VK_OBJECT_TYPE_UNKNOWN"/>
        <enum value="1"     name="VK_OBJECT_TYPE_INSTANCE"/>
        <enum value="2"     name="VK_OBJECT_TYPE_PHYSICAL_DEVICE"/>
        <enum value="3"     name="VK_OBJECT_TYPE_DEVICE"/>
        <enum value="4"     name="VK_OBJECT_TYPE_QUEUE"/>
        <enum value="5"     name="VK_OBJECT_TYPE_SEMAPHORE"/>
        <enum value="6"     name="VK_OBJECT_TYPE_COMMAND_BUFFER"/>
        <enum value="7"     name="VK_OBJECT_TYPE_FENCE"/>
        <enum value="8"     name="VK_OBJECT_TYPE_DEVICE_MEMORY"/>
        <enum value="9"     name="VK_OBJECT_TYPE_BUFFER"/>
        <enum value="10"    name="VK_OBJECT_TYPE_IMAGE"/>
        <enum value="11"    name="VK_OBJECT_TYPE_EVENT"/>
        <enum value="12"    name="VK_OBJECT_TYPE_QUERY_POOL"/>
        <enum value="13"    name="VK_OBJECT_TYPE_BUFFER_VIEW"/>
        <enum value="14"    name="VK_OBJECT_TYPE_IMAGE_VIEW"/>
        <enum value="15"    name="VK_OBJECT_TYPE_SHADER_MODULE"/>
        <enum value="16"    name="VK_OBJECT_TYPE_PIPELINE_CACHE"/>
        <enum value="17"    name="VK_OBJECT_TYPE_PIPELINE_LAYOUT"/>
        <enum value="18"    name="VK_OBJECT_TYPE_RENDER_PASS"/>
        <enum value="19"    name="VK_OBJECT_TYPE_PIPELINE"/>
        <enum value="20"    name="VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT"/>
        <enum value="21"    name="VK_OBJECT_TYPE_SAMPLER"/>
        <enum value="22"    name="VK_OBJECT_TYPE_DESCRIPTOR_POOL"/>
        <enum value="23"    name="VK_OBJECT_TYPE_DESCRIPTOR_SET"/>
        <enum value="24"    name="VK_OBJECT_TYPE_FRAMEBUFFER"/>
        <enum value="25"    name="VK_OBJECT_TYPE_COMMAND_POOL"/>
    </enums>
    <enums name="VkRayTracingInvocationReorderModeNV" type="enum">
        <enum value="0"     name="VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV"/>
        <enum value="1"     name="VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV"/>
    </enums>
    <enums name="VkRayTracingLssIndexingModeNV" type="enum">
        <enum value="0" name="VK_RAY_TRACING_LSS_INDEXING_MODE_LIST_NV"/>
        <enum value="1" name="VK_RAY_TRACING_LSS_INDEXING_MODE_SUCCESSIVE_NV"/>
    </enums>
    <enums name="VkRayTracingLssPrimitiveEndCapsModeNV" type="enum">
        <enum value="0" name="VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_NONE_NV"/>
        <enum value="1" name="VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_CHAINED_NV"/>
    </enums>
    <enums name="VkDirectDriverLoadingModeLUNARG" type="enum">
        <enum value="0"     name="VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG"/>
        <enum value="1"     name="VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG"/>
    </enums>
    <enums name="VkAntiLagModeAMD" type="enum">
        <enum value="0"     name="VK_ANTI_LAG_MODE_DRIVER_CONTROL_AMD"/>
        <enum value="1"     name="VK_ANTI_LAG_MODE_ON_AMD"/>
        <enum value="2"     name="VK_ANTI_LAG_MODE_OFF_AMD"/>
    </enums>
    <enums name="VkAntiLagStageAMD" type="enum">
        <enum value="0"     name="VK_ANTI_LAG_STAGE_INPUT_AMD"/>
        <enum value="1"     name="VK_ANTI_LAG_STAGE_PRESENT_AMD"/>
    </enums>

        <comment>Flags</comment>
    <enums name="VkQueueFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_QUEUE_GRAPHICS_BIT"                             comment="Queue supports graphics operations"/>
        <enum bitpos="1"    name="VK_QUEUE_COMPUTE_BIT"                              comment="Queue supports compute operations"/>
        <enum bitpos="2"    name="VK_QUEUE_TRANSFER_BIT"                             comment="Queue supports transfer operations"/>
        <enum bitpos="3"    name="VK_QUEUE_SPARSE_BINDING_BIT"                       comment="Queue supports sparse resource memory management operations"/>
    </enums>
    <enums name="VkCullModeFlagBits" type="bitmask">
        <enum value="0"     name="VK_CULL_MODE_NONE"/>
        <enum bitpos="0"    name="VK_CULL_MODE_FRONT_BIT"/>
        <enum bitpos="1"    name="VK_CULL_MODE_BACK_BIT"/>
        <enum value="0x00000003" name="VK_CULL_MODE_FRONT_AND_BACK"/>
    </enums>
    <enums name="VkRenderPassCreateFlagBits" type="bitmask">
    </enums>
    <enums name="VkDeviceQueueCreateFlagBits" type="bitmask">
    </enums>
    <enums name="VkMemoryPropertyFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT"               comment="If otherwise stated, then allocate memory on device"/>
        <enum bitpos="1"    name="VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT"               comment="Memory is mappable by host"/>
        <enum bitpos="2"    name="VK_MEMORY_PROPERTY_HOST_COHERENT_BIT"              comment="Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache"/>
        <enum bitpos="3"    name="VK_MEMORY_PROPERTY_HOST_CACHED_BIT"                comment="Memory will be cached by the host"/>
        <enum bitpos="4"    name="VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT"           comment="Memory may be allocated by the driver when it is required"/>
    </enums>
    <enums name="VkMemoryHeapFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_MEMORY_HEAP_DEVICE_LOCAL_BIT"                   comment="If set, heap represents device memory"/>
    </enums>
    <enums name="VkAccessFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_ACCESS_INDIRECT_COMMAND_READ_BIT"               comment="Controls coherency of indirect command reads"/>
        <enum bitpos="1"    name="VK_ACCESS_INDEX_READ_BIT"                          comment="Controls coherency of index reads"/>
        <enum bitpos="2"    name="VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT"               comment="Controls coherency of vertex attribute reads"/>
        <enum bitpos="3"    name="VK_ACCESS_UNIFORM_READ_BIT"                        comment="Controls coherency of uniform buffer reads"/>
        <enum bitpos="4"    name="VK_ACCESS_INPUT_ATTACHMENT_READ_BIT"               comment="Controls coherency of input attachment reads"/>
        <enum bitpos="5"    name="VK_ACCESS_SHADER_READ_BIT"                         comment="Controls coherency of shader reads"/>
        <enum bitpos="6"    name="VK_ACCESS_SHADER_WRITE_BIT"                        comment="Controls coherency of shader writes"/>
        <enum bitpos="7"    name="VK_ACCESS_COLOR_ATTACHMENT_READ_BIT"               comment="Controls coherency of color attachment reads"/>
        <enum bitpos="8"    name="VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT"              comment="Controls coherency of color attachment writes"/>
        <enum bitpos="9"    name="VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT"       comment="Controls coherency of depth/stencil attachment reads"/>
        <enum bitpos="10"   name="VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT"      comment="Controls coherency of depth/stencil attachment writes"/>
        <enum bitpos="11"   name="VK_ACCESS_TRANSFER_READ_BIT"                       comment="Controls coherency of transfer reads"/>
        <enum bitpos="12"   name="VK_ACCESS_TRANSFER_WRITE_BIT"                      comment="Controls coherency of transfer writes"/>
        <enum bitpos="13"   name="VK_ACCESS_HOST_READ_BIT"                           comment="Controls coherency of host reads"/>
        <enum bitpos="14"   name="VK_ACCESS_HOST_WRITE_BIT"                          comment="Controls coherency of host writes"/>
        <enum bitpos="15"   name="VK_ACCESS_MEMORY_READ_BIT"                         comment="Controls coherency of memory reads"/>
        <enum bitpos="16"   name="VK_ACCESS_MEMORY_WRITE_BIT"                        comment="Controls coherency of memory writes"/>
    </enums>
    <enums name="VkBufferUsageFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_BUFFER_USAGE_TRANSFER_SRC_BIT"                  comment="Can be used as a source of transfer operations"/>
        <enum bitpos="1"    name="VK_BUFFER_USAGE_TRANSFER_DST_BIT"                  comment="Can be used as a destination of transfer operations"/>
        <enum bitpos="2"    name="VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT"          comment="Can be used as TBO"/>
        <enum bitpos="3"    name="VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT"          comment="Can be used as IBO"/>
        <enum bitpos="4"    name="VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT"                comment="Can be used as UBO"/>
        <enum bitpos="5"    name="VK_BUFFER_USAGE_STORAGE_BUFFER_BIT"                comment="Can be used as SSBO"/>
        <enum bitpos="6"    name="VK_BUFFER_USAGE_INDEX_BUFFER_BIT"                  comment="Can be used as source of fixed-function index fetch (index buffer)"/>
        <enum bitpos="7"    name="VK_BUFFER_USAGE_VERTEX_BUFFER_BIT"                 comment="Can be used as source of fixed-function vertex fetch (VBO)"/>
        <enum bitpos="8"    name="VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT"               comment="Can be the source of indirect parameters (e.g. indirect buffer, parameter buffer)"/>
    </enums>
    <enums name="VkBufferUsageFlagBits2" type="bitmask" bitwidth="64">
        <enum bitpos="0"    name="VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT"/>
        <enum bitpos="1"    name="VK_BUFFER_USAGE_2_TRANSFER_DST_BIT"/>
        <enum bitpos="2"    name="VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT"/>
        <enum bitpos="3"    name="VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT"/>
        <enum bitpos="4"    name="VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT"/>
        <enum bitpos="5"    name="VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT"/>
        <enum bitpos="6"    name="VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT"/>
        <enum bitpos="7"    name="VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT"/>
        <enum bitpos="8"    name="VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT"/>
    </enums>
    <enums name="VkBufferCreateFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_BUFFER_CREATE_SPARSE_BINDING_BIT"               comment="Buffer should support sparse backing"/>
        <enum bitpos="1"    name="VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT"             comment="Buffer should support sparse backing with partial residency"/>
        <enum bitpos="2"    name="VK_BUFFER_CREATE_SPARSE_ALIASED_BIT"               comment="Buffer should support constant data access to physical memory ranges mapped into multiple locations of sparse buffers"/>
    </enums>
    <enums name="VkShaderStageFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_SHADER_STAGE_VERTEX_BIT"/>
        <enum bitpos="1"    name="VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT"/>
        <enum bitpos="2"    name="VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT"/>
        <enum bitpos="3"    name="VK_SHADER_STAGE_GEOMETRY_BIT"/>
        <enum bitpos="4"    name="VK_SHADER_STAGE_FRAGMENT_BIT"/>
        <enum bitpos="5"    name="VK_SHADER_STAGE_COMPUTE_BIT"/>
        <enum value="0x0000001F" name="VK_SHADER_STAGE_ALL_GRAPHICS"/>
        <enum value="0x7FFFFFFF" name="VK_SHADER_STAGE_ALL"/>
    </enums>
    <enums name="VkImageUsageFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_IMAGE_USAGE_TRANSFER_SRC_BIT"                   comment="Can be used as a source of transfer operations"/>
        <enum bitpos="1"    name="VK_IMAGE_USAGE_TRANSFER_DST_BIT"                   comment="Can be used as a destination of transfer operations"/>
        <enum bitpos="2"    name="VK_IMAGE_USAGE_SAMPLED_BIT"                        comment="Can be sampled from (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)"/>
        <enum bitpos="3"    name="VK_IMAGE_USAGE_STORAGE_BIT"                        comment="Can be used as storage image (STORAGE_IMAGE descriptor type)"/>
        <enum bitpos="4"    name="VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT"               comment="Can be used as framebuffer color attachment"/>
        <enum bitpos="5"    name="VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT"       comment="Can be used as framebuffer depth/stencil attachment"/>
        <enum bitpos="6"    name="VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT"           comment="Image data not needed outside of rendering"/>
        <enum bitpos="7"    name="VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT"               comment="Can be used as framebuffer input attachment"/>
    </enums>
    <enums name="VkImageCreateFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_IMAGE_CREATE_SPARSE_BINDING_BIT"                comment="Image should support sparse backing"/>
        <enum bitpos="1"    name="VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT"              comment="Image should support sparse backing with partial residency"/>
        <enum bitpos="2"    name="VK_IMAGE_CREATE_SPARSE_ALIASED_BIT"                comment="Image should support constant data access to physical memory ranges mapped into multiple locations of sparse images"/>
        <enum bitpos="3"    name="VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT"                comment="Allows image views to have different format than the base image"/>
        <enum bitpos="4"    name="VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT"               comment="Allows creating image views with cube type from the created image"/>
    </enums>
    <enums name="VkImageViewCreateFlagBits" type="bitmask">
    </enums>
    <enums name="VkSamplerCreateFlagBits" type="bitmask">
    </enums>
    <enums name="VkPipelineCreateFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT"/>
        <enum bitpos="1"    name="VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT"/>
        <enum bitpos="2"    name="VK_PIPELINE_CREATE_DERIVATIVE_BIT"/>
    </enums>
    <enums name="VkPipelineCreateFlagBits2" type="bitmask" bitwidth="64">
        <enum bitpos="0"    name="VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT"/>
        <enum bitpos="1"    name="VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT"/>
        <enum bitpos="2"    name="VK_PIPELINE_CREATE_2_DERIVATIVE_BIT"/>
        <enum bitpos="3"    name="VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT"/>
        <enum bitpos="4"    name="VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT"/>
        <enum bitpos="8"    name="VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT"/>
        <enum bitpos="9"    name="VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT"/>
        <enum bitpos="27"   name="VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT"/>
        <enum bitpos="30"   name="VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT"/>
    </enums>
    <enums name="VkPipelineShaderStageCreateFlagBits" type="bitmask">
    </enums>
    <enums name="VkColorComponentFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_COLOR_COMPONENT_R_BIT"/>
        <enum bitpos="1"    name="VK_COLOR_COMPONENT_G_BIT"/>
        <enum bitpos="2"    name="VK_COLOR_COMPONENT_B_BIT"/>
        <enum bitpos="3"    name="VK_COLOR_COMPONENT_A_BIT"/>
    </enums>
    <enums name="VkFenceCreateFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_FENCE_CREATE_SIGNALED_BIT"/>
    </enums>
    <enums name="VkSemaphoreCreateFlagBits" type="bitmask">
    </enums>
    <enums name="VkFormatFeatureFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT"               comment="Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)"/>
        <enum bitpos="1"    name="VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT"               comment="Format can be used for storage images (STORAGE_IMAGE descriptor type)"/>
        <enum bitpos="2"    name="VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT"        comment="Format supports atomic operations in case it is used for storage images"/>
        <enum bitpos="3"    name="VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT"        comment="Format can be used for uniform texel buffers (TBOs)"/>
        <enum bitpos="4"    name="VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT"        comment="Format can be used for storage texel buffers (IBOs)"/>
        <enum bitpos="5"    name="VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT" comment="Format supports atomic operations in case it is used for storage texel buffers"/>
        <enum bitpos="6"    name="VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT"               comment="Format can be used for vertex buffers (VBOs)"/>
        <enum bitpos="7"    name="VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT"            comment="Format can be used for color attachment images"/>
        <enum bitpos="8"    name="VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT"      comment="Format supports blending in case it is used for color attachment images"/>
        <enum bitpos="9"    name="VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT"    comment="Format can be used for depth/stencil attachment images"/>
        <enum bitpos="10"   name="VK_FORMAT_FEATURE_BLIT_SRC_BIT"                    comment="Format can be used as the source image of blits with vkCmdBlitImage"/>
        <enum bitpos="11"   name="VK_FORMAT_FEATURE_BLIT_DST_BIT"                    comment="Format can be used as the destination image of blits with vkCmdBlitImage"/>
        <enum bitpos="12"   name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT" comment="Format can be filtered with VK_FILTER_LINEAR when being sampled"/>
    </enums>
    <enums name="VkQueryControlFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_QUERY_CONTROL_PRECISE_BIT"                      comment="Require precise results to be collected by the query"/>
    </enums>
    <enums name="VkQueryResultFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_QUERY_RESULT_64_BIT"                            comment="Results of the queries are written to the destination buffer as 64-bit values"/>
        <enum bitpos="1"    name="VK_QUERY_RESULT_WAIT_BIT"                          comment="Results of the queries are waited on before proceeding with the result copy"/>
        <enum bitpos="2"    name="VK_QUERY_RESULT_WITH_AVAILABILITY_BIT"             comment="Besides the results of the query, the availability of the results is also written"/>
        <enum bitpos="3"    name="VK_QUERY_RESULT_PARTIAL_BIT"                       comment="Copy the partial results of the query even if the final results are not available"/>
    </enums>
    <enums name="VkCommandBufferUsageFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT"/>
        <enum bitpos="1"    name="VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT"/>
        <enum bitpos="2"    name="VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT"      comment="Command buffer may be submitted/executed more than once simultaneously"/>
    </enums>
    <enums name="VkQueryPipelineStatisticFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT"                    comment="Optional"/>
        <enum bitpos="1"    name="VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT"                  comment="Optional"/>
        <enum bitpos="2"    name="VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT"                  comment="Optional"/>
        <enum bitpos="3"    name="VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT"                comment="Optional"/>
        <enum bitpos="4"    name="VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT"                 comment="Optional"/>
        <enum bitpos="5"    name="VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT"                       comment="Optional"/>
        <enum bitpos="6"    name="VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT"                        comment="Optional"/>
        <enum bitpos="7"    name="VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT"                comment="Optional"/>
        <enum bitpos="8"    name="VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT"        comment="Optional"/>
        <enum bitpos="9"    name="VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT" comment="Optional"/>
        <enum bitpos="10"   name="VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT"                 comment="Optional"/>
    </enums>
    <enums name="VkMemoryMapFlagBits" type="bitmask">
    </enums>
    <enums name="VkImageAspectFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_IMAGE_ASPECT_COLOR_BIT"/>
        <enum bitpos="1"    name="VK_IMAGE_ASPECT_DEPTH_BIT"/>
        <enum bitpos="2"    name="VK_IMAGE_ASPECT_STENCIL_BIT"/>
        <enum bitpos="3"    name="VK_IMAGE_ASPECT_METADATA_BIT"/>
    </enums>
    <enums name="VkSparseImageFormatFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT"         comment="Image uses a single mip tail region for all array layers"/>
        <enum bitpos="1"    name="VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT"       comment="Image requires mip level dimensions to be an integer multiple of the sparse image block dimensions for non-tail mip levels."/>
        <enum bitpos="2"    name="VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT" comment="Image uses a non-standard sparse image block dimensions"/>
    </enums>
    <enums name="VkSparseMemoryBindFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_SPARSE_MEMORY_BIND_METADATA_BIT"                comment="Operation binds resource metadata to memory"/>
    </enums>
    <enums name="VkPipelineStageFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT"                 comment="Before subsequent commands are processed"/>
        <enum bitpos="1"    name="VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT"               comment="Draw/DispatchIndirect command fetch"/>
        <enum bitpos="2"    name="VK_PIPELINE_STAGE_VERTEX_INPUT_BIT"                comment="Vertex/index fetch"/>
        <enum bitpos="3"    name="VK_PIPELINE_STAGE_VERTEX_SHADER_BIT"               comment="Vertex shading"/>
        <enum bitpos="4"    name="VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT" comment="Tessellation control shading"/>
        <enum bitpos="5"    name="VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT" comment="Tessellation evaluation shading"/>
        <enum bitpos="6"    name="VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"             comment="Geometry shading"/>
        <enum bitpos="7"    name="VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT"             comment="Fragment shading"/>
        <enum bitpos="8"    name="VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT"        comment="Early fragment (depth and stencil) tests"/>
        <enum bitpos="9"    name="VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT"         comment="Late fragment (depth and stencil) tests"/>
        <enum bitpos="10"   name="VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT"     comment="Color attachment writes"/>
        <enum bitpos="11"   name="VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT"              comment="Compute shading"/>
        <enum bitpos="12"   name="VK_PIPELINE_STAGE_TRANSFER_BIT"                    comment="Transfer/copy operations"/>
        <enum bitpos="13"   name="VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT"              comment="After previous commands have completed"/>
        <enum bitpos="14"   name="VK_PIPELINE_STAGE_HOST_BIT"                        comment="Indicates host (CPU) is a source/sink of the dependency"/>
        <enum bitpos="15"   name="VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT"                comment="All stages of the graphics pipeline"/>
        <enum bitpos="16"   name="VK_PIPELINE_STAGE_ALL_COMMANDS_BIT"                comment="All stages supported on the queue"/>
    </enums>
    <enums name="VkCommandPoolCreateFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_COMMAND_POOL_CREATE_TRANSIENT_BIT"              comment="Command buffers have a short lifetime"/>
        <enum bitpos="1"    name="VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT"   comment="Command buffers may release their memory individually"/>
    </enums>
    <enums name="VkCommandPoolResetFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT"       comment="Release resources owned by the pool"/>
    </enums>
    <enums name="VkCommandBufferResetFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT"     comment="Release resources owned by the buffer"/>
    </enums>
    <enums name="VkSampleCountFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_SAMPLE_COUNT_1_BIT"                             comment="Sample count 1 supported"/>
        <enum bitpos="1"    name="VK_SAMPLE_COUNT_2_BIT"                             comment="Sample count 2 supported"/>
        <enum bitpos="2"    name="VK_SAMPLE_COUNT_4_BIT"                             comment="Sample count 4 supported"/>
        <enum bitpos="3"    name="VK_SAMPLE_COUNT_8_BIT"                             comment="Sample count 8 supported"/>
        <enum bitpos="4"    name="VK_SAMPLE_COUNT_16_BIT"                            comment="Sample count 16 supported"/>
        <enum bitpos="5"    name="VK_SAMPLE_COUNT_32_BIT"                            comment="Sample count 32 supported"/>
        <enum bitpos="6"    name="VK_SAMPLE_COUNT_64_BIT"                            comment="Sample count 64 supported"/>
    </enums>
    <enums name="VkAttachmentDescriptionFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT"           comment="The attachment may alias physical memory of another attachment in the same render pass"/>
    </enums>
    <enums name="VkStencilFaceFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_STENCIL_FACE_FRONT_BIT"                         comment="Front face"/>
        <enum bitpos="1"    name="VK_STENCIL_FACE_BACK_BIT"                          comment="Back face"/>
        <enum value="0x00000003" name="VK_STENCIL_FACE_FRONT_AND_BACK"               comment="Front and back faces"/>
        <enum api="vulkan"  name="VK_STENCIL_FRONT_AND_BACK" alias="VK_STENCIL_FACE_FRONT_AND_BACK" deprecated="aliased"/>
    </enums>
    <enums name="VkDescriptorPoolCreateFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT" comment="Descriptor sets may be freed individually"/>
    </enums>
    <enums name="VkDependencyFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_DEPENDENCY_BY_REGION_BIT"                       comment="Dependency is per pixel region "/>
    </enums>
    <enums name="VkSemaphoreType" type="enum">
        <enum value="0"     name="VK_SEMAPHORE_TYPE_BINARY"/>
        <enum value="1"     name="VK_SEMAPHORE_TYPE_TIMELINE"/>
    </enums>
    <enums name="VkSemaphoreWaitFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_SEMAPHORE_WAIT_ANY_BIT"/>
    </enums>

        <comment>WSI Extensions</comment>
    <enums name="VkPresentModeKHR" type="enum">
        <enum value="0"     name="VK_PRESENT_MODE_IMMEDIATE_KHR"/>
        <enum value="1"     name="VK_PRESENT_MODE_MAILBOX_KHR"/>
        <enum value="2"     name="VK_PRESENT_MODE_FIFO_KHR"/>
        <enum value="3"     name="VK_PRESENT_MODE_FIFO_RELAXED_KHR"/>
    </enums>
    <enums name="VkColorSpaceKHR" type="enum">
        <enum value="0"     name="VK_COLOR_SPACE_SRGB_NONLINEAR_KHR"/>
        <enum api="vulkan"  name="VK_COLORSPACE_SRGB_NONLINEAR_KHR" alias="VK_COLOR_SPACE_SRGB_NONLINEAR_KHR" deprecated="aliased"/>
    </enums>
    <enums name="VkDisplayPlaneAlphaFlagBitsKHR" type="bitmask">
        <enum bitpos="0"    name="VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR"/>
        <enum bitpos="1"    name="VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR"/>
        <enum bitpos="2"    name="VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR"/>
        <enum bitpos="3"    name="VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR"/>
    </enums>
    <enums name="VkCompositeAlphaFlagBitsKHR" type="bitmask">
        <enum bitpos="0"    name="VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR"/>
        <enum bitpos="1"    name="VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR"/>
        <enum bitpos="2"    name="VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR"/>
        <enum bitpos="3"    name="VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR"/>
    </enums>
    <enums name="VkSurfaceTransformFlagBitsKHR" type="bitmask">
        <enum bitpos="0"    name="VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR"/>
        <enum bitpos="1"    name="VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR"/>
        <enum bitpos="2"    name="VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR"/>
        <enum bitpos="3"    name="VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR"/>
        <enum bitpos="4"    name="VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR"/>
        <enum bitpos="5"    name="VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR"/>
        <enum bitpos="6"    name="VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR"/>
        <enum bitpos="7"    name="VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR"/>
        <enum bitpos="8"    name="VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR"/>
    </enums>
    <enums name="VkDisplaySurfaceStereoTypeNV" type="enum">
        <enum value="0"     name="VK_DISPLAY_SURFACE_STEREO_TYPE_NONE_NV"/>
        <enum value="1"     name="VK_DISPLAY_SURFACE_STEREO_TYPE_ONBOARD_DIN_NV"/>
        <enum value="2"     name="VK_DISPLAY_SURFACE_STEREO_TYPE_HDMI_3D_NV"/>
        <enum value="3"     name="VK_DISPLAY_SURFACE_STEREO_TYPE_INBAND_DISPLAYPORT_NV"/>
    </enums>
    <enums name="VkSwapchainImageUsageFlagBitsANDROID" type="bitmask">
      <enum bitpos="0"      name="VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID"/>
    </enums>
    <enums name="VkTimeDomainKHR" type="enum">
        <enum value="0"     name="VK_TIME_DOMAIN_DEVICE_KHR"/>
        <enum value="1"     name="VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR"/>
        <enum value="2"     name="VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR"/>
        <enum value="3"     name="VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR"/>
    </enums>
    <enums name="VkDebugReportFlagBitsEXT" type="bitmask">
        <enum bitpos="0"    name="VK_DEBUG_REPORT_INFORMATION_BIT_EXT"/>
        <enum bitpos="1"    name="VK_DEBUG_REPORT_WARNING_BIT_EXT"/>
        <enum bitpos="2"    name="VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT"/>
        <enum bitpos="3"    name="VK_DEBUG_REPORT_ERROR_BIT_EXT"/>
        <enum bitpos="4"    name="VK_DEBUG_REPORT_DEBUG_BIT_EXT"/>
    </enums>
    <enums name="VkDebugReportObjectTypeEXT" type="enum">
        <enum value="0"     name="VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT"/>
        <enum value="1"     name="VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT"/>
        <enum value="2"     name="VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT"/>
        <enum value="3"     name="VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT"/>
        <enum value="4"     name="VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT"/>
        <enum value="5"     name="VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT"/>
        <enum value="6"     name="VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT"/>
        <enum value="7"     name="VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT"/>
        <enum value="8"     name="VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT"/>
        <enum value="9"     name="VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT"/>
        <enum value="10"    name="VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT"/>
        <enum value="11"    name="VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT"/>
        <enum value="12"    name="VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT"/>
        <enum value="13"    name="VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT"/>
        <enum value="14"    name="VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT"/>
        <enum value="15"    name="VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT"/>
        <enum value="16"    name="VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT"/>
        <enum value="17"    name="VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT"/>
        <enum value="18"    name="VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT"/>
        <enum value="19"    name="VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT"/>
        <enum value="20"    name="VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT"/>
        <enum value="21"    name="VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT"/>
        <enum value="22"    name="VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT"/>
        <enum value="23"    name="VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT"/>
        <enum value="24"    name="VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT"/>
        <enum value="25"    name="VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT"/>
        <enum value="26"    name="VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT"/>
        <enum value="27"    name="VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT"/>
        <enum value="28"    name="VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT"/>
        <enum               name="VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT" alias="VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT" deprecated="aliased"/>
        <enum value="29"    name="VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT"/>
        <enum value="30"    name="VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT"/>
            <comment>NVX_device_generated_commands formerly used these enum values, but that extension has been removed
                value 31 / name VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT
                value 32 / name VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT
            </comment>
        <enum value="33"    name="VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT"/>
        <enum               name="VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT" alias="VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT" deprecated="aliased"/>
    </enums>
    <enums name="VkDeviceMemoryReportEventTypeEXT" type="enum">
        <enum value="0"     name="VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT"/>
        <enum value="1"     name="VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT"/>
        <enum value="2"     name="VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT"/>
        <enum value="3"     name="VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT"/>
        <enum value="4"     name="VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT"/>
    </enums>
    <enums name="VkRasterizationOrderAMD" type="enum">
        <enum value="0"     name="VK_RASTERIZATION_ORDER_STRICT_AMD"/>
        <enum value="1"     name="VK_RASTERIZATION_ORDER_RELAXED_AMD"/>
    </enums>
    <enums name="VkExternalMemoryHandleTypeFlagBitsNV" type="bitmask">
        <enum bitpos="0"    name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV"/>
        <enum bitpos="1"    name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV"/>
        <enum bitpos="2"    name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV"/>
        <enum bitpos="3"    name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV"/>
    </enums>
    <enums name="VkExternalMemoryFeatureFlagBitsNV" type="bitmask">
        <enum bitpos="0"    name="VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV"/>
        <enum bitpos="1"    name="VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV"/>
        <enum bitpos="2"    name="VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV"/>
    </enums>
    <enums name="VkClusterAccelerationStructureIndexFormatFlagBitsNV" type="bitmask">
        <enum bitpos="0"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_8BIT_NV"/>
        <enum bitpos="1"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_16BIT_NV"/>
        <enum bitpos="2"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_32BIT_NV"/>
    </enums>
    <enums name="VkClusterAccelerationStructureTypeNV" type="enum">
        <enum value="0"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_CLUSTERS_BOTTOM_LEVEL_NV"/>
        <enum value="1"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_TRIANGLE_CLUSTER_NV"/>
        <enum value="2"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_TRIANGLE_CLUSTER_TEMPLATE_NV"/>
    </enums>
    <enums name="VkClusterAccelerationStructureOpTypeNV" type="enum">
        <enum value="0"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_MOVE_OBJECTS_NV"/>
        <enum value="1"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_CLUSTERS_BOTTOM_LEVEL_NV"/>
        <enum value="2"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_NV"/>
        <enum value="3"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_TEMPLATE_NV"/>
        <enum value="4"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_INSTANTIATE_TRIANGLE_CLUSTER_NV"/>
    </enums>
    <enums name="VkClusterAccelerationStructureOpModeNV" type="enum">
        <enum value="0"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_IMPLICIT_DESTINATIONS_NV"/>
        <enum value="1"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_EXPLICIT_DESTINATIONS_NV"/>
        <enum value="2"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_COMPUTE_SIZES_NV"/>
    </enums>
    <enums name="VkClusterAccelerationStructureClusterFlagBitsNV" type="bitmask">
        <enum bitpos="0"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_CLUSTER_ALLOW_DISABLE_OPACITY_MICROMAPS_NV"/>
    </enums>
    <enums name="VkClusterAccelerationStructureGeometryFlagBitsNV" type="bitmask">
        <enum bitpos="0"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_CULL_DISABLE_BIT_NV"/>
        <enum bitpos="1"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_NO_DUPLICATE_ANYHIT_INVOCATION_BIT_NV"/>
        <enum bitpos="2"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_OPAQUE_BIT_NV"/>
    </enums>
    <enums name="VkClusterAccelerationStructureAddressResolutionFlagBitsNV" type="bitmask">
        <enum bitpos="0"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_IMPLICIT_DATA_BIT_NV"/>
        <enum bitpos="1"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SCRATCH_DATA_BIT_NV"/>
        <enum bitpos="2"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_ADDRESS_ARRAY_BIT_NV"/>
        <enum bitpos="3"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_SIZES_ARRAY_BIT_NV"/>
        <enum bitpos="4"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_ARRAY_BIT_NV"/>
        <enum bitpos="5"     name="VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_COUNT_BIT_NV"/>
    </enums>
    <enums name="VkValidationCheckEXT" type="enum">
        <enum value="0"     name="VK_VALIDATION_CHECK_ALL_EXT"/>
        <enum value="1"     name="VK_VALIDATION_CHECK_SHADERS_EXT"/>
    </enums>
    <enums name="VkValidationFeatureEnableEXT" type="enum">
        <enum value="0"     name="VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT"/>
        <enum value="1"     name="VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT"/>
        <enum value="2"     name="VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT"/>
        <enum value="3"     name="VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT"/>
        <enum value="4"     name="VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT"/>
    </enums>
    <enums name="VkValidationFeatureDisableEXT" type="enum">
        <enum value="0"     name="VK_VALIDATION_FEATURE_DISABLE_ALL_EXT"/>
        <enum value="1"     name="VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT"/>
        <enum value="2"     name="VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT"/>
        <enum value="3"     name="VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT"/>
        <enum value="4"     name="VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT"/>
        <enum value="5"     name="VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT"/>
        <enum value="6"     name="VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT"/>
        <enum value="7"     name="VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT"/>
    </enums>
    <enums name="VkLayerSettingTypeEXT" type="enum">
        <enum value="0"     name="VK_LAYER_SETTING_TYPE_BOOL32_EXT"/>
        <enum value="1"     name="VK_LAYER_SETTING_TYPE_INT32_EXT"/>
        <enum value="2"     name="VK_LAYER_SETTING_TYPE_INT64_EXT"/>
        <enum value="3"     name="VK_LAYER_SETTING_TYPE_UINT32_EXT"/>
        <enum value="4"     name="VK_LAYER_SETTING_TYPE_UINT64_EXT"/>
        <enum value="5"     name="VK_LAYER_SETTING_TYPE_FLOAT32_EXT"/>
        <enum value="6"     name="VK_LAYER_SETTING_TYPE_FLOAT64_EXT"/>
        <enum value="7"     name="VK_LAYER_SETTING_TYPE_STRING_EXT"/>
    </enums>
    <enums name="VkSubgroupFeatureFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_SUBGROUP_FEATURE_BASIC_BIT"              comment="Basic subgroup operations"/>
        <enum bitpos="1"    name="VK_SUBGROUP_FEATURE_VOTE_BIT"               comment="Vote subgroup operations"/>
        <enum bitpos="2"    name="VK_SUBGROUP_FEATURE_ARITHMETIC_BIT"         comment="Arithmetic subgroup operations"/>
        <enum bitpos="3"    name="VK_SUBGROUP_FEATURE_BALLOT_BIT"             comment="Ballot subgroup operations"/>
        <enum bitpos="4"    name="VK_SUBGROUP_FEATURE_SHUFFLE_BIT"            comment="Shuffle subgroup operations"/>
        <enum bitpos="5"    name="VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT"   comment="Shuffle relative subgroup operations"/>
        <enum bitpos="6"    name="VK_SUBGROUP_FEATURE_CLUSTERED_BIT"          comment="Clustered subgroup operations"/>
        <enum bitpos="7"    name="VK_SUBGROUP_FEATURE_QUAD_BIT"               comment="Quad subgroup operations"/>
    </enums>
    <enums name="VkIndirectCommandsLayoutUsageFlagBitsNV" type="bitmask">
        <enum bitpos="0"    name="VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV"/>
        <enum bitpos="1"    name="VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV"/>
        <enum bitpos="2"    name="VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV"/>
    </enums>
    <enums name="VkIndirectStateFlagBitsNV" type="bitmask">
        <enum bitpos="0"    name="VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV"/>
    </enums>
    <enums name="VkIndirectCommandsTokenTypeNV" type="enum">
        <enum value="0"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV"/>
        <enum value="1"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV"/>
        <enum value="2"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV"/>
        <enum value="3"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV"/>
        <enum value="4"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV"/>
        <enum value="5"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV"/>
        <enum value="6"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV"/>
        <enum value="7"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV"/>
    </enums>
    <enums name="VkPrivateDataSlotCreateFlagBits" type="bitmask">
    </enums>
    <enums name="VkDescriptorSetLayoutCreateFlagBits" type="bitmask">
    </enums>
    <enums name="VkExternalMemoryHandleTypeFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT"/>
        <enum bitpos="1"    name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT"/>
        <enum bitpos="2"    name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT"/>
        <enum bitpos="3"    name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT"/>
        <enum bitpos="4"    name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT"/>
        <enum bitpos="5"    name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT"/>
        <enum bitpos="6"    name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT"/>
    </enums>
    <enums name="VkExternalMemoryFeatureFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT"/>
        <enum bitpos="1"    name="VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT"/>
        <enum bitpos="2"    name="VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT"/>
    </enums>
    <enums name="VkExternalSemaphoreHandleTypeFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT"/>
        <enum bitpos="1"    name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT"/>
        <enum bitpos="2"    name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT"/>
        <enum bitpos="3"    name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT"/>
        <enum               name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT" alias="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT"/>
        <enum bitpos="4"    name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT"/>
    </enums>
    <enums name="VkExternalSemaphoreFeatureFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT"/>
        <enum bitpos="1"    name="VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT"/>
    </enums>
    <enums name="VkSemaphoreImportFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_SEMAPHORE_IMPORT_TEMPORARY_BIT"/>
    </enums>
    <enums name="VkExternalFenceHandleTypeFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT"/>
        <enum bitpos="1"    name="VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT"/>
        <enum bitpos="2"    name="VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT"/>
        <enum bitpos="3"    name="VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT"/>
    </enums>
    <enums name="VkExternalFenceFeatureFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT"/>
        <enum bitpos="1"    name="VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT"/>
    </enums>
    <enums name="VkFenceImportFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_FENCE_IMPORT_TEMPORARY_BIT"/>
    </enums>
    <enums name="VkSurfaceCounterFlagBitsEXT" type="bitmask">
        <enum bitpos="0"    name="VK_SURFACE_COUNTER_VBLANK_BIT_EXT"/>
        <enum               name="VK_SURFACE_COUNTER_VBLANK_EXT" alias="VK_SURFACE_COUNTER_VBLANK_BIT_EXT" deprecated="aliased"/>
    </enums>
    <enums name="VkDisplayPowerStateEXT" type="enum">
        <enum value="0"     name="VK_DISPLAY_POWER_STATE_OFF_EXT"/>
        <enum value="1"     name="VK_DISPLAY_POWER_STATE_SUSPEND_EXT"/>
        <enum value="2"     name="VK_DISPLAY_POWER_STATE_ON_EXT"/>
    </enums>
    <enums name="VkDeviceEventTypeEXT" type="enum">
        <enum value="0"     name="VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT"/>
    </enums>
    <enums name="VkDisplayEventTypeEXT" type="enum">
        <enum value="0"     name="VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT"/>
    </enums>
    <enums name="VkPeerMemoryFeatureFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT"           comment="Can read with vkCmdCopy commands"/>
        <enum bitpos="1"    name="VK_PEER_MEMORY_FEATURE_COPY_DST_BIT"           comment="Can write with vkCmdCopy commands"/>
        <enum bitpos="2"    name="VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT"        comment="Can read with any access type/command"/>
        <enum bitpos="3"    name="VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT"        comment="Can write with and access type/command"/>
    </enums>
    <enums name="VkMemoryAllocateFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT"            comment="Force allocation on specific devices"/>
    </enums>
    <enums name="VkDeviceGroupPresentModeFlagBitsKHR" type="bitmask">
        <enum bitpos="0"    name="VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR"        comment="Present from local memory"/>
        <enum bitpos="1"    name="VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR"       comment="Present from remote memory"/>
        <enum bitpos="2"    name="VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR"          comment="Present sum of local and/or remote memory"/>
        <enum bitpos="3"    name="VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR" comment="Each physical device presents from local memory"/>
    </enums>
    <enums name="VkSwapchainCreateFlagBitsKHR" type="bitmask">
    </enums>
    <enums name="VkViewportCoordinateSwizzleNV" type="enum">
        <enum value="0"     name="VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV"/>
        <enum value="1"     name="VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV"/>
        <enum value="2"     name="VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV"/>
        <enum value="3"     name="VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV"/>
        <enum value="4"     name="VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV"/>
        <enum value="5"     name="VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV"/>
        <enum value="6"     name="VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV"/>
        <enum value="7"     name="VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV"/>
    </enums>
    <enums name="VkDiscardRectangleModeEXT" type="enum">
        <enum value="0"     name="VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT"/>
        <enum value="1"     name="VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT"/>
    </enums>
    <enums name="VkSubpassDescriptionFlagBits" type="bitmask">
    </enums>
    <enums name="VkPointClippingBehavior" type="enum">
        <enum value="0"     name="VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES"/>
        <enum value="1"     name="VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY"/>
    </enums>
    <enums name="VkSamplerReductionMode" type="enum">
        <enum value="0"     name="VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE"/>
        <enum value="1"     name="VK_SAMPLER_REDUCTION_MODE_MIN"/>
        <enum value="2"     name="VK_SAMPLER_REDUCTION_MODE_MAX"/>
    </enums>
    <enums name="VkTessellationDomainOrigin" type="enum">
        <enum value="0"     name="VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT"/>
        <enum value="1"     name="VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT"/>
    </enums>
    <enums name="VkSamplerYcbcrModelConversion" type="enum">
        <enum value="0"     name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY"/>
        <enum value="1"     name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY" comment="just range expansion"/>
        <enum value="2"     name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709"      comment="aka HD YUV"/>
        <enum value="3"     name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601"      comment="aka SD YUV"/>
        <enum value="4"     name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020"     comment="aka UHD YUV"/>
    </enums>
    <enums name="VkSamplerYcbcrRange" type="enum">
        <enum value="0"     name="VK_SAMPLER_YCBCR_RANGE_ITU_FULL"    comment="Luma 0..1 maps to 0..255, chroma -0.5..0.5 to 1..255 (clamped)"/>
        <enum value="1"     name="VK_SAMPLER_YCBCR_RANGE_ITU_NARROW"  comment="Luma 0..1 maps to 16..235, chroma -0.5..0.5 to 16..240"/>
    </enums>
    <enums name="VkChromaLocation" type="enum">
        <enum value="0"     name="VK_CHROMA_LOCATION_COSITED_EVEN"/>
        <enum value="1"     name="VK_CHROMA_LOCATION_MIDPOINT"/>
    </enums>
    <enums name="VkBlendOverlapEXT" type="enum">
        <enum value="0"     name="VK_BLEND_OVERLAP_UNCORRELATED_EXT"/>
        <enum value="1"     name="VK_BLEND_OVERLAP_DISJOINT_EXT"/>
        <enum value="2"     name="VK_BLEND_OVERLAP_CONJOINT_EXT"/>
    </enums>
    <enums name="VkCoverageModulationModeNV" type="enum">
        <enum value="0"     name="VK_COVERAGE_MODULATION_MODE_NONE_NV"/>
        <enum value="1"     name="VK_COVERAGE_MODULATION_MODE_RGB_NV"/>
        <enum value="2"     name="VK_COVERAGE_MODULATION_MODE_ALPHA_NV"/>
        <enum value="3"     name="VK_COVERAGE_MODULATION_MODE_RGBA_NV"/>
    </enums>
    <enums name="VkCoverageReductionModeNV" type="enum">
        <enum value="0"     name="VK_COVERAGE_REDUCTION_MODE_MERGE_NV"/>
        <enum value="1"     name="VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV"/>
    </enums>
    <enums name="VkValidationCacheHeaderVersionEXT" type="enum">
        <enum value="1"     name="VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT"/>
    </enums>
    <enums name="VkShaderInfoTypeAMD" type="enum">
        <enum value="0"     name="VK_SHADER_INFO_TYPE_STATISTICS_AMD"/>
        <enum value="1"     name="VK_SHADER_INFO_TYPE_BINARY_AMD"/>
        <enum value="2"     name="VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD"/>
    </enums>
    <enums name="VkQueueGlobalPriority" type="enum">
        <enum value="128"   name="VK_QUEUE_GLOBAL_PRIORITY_LOW"/>
        <enum value="256"   name="VK_QUEUE_GLOBAL_PRIORITY_MEDIUM"/>
        <enum value="512"   name="VK_QUEUE_GLOBAL_PRIORITY_HIGH"/>
        <enum value="1024"  name="VK_QUEUE_GLOBAL_PRIORITY_REALTIME"/>
    </enums>
    <enums name="VkDebugUtilsMessageSeverityFlagBitsEXT" type="bitmask">
        <enum bitpos="0"    name="VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT"/>
        <enum bitpos="4"    name="VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT"/>
        <enum bitpos="8"    name="VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT"/>
        <enum bitpos="12"   name="VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT"/>
    </enums>
    <enums name="VkDebugUtilsMessageTypeFlagBitsEXT" type="bitmask">
        <enum bitpos="0"    name="VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT"/>
        <enum bitpos="1"    name="VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT"/>
        <enum bitpos="2"    name="VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT"/>
    </enums>
    <enums name="VkConservativeRasterizationModeEXT" type="enum">
        <enum value="0"     name="VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT"/>
        <enum value="1"     name="VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT"/>
        <enum value="2"     name="VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT"/>
    </enums>
    <enums name="VkDescriptorBindingFlagBits" type="bitmask">
        <enum bitpos="0" name="VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT"/>
        <enum bitpos="1" name="VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT"/>
        <enum bitpos="2" name="VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT"/>
        <enum bitpos="3" name="VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT"/>
    </enums>
    <enums name="VkVendorId" type="enum">
        <comment>Vendor IDs are now represented as enums instead of the old
                 &lt;vendorids&gt; tag, allowing them to be included in the
                 API headers.</comment>
        <enum value="0x10000" name="VK_VENDOR_ID_KHRONOS" comment="Khronos vendor ID"/>
        <enum value="0x10001" name="VK_VENDOR_ID_VIV"   comment="Vivante vendor ID"/>
        <enum value="0x10002" name="VK_VENDOR_ID_VSI"   comment="VeriSilicon vendor ID"/>
        <enum value="0x10003" name="VK_VENDOR_ID_KAZAN" comment="Kazan Software Renderer"/>
        <enum value="0x10004" name="VK_VENDOR_ID_CODEPLAY" comment="Codeplay Software Ltd. vendor ID"/>
        <enum value="0x10005" name="VK_VENDOR_ID_MESA"  comment="Mesa vendor ID"/>
        <enum value="0x10006" name="VK_VENDOR_ID_POCL"  comment="PoCL vendor ID"/>
        <enum value="0x10007" name="VK_VENDOR_ID_MOBILEYE"  comment="Mobileye vendor ID"/>
            <unused start="0x10008" comment="This is the next unused available Khronos vendor ID"/>
    </enums>
    <enums name="VkDriverId" type="enum">
        <comment>Driver IDs are now represented as enums instead of the old
                 &lt;driverids&gt; tag, allowing them to be included in the
                 API headers.</comment>
        <enum value="1"       name="VK_DRIVER_ID_AMD_PROPRIETARY"               comment="Advanced Micro Devices, Inc."/>
        <enum value="2"       name="VK_DRIVER_ID_AMD_OPEN_SOURCE"               comment="Advanced Micro Devices, Inc."/>
        <enum value="3"       name="VK_DRIVER_ID_MESA_RADV"                     comment="Mesa open source project"/>
        <enum value="4"       name="VK_DRIVER_ID_NVIDIA_PROPRIETARY"            comment="NVIDIA Corporation"/>
        <enum value="5"       name="VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS"     comment="Intel Corporation"/>
        <enum value="6"       name="VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA"        comment="Intel Corporation"/>
        <enum value="7"       name="VK_DRIVER_ID_IMAGINATION_PROPRIETARY"       comment="Imagination Technologies"/>
        <enum value="8"       name="VK_DRIVER_ID_QUALCOMM_PROPRIETARY"          comment="Qualcomm Technologies, Inc."/>
        <enum value="9"       name="VK_DRIVER_ID_ARM_PROPRIETARY"               comment="Arm Limited"/>
        <enum value="10"      name="VK_DRIVER_ID_GOOGLE_SWIFTSHADER"            comment="Google LLC"/>
        <enum value="11"      name="VK_DRIVER_ID_GGP_PROPRIETARY"               comment="Google LLC"/>
        <enum value="12"      name="VK_DRIVER_ID_BROADCOM_PROPRIETARY"          comment="Broadcom Inc."/>
        <enum value="13"      name="VK_DRIVER_ID_MESA_LLVMPIPE"                 comment="Mesa"/>
        <enum value="14"      name="VK_DRIVER_ID_MOLTENVK"                      comment="MoltenVK"/>
        <enum value="15"      name="VK_DRIVER_ID_COREAVI_PROPRIETARY"           comment="Core Avionics &amp; Industrial Inc."/>
        <enum value="16"      name="VK_DRIVER_ID_JUICE_PROPRIETARY"             comment="Juice Technologies, Inc."/>
        <enum value="17"      name="VK_DRIVER_ID_VERISILICON_PROPRIETARY"       comment="Verisilicon, Inc."/>
        <enum value="18"      name="VK_DRIVER_ID_MESA_TURNIP"                   comment="Mesa open source project"/>
        <enum value="19"      name="VK_DRIVER_ID_MESA_V3DV"                     comment="Mesa open source project"/>
        <enum value="20"      name="VK_DRIVER_ID_MESA_PANVK"                    comment="Mesa open source project"/>
        <enum value="21"      name="VK_DRIVER_ID_SAMSUNG_PROPRIETARY"           comment="Samsung Electronics Co., Ltd."/>
        <enum value="22"      name="VK_DRIVER_ID_MESA_VENUS"                    comment="Mesa open source project"/>
        <enum value="23"      name="VK_DRIVER_ID_MESA_DOZEN"                    comment="Mesa open source project"/>
        <enum value="24"      name="VK_DRIVER_ID_MESA_NVK"                      comment="Mesa open source project"/>
        <enum value="25"      name="VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA"  comment="Imagination Technologies"/>
        <enum value="26"      name="VK_DRIVER_ID_MESA_HONEYKRISP"               comment="Mesa open source project"/>
        <enum value="27"      name="VK_DRIVER_ID_VULKAN_SC_EMULATION_ON_VULKAN" comment="Vulkan SC Emulation on Vulkan"/>
    </enums>
    <enums name="VkConditionalRenderingFlagBitsEXT" type="bitmask">
        <enum bitpos="0"    name="VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT"/>
    </enums>
    <enums name="VkResolveModeFlagBits" type="bitmask">
        <enum value="0" name="VK_RESOLVE_MODE_NONE"/>
        <enum bitpos="0" name="VK_RESOLVE_MODE_SAMPLE_ZERO_BIT"/>
        <enum bitpos="1" name="VK_RESOLVE_MODE_AVERAGE_BIT"/>
        <enum bitpos="2" name="VK_RESOLVE_MODE_MIN_BIT"/>
        <enum bitpos="3" name="VK_RESOLVE_MODE_MAX_BIT"/>
    </enums>
    <enums name="VkShadingRatePaletteEntryNV" type="enum">
        <enum value="0" name="VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV"/>
        <enum value="1" name="VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV"/>
        <enum value="2" name="VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV"/>
        <enum value="3" name="VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV"/>
        <enum value="4" name="VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV"/>
        <enum value="5" name="VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV"/>
        <enum value="6" name="VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV"/>
        <enum value="7" name="VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV"/>
        <enum value="8" name="VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV"/>
        <enum value="9" name="VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV"/>
        <enum value="10" name="VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV"/>
        <enum value="11" name="VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV"/>
    </enums>
    <enums name="VkCoarseSampleOrderTypeNV" type="enum">
        <enum value="0" name="VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV"/>
        <enum value="1" name="VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV"/>
        <enum value="2" name="VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV"/>
        <enum value="3" name="VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV"/>
    </enums>
    <enums name="VkGeometryInstanceFlagBitsKHR" type="bitmask">
        <enum bitpos="0" name="VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR"/>
        <enum bitpos="1" name="VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR"/>
        <enum bitpos="2" name="VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR"/>
        <enum bitpos="3" name="VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR"/>
        <enum            name="VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR" alias="VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR"/>
    </enums>
    <enums name="VkGeometryFlagBitsKHR" type="bitmask">
        <enum bitpos="0" name="VK_GEOMETRY_OPAQUE_BIT_KHR"/>
        <enum bitpos="1" name="VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR"/>
    </enums>
    <enums name="VkBuildAccelerationStructureFlagBitsKHR" type="bitmask">
        <enum bitpos="0" name="VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR"/>
        <enum bitpos="1" name="VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR"/>
        <enum bitpos="2" name="VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR"/>
        <enum bitpos="3" name="VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR"/>
        <enum bitpos="4" name="VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR"/>
    </enums>
    <enums name="VkAccelerationStructureCreateFlagBitsKHR" type="bitmask">
        <enum bitpos="0" name="VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR"/>
    </enums>
    <enums name="VkCopyAccelerationStructureModeKHR" type="enum">
        <enum value="0" name="VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR"/>
        <enum value="1" name="VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR"/>
    </enums>
    <enums name="VkBuildAccelerationStructureModeKHR" type="enum">
        <enum value="0" name="VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR"/>
        <enum value="1" name="VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR"/>
    </enums>
    <enums name="VkAccelerationStructureTypeKHR" type="enum">
        <enum value="0" name="VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR"/>
        <enum value="1" name="VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR"/>
        <enum value="2" name="VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR"/>
    </enums>
    <enums name="VkGeometryTypeKHR" type="enum">
        <enum value="0" name="VK_GEOMETRY_TYPE_TRIANGLES_KHR"/>
        <enum value="1" name="VK_GEOMETRY_TYPE_AABBS_KHR"/>
        <enum value="2" name="VK_GEOMETRY_TYPE_INSTANCES_KHR"/>
    </enums>
    <enums name="VkAccelerationStructureMemoryRequirementsTypeNV" type="enum">
        <enum value="0" name="VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV"/>
        <enum value="1" name="VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV"/>
        <enum value="2" name="VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV"/>
    </enums>
    <enums name="VkAccelerationStructureBuildTypeKHR" type="enum">
        <enum value="0" name="VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR"/>
        <enum value="1" name="VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR"/>
        <enum value="2" name="VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR"/>
    </enums>
    <enums name="VkRayTracingShaderGroupTypeKHR" type="enum">
        <enum value="0" name="VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR"/>
        <enum value="1" name="VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR"/>
        <enum value="2" name="VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR"/>
    </enums>
    <enums name="VkAccelerationStructureCompatibilityKHR" type="enum">
        <enum value="0" name="VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR"/>
        <enum value="1" name="VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR"/>
    </enums>
    <enums name="VkShaderGroupShaderKHR" type="enum">
        <enum value="0" name="VK_SHADER_GROUP_SHADER_GENERAL_KHR"/>
        <enum value="1" name="VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR"/>
        <enum value="2" name="VK_SHADER_GROUP_SHADER_ANY_HIT_KHR"/>
        <enum value="3" name="VK_SHADER_GROUP_SHADER_INTERSECTION_KHR"/>
    </enums>
    <enums name="VkMemoryOverallocationBehaviorAMD" type="enum">
        <enum value="0"     name="VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD"/>
        <enum value="1"     name="VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD"/>
        <enum value="2"     name="VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD"/>
    </enums>
    <enums name="VkFramebufferCreateFlagBits" type="bitmask">
    </enums>
    <enums name="VkDeviceDiagnosticsConfigFlagBitsNV" type="bitmask">
        <enum bitpos="0" name="VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV"/>
        <enum bitpos="1" name="VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV"/>
        <enum bitpos="2" name="VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV"/>
        <enum bitpos="3" name="VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV"/>
    </enums>
    <enums name="VkPipelineCreationFeedbackFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT"/>
        <enum bitpos="1"    name="VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT"/>
        <enum bitpos="2"    name="VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT"/>
    </enums>
    <enums name="VkFullScreenExclusiveEXT" type="enum">
        <enum value="0"     name="VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT"/>
        <enum value="1"     name="VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT"/>
        <enum value="2"     name="VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT"/>
        <enum value="3"     name="VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT"/>
    </enums>
    <enums name="VkPerformanceCounterScopeKHR" type="enum">
        <enum value="0"     name="VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR"/>
        <enum value="1"     name="VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR"/>
        <enum value="2"     name="VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR"/>
        <enum               name="VK_QUERY_SCOPE_COMMAND_BUFFER_KHR" alias="VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR" deprecated="aliased"/>
        <enum               name="VK_QUERY_SCOPE_RENDER_PASS_KHR" alias="VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR" deprecated="aliased"/>
        <enum               name="VK_QUERY_SCOPE_COMMAND_KHR" alias="VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR" deprecated="aliased"/>
    </enums>
    <enums name="VkMemoryDecompressionMethodFlagBitsNV" type="bitmask" bitwidth="64">
        <enum bitpos="0" name="VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV"/>
    </enums>
    <enums name="VkPerformanceCounterUnitKHR" type="enum">
        <enum value="0"     name="VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR"/>
        <enum value="1"     name="VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR"/>
        <enum value="2"     name="VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR"/>
        <enum value="3"     name="VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR"/>
        <enum value="4"     name="VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR"/>
        <enum value="5"     name="VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR"/>
        <enum value="6"     name="VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR"/>
        <enum value="7"     name="VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR"/>
        <enum value="8"     name="VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR"/>
        <enum value="9"     name="VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR"/>
        <enum value="10"    name="VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR"/>
    </enums>
    <enums name="VkPerformanceCounterStorageKHR" type="enum">
        <enum value="0"     name="VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR"/>
        <enum value="1"     name="VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR"/>
        <enum value="2"     name="VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR"/>
        <enum value="3"     name="VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR"/>
        <enum value="4"     name="VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR"/>
        <enum value="5"     name="VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR"/>
    </enums>
    <enums name="VkPerformanceCounterDescriptionFlagBitsKHR" type="bitmask">
        <enum bitpos="0"    name="VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR"/>
        <enum               name="VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR" alias="VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR" deprecated="aliased"/>
        <enum bitpos="1"    name="VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR"/>
        <enum               name="VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR" alias="VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR" deprecated="aliased"/>
    </enums>
    <enums name="VkAcquireProfilingLockFlagBitsKHR" type="bitmask">
    </enums>
    <enums name="VkShaderCorePropertiesFlagBitsAMD" type="bitmask">
    </enums>
    <enums name="VkRefreshObjectFlagBitsKHR" type="bitmask">
    </enums>
    <enums name="VkPerformanceConfigurationTypeINTEL" type="enum">
        <enum value="0"     name="VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL"/>
    </enums>
    <enums name="VkQueryPoolSamplingModeINTEL" type="enum">
        <enum value="0"     name="VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL"/>
    </enums>
    <enums name="VkPerformanceOverrideTypeINTEL" type="enum">
        <enum value="0"     name="VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL"/>
        <enum value="1"     name="VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL"/>
    </enums>
    <enums name="VkPerformanceParameterTypeINTEL" type="enum">
        <enum value="0"     name="VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL"/>
        <enum value="1"     name="VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL"/>
    </enums>
    <enums name="VkPerformanceValueTypeINTEL" type="enum">
        <enum value="0"     name="VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL"/>
        <enum value="1"     name="VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL"/>
        <enum value="2"     name="VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL"/>
        <enum value="3"     name="VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL"/>
        <enum value="4"     name="VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL"/>
    </enums>
    <enums name="VkShaderFloatControlsIndependence" type="enum">
        <enum value="0"     name="VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY"/>
        <enum value="1"     name="VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL"/>
        <enum value="2"     name="VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE"/>
    </enums>
    <enums name="VkPipelineExecutableStatisticFormatKHR" type="enum">
        <enum value="0" name="VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR"/>
        <enum value="1" name="VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR"/>
        <enum value="2" name="VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR"/>
        <enum value="3" name="VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR"/>
    </enums>
    <enums name="VkLineRasterizationMode" type="enum">
        <enum value="0"     name="VK_LINE_RASTERIZATION_MODE_DEFAULT"/>
        <enum value="1"     name="VK_LINE_RASTERIZATION_MODE_RECTANGULAR"/>
        <enum value="2"     name="VK_LINE_RASTERIZATION_MODE_BRESENHAM"/>
        <enum value="3"     name="VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH"/>
    </enums>
    <enums name="VkShaderModuleCreateFlagBits" type="bitmask">
    </enums>
    <enums name="VkPipelineCompilerControlFlagBitsAMD" type="bitmask">
    </enums>
    <enums name="VkFaultLevel" type="enum">
        <enum value="0"    name="VK_FAULT_LEVEL_UNASSIGNED"/>
        <enum value="1"    name="VK_FAULT_LEVEL_CRITICAL"/>
        <enum value="2"    name="VK_FAULT_LEVEL_RECOVERABLE"/>
        <enum value="3"    name="VK_FAULT_LEVEL_WARNING"/>
    </enums>
    <enums name="VkFaultType" type="enum">
        <enum value="0"    name="VK_FAULT_TYPE_INVALID"/>
        <enum value="1"    name="VK_FAULT_TYPE_UNASSIGNED"/>
        <enum value="2"    name="VK_FAULT_TYPE_IMPLEMENTATION"/>
        <enum value="3"    name="VK_FAULT_TYPE_SYSTEM"/>
        <enum value="4"    name="VK_FAULT_TYPE_PHYSICAL_DEVICE"/>
        <enum value="5"    name="VK_FAULT_TYPE_COMMAND_BUFFER_FULL"/>
        <enum value="6"    name="VK_FAULT_TYPE_INVALID_API_USAGE"/>
    </enums>
    <enums name="VkFaultQueryBehavior" type="enum">
        <enum value="0"    name="VK_FAULT_QUERY_BEHAVIOR_GET_AND_CLEAR_ALL_FAULTS"/>
    </enums>
    <enums name="VkToolPurposeFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_TOOL_PURPOSE_VALIDATION_BIT"/>
        <enum bitpos="1"    name="VK_TOOL_PURPOSE_PROFILING_BIT"/>
        <enum bitpos="2"    name="VK_TOOL_PURPOSE_TRACING_BIT"/>
        <enum bitpos="3"    name="VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT"/>
        <enum bitpos="4"    name="VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT"/>
    </enums>
    <enums name="VkPipelineMatchControl" type="enum">
        <enum value="0"     name="VK_PIPELINE_MATCH_CONTROL_APPLICATION_UUID_EXACT_MATCH"/>
    </enums>
    <enums name="VkFragmentShadingRateCombinerOpKHR" type="enum">
        <enum value="0" name="VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR"/>
        <enum value="1" name="VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR"/>
        <enum value="2" name="VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR"/>
        <enum value="3" name="VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR"/>
        <enum value="4" name="VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR"/>
    </enums>
    <enums name="VkFragmentShadingRateNV" type="enum">
        <enum value="0"  name="VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV"/>
        <enum value="1"  name="VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV"/>
        <enum value="4"  name="VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV"/>
        <enum value="5"  name="VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV"/>
        <enum value="6"  name="VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV"/>
        <enum value="9"  name="VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV"/>
        <enum value="10" name="VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV"/>
        <enum value="11" name="VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV"/>
        <enum value="12" name="VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV"/>
        <enum value="13" name="VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV"/>
        <enum value="14" name="VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV"/>
        <enum value="15" name="VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV"/>
    </enums>
    <enums name="VkFragmentShadingRateTypeNV" type="enum">
        <enum value="0"  name="VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV"/>
        <enum value="1"  name="VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV"/>
    </enums>
    <enums name="VkSubpassMergeStatusEXT" type="enum">
        <enum value="0"  name="VK_SUBPASS_MERGE_STATUS_MERGED_EXT"/>
        <enum value="1"  name="VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT"/>
        <enum value="2"  name="VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT"/>
        <enum value="3"  name="VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT"/>
        <enum value="4"  name="VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT"/>
        <enum value="5"  name="VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT"/>
        <enum value="6"  name="VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT"/>
        <enum value="7"  name="VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT"/>
        <enum value="8"  name="VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT"/>
        <enum value="9"  name="VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT"/>
        <enum value="10" name="VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT"/>
        <enum value="11" name="VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT"/>
        <enum value="12" name="VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT"/>
        <enum value="13" name="VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT"/>
    </enums>
    <enums name="VkAccessFlagBits2" type="bitmask" bitwidth="64">
        <enum value="0"     name="VK_ACCESS_2_NONE"/>
        <enum bitpos="0"    name="VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT"/>
        <enum bitpos="1"    name="VK_ACCESS_2_INDEX_READ_BIT"/>
        <enum bitpos="2"    name="VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT"/>
        <enum bitpos="3"    name="VK_ACCESS_2_UNIFORM_READ_BIT"/>
        <enum bitpos="4"    name="VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT"/>
        <enum bitpos="5"    name="VK_ACCESS_2_SHADER_READ_BIT"/>
        <enum bitpos="6"    name="VK_ACCESS_2_SHADER_WRITE_BIT"/>
        <enum bitpos="7"    name="VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT"/>
        <enum bitpos="8"    name="VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT"/>
        <enum bitpos="9"    name="VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT"/>
        <enum bitpos="10"   name="VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT"/>
        <enum bitpos="11"   name="VK_ACCESS_2_TRANSFER_READ_BIT"/>
        <enum bitpos="12"   name="VK_ACCESS_2_TRANSFER_WRITE_BIT"/>
        <enum bitpos="13"   name="VK_ACCESS_2_HOST_READ_BIT"/>
        <enum bitpos="14"   name="VK_ACCESS_2_HOST_WRITE_BIT"/>
        <enum bitpos="15"   name="VK_ACCESS_2_MEMORY_READ_BIT"/>
        <enum bitpos="16"   name="VK_ACCESS_2_MEMORY_WRITE_BIT"/>
            <comment>bitpos 17-31 are specified by extensions to the original VkAccessFlagBits enum</comment>
        <enum bitpos="32"   name="VK_ACCESS_2_SHADER_SAMPLED_READ_BIT"/>
        <enum bitpos="33"   name="VK_ACCESS_2_SHADER_STORAGE_READ_BIT"/>
        <enum bitpos="34"   name="VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT"/>
    </enums>
    <enums name="VkPipelineStageFlagBits2" type="bitmask" bitwidth="64">
        <enum value="0"     name="VK_PIPELINE_STAGE_2_NONE"/>
        <enum bitpos="0"    name="VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT"/>
        <enum bitpos="1"    name="VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT"/>
        <enum bitpos="2"    name="VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT"/>
        <enum bitpos="3"    name="VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT"/>
        <enum bitpos="4"    name="VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT"/>
        <enum bitpos="5"    name="VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT"/>
        <enum bitpos="6"    name="VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT"/>
        <enum bitpos="7"    name="VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT"/>
        <enum bitpos="8"    name="VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT"/>
        <enum bitpos="9"    name="VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT"/>
        <enum bitpos="10"   name="VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT"/>
        <enum bitpos="11"   name="VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT"/>
        <enum bitpos="12"   name="VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT"/>
        <enum               name="VK_PIPELINE_STAGE_2_TRANSFER_BIT" alias="VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT"/>
        <enum bitpos="13"   name="VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT"/>
        <enum bitpos="14"   name="VK_PIPELINE_STAGE_2_HOST_BIT"/>
        <enum bitpos="15"   name="VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT"/>
        <enum bitpos="16"   name="VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT"/>
            <comment>bitpos 17-31 are specified by extensions to the original VkPipelineStageFlagBits enum</comment>
        <enum bitpos="32"   name="VK_PIPELINE_STAGE_2_COPY_BIT"/>
        <enum bitpos="33"   name="VK_PIPELINE_STAGE_2_RESOLVE_BIT"/>
        <enum bitpos="34"   name="VK_PIPELINE_STAGE_2_BLIT_BIT"/>
        <enum bitpos="35"   name="VK_PIPELINE_STAGE_2_CLEAR_BIT"/>
        <enum bitpos="36"   name="VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT"/>
        <enum bitpos="37"   name="VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT"/>
        <enum bitpos="38"   name="VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT"/>
    </enums>
    <enums name="VkSubmitFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_SUBMIT_PROTECTED_BIT"/>
    </enums>
    <enums name="VkEventCreateFlagBits" type="bitmask">
    </enums>
    <enums name="VkPipelineLayoutCreateFlagBits" type="bitmask">
    </enums>
    <enums name="VkSciSyncClientTypeNV" type="enum">
        <enum value="0"    name="VK_SCI_SYNC_CLIENT_TYPE_SIGNALER_NV"/>
        <enum value="1"    name="VK_SCI_SYNC_CLIENT_TYPE_WAITER_NV"/>
        <enum value="2"    name="VK_SCI_SYNC_CLIENT_TYPE_SIGNALER_WAITER_NV"/>
    </enums>
    <enums name="VkSciSyncPrimitiveTypeNV" type="enum">
        <enum value="0"   name="VK_SCI_SYNC_PRIMITIVE_TYPE_FENCE_NV"/>
        <enum value="1"   name="VK_SCI_SYNC_PRIMITIVE_TYPE_SEMAPHORE_NV"/>
    </enums>
    <enums name="VkProvokingVertexModeEXT" type="enum">
        <enum value="0"     name="VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT"/>
        <enum value="1"     name="VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT"/>
    </enums>
    <enums name="VkPipelineCacheValidationVersion" type="enum">
        <enum value="1"     name="VK_PIPELINE_CACHE_VALIDATION_VERSION_SAFETY_CRITICAL_ONE"/>
    </enums>
    <enums name="VkAccelerationStructureMotionInstanceTypeNV" type="enum">
        <enum value="0" name="VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV"/>
        <enum value="1" name="VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV"/>
        <enum value="2" name="VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV"/>
    </enums>
    <enums name="VkPipelineColorBlendStateCreateFlagBits" type="bitmask">
    </enums>
    <enums name="VkPipelineDepthStencilStateCreateFlagBits" type="bitmask">
    </enums>
    <enums name="VkGraphicsPipelineLibraryFlagBitsEXT" type="bitmask">
        <enum bitpos="0"   name="VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT"/>
        <enum bitpos="1"   name="VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT"/>
        <enum bitpos="2"   name="VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT"/>
        <enum bitpos="3"   name="VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT"/>
    </enums>
    <enums name="VkDeviceAddressBindingFlagBitsEXT" type="bitmask">
        <enum bitpos="0" name="VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT"/>
    </enums>
    <enums name="VkDeviceAddressBindingTypeEXT" type="enum">
        <enum value="0"     name="VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT"/>
        <enum value="1"     name="VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT"/>
    </enums>
    <enums name="VkFrameBoundaryFlagBitsEXT" type="bitmask">
        <enum bitpos="0"     name="VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT"/>
    </enums>
    <enums name="VkPresentScalingFlagBitsEXT" type="bitmask">
        <enum bitpos="0"    name="VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT"/>
        <enum bitpos="1"    name="VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT"/>
        <enum bitpos="2"    name="VK_PRESENT_SCALING_STRETCH_BIT_EXT"/>
    </enums>
    <enums name="VkPresentGravityFlagBitsEXT" type="bitmask">
        <enum bitpos="0"    name="VK_PRESENT_GRAVITY_MIN_BIT_EXT"/>
        <enum bitpos="1"    name="VK_PRESENT_GRAVITY_MAX_BIT_EXT"/>
        <enum bitpos="2"    name="VK_PRESENT_GRAVITY_CENTERED_BIT_EXT"/>
    </enums>
    <enums name="VkPhysicalDeviceSchedulingControlsFlagBitsARM" type="bitmask" bitwidth="64">
        <enum bitpos="0"    name="VK_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM"/>
    </enums>

    <enums name="VkVideoCodecOperationFlagBitsKHR" type="bitmask">
        <enum value="0"     name="VK_VIDEO_CODEC_OPERATION_NONE_KHR"/>
    </enums>
    <enums name="VkVideoChromaSubsamplingFlagBitsKHR" type="bitmask" comment="Vulkan video chroma subsampling definitions">
        <enum value="0"     name="VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR"/>
        <enum bitpos="0"    name="VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR"/>
        <enum bitpos="1"    name="VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR"/>
        <enum bitpos="2"    name="VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR"/>
        <enum bitpos="3"    name="VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR"/>
    </enums>
    <enums name="VkVideoComponentBitDepthFlagBitsKHR" type="bitmask" comment="Vulkan video component bit depth definitions">
        <enum value="0"     name="VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR"/>
        <enum bitpos="0"    name="VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR"/>
        <enum bitpos="2"    name="VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR"/>
        <enum bitpos="4"    name="VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR"/>
    </enums>
    <enums name="VkVideoCapabilityFlagBitsKHR" type="bitmask">
        <enum bitpos="0"    name="VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR"/>
        <enum bitpos="1"    name="VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR"/>
    </enums>
    <enums name="VkVideoSessionCreateFlagBitsKHR" type="bitmask">
        <enum bitpos="0"    name="VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR"/>
    </enums>
    <enums name="VkVideoSessionParametersCreateFlagBitsKHR" type="bitmask">
    </enums>
    <enums name="VkVideoDecodeH264PictureLayoutFlagBitsKHR" type="bitmask">
        <enum value="0"       name="VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR"/>
        <enum bitpos="0"      name="VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR"/>
        <enum bitpos="1"      name="VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR"/>
    </enums>
    <enums name="VkVideoCodingControlFlagBitsKHR" type="bitmask">
        <enum bitpos="0"    name="VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR"/>
    </enums>
    <enums name="VkQueryResultStatusKHR" type="enum">
        <enum value="-1"    name="VK_QUERY_RESULT_STATUS_ERROR_KHR"/>
        <enum value="0"     name="VK_QUERY_RESULT_STATUS_NOT_READY_KHR"/>
        <enum value="1"     name="VK_QUERY_RESULT_STATUS_COMPLETE_KHR"/>
    </enums>
    <enums name="VkVideoDecodeUsageFlagBitsKHR" type="bitmask">
        <enum value="0"     name="VK_VIDEO_DECODE_USAGE_DEFAULT_KHR"/>
        <enum bitpos="0"    name="VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR"/>
        <enum bitpos="1"    name="VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR"/>
        <enum bitpos="2"    name="VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR"/>
    </enums>
    <enums name="VkVideoDecodeCapabilityFlagBitsKHR" type="bitmask">
        <enum bitpos="0"    name="VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR"/>
        <enum bitpos="1"    name="VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeFlagBitsKHR" type="bitmask">
    </enums>
    <enums name="VkVideoEncodeUsageFlagBitsKHR" type="bitmask">
        <enum value="0"     name="VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR"/>
        <enum bitpos="0"    name="VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR"/>
        <enum bitpos="1"    name="VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR"/>
        <enum bitpos="2"    name="VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR"/>
        <enum bitpos="3"    name="VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeContentFlagBitsKHR" type="bitmask">
        <enum value="0"     name="VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR"/>
        <enum bitpos="0"    name="VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR"/>
        <enum bitpos="1"    name="VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR"/>
        <enum bitpos="2"    name="VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeTuningModeKHR" type="enum">
        <enum value="0"     name="VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR"/>
        <enum value="1"     name="VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR"/>
        <enum value="2"     name="VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR"/>
        <enum value="3"     name="VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR"/>
        <enum value="4"     name="VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR"/>
    </enums>
    <enums name="VkVideoEncodeCapabilityFlagBitsKHR" type="bitmask">
        <enum bitpos="0"    name="VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR"/>
        <enum bitpos="1"    name="VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeFeedbackFlagBitsKHR" type="bitmask">
        <enum bitpos="0"    name="VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR"/>
        <enum bitpos="1"    name="VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR"/>
        <enum bitpos="2"    name="VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeRateControlModeFlagBitsKHR" type="bitmask">
        <enum value="0"     name="VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR"/>
        <enum bitpos="0"    name="VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR"/>
        <enum bitpos="1"    name="VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR"/>
        <enum bitpos="2"    name="VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeH264CapabilityFlagBitsKHR" type="bitmask">
        <enum bitpos="0"    name="VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR"/>
        <enum bitpos="1"    name="VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR"/>
        <enum bitpos="2"    name="VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR"/>
        <enum bitpos="3"    name="VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR"/>
        <enum bitpos="4"    name="VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR"/>
        <enum bitpos="5"    name="VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR"/>
        <enum bitpos="6"    name="VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR"/>
        <enum bitpos="7"    name="VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR"/>
        <enum bitpos="8"    name="VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeH264StdFlagBitsKHR" type="bitmask">
        <enum bitpos="0"    name="VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR"/>
        <enum bitpos="1"    name="VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR"/>
        <enum bitpos="2"    name="VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR"/>
        <enum bitpos="3"    name="VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR"/>
        <enum bitpos="4"    name="VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR"/>
        <enum bitpos="5"    name="VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR"/>
        <enum bitpos="6"    name="VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR"/>
        <enum bitpos="7"    name="VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR"/>
        <enum bitpos="8"    name="VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR"/>
        <enum bitpos="9"    name="VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR"/>
        <enum bitpos="10"   name="VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR"/>
        <enum bitpos="11"   name="VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR"/>
        <enum bitpos="12"   name="VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR"/>
        <enum bitpos="13"   name="VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR"/>
        <enum bitpos="14"   name="VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR"/>
        <enum bitpos="15"   name="VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR"/>
        <enum bitpos="16"   name="VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR"/>
        <enum bitpos="17"   name="VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR"/>
        <enum bitpos="19"   name="VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR"/>
        <enum bitpos="20"   name="VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeH264RateControlFlagBitsKHR" type="bitmask">
        <enum bitpos="0"    name="VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR"/>
        <enum bitpos="1"    name="VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR"/>
        <enum bitpos="2"    name="VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR"/>
        <enum bitpos="3"    name="VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR"/>
        <enum bitpos="4"    name="VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR"/>
    </enums>
    <enums name="VkHostImageCopyFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_HOST_IMAGE_COPY_MEMCPY"/>
    </enums>
    <enums name="VkPartitionedAccelerationStructureOpTypeNV" type="enum">
        <enum value="0"     name="VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_WRITE_INSTANCE_NV"/>
        <enum value="1"     name="VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_UPDATE_INSTANCE_NV"/>
        <enum value="2"     name="VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_WRITE_PARTITION_TRANSLATION_NV"/>
    </enums>
    <enums name="VkPartitionedAccelerationStructureInstanceFlagBitsNV" type="bitmask">
        <enum bitpos="0"    name="VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FACING_CULL_DISABLE_BIT_NV"/>
        <enum bitpos="1"    name="VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FLIP_FACING_BIT_NV"/>
        <enum bitpos="2"    name="VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_OPAQUE_BIT_NV"/>
        <enum bitpos="3"    name="VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_NO_OPAQUE_BIT_NV"/>
        <enum bitpos="4"    name="VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_ENABLE_EXPLICIT_BOUNDING_BOX_NV"/>
    </enums>
    <enums name="VkImageFormatConstraintsFlagBitsFUCHSIA" type="bitmask">
    </enums>
    <enums name="VkImageConstraintsInfoFlagBitsFUCHSIA" type="bitmask">
        <enum bitpos="0"    name="VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_RARELY_FUCHSIA"/>
        <enum bitpos="1"    name="VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_OFTEN_FUCHSIA"/>
        <enum bitpos="2"    name="VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_RARELY_FUCHSIA"/>
        <enum bitpos="3"    name="VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_OFTEN_FUCHSIA"/>
        <enum bitpos="4"    name="VK_IMAGE_CONSTRAINTS_INFO_PROTECTED_OPTIONAL_FUCHSIA"/>
    </enums>
    <enums name="VkFormatFeatureFlagBits2" type="bitmask" bitwidth="64">
        <enum bitpos="0"    name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT"/>
        <enum bitpos="1"    name="VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT"/>
        <enum bitpos="2"    name="VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT"/>
        <enum bitpos="3"    name="VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT"/>
        <enum bitpos="4"    name="VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT"/>
        <enum bitpos="5"    name="VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT"/>
        <enum bitpos="6"    name="VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT"/>
        <enum bitpos="7"    name="VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT"/>
        <enum bitpos="8"    name="VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT"/>
        <enum bitpos="9"    name="VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT"/>
        <enum bitpos="10"   name="VK_FORMAT_FEATURE_2_BLIT_SRC_BIT"/>
        <enum bitpos="11"   name="VK_FORMAT_FEATURE_2_BLIT_DST_BIT"/>
        <enum bitpos="12"   name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT"/>
            <comment>bitpos 13 is an extension interaction with VK_EXT_filter_cubic"</comment>
        <enum bitpos="14"   name="VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT"/>
        <enum bitpos="15"   name="VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT"/>
        <enum bitpos="16"   name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT"/>
        <enum bitpos="17"   name="VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT"/>
        <enum bitpos="18"   name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT"/>
        <enum bitpos="19"   name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT"/>
        <enum bitpos="20"   name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT"/>
        <enum bitpos="21"   name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT"/>
        <enum bitpos="22"   name="VK_FORMAT_FEATURE_2_DISJOINT_BIT"/>
        <enum bitpos="23"   name="VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT"/>
        <enum bitpos="31"   name="VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT"/>
        <enum bitpos="32"   name="VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT"/>
        <enum bitpos="33"   name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT"/>
    </enums>
    <enums name="VkRenderingFlagBits" type="bitmask">
        <enum bitpos="0"    name="VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT"/>
        <enum bitpos="1"    name="VK_RENDERING_SUSPENDING_BIT"/>
        <enum bitpos="2"    name="VK_RENDERING_RESUMING_BIT"/>
    </enums>
    <enums name="VkVideoEncodeH265CapabilityFlagBitsKHR" type="bitmask">
        <enum bitpos="0"    name="VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR"/>
        <enum bitpos="1"    name="VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR"/>
        <enum bitpos="2"    name="VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR"/>
        <enum bitpos="3"    name="VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR"/>
        <enum bitpos="4"    name="VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR"/>
        <enum bitpos="5"    name="VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR"/>
        <enum bitpos="6"    name="VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR"/>
        <enum bitpos="7"    name="VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR"/>
        <enum bitpos="8"    name="VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR"/>
        <enum bitpos="9"    name="VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeH265StdFlagBitsKHR" type="bitmask">
        <enum bitpos="0"    name="VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR"/>
        <enum bitpos="1"    name="VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR"/>
        <enum bitpos="2"    name="VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR"/>
        <enum bitpos="3"    name="VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR"/>
        <enum bitpos="4"    name="VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR"/>
        <enum bitpos="5"    name="VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR"/>
        <enum bitpos="6"    name="VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR"/>
        <enum bitpos="7"    name="VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR"/>
        <enum bitpos="8"    name="VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR"/>
        <enum bitpos="9"    name="VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR"/>
        <enum bitpos="10"   name="VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR"/>
        <enum bitpos="11"   name="VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR"/>
        <enum bitpos="12"   name="VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR"/>
        <enum bitpos="13"   name="VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR"/>
        <enum bitpos="14"   name="VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR"/>
        <enum bitpos="15"   name="VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR"/>
        <enum bitpos="16"   name="VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR"/>
        <enum bitpos="17"   name="VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR"/>
        <enum bitpos="18"   name="VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR"/>
        <enum bitpos="19"   name="VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR"/>
        <enum bitpos="20"   name="VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeH265RateControlFlagBitsKHR" type="bitmask">
        <enum bitpos="0"      name="VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR"/>
        <enum bitpos="1"      name="VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR"/>
        <enum bitpos="2"      name="VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR"/>
        <enum bitpos="3"      name="VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR"/>
        <enum bitpos="4"      name="VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeH265CtbSizeFlagBitsKHR" type="bitmask">
        <enum bitpos="0"      name="VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR"/>
        <enum bitpos="1"      name="VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR"/>
        <enum bitpos="2"      name="VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeH265TransformBlockSizeFlagBitsKHR" type="bitmask">
        <enum bitpos="0"      name="VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR"/>
        <enum bitpos="1"      name="VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR"/>
        <enum bitpos="2"      name="VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR"/>
        <enum bitpos="3"      name="VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeAV1CapabilityFlagBitsKHR" type="bitmask">
        <enum bitpos="0"      name="VK_VIDEO_ENCODE_AV1_CAPABILITY_PER_RATE_CONTROL_GROUP_MIN_MAX_Q_INDEX_BIT_KHR"/>
        <enum bitpos="1"      name="VK_VIDEO_ENCODE_AV1_CAPABILITY_GENERATE_OBU_EXTENSION_HEADER_BIT_KHR"/>
        <enum bitpos="2"      name="VK_VIDEO_ENCODE_AV1_CAPABILITY_PRIMARY_REFERENCE_CDF_ONLY_BIT_KHR"/>
        <enum bitpos="3"      name="VK_VIDEO_ENCODE_AV1_CAPABILITY_FRAME_SIZE_OVERRIDE_BIT_KHR"/>
        <enum bitpos="4"      name="VK_VIDEO_ENCODE_AV1_CAPABILITY_MOTION_VECTOR_SCALING_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeAV1StdFlagBitsKHR" type="bitmask">
        <enum bitpos="0"      name="VK_VIDEO_ENCODE_AV1_STD_UNIFORM_TILE_SPACING_FLAG_SET_BIT_KHR"/>
        <enum bitpos="1"      name="VK_VIDEO_ENCODE_AV1_STD_SKIP_MODE_PRESENT_UNSET_BIT_KHR"/>
        <enum bitpos="2"      name="VK_VIDEO_ENCODE_AV1_STD_PRIMARY_REF_FRAME_BIT_KHR"/>
        <enum bitpos="3"      name="VK_VIDEO_ENCODE_AV1_STD_DELTA_Q_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeAV1RateControlFlagBitsKHR" type="bitmask">
        <enum bitpos="0"      name="VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REGULAR_GOP_BIT_KHR"/>
        <enum bitpos="1"      name="VK_VIDEO_ENCODE_AV1_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR"/>
        <enum bitpos="2"      name="VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR"/>
        <enum bitpos="3"      name="VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeAV1SuperblockSizeFlagBitsKHR" type="bitmask">
        <enum bitpos="0"      name="VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_64_BIT_KHR"/>
        <enum bitpos="1"      name="VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_128_BIT_KHR"/>
    </enums>
    <enums name="VkVideoEncodeAV1PredictionModeKHR" type="enum">
        <enum value="0"     name="VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_INTRA_ONLY_KHR"/>
        <enum value="1"     name="VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_SINGLE_REFERENCE_KHR"/>
        <enum value="2"     name="VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_UNIDIRECTIONAL_COMPOUND_KHR"/>
        <enum value="3"     name="VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_BIDIRECTIONAL_COMPOUND_KHR"/>
    </enums>
    <enums name="VkVideoEncodeAV1RateControlGroupKHR" type="enum">
        <enum value="0"     name="VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_INTRA_KHR"/>
        <enum value="1"     name="VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_PREDICTIVE_KHR"/>
        <enum value="2"     name="VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_BIPREDICTIVE_KHR"/>
    </enums>
    <enums name="VkExportMetalObjectTypeFlagBitsEXT" type="bitmask">
        <enum bitpos="0"      name="VK_EXPORT_METAL_OBJECT_TYPE_METAL_DEVICE_BIT_EXT"/>
        <enum bitpos="1"      name="VK_EXPORT_METAL_OBJECT_TYPE_METAL_COMMAND_QUEUE_BIT_EXT"/>
        <enum bitpos="2"      name="VK_EXPORT_METAL_OBJECT_TYPE_METAL_BUFFER_BIT_EXT"/>
        <enum bitpos="3"      name="VK_EXPORT_METAL_OBJECT_TYPE_METAL_TEXTURE_BIT_EXT"/>
        <enum bitpos="4"      name="VK_EXPORT_METAL_OBJECT_TYPE_METAL_IOSURFACE_BIT_EXT"/>
        <enum bitpos="5"      name="VK_EXPORT_METAL_OBJECT_TYPE_METAL_SHARED_EVENT_BIT_EXT"/>
    </enums>
    <enums name="VkInstanceCreateFlagBits" type="bitmask">
    </enums>
    <enums name="VkImageCompressionFlagBitsEXT" type="bitmask">
        <enum value="0"      name="VK_IMAGE_COMPRESSION_DEFAULT_EXT"/>
        <enum bitpos="0"     name="VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT"/>
        <enum bitpos="1"     name="VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT"/>
        <enum bitpos="2"     name="VK_IMAGE_COMPRESSION_DISABLED_EXT"/>
    </enums>
    <enums name="VkImageCompressionFixedRateFlagBitsEXT" type="bitmask">
        <enum value="0"      name="VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT"/>
        <enum bitpos="0"     name="VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT"/>
        <enum bitpos="1"     name="VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT"/>
        <enum bitpos="2"     name="VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT"/>
        <enum bitpos="3"     name="VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT"/>
        <enum bitpos="4"     name="VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT"/>
        <enum bitpos="5"     name="VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT"/>
        <enum bitpos="6"     name="VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT"/>
        <enum bitpos="7"     name="VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT"/>
        <enum bitpos="8"     name="VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT"/>
        <enum bitpos="9"     name="VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT"/>
        <enum bitpos="10"    name="VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT"/>
        <enum bitpos="11"    name="VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT"/>
        <enum bitpos="12"    name="VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT"/>
        <enum bitpos="13"    name="VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT"/>
        <enum bitpos="14"    name="VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT"/>
        <enum bitpos="15"    name="VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT"/>
        <enum bitpos="16"    name="VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT"/>
        <enum bitpos="17"    name="VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT"/>
        <enum bitpos="18"    name="VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT"/>
        <enum bitpos="19"    name="VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT"/>
        <enum bitpos="20"    name="VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT"/>
        <enum bitpos="21"    name="VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT"/>
        <enum bitpos="22"    name="VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT"/>
        <enum bitpos="23"    name="VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT"/>
    </enums>
    <enums name="VkPipelineRobustnessBufferBehavior" type="enum">
        <enum value="0"      name="VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT"/>
        <enum value="1"      name="VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED"/>
        <enum value="2"      name="VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS"/>
        <enum value="3"      name="VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2"/>
    </enums>
    <enums name="VkPipelineRobustnessImageBehavior" type="enum">
        <enum value="0"      name="VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT"/>
        <enum value="1"      name="VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED"/>
        <enum value="2"      name="VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS"/>
        <enum value="3"      name="VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2"/>
    </enums>
    <enums name="VkOpticalFlowGridSizeFlagBitsNV" type="bitmask">
        <enum value="0"       name="VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV"/>
        <enum bitpos="0"      name="VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV"/>
        <enum bitpos="1"      name="VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV"/>
        <enum bitpos="2"      name="VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV"/>
        <enum bitpos="3"      name="VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV"/>
    </enums>
    <enums name="VkOpticalFlowUsageFlagBitsNV" type="bitmask">
        <enum value="0"       name="VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV"/>
        <enum bitpos="0"      name="VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV"/>
        <enum bitpos="1"      name="VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV"/>
        <enum bitpos="2"      name="VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV"/>
        <enum bitpos="3"      name="VK_OPTICAL_FLOW_USAGE_COST_BIT_NV"/>
        <enum bitpos="4"      name="VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV"/>
    </enums>
    <enums name="VkOpticalFlowPerformanceLevelNV" type="enum">
        <enum value="0"       name="VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV"/>
        <enum value="1"       name="VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV"/>
        <enum value="2"       name="VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV"/>
        <enum value="3"       name="VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV"/>
    </enums>
    <enums name="VkOpticalFlowSessionBindingPointNV" type="enum">
        <enum value="0"       name="VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV"/>
        <enum value="1"       name="VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV"/>
        <enum value="2"       name="VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV"/>
        <enum value="3"       name="VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV"/>
        <enum value="4"       name="VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV"/>
        <enum value="5"       name="VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV"/>
        <enum value="6"       name="VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV"/>
        <enum value="7"       name="VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV"/>
        <enum value="8"       name="VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV"/>
    </enums>
    <enums name="VkOpticalFlowSessionCreateFlagBitsNV" type="bitmask">
        <enum bitpos="0"      name="VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV"/>
        <enum bitpos="1"      name="VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV"/>
        <enum bitpos="2"      name="VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV"/>
        <enum bitpos="3"      name="VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV"/>
        <enum bitpos="4"      name="VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV"/>
    </enums>
    <enums name="VkOpticalFlowExecuteFlagBitsNV" type="bitmask">
        <enum bitpos="0"      name="VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV"/>
    </enums>
    <enums name="VkMicromapTypeEXT" type="enum">
        <enum value="0" name="VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT"/>
    </enums>
    <enums name="VkBuildMicromapFlagBitsEXT" type="bitmask">
        <enum bitpos="0" name="VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT"/>
        <enum bitpos="1" name="VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT"/>
        <enum bitpos="2" name="VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT"/>
    </enums>
    <enums name="VkMicromapCreateFlagBitsEXT" type="bitmask">
        <enum bitpos="0" name="VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT"/>
    </enums>
    <enums name="VkCopyMicromapModeEXT" type="enum">
        <enum value="0" name="VK_COPY_MICROMAP_MODE_CLONE_EXT"/>
        <enum value="1" name="VK_COPY_MICROMAP_MODE_SERIALIZE_EXT"/>
        <enum value="2" name="VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT"/>
        <enum value="3" name="VK_COPY_MICROMAP_MODE_COMPACT_EXT"/>
    </enums>
    <enums name="VkBuildMicromapModeEXT" type="enum">
        <enum value="0" name="VK_BUILD_MICROMAP_MODE_BUILD_EXT"/>
    </enums>
    <enums name="VkOpacityMicromapFormatEXT" type="enum">
        <enum value="1" name="VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT"/>
        <enum value="2" name="VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT"/>
    </enums>
    <enums name="VkOpacityMicromapSpecialIndexEXT" type="enum">
        <enum value="-1" name="VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT"/>
        <enum value="-2" name="VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT"/>
        <enum value="-3" name="VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT"/>
        <enum value="-4" name="VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT"/>
    </enums>
    <enums name="VkDepthBiasRepresentationEXT" type="enum">
        <enum value="0"     name="VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT"/>
        <enum value="1"     name="VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT"/>
        <enum value="2"     name="VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT"/>
    </enums>
    <enums name="VkDeviceFaultAddressTypeEXT" type="enum">
        <enum value="0"     name="VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT" comment="Currently unused"/>
        <enum value="1"     name="VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT"/>
        <enum value="2"     name="VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT"/>
        <enum value="3"     name="VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT"/>
        <enum value="4"     name="VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT"/>
        <enum value="5"     name="VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT"/>
        <enum value="6"     name="VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT"/>
    </enums>
    <enums name="VkDeviceFaultVendorBinaryHeaderVersionEXT" type="enum">
        <enum value="1"     name="VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT"/>
    </enums>
    <enums name="VkIndirectCommandsLayoutUsageFlagBitsEXT" type="bitmask">
        <enum bitpos="0"     name="VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_EXT"/>
        <enum bitpos="1"     name="VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_EXT"/>
    </enums>
    <enums name="VkIndirectExecutionSetInfoTypeEXT" type="enum">
        <enum value="0"     name="VK_INDIRECT_EXECUTION_SET_INFO_TYPE_PIPELINES_EXT"/>
        <enum value="1"     name="VK_INDIRECT_EXECUTION_SET_INFO_TYPE_SHADER_OBJECTS_EXT"/>
    </enums>
    <enums name="VkIndirectCommandsInputModeFlagBitsEXT" type="bitmask">
        <enum bitpos="0"     name="VK_INDIRECT_COMMANDS_INPUT_MODE_VULKAN_INDEX_BUFFER_EXT"/>
        <enum bitpos="1"     name="VK_INDIRECT_COMMANDS_INPUT_MODE_DXGI_INDEX_BUFFER_EXT"/>
    </enums>
    <enums name="VkIndirectCommandsTokenTypeEXT" type="enum">
        <enum value="0"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_EXECUTION_SET_EXT"/>
        <enum value="1"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_EXT"/>
        <enum value="2"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_SEQUENCE_INDEX_EXT"/>
        <enum value="3"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_EXT"/>
        <enum value="4"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_EXT"/>
        <enum value="5"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_EXT"/>
        <enum value="6"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_EXT"/>
        <enum value="7"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_COUNT_EXT"/>
        <enum value="8"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_COUNT_EXT"/>
        <enum value="9"     name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_EXT"/>
    </enums>
    <enums name="VkDisplacementMicromapFormatNV" type="enum">
        <enum value="1" name="VK_DISPLACEMENT_MICROMAP_FORMAT_64_TRIANGLES_64_BYTES_NV"/>
        <enum value="2" name="VK_DISPLACEMENT_MICROMAP_FORMAT_256_TRIANGLES_128_BYTES_NV"/>
        <enum value="3" name="VK_DISPLACEMENT_MICROMAP_FORMAT_1024_TRIANGLES_128_BYTES_NV"/>
    </enums>
    <enums name="VkShaderCreateFlagBitsEXT" type="bitmask">
        <enum bitpos="0" name="VK_SHADER_CREATE_LINK_STAGE_BIT_EXT"/>
    </enums>
    <enums name="VkShaderCodeTypeEXT" type="enum">
        <enum value="0" name="VK_SHADER_CODE_TYPE_BINARY_EXT"/>
        <enum value="1" name="VK_SHADER_CODE_TYPE_SPIRV_EXT"/>
    </enums>
    <enums name="VkScopeKHR" type="enum">
        <enum value="1"     name="VK_SCOPE_DEVICE_KHR"/>
        <enum value="2"     name="VK_SCOPE_WORKGROUP_KHR"/>
        <enum value="3"     name="VK_SCOPE_SUBGROUP_KHR"/>
        <enum value="5"     name="VK_SCOPE_QUEUE_FAMILY_KHR"/>
    </enums>
    <enums name="VkComponentTypeKHR" type="enum">
        <enum value="0"     name="VK_COMPONENT_TYPE_FLOAT16_KHR"/>
        <enum value="1"     name="VK_COMPONENT_TYPE_FLOAT32_KHR"/>
        <enum value="2"     name="VK_COMPONENT_TYPE_FLOAT64_KHR"/>
        <enum value="3"     name="VK_COMPONENT_TYPE_SINT8_KHR"/>
        <enum value="4"     name="VK_COMPONENT_TYPE_SINT16_KHR"/>
        <enum value="5"     name="VK_COMPONENT_TYPE_SINT32_KHR"/>
        <enum value="6"     name="VK_COMPONENT_TYPE_SINT64_KHR"/>
        <enum value="7"     name="VK_COMPONENT_TYPE_UINT8_KHR"/>
        <enum value="8"     name="VK_COMPONENT_TYPE_UINT16_KHR"/>
        <enum value="9"     name="VK_COMPONENT_TYPE_UINT32_KHR"/>
        <enum value="10"    name="VK_COMPONENT_TYPE_UINT64_KHR"/>
    </enums>
    <enums name="VkCubicFilterWeightsQCOM" type="enum">
        <enum value="0"     name="VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM"/>
        <enum value="1"     name="VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM"/>
        <enum value="2"     name="VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM"/>
        <enum value="3"     name="VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM"/>
    </enums>
    <enums name="VkBlockMatchWindowCompareModeQCOM" type="enum">
        <enum value="0" name="VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM"/>
        <enum value="1" name="VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM"/>
    </enums>
    <enums name="VkPhysicalDeviceLayeredApiKHR" type="enum">
        <enum value="0"     name="VK_PHYSICAL_DEVICE_LAYERED_API_VULKAN_KHR"/>
        <enum value="1"     name="VK_PHYSICAL_DEVICE_LAYERED_API_D3D12_KHR"/>
        <enum value="2"     name="VK_PHYSICAL_DEVICE_LAYERED_API_METAL_KHR"/>
        <enum value="3"     name="VK_PHYSICAL_DEVICE_LAYERED_API_OPENGL_KHR"/>
        <enum value="4"     name="VK_PHYSICAL_DEVICE_LAYERED_API_OPENGLES_KHR"/>
    </enums>
    <enums name="VkLayeredDriverUnderlyingApiMSFT" type="enum">
        <enum value="0" name="VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT"/>
        <enum value="1" name="VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT"/>
    </enums>
    <enums name="VkLatencyMarkerNV" type="enum">
        <enum value="0"    name="VK_LATENCY_MARKER_SIMULATION_START_NV"/>
        <enum value="1"    name="VK_LATENCY_MARKER_SIMULATION_END_NV"/>
        <enum value="2"    name="VK_LATENCY_MARKER_RENDERSUBMIT_START_NV"/>
        <enum value="3"    name="VK_LATENCY_MARKER_RENDERSUBMIT_END_NV"/>
        <enum value="4"    name="VK_LATENCY_MARKER_PRESENT_START_NV"/>
        <enum value="5"    name="VK_LATENCY_MARKER_PRESENT_END_NV"/>
        <enum value="6"    name="VK_LATENCY_MARKER_INPUT_SAMPLE_NV"/>
        <enum value="7"    name="VK_LATENCY_MARKER_TRIGGER_FLASH_NV"/>
        <enum value="8"    name="VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV"/>
        <enum value="9"    name="VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV"/>
        <enum value="10"   name="VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV"/>
        <enum value="11"   name="VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV"/>
    </enums>
    <enums name="VkOutOfBandQueueTypeNV" type="enum">
        <enum value="0"    name="VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV"/>
        <enum value="1"    name="VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV"/>
    </enums>
    <enums name="VkMemoryUnmapFlagBits" type="bitmask">
    </enums>
    <enums name="VkWaylandSurfaceCreateFlagBitsKHR" type="bitmask">
    </enums>
    <enums name="VkDepthClampModeEXT" type="enum">
        <enum value="0"    name="VK_DEPTH_CLAMP_MODE_VIEWPORT_RANGE_EXT"/>
        <enum value="1"    name="VK_DEPTH_CLAMP_MODE_USER_DEFINED_RANGE_EXT"/>
    </enums>
    <enums name="VkAccessFlagBits3KHR" type="bitmask" bitwidth="64">
        <enum value="0"     name="VK_ACCESS_3_NONE_KHR"/>
    </enums>
    <enums name="VkCooperativeVectorMatrixLayoutNV" type="enum">
        <enum value="0"     name="VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_ROW_MAJOR_NV"/>
        <enum value="1"     name="VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_COLUMN_MAJOR_NV"/>
        <enum value="2"     name="VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_INFERENCING_OPTIMAL_NV"/>
        <enum value="3"     name="VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_TRAINING_OPTIMAL_NV"/>
    </enums>

    <commands comment="Vulkan command definitions">
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_LAYER_NOT_PRESENT,VK_ERROR_EXTENSION_NOT_PRESENT,VK_ERROR_INCOMPATIBLE_DRIVER">
            <proto><type>VkResult</type> <name>vkCreateInstance</name></proto>
            <param>const <type>VkInstanceCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkInstance</type>* <name>pInstance</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyInstance</name></proto>
            <param optional="true" externsync="true"><type>VkInstance</type> <name>instance</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <implicitexternsyncparams>
                <param>all sname:VkPhysicalDevice objects enumerated from pname:instance</param>
            </implicitexternsyncparams>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkEnumeratePhysicalDevices</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPhysicalDeviceCount</name></param>
            <param optional="true" len="pPhysicalDeviceCount"><type>VkPhysicalDevice</type>* <name>pPhysicalDevices</name></param>
        </command>
        <command>
            <proto><type>PFN_vkVoidFunction</type> <name>vkGetDeviceProcAddr</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param len="null-terminated">const <type>char</type>* <name>pName</name></param>
        </command>
        <command>
            <proto><type>PFN_vkVoidFunction</type> <name>vkGetInstanceProcAddr</name></proto>
            <param optional="true"><type>VkInstance</type> <name>instance</name></param>
            <param len="null-terminated">const <type>char</type>* <name>pName</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceProperties</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkPhysicalDeviceProperties</type>* <name>pProperties</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceQueueFamilyProperties</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pQueueFamilyPropertyCount</name></param>
            <param optional="true" len="pQueueFamilyPropertyCount"><type>VkQueueFamilyProperties</type>* <name>pQueueFamilyProperties</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceMemoryProperties</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkPhysicalDeviceMemoryProperties</type>* <name>pMemoryProperties</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceFeatures</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkPhysicalDeviceFeatures</type>* <name>pFeatures</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceFormatProperties</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkFormat</type> <name>format</name></param>
            <param><type>VkFormatProperties</type>* <name>pFormatProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceImageFormatProperties</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkFormat</type> <name>format</name></param>
            <param><type>VkImageType</type> <name>type</name></param>
            <param><type>VkImageTiling</type> <name>tiling</name></param>
            <param><type>VkImageUsageFlags</type> <name>usage</name></param>
            <param optional="true"><type>VkImageCreateFlags</type> <name>flags</name></param>
            <param><type>VkImageFormatProperties</type>* <name>pImageFormatProperties</name></param>
        </command>
        <command api="vulkan" successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_EXTENSION_NOT_PRESENT,VK_ERROR_FEATURE_NOT_PRESENT,VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_DEVICE_LOST">
            <proto><type>VkResult</type> <name>vkCreateDevice</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkDeviceCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkDevice</type>* <name>pDevice</name></param>
        </command>
        <command api="vulkansc" successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_EXTENSION_NOT_PRESENT,VK_ERROR_FEATURE_NOT_PRESENT,VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_DEVICE_LOST,VK_ERROR_INVALID_PIPELINE_CACHE_DATA">
            <proto><type>VkResult</type> <name>vkCreateDevice</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkDeviceCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkDevice</type>* <name>pDevice</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyDevice</name></proto>
            <param optional="true" externsync="true"><type>VkDevice</type> <name>device</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <implicitexternsyncparams>
                <param>all sname:VkQueue objects created from pname:device</param>
            </implicitexternsyncparams>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkEnumerateInstanceVersion</name></proto>
            <param><type>uint32_t</type>* <name>pApiVersion</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkEnumerateInstanceLayerProperties</name></proto>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkLayerProperties</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_LAYER_NOT_PRESENT">
            <proto><type>VkResult</type> <name>vkEnumerateInstanceExtensionProperties</name></proto>
            <param optional="true" len="null-terminated">const <type>char</type>* <name>pLayerName</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkExtensionProperties</type>* <name>pProperties</name></param>
        </command>
        <command api="vulkan" successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkEnumerateDeviceLayerProperties</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkLayerProperties</type>* <name>pProperties</name></param>
        </command>
        <command api="vulkansc" successcodes="VK_SUCCESS">
            <proto><type>VkResult</type> <name>vkEnumerateDeviceLayerProperties</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkLayerProperties</type>* <name>pProperties</name></param>
        </command>

        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_LAYER_NOT_PRESENT">
            <proto><type>VkResult</type> <name>vkEnumerateDeviceExtensionProperties</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="true" len="null-terminated">const <type>char</type>* <name>pLayerName</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkExtensionProperties</type>* <name>pProperties</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetDeviceQueue</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>uint32_t</type> <name>queueFamilyIndex</name></param>
            <param><type>uint32_t</type> <name>queueIndex</name></param>
            <param><type>VkQueue</type>* <name>pQueue</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST">
            <proto><type>VkResult</type> <name>vkQueueSubmit</name></proto>
            <param externsync="true"><type>VkQueue</type> <name>queue</name></param>
            <param optional="true"><type>uint32_t</type> <name>submitCount</name></param>
            <param len="submitCount">const <type>VkSubmitInfo</type>* <name>pSubmits</name></param>
            <param optional="true" externsync="true"><type>VkFence</type> <name>fence</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST">
            <proto><type>VkResult</type> <name>vkQueueWaitIdle</name></proto>
            <param externsync="true"><type>VkQueue</type> <name>queue</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST">
            <proto><type>VkResult</type> <name>vkDeviceWaitIdle</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <implicitexternsyncparams>
                <param>all sname:VkQueue objects created from pname:device</param>
            </implicitexternsyncparams>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR">
            <proto><type>VkResult</type> <name>vkAllocateMemory</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkMemoryAllocateInfo</type>* <name>pAllocateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkDeviceMemory</type>* <name>pMemory</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkFreeMemory</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkDeviceMemory</type> <name>memory</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_MEMORY_MAP_FAILED">
            <proto><type>VkResult</type> <name>vkMapMemory</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkDeviceMemory</type> <name>memory</name></param>
            <param><type>VkDeviceSize</type> <name>offset</name></param>
            <param><type>VkDeviceSize</type> <name>size</name></param>
            <param optional="true"><type>VkMemoryMapFlags</type> <name>flags</name></param>
            <param optional="false,true"><type>void</type>** <name>ppData</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkUnmapMemory</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkDeviceMemory</type> <name>memory</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkFlushMappedMemoryRanges</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>uint32_t</type> <name>memoryRangeCount</name></param>
            <param len="memoryRangeCount">const <type>VkMappedMemoryRange</type>* <name>pMemoryRanges</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkInvalidateMappedMemoryRanges</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>uint32_t</type> <name>memoryRangeCount</name></param>
            <param len="memoryRangeCount">const <type>VkMappedMemoryRange</type>* <name>pMemoryRanges</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetDeviceMemoryCommitment</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkDeviceMemory</type> <name>memory</name></param>
            <param><type>VkDeviceSize</type>* <name>pCommittedMemoryInBytes</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetBufferMemoryRequirements</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkBuffer</type> <name>buffer</name></param>
            <param><type>VkMemoryRequirements</type>* <name>pMemoryRequirements</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR">
            <proto><type>VkResult</type> <name>vkBindBufferMemory</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkBuffer</type> <name>buffer</name></param>
            <param><type>VkDeviceMemory</type> <name>memory</name></param>
            <param><type>VkDeviceSize</type> <name>memoryOffset</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetImageMemoryRequirements</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkImage</type> <name>image</name></param>
            <param><type>VkMemoryRequirements</type>* <name>pMemoryRequirements</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkBindImageMemory</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkImage</type> <name>image</name></param>
            <param><type>VkDeviceMemory</type> <name>memory</name></param>
            <param><type>VkDeviceSize</type> <name>memoryOffset</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetImageSparseMemoryRequirements</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkImage</type> <name>image</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pSparseMemoryRequirementCount</name></param>
            <param optional="true" len="pSparseMemoryRequirementCount"><type>VkSparseImageMemoryRequirements</type>* <name>pSparseMemoryRequirements</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceSparseImageFormatProperties</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkFormat</type> <name>format</name></param>
            <param><type>VkImageType</type> <name>type</name></param>
            <param><type>VkSampleCountFlagBits</type> <name>samples</name></param>
            <param><type>VkImageUsageFlags</type> <name>usage</name></param>
            <param><type>VkImageTiling</type> <name>tiling</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkSparseImageFormatProperties</type>* <name>pProperties</name></param>
        </command>
        <command queues="sparse_binding" successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST">
            <proto><type>VkResult</type> <name>vkQueueBindSparse</name></proto>
            <param externsync="true"><type>VkQueue</type> <name>queue</name></param>
            <param optional="true"><type>uint32_t</type> <name>bindInfoCount</name></param>
            <param len="bindInfoCount">const <type>VkBindSparseInfo</type>* <name>pBindInfo</name></param>
            <param optional="true" externsync="true"><type>VkFence</type> <name>fence</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateFence</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkFenceCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkFence</type>* <name>pFence</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyFence</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkFence</type> <name>fence</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkResetFences</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>uint32_t</type> <name>fenceCount</name></param>
            <param len="fenceCount" externsync="true">const <type>VkFence</type>* <name>pFences</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_NOT_READY" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST">
            <proto><type>VkResult</type> <name>vkGetFenceStatus</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkFence</type> <name>fence</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_TIMEOUT" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST">
            <proto><type>VkResult</type> <name>vkWaitForFences</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>uint32_t</type> <name>fenceCount</name></param>
            <param len="fenceCount">const <type>VkFence</type>* <name>pFences</name></param>
            <param><type>VkBool32</type> <name>waitAll</name></param>
            <param><type>uint64_t</type> <name>timeout</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateSemaphore</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkSemaphoreCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSemaphore</type>* <name>pSemaphore</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroySemaphore</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkSemaphore</type> <name>semaphore</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateEvent</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkEventCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkEvent</type>* <name>pEvent</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyEvent</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkEvent</type> <name>event</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_EVENT_SET,VK_EVENT_RESET" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST">
            <proto><type>VkResult</type> <name>vkGetEventStatus</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkEvent</type> <name>event</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkSetEvent</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkEvent</type> <name>event</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkResetEvent</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkEvent</type> <name>event</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateQueryPool</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkQueryPoolCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkQueryPool</type>* <name>pQueryPool</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyQueryPool</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkQueryPool</type> <name>queryPool</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_NOT_READY" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST">
            <proto><type>VkResult</type> <name>vkGetQueryPoolResults</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkQueryPool</type> <name>queryPool</name></param>
            <param><type>uint32_t</type> <name>firstQuery</name></param>
            <param><type>uint32_t</type> <name>queryCount</name></param>
            <param><type>size_t</type> <name>dataSize</name></param>
            <param len="dataSize"><type>void</type>* <name>pData</name></param>
            <param><type>VkDeviceSize</type> <name>stride</name></param>
            <param optional="true"><type>VkQueryResultFlags</type> <name>flags</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkResetQueryPool</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkQueryPool</type> <name>queryPool</name></param>
            <param><type>uint32_t</type> <name>firstQuery</name></param>
            <param><type>uint32_t</type> <name>queryCount</name></param>
        </command>
        <command name="vkResetQueryPoolEXT"                        alias="vkResetQueryPool"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR">
            <proto><type>VkResult</type> <name>vkCreateBuffer</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkBufferCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkBuffer</type>* <name>pBuffer</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyBuffer</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkBuffer</type> <name>buffer</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateBufferView</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkBufferViewCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkBufferView</type>* <name>pView</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyBufferView</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkBufferView</type> <name>bufferView</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_COMPRESSION_EXHAUSTED_EXT,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR">
            <proto><type>VkResult</type> <name>vkCreateImage</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkImageCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkImage</type>* <name>pImage</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyImage</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkImage</type> <name>image</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetImageSubresourceLayout</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkImage</type> <name>image</name></param>
            <param>const <type>VkImageSubresource</type>* <name>pSubresource</name></param>
            <param><type>VkSubresourceLayout</type>* <name>pLayout</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR">
            <proto><type>VkResult</type> <name>vkCreateImageView</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkImageViewCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkImageView</type>* <name>pView</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyImageView</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkImageView</type> <name>imageView</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_SHADER_NV">
            <proto><type>VkResult</type> <name>vkCreateShaderModule</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkShaderModuleCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkShaderModule</type>* <name>pShaderModule</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyShaderModule</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkShaderModule</type> <name>shaderModule</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command api="vulkan" successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreatePipelineCache</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkPipelineCacheCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkPipelineCache</type>* <name>pPipelineCache</name></param>
        </command>
        <command api="vulkansc" successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_PIPELINE_CACHE_DATA">
            <proto><type>VkResult</type> <name>vkCreatePipelineCache</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkPipelineCacheCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkPipelineCache</type>* <name>pPipelineCache</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyPipelineCache</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkPipelineCache</type> <name>pipelineCache</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPipelineCacheData</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkPipelineCache</type> <name>pipelineCache</name></param>
            <param optional="false,true"><type>size_t</type>* <name>pDataSize</name></param>
            <param optional="true" len="pDataSize"><type>void</type>* <name>pData</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkMergePipelineCaches</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkPipelineCache</type> <name>dstCache</name></param>
            <param><type>uint32_t</type> <name>srcCacheCount</name></param>
            <param len="srcCacheCount">const <type>VkPipelineCache</type>* <name>pSrcCaches</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE,VK_PIPELINE_BINARY_MISSING_KHR" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkCreatePipelineBinariesKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkPipelineBinaryCreateInfoKHR</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkPipelineBinaryHandlesInfoKHR</type>* <name>pBinaries</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyPipelineBinaryKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkPipelineBinaryKHR</type> <name>pipelineBinary</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPipelineKeyKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true">const <type>VkPipelineCreateInfoKHR</type>* <name>pPipelineCreateInfo</name></param>
            <param><type>VkPipelineBinaryKeyKHR</type>* <name>pPipelineKey</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NOT_ENOUGH_SPACE_KHR">
            <proto><type>VkResult</type> <name>vkGetPipelineBinaryDataKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkPipelineBinaryDataInfoKHR</type>* <name>pInfo</name></param>
            <param><type>VkPipelineBinaryKeyKHR</type>* <name>pPipelineBinaryKey</name></param>
            <param optional="false,true"><type>size_t</type>* <name>pPipelineBinaryDataSize</name></param>
            <param optional="true" len="pPipelineBinaryDataSize"><type>void</type>* <name>pPipelineBinaryData</name></param>
        </command>
        <command successcodes="VK_SUCCESS">
            <proto><type>VkResult</type> <name>vkReleaseCapturedPipelineDataKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="pInfo-&gt;pipeline">const <type>VkReleaseCapturedPipelineDataInfoKHR</type>* <name>pInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command api="vulkan" successcodes="VK_SUCCESS,VK_PIPELINE_COMPILE_REQUIRED_EXT" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_SHADER_NV">
            <proto><type>VkResult</type> <name>vkCreateGraphicsPipelines</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true"><type>VkPipelineCache</type> <name>pipelineCache</name></param>
            <param><type>uint32_t</type> <name>createInfoCount</name></param>
            <param len="createInfoCount">const <type>VkGraphicsPipelineCreateInfo</type>* <name>pCreateInfos</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param len="createInfoCount"><type>VkPipeline</type>* <name>pPipelines</name></param>
        </command>
        <command api="vulkansc" successcodes="VK_SUCCESS,VK_PIPELINE_COMPILE_REQUIRED_EXT" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NO_PIPELINE_MATCH,VK_ERROR_OUT_OF_POOL_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateGraphicsPipelines</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkPipelineCache</type> <name>pipelineCache</name></param>
            <param><type>uint32_t</type> <name>createInfoCount</name></param>
            <param len="createInfoCount">const <type>VkGraphicsPipelineCreateInfo</type>* <name>pCreateInfos</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param len="createInfoCount"><type>VkPipeline</type>* <name>pPipelines</name></param>
        </command>
        <command api="vulkan" successcodes="VK_SUCCESS,VK_PIPELINE_COMPILE_REQUIRED_EXT" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_SHADER_NV">
            <proto><type>VkResult</type> <name>vkCreateComputePipelines</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true"><type>VkPipelineCache</type> <name>pipelineCache</name></param>
            <param><type>uint32_t</type> <name>createInfoCount</name></param>
            <param len="createInfoCount">const <type>VkComputePipelineCreateInfo</type>* <name>pCreateInfos</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param len="createInfoCount"><type>VkPipeline</type>* <name>pPipelines</name></param>
        </command>
        <command api="vulkansc" successcodes="VK_SUCCESS,VK_PIPELINE_COMPILE_REQUIRED_EXT" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NO_PIPELINE_MATCH,VK_ERROR_OUT_OF_POOL_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateComputePipelines</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkPipelineCache</type> <name>pipelineCache</name></param>
            <param><type>uint32_t</type> <name>createInfoCount</name></param>
            <param len="createInfoCount">const <type>VkComputePipelineCreateInfo</type>* <name>pCreateInfos</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param len="createInfoCount"><type>VkPipeline</type>* <name>pPipelines</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkRenderPass</type> <name>renderpass</name></param>
            <param len="1"><type>VkExtent2D</type>* <name>pMaxWorkgroupSize</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyPipeline</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkPipeline</type> <name>pipeline</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreatePipelineLayout</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkPipelineLayoutCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkPipelineLayout</type>* <name>pPipelineLayout</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyPipelineLayout</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkPipelineLayout</type> <name>pipelineLayout</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR">
            <proto><type>VkResult</type> <name>vkCreateSampler</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkSamplerCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSampler</type>* <name>pSampler</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroySampler</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkSampler</type> <name>sampler</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateDescriptorSetLayout</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkDescriptorSetLayoutCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkDescriptorSetLayout</type>* <name>pSetLayout</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyDescriptorSetLayout</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkDescriptorSetLayout</type> <name>descriptorSetLayout</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FRAGMENTATION_EXT">
            <proto><type>VkResult</type> <name>vkCreateDescriptorPool</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkDescriptorPoolCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkDescriptorPool</type>* <name>pDescriptorPool</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyDescriptorPool</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkDescriptorPool</type> <name>descriptorPool</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS">
            <proto><type>VkResult</type> <name>vkResetDescriptorPool</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkDescriptorPool</type> <name>descriptorPool</name></param>
            <param optional="true"><type>VkDescriptorPoolResetFlags</type> <name>flags</name></param>
            <implicitexternsyncparams>
                <param>any sname:VkDescriptorSet objects allocated from pname:descriptorPool</param>
            </implicitexternsyncparams>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FRAGMENTED_POOL,VK_ERROR_OUT_OF_POOL_MEMORY">
            <proto><type>VkResult</type> <name>vkAllocateDescriptorSets</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="pAllocateInfo-&gt;descriptorPool">const <type>VkDescriptorSetAllocateInfo</type>* <name>pAllocateInfo</name></param>
            <param len="pAllocateInfo-&gt;descriptorSetCount"><type>VkDescriptorSet</type>* <name>pDescriptorSets</name></param>
        </command>
        <command successcodes="VK_SUCCESS">
            <proto><type>VkResult</type> <name>vkFreeDescriptorSets</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkDescriptorPool</type> <name>descriptorPool</name></param>
            <param><type>uint32_t</type> <name>descriptorSetCount</name></param>
            <param noautovalidity="true" externsync="true" len="descriptorSetCount">const <type>VkDescriptorSet</type>* <name>pDescriptorSets</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkUpdateDescriptorSets</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true"><type>uint32_t</type> <name>descriptorWriteCount</name></param>
            <param len="descriptorWriteCount">const <type>VkWriteDescriptorSet</type>* <name>pDescriptorWrites</name></param>
            <param optional="true"><type>uint32_t</type> <name>descriptorCopyCount</name></param>
            <param len="descriptorCopyCount">const <type>VkCopyDescriptorSet</type>* <name>pDescriptorCopies</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateFramebuffer</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkFramebufferCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkFramebuffer</type>* <name>pFramebuffer</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyFramebuffer</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkFramebuffer</type> <name>framebuffer</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateRenderPass</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkRenderPassCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkRenderPass</type>* <name>pRenderPass</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyRenderPass</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkRenderPass</type> <name>renderPass</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetRenderAreaGranularity</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkRenderPass</type> <name>renderPass</name></param>
            <param><type>VkExtent2D</type>* <name>pGranularity</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetRenderingAreaGranularity</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkRenderingAreaInfo</type>* <name>pRenderingAreaInfo</name></param>
            <param><type>VkExtent2D</type>* <name>pGranularity</name></param>
        </command>
        <command name="vkGetRenderingAreaGranularityKHR" alias="vkGetRenderingAreaGranularity"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateCommandPool</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkCommandPoolCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkCommandPool</type>* <name>pCommandPool</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyCommandPool</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkCommandPool</type> <name>commandPool</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkResetCommandPool</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkCommandPool</type> <name>commandPool</name></param>
            <param optional="true"><type>VkCommandPoolResetFlags</type> <name>flags</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkAllocateCommandBuffers</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="pAllocateInfo-&gt;commandPool">const <type>VkCommandBufferAllocateInfo</type>* <name>pAllocateInfo</name></param>
            <param len="pAllocateInfo-&gt;commandBufferCount"><type>VkCommandBuffer</type>* <name>pCommandBuffers</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkFreeCommandBuffers</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkCommandPool</type> <name>commandPool</name></param>
            <param><type>uint32_t</type> <name>commandBufferCount</name></param>
            <param noautovalidity="true" externsync="true" len="commandBufferCount">const <type>VkCommandBuffer</type>* <name>pCommandBuffers</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkBeginCommandBuffer</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkCommandBufferBeginInfo</type>* <name>pBeginInfo</name></param>
            <implicitexternsyncparams>
                <param>the sname:VkCommandPool that pname:commandBuffer was allocated from</param>
            </implicitexternsyncparams>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR">
            <proto><type>VkResult</type> <name>vkEndCommandBuffer</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <implicitexternsyncparams>
                <param>the sname:VkCommandPool that pname:commandBuffer was allocated from</param>
            </implicitexternsyncparams>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkResetCommandBuffer</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param optional="true"><type>VkCommandBufferResetFlags</type> <name>flags</name></param>
            <implicitexternsyncparams>
                <param>the sname:VkCommandPool that pname:commandBuffer was allocated from</param>
            </implicitexternsyncparams>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdBindPipeline</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkPipelineBindPoint</type> <name>pipelineBindPoint</name></param>
            <param><type>VkPipeline</type> <name>pipeline</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetAttachmentFeedbackLoopEnableEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param optional="true"><type>VkImageAspectFlags</type> <name>aspectMask</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetViewport</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstViewport</name></param>
            <param><type>uint32_t</type> <name>viewportCount</name></param>
            <param len="viewportCount">const <type>VkViewport</type>* <name>pViewports</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetScissor</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstScissor</name></param>
            <param><type>uint32_t</type> <name>scissorCount</name></param>
            <param len="scissorCount">const <type>VkRect2D</type>* <name>pScissors</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetLineWidth</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>float</type> <name>lineWidth</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDepthBias</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>float</type> <name>depthBiasConstantFactor</name></param>
            <param><type>float</type> <name>depthBiasClamp</name></param>
            <param><type>float</type> <name>depthBiasSlopeFactor</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetBlendConstants</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>float</type> <name>blendConstants</name>[4]</param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDepthBounds</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>float</type> <name>minDepthBounds</name></param>
            <param><type>float</type> <name>maxDepthBounds</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetStencilCompareMask</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkStencilFaceFlags</type> <name>faceMask</name></param>
            <param><type>uint32_t</type> <name>compareMask</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetStencilWriteMask</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkStencilFaceFlags</type> <name>faceMask</name></param>
            <param><type>uint32_t</type> <name>writeMask</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetStencilReference</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkStencilFaceFlags</type> <name>faceMask</name></param>
            <param><type>uint32_t</type> <name>reference</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdBindDescriptorSets</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkPipelineBindPoint</type> <name>pipelineBindPoint</name></param>
            <param><type>VkPipelineLayout</type> <name>layout</name></param>
            <param><type>uint32_t</type> <name>firstSet</name></param>
            <param><type>uint32_t</type> <name>descriptorSetCount</name></param>
            <param len="descriptorSetCount" optional="false,true">const <type>VkDescriptorSet</type>* <name>pDescriptorSets</name></param>
            <param optional="true"><type>uint32_t</type> <name>dynamicOffsetCount</name></param>
            <param len="dynamicOffsetCount">const <type>uint32_t</type>* <name>pDynamicOffsets</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdBindIndexBuffer</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param optional="true"><type>VkBuffer</type> <name>buffer</name></param>
            <param><type>VkDeviceSize</type> <name>offset</name></param>
            <param><type>VkIndexType</type> <name>indexType</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdBindVertexBuffers</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstBinding</name></param>
            <param><type>uint32_t</type> <name>bindingCount</name></param>
            <param len="bindingCount" optional="false,true">const <type>VkBuffer</type>* <name>pBuffers</name></param>
            <param len="bindingCount">const <type>VkDeviceSize</type>* <name>pOffsets</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDraw</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>vertexCount</name></param>
            <param><type>uint32_t</type> <name>instanceCount</name></param>
            <param><type>uint32_t</type> <name>firstVertex</name></param>
            <param><type>uint32_t</type> <name>firstInstance</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDrawIndexed</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>indexCount</name></param>
            <param><type>uint32_t</type> <name>instanceCount</name></param>
            <param><type>uint32_t</type> <name>firstIndex</name></param>
            <param><type>int32_t</type> <name>vertexOffset</name></param>
            <param><type>uint32_t</type> <name>firstInstance</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDrawMultiEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param optional="true"><type>uint32_t</type> <name>drawCount</name></param>
            <param noautovalidity="true" len="drawCount" stride="stride">const <type>VkMultiDrawInfoEXT</type>* <name>pVertexInfo</name></param>
            <param><type>uint32_t</type> <name>instanceCount</name></param>
            <param><type>uint32_t</type> <name>firstInstance</name></param>
            <param><type>uint32_t</type> <name>stride</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDrawMultiIndexedEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param optional="true"><type>uint32_t</type> <name>drawCount</name></param>
            <param noautovalidity="true" len="drawCount" stride="stride">const <type>VkMultiDrawIndexedInfoEXT</type>* <name>pIndexInfo</name></param>
            <param><type>uint32_t</type> <name>instanceCount</name></param>
            <param><type>uint32_t</type> <name>firstInstance</name></param>
            <param><type>uint32_t</type> <name>stride</name></param>
            <param optional="true">const <type>int32_t</type>* <name>pVertexOffset</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDrawIndirect</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBuffer</type> <name>buffer</name></param>
            <param><type>VkDeviceSize</type> <name>offset</name></param>
            <param><type>uint32_t</type> <name>drawCount</name></param>
            <param><type>uint32_t</type> <name>stride</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDrawIndexedIndirect</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBuffer</type> <name>buffer</name></param>
            <param><type>VkDeviceSize</type> <name>offset</name></param>
            <param><type>uint32_t</type> <name>drawCount</name></param>
            <param><type>uint32_t</type> <name>stride</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDispatch</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>groupCountX</name></param>
            <param><type>uint32_t</type> <name>groupCountY</name></param>
            <param><type>uint32_t</type> <name>groupCountZ</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDispatchIndirect</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBuffer</type> <name>buffer</name></param>
            <param><type>VkDeviceSize</type> <name>offset</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdSubpassShadingHUAWEI</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDrawClusterHUAWEI</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>groupCountX</name></param>
            <param><type>uint32_t</type> <name>groupCountY</name></param>
            <param><type>uint32_t</type> <name>groupCountZ</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDrawClusterIndirectHUAWEI</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBuffer</type> <name>buffer</name></param>
            <param><type>VkDeviceSize</type> <name>offset</name></param>
        </command>
        <command queues="transfer,graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdUpdatePipelineIndirectBufferNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkPipelineBindPoint</type>           <name>pipelineBindPoint</name></param>
            <param><type>VkPipeline</type>                    <name>pipeline</name></param>
        </command>
        <command queues="transfer,graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyBuffer</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBuffer</type> <name>srcBuffer</name></param>
            <param><type>VkBuffer</type> <name>dstBuffer</name></param>
            <param><type>uint32_t</type> <name>regionCount</name></param>
            <param len="regionCount">const <type>VkBufferCopy</type>* <name>pRegions</name></param>
        </command>
        <command queues="transfer,graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyImage</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkImage</type> <name>srcImage</name></param>
            <param><type>VkImageLayout</type> <name>srcImageLayout</name></param>
            <param><type>VkImage</type> <name>dstImage</name></param>
            <param><type>VkImageLayout</type> <name>dstImageLayout</name></param>
            <param><type>uint32_t</type> <name>regionCount</name></param>
            <param len="regionCount">const <type>VkImageCopy</type>* <name>pRegions</name></param>
        </command>
        <command queues="graphics" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdBlitImage</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkImage</type> <name>srcImage</name></param>
            <param><type>VkImageLayout</type> <name>srcImageLayout</name></param>
            <param><type>VkImage</type> <name>dstImage</name></param>
            <param><type>VkImageLayout</type> <name>dstImageLayout</name></param>
            <param><type>uint32_t</type> <name>regionCount</name></param>
            <param len="regionCount">const <type>VkImageBlit</type>* <name>pRegions</name></param>
            <param><type>VkFilter</type> <name>filter</name></param>
        </command>
        <command queues="transfer,graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyBufferToImage</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBuffer</type> <name>srcBuffer</name></param>
            <param><type>VkImage</type> <name>dstImage</name></param>
            <param><type>VkImageLayout</type> <name>dstImageLayout</name></param>
            <param><type>uint32_t</type> <name>regionCount</name></param>
            <param len="regionCount">const <type>VkBufferImageCopy</type>* <name>pRegions</name></param>
        </command>
        <command queues="transfer,graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyImageToBuffer</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkImage</type> <name>srcImage</name></param>
            <param><type>VkImageLayout</type> <name>srcImageLayout</name></param>
            <param><type>VkBuffer</type> <name>dstBuffer</name></param>
            <param><type>uint32_t</type> <name>regionCount</name></param>
            <param len="regionCount">const <type>VkBufferImageCopy</type>* <name>pRegions</name></param>
        </command>
        <command queues="transfer,graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyMemoryIndirectNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkDeviceAddress</type> <name>copyBufferAddress</name></param>
            <param><type>uint32_t</type> <name>copyCount</name></param>
            <param><type>uint32_t</type> <name>stride</name></param>
        </command>
        <command queues="transfer,graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyMemoryToImageIndirectNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkDeviceAddress</type> <name>copyBufferAddress</name></param>
            <param><type>uint32_t</type> <name>copyCount</name></param>
            <param><type>uint32_t</type> <name>stride</name></param>
            <param><type>VkImage</type> <name>dstImage</name></param>
            <param><type>VkImageLayout</type> <name>dstImageLayout</name></param>
            <param len="copyCount">const <type>VkImageSubresourceLayers</type>* <name>pImageSubresources</name></param>
        </command>
        <command queues="transfer,graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdUpdateBuffer</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBuffer</type> <name>dstBuffer</name></param>
            <param><type>VkDeviceSize</type> <name>dstOffset</name></param>
            <param><type>VkDeviceSize</type> <name>dataSize</name></param>
            <param len="dataSize">const <type>void</type>* <name>pData</name></param>
        </command>
        <command queues="transfer,graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action" comment="transfer support is only available when VK_KHR_maintenance1 is enabled, as documented in valid usage language in the specification">
            <proto><type>void</type> <name>vkCmdFillBuffer</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBuffer</type> <name>dstBuffer</name></param>
            <param><type>VkDeviceSize</type> <name>dstOffset</name></param>
            <param><type>VkDeviceSize</type> <name>size</name></param>
            <param><type>uint32_t</type> <name>data</name></param>
        </command>
        <command queues="graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdClearColorImage</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkImage</type> <name>image</name></param>
            <param><type>VkImageLayout</type> <name>imageLayout</name></param>
            <param noautovalidity="true">const <type>VkClearColorValue</type>* <name>pColor</name></param>
            <param><type>uint32_t</type> <name>rangeCount</name></param>
            <param len="rangeCount">const <type>VkImageSubresourceRange</type>* <name>pRanges</name></param>
        </command>
        <command queues="graphics" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdClearDepthStencilImage</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkImage</type> <name>image</name></param>
            <param><type>VkImageLayout</type> <name>imageLayout</name></param>
            <param>const <type>VkClearDepthStencilValue</type>* <name>pDepthStencil</name></param>
            <param><type>uint32_t</type> <name>rangeCount</name></param>
            <param len="rangeCount">const <type>VkImageSubresourceRange</type>* <name>pRanges</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdClearAttachments</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>attachmentCount</name></param>
            <param len="attachmentCount">const <type>VkClearAttachment</type>* <name>pAttachments</name></param>
            <param><type>uint32_t</type> <name>rectCount</name></param>
            <param len="rectCount">const <type>VkClearRect</type>* <name>pRects</name></param>
        </command>
        <command queues="graphics" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdResolveImage</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkImage</type> <name>srcImage</name></param>
            <param><type>VkImageLayout</type> <name>srcImageLayout</name></param>
            <param><type>VkImage</type> <name>dstImage</name></param>
            <param><type>VkImageLayout</type> <name>dstImageLayout</name></param>
            <param><type>uint32_t</type> <name>regionCount</name></param>
            <param len="regionCount">const <type>VkImageResolve</type>* <name>pRegions</name></param>
        </command>
        <command queues="graphics,compute,decode,encode" renderpass="outside" videocoding="both" cmdbufferlevel="primary,secondary" tasks="synchronization">
            <proto><type>void</type> <name>vkCmdSetEvent</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkEvent</type> <name>event</name></param>
            <param optional="true"><type>VkPipelineStageFlags</type> <name>stageMask</name></param>
        </command>
        <command queues="graphics,compute,decode,encode" renderpass="outside" videocoding="both" cmdbufferlevel="primary,secondary" tasks="synchronization">
            <proto><type>void</type> <name>vkCmdResetEvent</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkEvent</type> <name>event</name></param>
            <param optional="true"><type>VkPipelineStageFlags</type> <name>stageMask</name></param>
        </command>
        <command queues="graphics,compute,decode,encode" renderpass="both" videocoding="both" cmdbufferlevel="primary,secondary" tasks="synchronization">
            <proto><type>void</type> <name>vkCmdWaitEvents</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>eventCount</name></param>
            <param len="eventCount">const <type>VkEvent</type>* <name>pEvents</name></param>
            <param optional="true"><type>VkPipelineStageFlags</type> <name>srcStageMask</name></param>
            <param optional="true"><type>VkPipelineStageFlags</type> <name>dstStageMask</name></param>
            <param optional="true"><type>uint32_t</type> <name>memoryBarrierCount</name></param>
            <param len="memoryBarrierCount">const <type>VkMemoryBarrier</type>* <name>pMemoryBarriers</name></param>
            <param optional="true"><type>uint32_t</type> <name>bufferMemoryBarrierCount</name></param>
            <param len="bufferMemoryBarrierCount">const <type>VkBufferMemoryBarrier</type>* <name>pBufferMemoryBarriers</name></param>
            <param optional="true"><type>uint32_t</type> <name>imageMemoryBarrierCount</name></param>
            <param len="imageMemoryBarrierCount">const <type>VkImageMemoryBarrier</type>* <name>pImageMemoryBarriers</name></param>
        </command>
        <command queues="transfer,graphics,compute,decode,encode" renderpass="both" videocoding="both" cmdbufferlevel="primary,secondary" tasks="synchronization">
            <proto><type>void</type> <name>vkCmdPipelineBarrier</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param optional="true"><type>VkPipelineStageFlags</type> <name>srcStageMask</name></param>
            <param optional="true"><type>VkPipelineStageFlags</type> <name>dstStageMask</name></param>
            <param optional="true"><type>VkDependencyFlags</type> <name>dependencyFlags</name></param>
            <param optional="true"><type>uint32_t</type> <name>memoryBarrierCount</name></param>
            <param len="memoryBarrierCount">const <type>VkMemoryBarrier</type>* <name>pMemoryBarriers</name></param>
            <param optional="true"><type>uint32_t</type> <name>bufferMemoryBarrierCount</name></param>
            <param len="bufferMemoryBarrierCount">const <type>VkBufferMemoryBarrier</type>* <name>pBufferMemoryBarriers</name></param>
            <param optional="true"><type>uint32_t</type> <name>imageMemoryBarrierCount</name></param>
            <param len="imageMemoryBarrierCount">const <type>VkImageMemoryBarrier</type>* <name>pImageMemoryBarriers</name></param>
        </command>
        <command queues="graphics,compute,decode,encode" renderpass="both" videocoding="both" cmdbufferlevel="primary,secondary" tasks="action,state">
            <proto><type>void</type> <name>vkCmdBeginQuery</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkQueryPool</type> <name>queryPool</name></param>
            <param><type>uint32_t</type> <name>query</name></param>
            <param optional="true"><type>VkQueryControlFlags</type> <name>flags</name></param>
        </command>
        <command queues="graphics,compute,decode,encode" renderpass="both" videocoding="both" cmdbufferlevel="primary,secondary" tasks="action,state">
            <proto><type>void</type> <name>vkCmdEndQuery</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkQueryPool</type> <name>queryPool</name></param>
            <param><type>uint32_t</type> <name>query</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="action,state">
            <proto><type>void</type> <name>vkCmdBeginConditionalRenderingEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkConditionalRenderingBeginInfoEXT</type>* <name>pConditionalRenderingBegin</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="action,state">
            <proto><type>void</type> <name>vkCmdEndConditionalRenderingEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
        </command>
        <command queues="graphics,compute,decode,encode,opticalflow" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdResetQueryPool</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkQueryPool</type> <name>queryPool</name></param>
            <param><type>uint32_t</type> <name>firstQuery</name></param>
            <param><type>uint32_t</type> <name>queryCount</name></param>
        </command>
        <command queues="transfer,graphics,compute,decode,encode,opticalflow" renderpass="both" videocoding="both" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdWriteTimestamp</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkPipelineStageFlagBits</type> <name>pipelineStage</name></param>
            <param><type>VkQueryPool</type> <name>queryPool</name></param>
            <param><type>uint32_t</type> <name>query</name></param>
        </command>
        <command queues="graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyQueryPoolResults</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkQueryPool</type> <name>queryPool</name></param>
            <param><type>uint32_t</type> <name>firstQuery</name></param>
            <param><type>uint32_t</type> <name>queryCount</name></param>
            <param><type>VkBuffer</type> <name>dstBuffer</name></param>
            <param><type>VkDeviceSize</type> <name>dstOffset</name></param>
            <param><type>VkDeviceSize</type> <name>stride</name></param>
            <param optional="true"><type>VkQueryResultFlags</type> <name>flags</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdPushConstants</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkPipelineLayout</type> <name>layout</name></param>
            <param><type>VkShaderStageFlags</type> <name>stageFlags</name></param>
            <param><type>uint32_t</type> <name>offset</name></param>
            <param><type>uint32_t</type> <name>size</name></param>
            <param len="size">const <type>void</type>* <name>pValues</name></param>
        </command>
        <command queues="graphics" renderpass="outside" cmdbufferlevel="primary" tasks="action,state,synchronization">
            <proto><type>void</type> <name>vkCmdBeginRenderPass</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkRenderPassBeginInfo</type>* <name>pRenderPassBegin</name></param>
            <param><type>VkSubpassContents</type> <name>contents</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary" tasks="action,state,synchronization">
            <proto><type>void</type> <name>vkCmdNextSubpass</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkSubpassContents</type> <name>contents</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary" tasks="action,state,synchronization">
            <proto><type>void</type> <name>vkCmdEndRenderPass</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
        </command>
        <command queues="transfer,graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="indirection">
            <proto><type>void</type> <name>vkCmdExecuteCommands</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>commandBufferCount</name></param>
            <param len="commandBufferCount">const <type>VkCommandBuffer</type>* <name>pCommandBuffers</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR">
            <proto><type>VkResult</type> <name>vkCreateAndroidSurfaceKHR</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkAndroidSurfaceCreateInfoKHR</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSurfaceKHR</type>* <name>pSurface</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceDisplayPropertiesKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkDisplayPropertiesKHR</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceDisplayPlanePropertiesKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkDisplayPlanePropertiesKHR</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetDisplayPlaneSupportedDisplaysKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>uint32_t</type> <name>planeIndex</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pDisplayCount</name></param>
            <param optional="true" len="pDisplayCount"><type>VkDisplayKHR</type>* <name>pDisplays</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetDisplayModePropertiesKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkDisplayKHR</type> <name>display</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkDisplayModePropertiesKHR</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkCreateDisplayModeKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param externsync="true"><type>VkDisplayKHR</type> <name>display</name></param>
            <param>const <type>VkDisplayModeCreateInfoKHR</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkDisplayModeKHR</type>* <name>pMode</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetDisplayPlaneCapabilitiesKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param externsync="true"><type>VkDisplayModeKHR</type> <name>mode</name></param>
            <param><type>uint32_t</type> <name>planeIndex</name></param>
            <param><type>VkDisplayPlaneCapabilitiesKHR</type>* <name>pCapabilities</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateDisplayPlaneSurfaceKHR</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkDisplaySurfaceCreateInfoKHR</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSurfaceKHR</type>* <name>pSurface</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkCreateSharedSwapchainsKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>uint32_t</type> <name>swapchainCount</name></param>
            <param api="vulkan" len="swapchainCount" externsync="pCreateInfos[].surface,pCreateInfos[].oldSwapchain">const <type>VkSwapchainCreateInfoKHR</type>* <name>pCreateInfos</name></param>
            <param api="vulkansc" len="swapchainCount" externsync="pCreateInfos[].surface">const <type>VkSwapchainCreateInfoKHR</type>* <name>pCreateInfos</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param len="swapchainCount"><type>VkSwapchainKHR</type>* <name>pSwapchains</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroySurfaceKHR</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param optional="true" externsync="true"><type>VkSurfaceKHR</type> <name>surface</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceSurfaceSupportKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>uint32_t</type> <name>queueFamilyIndex</name></param>
            <param><type>VkSurfaceKHR</type> <name>surface</name></param>
            <param><type>VkBool32</type>* <name>pSupported</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceSurfaceCapabilitiesKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkSurfaceKHR</type> <name>surface</name></param>
            <param><type>VkSurfaceCapabilitiesKHR</type>* <name>pSurfaceCapabilities</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceSurfaceFormatsKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="true"><type>VkSurfaceKHR</type> <name>surface</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pSurfaceFormatCount</name></param>
            <param optional="true" len="pSurfaceFormatCount"><type>VkSurfaceFormatKHR</type>* <name>pSurfaceFormats</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceSurfacePresentModesKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="true"><type>VkSurfaceKHR</type> <name>surface</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPresentModeCount</name></param>
            <param optional="true" len="pPresentModeCount"><type>VkPresentModeKHR</type>* <name>pPresentModes</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_COMPRESSION_EXHAUSTED_EXT">
            <proto><type>VkResult</type> <name>vkCreateSwapchainKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param api="vulkan" externsync="pCreateInfo-&gt;surface,pCreateInfo-&gt;oldSwapchain">const <type>VkSwapchainCreateInfoKHR</type>* <name>pCreateInfo</name></param>
            <param api="vulkansc" externsync="pCreateInfo-&gt;surface">const <type>VkSwapchainCreateInfoKHR</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSwapchainKHR</type>* <name>pSwapchain</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroySwapchainKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkSwapchainKHR</type> <name>swapchain</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetSwapchainImagesKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkSwapchainKHR</type> <name>swapchain</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pSwapchainImageCount</name></param>
            <param optional="true" len="pSwapchainImageCount"><type>VkImage</type>* <name>pSwapchainImages</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_TIMEOUT,VK_NOT_READY,VK_SUBOPTIMAL_KHR" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT">
            <proto><type>VkResult</type> <name>vkAcquireNextImageKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkSwapchainKHR</type> <name>swapchain</name></param>
            <param><type>uint64_t</type> <name>timeout</name></param>
            <param optional="true" externsync="true"><type>VkSemaphore</type> <name>semaphore</name></param>
            <param optional="true" externsync="true"><type>VkFence</type> <name>fence</name></param>
            <param><type>uint32_t</type>* <name>pImageIndex</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_SUBOPTIMAL_KHR" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT">
            <proto><type>VkResult</type> <name>vkQueuePresentKHR</name></proto>
            <param externsync="true"><type>VkQueue</type> <name>queue</name></param>
            <param externsync="pPresentInfo-&gt;pWaitSemaphores[],pPresentInfo-&gt;pSwapchains[]">const <type>VkPresentInfoKHR</type>* <name>pPresentInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR">
            <proto><type>VkResult</type> <name>vkCreateViSurfaceNN</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkViSurfaceCreateInfoNN</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSurfaceKHR</type>* <name>pSurface</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateWaylandSurfaceKHR</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkWaylandSurfaceCreateInfoKHR</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSurfaceKHR</type>* <name>pSurface</name></param>
        </command>
        <command>
            <proto><type>VkBool32</type> <name>vkGetPhysicalDeviceWaylandPresentationSupportKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>uint32_t</type> <name>queueFamilyIndex</name></param>
            <param>struct <type>wl_display</type>* <name>display</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateWin32SurfaceKHR</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkWin32SurfaceCreateInfoKHR</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSurfaceKHR</type>* <name>pSurface</name></param>
        </command>
        <command>
            <proto><type>VkBool32</type> <name>vkGetPhysicalDeviceWin32PresentationSupportKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>uint32_t</type> <name>queueFamilyIndex</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateXlibSurfaceKHR</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkXlibSurfaceCreateInfoKHR</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSurfaceKHR</type>* <name>pSurface</name></param>
        </command>
        <command>
            <proto><type>VkBool32</type> <name>vkGetPhysicalDeviceXlibPresentationSupportKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>uint32_t</type> <name>queueFamilyIndex</name></param>
            <param><type>Display</type>* <name>dpy</name></param>
            <param><type>VisualID</type> <name>visualID</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateXcbSurfaceKHR</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkXcbSurfaceCreateInfoKHR</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSurfaceKHR</type>* <name>pSurface</name></param>
        </command>
        <command>
            <proto><type>VkBool32</type> <name>vkGetPhysicalDeviceXcbPresentationSupportKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>uint32_t</type> <name>queueFamilyIndex</name></param>
            <param><type>xcb_connection_t</type>* <name>connection</name></param>
            <param><type>xcb_visualid_t</type> <name>visual_id</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateDirectFBSurfaceEXT</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkDirectFBSurfaceCreateInfoEXT</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSurfaceKHR</type>* <name>pSurface</name></param>
        </command>
        <command>
            <proto><type>VkBool32</type> <name>vkGetPhysicalDeviceDirectFBPresentationSupportEXT</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>uint32_t</type> <name>queueFamilyIndex</name></param>
            <param><type>IDirectFB</type>* <name>dfb</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateImagePipeSurfaceFUCHSIA</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkImagePipeSurfaceCreateInfoFUCHSIA</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSurfaceKHR</type>* <name>pSurface</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR">
            <proto><type>VkResult</type> <name>vkCreateStreamDescriptorSurfaceGGP</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkStreamDescriptorSurfaceCreateInfoGGP</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSurfaceKHR</type>* <name>pSurface</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateScreenSurfaceQNX</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkScreenSurfaceCreateInfoQNX</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSurfaceKHR</type>* <name>pSurface</name></param>
        </command>
        <command>
            <proto><type>VkBool32</type> <name>vkGetPhysicalDeviceScreenPresentationSupportQNX</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>uint32_t</type> <name>queueFamilyIndex</name></param>
            <param>struct <type>_screen_window</type>* <name>window</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateDebugReportCallbackEXT</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkDebugReportCallbackCreateInfoEXT</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkDebugReportCallbackEXT</type>* <name>pCallback</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyDebugReportCallbackEXT</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param optional="true" externsync="true"><type>VkDebugReportCallbackEXT</type> <name>callback</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDebugReportMessageEXT</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param><type>VkDebugReportFlagsEXT</type> <name>flags</name></param>
            <param><type>VkDebugReportObjectTypeEXT</type> <name>objectType</name></param>
            <param objecttype="objectType"><type>uint64_t</type> <name>object</name></param>
            <param><type>size_t</type> <name>location</name></param>
            <param><type>int32_t</type> <name>messageCode</name></param>
            <param len="null-terminated">const <type>char</type>* <name>pLayerPrefix</name></param>
            <param len="null-terminated">const <type>char</type>* <name>pMessage</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkDebugMarkerSetObjectNameEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="pNameInfo-&gt;object">const <type>VkDebugMarkerObjectNameInfoEXT</type>* <name>pNameInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkDebugMarkerSetObjectTagEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="pTagInfo-&gt;object">const <type>VkDebugMarkerObjectTagInfoEXT</type>* <name>pTagInfo</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDebugMarkerBeginEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkDebugMarkerMarkerInfoEXT</type>* <name>pMarkerInfo</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDebugMarkerEndEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDebugMarkerInsertEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkDebugMarkerMarkerInfoEXT</type>* <name>pMarkerInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceExternalImageFormatPropertiesNV</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkFormat</type> <name>format</name></param>
            <param><type>VkImageType</type> <name>type</name></param>
            <param><type>VkImageTiling</type> <name>tiling</name></param>
            <param><type>VkImageUsageFlags</type> <name>usage</name></param>
            <param optional="true"><type>VkImageCreateFlags</type> <name>flags</name></param>
            <param optional="true"><type>VkExternalMemoryHandleTypeFlagsNV</type> <name>externalHandleType</name></param>
            <param><type>VkExternalImageFormatPropertiesNV</type>* <name>pExternalImageFormatProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetMemoryWin32HandleNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkDeviceMemory</type> <name>memory</name></param>
            <param><type>VkExternalMemoryHandleTypeFlagsNV</type> <name>handleType</name></param>
            <param><type>HANDLE</type>* <name>pHandle</name></param>
        </command>
        <command queues="graphics,compute" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action,indirection">
            <proto><type>void</type> <name>vkCmdExecuteGeneratedCommandsNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>isPreprocessed</name></param>
            <param>const <type>VkGeneratedCommandsInfoNV</type>* <name>pGeneratedCommandsInfo</name></param>
        </command>
        <command queues="graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdPreprocessGeneratedCommandsNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkGeneratedCommandsInfoNV</type>* <name>pGeneratedCommandsInfo</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdBindPipelineShaderGroupNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkPipelineBindPoint</type> <name>pipelineBindPoint</name></param>
            <param><type>VkPipeline</type> <name>pipeline</name></param>
            <param><type>uint32_t</type> <name>groupIndex</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetGeneratedCommandsMemoryRequirementsNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkGeneratedCommandsMemoryRequirementsInfoNV</type>* <name>pInfo</name></param>
            <param><type>VkMemoryRequirements2</type>* <name>pMemoryRequirements</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateIndirectCommandsLayoutNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkIndirectCommandsLayoutCreateInfoNV</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkIndirectCommandsLayoutNV</type>* <name>pIndirectCommandsLayout</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyIndirectCommandsLayoutNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkIndirectCommandsLayoutNV</type> <name>indirectCommandsLayout</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>

        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary" tasks="action,indirection">
            <proto><type>void</type> <name>vkCmdExecuteGeneratedCommandsEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>isPreprocessed</name></param>
            <param>const <type>VkGeneratedCommandsInfoEXT</type>* <name>pGeneratedCommandsInfo</name></param>
        </command>
        <command queues="graphics,compute" renderpass="outside" cmdbufferlevel="primary" tasks="action">
            <proto><type>void</type> <name>vkCmdPreprocessGeneratedCommandsEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkGeneratedCommandsInfoEXT</type>* <name>pGeneratedCommandsInfo</name></param>
            <param externsync="true"><type>VkCommandBuffer</type> <name>stateCommandBuffer</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetGeneratedCommandsMemoryRequirementsEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkGeneratedCommandsMemoryRequirementsInfoEXT</type>* <name>pInfo</name></param>
            <param><type>VkMemoryRequirements2</type>* <name>pMemoryRequirements</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateIndirectCommandsLayoutEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkIndirectCommandsLayoutCreateInfoEXT</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkIndirectCommandsLayoutEXT</type>* <name>pIndirectCommandsLayout</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyIndirectCommandsLayoutEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkIndirectCommandsLayoutEXT</type> <name>indirectCommandsLayout</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateIndirectExecutionSetEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkIndirectExecutionSetCreateInfoEXT</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkIndirectExecutionSetEXT</type>* <name>pIndirectExecutionSet</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyIndirectExecutionSetEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkIndirectExecutionSetEXT</type> <name>indirectExecutionSet</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkUpdateIndirectExecutionSetPipelineEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkIndirectExecutionSetEXT</type> <name>indirectExecutionSet</name></param>
            <param><type>uint32_t</type> <name>executionSetWriteCount</name></param>
            <param len="executionSetWriteCount">const <type>VkWriteIndirectExecutionSetPipelineEXT</type>* <name>pExecutionSetWrites</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkUpdateIndirectExecutionSetShaderEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkIndirectExecutionSetEXT</type> <name>indirectExecutionSet</name></param>
            <param><type>uint32_t</type> <name>executionSetWriteCount</name></param>
            <param len="executionSetWriteCount">const <type>VkWriteIndirectExecutionSetShaderEXT</type>* <name>pExecutionSetWrites</name></param>
        </command>

        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceFeatures2</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkPhysicalDeviceFeatures2</type>* <name>pFeatures</name></param>
        </command>
        <command name="vkGetPhysicalDeviceFeatures2KHR"                        alias="vkGetPhysicalDeviceFeatures2"/>
        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceProperties2</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkPhysicalDeviceProperties2</type>* <name>pProperties</name></param>
        </command>
        <command name="vkGetPhysicalDeviceProperties2KHR"                      alias="vkGetPhysicalDeviceProperties2"/>
        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceFormatProperties2</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkFormat</type> <name>format</name></param>
            <param><type>VkFormatProperties2</type>* <name>pFormatProperties</name></param>
        </command>
        <command name="vkGetPhysicalDeviceFormatProperties2KHR"                alias="vkGetPhysicalDeviceFormatProperties2"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED,VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceImageFormatProperties2</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkPhysicalDeviceImageFormatInfo2</type>* <name>pImageFormatInfo</name></param>
            <param><type>VkImageFormatProperties2</type>* <name>pImageFormatProperties</name></param>
        </command>
        <command name="vkGetPhysicalDeviceImageFormatProperties2KHR"           alias="vkGetPhysicalDeviceImageFormatProperties2"/>
        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceQueueFamilyProperties2</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pQueueFamilyPropertyCount</name></param>
            <param optional="true" len="pQueueFamilyPropertyCount"><type>VkQueueFamilyProperties2</type>* <name>pQueueFamilyProperties</name></param>
        </command>
        <command name="vkGetPhysicalDeviceQueueFamilyProperties2KHR"           alias="vkGetPhysicalDeviceQueueFamilyProperties2"/>
        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceMemoryProperties2</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkPhysicalDeviceMemoryProperties2</type>* <name>pMemoryProperties</name></param>
        </command>
        <command name="vkGetPhysicalDeviceMemoryProperties2KHR"                alias="vkGetPhysicalDeviceMemoryProperties2"/>
        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceSparseImageFormatProperties2</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkPhysicalDeviceSparseImageFormatInfo2</type>* <name>pFormatInfo</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkSparseImageFormatProperties2</type>* <name>pProperties</name></param>
        </command>
        <command name="vkGetPhysicalDeviceSparseImageFormatProperties2KHR"     alias="vkGetPhysicalDeviceSparseImageFormatProperties2"/>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdPushDescriptorSet</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkPipelineBindPoint</type> <name>pipelineBindPoint</name></param>
            <param><type>VkPipelineLayout</type> <name>layout</name></param>
            <param><type>uint32_t</type> <name>set</name></param>
            <param><type>uint32_t</type> <name>descriptorWriteCount</name></param>
            <param len="descriptorWriteCount">const <type>VkWriteDescriptorSet</type>* <name>pDescriptorWrites</name></param>
        </command>
        <command name="vkCmdPushDescriptorSetKHR" alias="vkCmdPushDescriptorSet"/>
        <command>
            <proto><type>void</type> <name>vkTrimCommandPool</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkCommandPool</type> <name>commandPool</name></param>
            <param optional="true"><type>VkCommandPoolTrimFlags</type> <name>flags</name></param>
        </command>
        <command name="vkTrimCommandPoolKHR"                                   alias="vkTrimCommandPool"/>
        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceExternalBufferProperties</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkPhysicalDeviceExternalBufferInfo</type>* <name>pExternalBufferInfo</name></param>
            <param><type>VkExternalBufferProperties</type>* <name>pExternalBufferProperties</name></param>
        </command>
        <command name="vkGetPhysicalDeviceExternalBufferPropertiesKHR"         alias="vkGetPhysicalDeviceExternalBufferProperties"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetMemoryWin32HandleKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkMemoryGetWin32HandleInfoKHR</type>* <name>pGetWin32HandleInfo</name></param>
            <param><type>HANDLE</type>* <name>pHandle</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE">
            <proto><type>VkResult</type> <name>vkGetMemoryWin32HandlePropertiesKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></param>
            <param><type>HANDLE</type> <name>handle</name></param>
            <param><type>VkMemoryWin32HandlePropertiesKHR</type>* <name>pMemoryWin32HandleProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetMemoryFdKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkMemoryGetFdInfoKHR</type>* <name>pGetFdInfo</name></param>
            <param><type>int</type>* <name>pFd</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE">
            <proto><type>VkResult</type> <name>vkGetMemoryFdPropertiesKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></param>
            <param><type>int</type> <name>fd</name></param>
            <param><type>VkMemoryFdPropertiesKHR</type>* <name>pMemoryFdProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetMemoryZirconHandleFUCHSIA</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkMemoryGetZirconHandleInfoFUCHSIA</type>* <name>pGetZirconHandleInfo</name></param>
            <param><type>zx_handle_t</type>* <name>pZirconHandle</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INVALID_EXTERNAL_HANDLE">
            <proto><type>VkResult</type> <name>vkGetMemoryZirconHandlePropertiesFUCHSIA</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></param>
            <param><type>zx_handle_t</type> <name>zirconHandle</name></param>
            <param><type>VkMemoryZirconHandlePropertiesFUCHSIA</type>* <name>pMemoryZirconHandleProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INVALID_EXTERNAL_HANDLE">
            <proto><type>VkResult</type> <name>vkGetMemoryRemoteAddressNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkMemoryGetRemoteAddressInfoNV</type>* <name>pMemoryGetRemoteAddressInfo</name></param>
            <param><type>VkRemoteAddressNV</type>* <name>pAddress</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkGetMemorySciBufNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkMemoryGetSciBufInfoNV</type>* <name>pGetSciBufInfo</name></param>
            <param><type>NvSciBufObj</type>* <name>pHandle</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_INVALID_EXTERNAL_HANDLE">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></param>
            <param><type>NvSciBufObj</type> <name>handle</name></param>
            <param><type>VkMemorySciBufPropertiesNV</type>* <name>pMemorySciBufProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceSciBufAttributesNV</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>NvSciBufAttrList</type> <name>pAttributes</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceExternalSemaphoreProperties</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkPhysicalDeviceExternalSemaphoreInfo</type>* <name>pExternalSemaphoreInfo</name></param>
            <param><type>VkExternalSemaphoreProperties</type>* <name>pExternalSemaphoreProperties</name></param>
        </command>
        <command name="vkGetPhysicalDeviceExternalSemaphorePropertiesKHR"      alias="vkGetPhysicalDeviceExternalSemaphoreProperties"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetSemaphoreWin32HandleKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkSemaphoreGetWin32HandleInfoKHR</type>* <name>pGetWin32HandleInfo</name></param>
            <param><type>HANDLE</type>* <name>pHandle</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE">
            <proto><type>VkResult</type> <name>vkImportSemaphoreWin32HandleKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkImportSemaphoreWin32HandleInfoKHR</type>* <name>pImportSemaphoreWin32HandleInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetSemaphoreFdKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkSemaphoreGetFdInfoKHR</type>* <name>pGetFdInfo</name></param>
            <param><type>int</type>* <name>pFd</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE">
            <proto><type>VkResult</type> <name>vkImportSemaphoreFdKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkImportSemaphoreFdInfoKHR</type>* <name>pImportSemaphoreFdInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetSemaphoreZirconHandleFUCHSIA</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkSemaphoreGetZirconHandleInfoFUCHSIA</type>* <name>pGetZirconHandleInfo</name></param>
            <param><type>zx_handle_t</type>* <name>pZirconHandle</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE">
            <proto><type>VkResult</type> <name>vkImportSemaphoreZirconHandleFUCHSIA</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkImportSemaphoreZirconHandleInfoFUCHSIA</type>* <name>pImportSemaphoreZirconHandleInfo</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceExternalFenceProperties</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkPhysicalDeviceExternalFenceInfo</type>* <name>pExternalFenceInfo</name></param>
            <param><type>VkExternalFenceProperties</type>* <name>pExternalFenceProperties</name></param>
        </command>
        <command name="vkGetPhysicalDeviceExternalFencePropertiesKHR"          alias="vkGetPhysicalDeviceExternalFenceProperties"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetFenceWin32HandleKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkFenceGetWin32HandleInfoKHR</type>* <name>pGetWin32HandleInfo</name></param>
            <param><type>HANDLE</type>* <name>pHandle</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE">
            <proto><type>VkResult</type> <name>vkImportFenceWin32HandleKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkImportFenceWin32HandleInfoKHR</type>* <name>pImportFenceWin32HandleInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetFenceFdKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkFenceGetFdInfoKHR</type>* <name>pGetFdInfo</name></param>
            <param><type>int</type>* <name>pFd</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE">
            <proto><type>VkResult</type> <name>vkImportFenceFdKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkImportFenceFdInfoKHR</type>* <name>pImportFenceFdInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_NOT_PERMITTED">
            <proto><type>VkResult</type> <name>vkGetFenceSciSyncFenceNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkFenceGetSciSyncInfoNV</type>* <name>pGetSciSyncHandleInfo</name></param>
            <param><type>void</type>* <name>pHandle</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_NOT_PERMITTED">
            <proto><type>VkResult</type> <name>vkGetFenceSciSyncObjNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkFenceGetSciSyncInfoNV</type>* <name>pGetSciSyncHandleInfo</name></param>
            <param><type>void</type>* <name>pHandle</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_NOT_PERMITTED">
            <proto><type>VkResult</type> <name>vkImportFenceSciSyncFenceNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkImportFenceSciSyncInfoNV</type>* <name>pImportFenceSciSyncInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_NOT_PERMITTED">
            <proto><type>VkResult</type> <name>vkImportFenceSciSyncObjNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkImportFenceSciSyncInfoNV</type>* <name>pImportFenceSciSyncInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_NOT_PERMITTED">
            <proto><type>VkResult</type> <name>vkGetSemaphoreSciSyncObjNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkSemaphoreGetSciSyncInfoNV</type>* <name>pGetSciSyncInfo</name></param>
            <param><type>void</type>* <name>pHandle</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_NOT_PERMITTED,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkImportSemaphoreSciSyncObjNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkImportSemaphoreSciSyncInfoNV</type>* <name>pImportSemaphoreSciSyncInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceSciSyncAttributesNV</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkSciSyncAttributesInfoNV</type>* <name>pSciSyncAttributesInfo</name></param>
            <param><type>NvSciSyncAttrList</type> <name>pAttributes</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateSemaphoreSciSyncPoolNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkSemaphoreSciSyncPoolCreateInfoNV</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSemaphoreSciSyncPoolNV</type>* <name>pSemaphorePool</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroySemaphoreSciSyncPoolNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkSemaphoreSciSyncPoolNV</type> <name>semaphorePool</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS">
            <proto><type>VkResult</type> <name>vkReleaseDisplayEXT</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkDisplayKHR</type> <name>display</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkAcquireXlibDisplayEXT</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>Display</type>* <name>dpy</name></param>
            <param><type>VkDisplayKHR</type> <name>display</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetRandROutputDisplayEXT</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>Display</type>* <name>dpy</name></param>
            <param><type>RROutput</type> <name>rrOutput</name></param>
            <param><type>VkDisplayKHR</type>* <name>pDisplay</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkAcquireWinrtDisplayNV</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkDisplayKHR</type> <name>display</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkGetWinrtDisplayNV</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>uint32_t</type> <name>deviceRelativeId</name></param>
            <param><type>VkDisplayKHR</type>* <name>pDisplay</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkDisplayPowerControlEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkDisplayKHR</type> <name>display</name></param>
            <param>const <type>VkDisplayPowerInfoEXT</type>* <name>pDisplayPowerInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkRegisterDeviceEventEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkDeviceEventInfoEXT</type>* <name>pDeviceEventInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkFence</type>* <name>pFence</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkRegisterDisplayEventEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkDisplayKHR</type> <name>display</name></param>
            <param>const <type>VkDisplayEventInfoEXT</type>* <name>pDisplayEventInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkFence</type>* <name>pFence</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR">
            <proto><type>VkResult</type> <name>vkGetSwapchainCounterEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkSwapchainKHR</type> <name>swapchain</name></param>
            <param><type>VkSurfaceCounterFlagBitsEXT</type> <name>counter</name></param>
            <param><type>uint64_t</type>* <name>pCounterValue</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceSurfaceCapabilities2EXT</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkSurfaceKHR</type> <name>surface</name></param>
            <param><type>VkSurfaceCapabilities2EXT</type>* <name>pSurfaceCapabilities</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkEnumeratePhysicalDeviceGroups</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPhysicalDeviceGroupCount</name></param>
            <param optional="true" len="pPhysicalDeviceGroupCount"><type>VkPhysicalDeviceGroupProperties</type>* <name>pPhysicalDeviceGroupProperties</name></param>
        </command>
        <command name="vkEnumeratePhysicalDeviceGroupsKHR"                     alias="vkEnumeratePhysicalDeviceGroups"/>
        <command>
            <proto><type>void</type> <name>vkGetDeviceGroupPeerMemoryFeatures</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>uint32_t</type> <name>heapIndex</name></param>
            <param><type>uint32_t</type> <name>localDeviceIndex</name></param>
            <param><type>uint32_t</type> <name>remoteDeviceIndex</name></param>
            <param><type>VkPeerMemoryFeatureFlags</type>* <name>pPeerMemoryFeatures</name></param>
        </command>
        <command name="vkGetDeviceGroupPeerMemoryFeaturesKHR"                  alias="vkGetDeviceGroupPeerMemoryFeatures"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR">
            <proto><type>VkResult</type> <name>vkBindBufferMemory2</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>uint32_t</type> <name>bindInfoCount</name></param>
            <param len="bindInfoCount">const <type>VkBindBufferMemoryInfo</type>* <name>pBindInfos</name></param>
        </command>
        <command name="vkBindBufferMemory2KHR"                                 alias="vkBindBufferMemory2"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkBindImageMemory2</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>uint32_t</type> <name>bindInfoCount</name></param>
            <param len="bindInfoCount">const <type>VkBindImageMemoryInfo</type>* <name>pBindInfos</name></param>
        </command>
        <command name="vkBindImageMemory2KHR"                                  alias="vkBindImageMemory2"/>
        <command queues="graphics,compute,transfer" renderpass="both" videocoding="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDeviceMask</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>deviceMask</name></param>
        </command>
        <command name="vkCmdSetDeviceMaskKHR"                                  alias="vkCmdSetDeviceMask"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetDeviceGroupPresentCapabilitiesKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkDeviceGroupPresentCapabilitiesKHR</type>* <name>pDeviceGroupPresentCapabilities</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkGetDeviceGroupSurfacePresentModesKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkSurfaceKHR</type> <name>surface</name></param>
            <param optional="false,true"><type>VkDeviceGroupPresentModeFlagsKHR</type>* <name>pModes</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_TIMEOUT,VK_NOT_READY,VK_SUBOPTIMAL_KHR" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT">
            <proto><type>VkResult</type> <name>vkAcquireNextImage2KHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkAcquireNextImageInfoKHR</type>* <name>pAcquireInfo</name></param>
            <param><type>uint32_t</type>* <name>pImageIndex</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDispatchBase</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>baseGroupX</name></param>
            <param><type>uint32_t</type> <name>baseGroupY</name></param>
            <param><type>uint32_t</type> <name>baseGroupZ</name></param>
            <param><type>uint32_t</type> <name>groupCountX</name></param>
            <param><type>uint32_t</type> <name>groupCountY</name></param>
            <param><type>uint32_t</type> <name>groupCountZ</name></param>
        </command>
        <command name="vkCmdDispatchBaseKHR"                                   alias="vkCmdDispatchBase"/>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPhysicalDevicePresentRectanglesKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param externsync="true"><type>VkSurfaceKHR</type> <name>surface</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pRectCount</name></param>
            <param optional="true" len="pRectCount"><type>VkRect2D</type>* <name>pRects</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateDescriptorUpdateTemplate</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkDescriptorUpdateTemplateCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkDescriptorUpdateTemplate</type>* <name>pDescriptorUpdateTemplate</name></param>
        </command>
        <command name="vkCreateDescriptorUpdateTemplateKHR"                    alias="vkCreateDescriptorUpdateTemplate"/>
        <command>
            <proto><type>void</type> <name>vkDestroyDescriptorUpdateTemplate</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkDescriptorUpdateTemplate</type> <name>descriptorUpdateTemplate</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command name="vkDestroyDescriptorUpdateTemplateKHR"                   alias="vkDestroyDescriptorUpdateTemplate"/>
        <command>
            <proto><type>void</type> <name>vkUpdateDescriptorSetWithTemplate</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkDescriptorSet</type> <name>descriptorSet</name></param>
            <param><type>VkDescriptorUpdateTemplate</type> <name>descriptorUpdateTemplate</name></param>
            <param noautovalidity="true">const <type>void</type>* <name>pData</name></param>
        </command>
        <command name="vkUpdateDescriptorSetWithTemplateKHR"                   alias="vkUpdateDescriptorSetWithTemplate"/>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdPushDescriptorSetWithTemplate</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkDescriptorUpdateTemplate</type> <name>descriptorUpdateTemplate</name></param>
            <param><type>VkPipelineLayout</type> <name>layout</name></param>
            <param><type>uint32_t</type> <name>set</name></param>
            <param noautovalidity="true">const <type>void</type>* <name>pData</name></param>
        </command>
        <command name="vkCmdPushDescriptorSetWithTemplateKHR" alias="vkCmdPushDescriptorSetWithTemplate"/>
        <command>
            <proto><type>void</type> <name>vkSetHdrMetadataEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>uint32_t</type> <name>swapchainCount</name></param>
            <param len="swapchainCount">const <type>VkSwapchainKHR</type>* <name>pSwapchains</name></param>
            <param len="swapchainCount">const <type>VkHdrMetadataEXT</type>* <name>pMetadata</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_SUBOPTIMAL_KHR" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT">
            <proto><type>VkResult</type> <name>vkGetSwapchainStatusKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkSwapchainKHR</type> <name>swapchain</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkGetRefreshCycleDurationGOOGLE</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkSwapchainKHR</type> <name>swapchain</name></param>
            <param><type>VkRefreshCycleDurationGOOGLE</type>* <name>pDisplayTimingProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkGetPastPresentationTimingGOOGLE</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkSwapchainKHR</type> <name>swapchain</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPresentationTimingCount</name></param>
            <param optional="true" len="pPresentationTimingCount"><type>VkPastPresentationTimingGOOGLE</type>* <name>pPresentationTimings</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR">
            <proto><type>VkResult</type> <name>vkCreateIOSSurfaceMVK</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkIOSSurfaceCreateInfoMVK</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSurfaceKHR</type>* <name>pSurface</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR">
            <proto><type>VkResult</type> <name>vkCreateMacOSSurfaceMVK</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkMacOSSurfaceCreateInfoMVK</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSurfaceKHR</type>* <name>pSurface</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR">
            <proto><type>VkResult</type> <name>vkCreateMetalSurfaceEXT</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkMetalSurfaceCreateInfoEXT</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSurfaceKHR</type>* <name>pSurface</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetViewportWScalingNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstViewport</name></param>
            <param><type>uint32_t</type> <name>viewportCount</name></param>
            <param len="viewportCount">const <type>VkViewportWScalingNV</type>* <name>pViewportWScalings</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDiscardRectangleEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstDiscardRectangle</name></param>
            <param><type>uint32_t</type> <name>discardRectangleCount</name></param>
            <param len="discardRectangleCount">const <type>VkRect2D</type>* <name>pDiscardRectangles</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDiscardRectangleEnableEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>discardRectangleEnable</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDiscardRectangleModeEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkDiscardRectangleModeEXT</type> <name>discardRectangleMode</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetSampleLocationsEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkSampleLocationsInfoEXT</type>* <name>pSampleLocationsInfo</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceMultisamplePropertiesEXT</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkSampleCountFlagBits</type> <name>samples</name></param>
            <param><type>VkMultisamplePropertiesEXT</type>* <name>pMultisampleProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceSurfaceCapabilities2KHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkPhysicalDeviceSurfaceInfo2KHR</type>* <name>pSurfaceInfo</name></param>
            <param><type>VkSurfaceCapabilities2KHR</type>* <name>pSurfaceCapabilities</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceSurfaceFormats2KHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkPhysicalDeviceSurfaceInfo2KHR</type>* <name>pSurfaceInfo</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pSurfaceFormatCount</name></param>
            <param optional="true" len="pSurfaceFormatCount"><type>VkSurfaceFormat2KHR</type>* <name>pSurfaceFormats</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceDisplayProperties2KHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkDisplayProperties2KHR</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceDisplayPlaneProperties2KHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkDisplayPlaneProperties2KHR</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetDisplayModeProperties2KHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>VkDisplayKHR</type> <name>display</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkDisplayModeProperties2KHR</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetDisplayPlaneCapabilities2KHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkDisplayPlaneInfo2KHR</type>* <name>pDisplayPlaneInfo</name></param>
            <param><type>VkDisplayPlaneCapabilities2KHR</type>* <name>pCapabilities</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetBufferMemoryRequirements2</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkBufferMemoryRequirementsInfo2</type>* <name>pInfo</name></param>
            <param><type>VkMemoryRequirements2</type>* <name>pMemoryRequirements</name></param>
        </command>
        <command name="vkGetBufferMemoryRequirements2KHR"                      alias="vkGetBufferMemoryRequirements2"/>
        <command>
            <proto><type>void</type> <name>vkGetImageMemoryRequirements2</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkImageMemoryRequirementsInfo2</type>* <name>pInfo</name></param>
            <param><type>VkMemoryRequirements2</type>* <name>pMemoryRequirements</name></param>
        </command>
        <command name="vkGetImageMemoryRequirements2KHR"                       alias="vkGetImageMemoryRequirements2"/>
        <command>
            <proto><type>void</type> <name>vkGetImageSparseMemoryRequirements2</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkImageSparseMemoryRequirementsInfo2</type>* <name>pInfo</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pSparseMemoryRequirementCount</name></param>
            <param optional="true" len="pSparseMemoryRequirementCount"><type>VkSparseImageMemoryRequirements2</type>* <name>pSparseMemoryRequirements</name></param>
        </command>
        <command name="vkGetImageSparseMemoryRequirements2KHR"                 alias="vkGetImageSparseMemoryRequirements2"/>
        <command>
            <proto><type>void</type> <name>vkGetDeviceBufferMemoryRequirements</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkDeviceBufferMemoryRequirements</type>* <name>pInfo</name></param>
            <param><type>VkMemoryRequirements2</type>* <name>pMemoryRequirements</name></param>
        </command>
        <command name="vkGetDeviceBufferMemoryRequirementsKHR" alias="vkGetDeviceBufferMemoryRequirements"/>
        <command>
            <proto><type>void</type> <name>vkGetDeviceImageMemoryRequirements</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkDeviceImageMemoryRequirements</type>* <name>pInfo</name></param>
            <param><type>VkMemoryRequirements2</type>* <name>pMemoryRequirements</name></param>
        </command>
        <command name="vkGetDeviceImageMemoryRequirementsKHR" alias="vkGetDeviceImageMemoryRequirements"/>
        <command>
            <proto><type>void</type> <name>vkGetDeviceImageSparseMemoryRequirements</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkDeviceImageMemoryRequirements</type>* <name>pInfo</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pSparseMemoryRequirementCount</name></param>
            <param optional="true" len="pSparseMemoryRequirementCount"><type>VkSparseImageMemoryRequirements2</type>* <name>pSparseMemoryRequirements</name></param>
        </command>
        <command name="vkGetDeviceImageSparseMemoryRequirementsKHR" alias="vkGetDeviceImageSparseMemoryRequirements"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateSamplerYcbcrConversion</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkSamplerYcbcrConversionCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSamplerYcbcrConversion</type>* <name>pYcbcrConversion</name></param>
        </command>
        <command name="vkCreateSamplerYcbcrConversionKHR"                      alias="vkCreateSamplerYcbcrConversion"/>
        <command>
            <proto><type>void</type> <name>vkDestroySamplerYcbcrConversion</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkSamplerYcbcrConversion</type> <name>ycbcrConversion</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command name="vkDestroySamplerYcbcrConversionKHR"                     alias="vkDestroySamplerYcbcrConversion"/>
        <command>
            <proto><type>void</type> <name>vkGetDeviceQueue2</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkDeviceQueueInfo2</type>* <name>pQueueInfo</name></param>
            <param><type>VkQueue</type>* <name>pQueue</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateValidationCacheEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkValidationCacheCreateInfoEXT</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkValidationCacheEXT</type>* <name>pValidationCache</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyValidationCacheEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkValidationCacheEXT</type> <name>validationCache</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetValidationCacheDataEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkValidationCacheEXT</type> <name>validationCache</name></param>
            <param optional="false,true"><type>size_t</type>* <name>pDataSize</name></param>
            <param optional="true" len="pDataSize"><type>void</type>* <name>pData</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkMergeValidationCachesEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkValidationCacheEXT</type> <name>dstCache</name></param>
            <param><type>uint32_t</type> <name>srcCacheCount</name></param>
            <param len="srcCacheCount">const <type>VkValidationCacheEXT</type>* <name>pSrcCaches</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetDescriptorSetLayoutSupport</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkDescriptorSetLayoutCreateInfo</type>* <name>pCreateInfo</name></param>
            <param><type>VkDescriptorSetLayoutSupport</type>* <name>pSupport</name></param>
        </command>
        <command name="vkGetDescriptorSetLayoutSupportKHR"                     alias="vkGetDescriptorSetLayoutSupport"/>
        <command>
            <proto><type>VkResult</type> <name>vkGetSwapchainGrallocUsageANDROID</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkFormat</type> <name>format</name></param>
            <param><type>VkImageUsageFlags</type> <name>imageUsage</name></param>
            <param><type>int</type>* <name>grallocUsage</name></param>
        </command>
        <command>
            <proto><type>VkResult</type> <name>vkGetSwapchainGrallocUsage2ANDROID</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkFormat</type> <name>format</name></param>
            <param><type>VkImageUsageFlags</type> <name>imageUsage</name></param>
            <param><type>VkSwapchainImageUsageFlagsANDROID</type> <name>swapchainImageUsage</name></param>
            <param><type>uint64_t</type>* <name>grallocConsumerUsage</name></param>
            <param><type>uint64_t</type>* <name>grallocProducerUsage</name></param>
        </command>
        <command>
            <proto><type>VkResult</type> <name>vkAcquireImageANDROID</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkImage</type> <name>image</name></param>
            <param><type>int</type> <name>nativeFenceFd</name></param>
            <param optional="true"><type>VkSemaphore</type> <name>semaphore</name></param>
            <param optional="true"><type>VkFence</type> <name>fence</name></param>
        </command>
        <command>
            <proto><type>VkResult</type> <name>vkQueueSignalReleaseImageANDROID</name></proto>
            <param><type>VkQueue</type> <name>queue</name></param>
            <param><type>uint32_t</type> <name>waitSemaphoreCount</name></param>
            <param len="waitSemaphoreCount">const <type>VkSemaphore</type>* <name>pWaitSemaphores</name></param>
            <param><type>VkImage</type> <name>image</name></param>
            <param><type>int</type>* <name>pNativeFenceFd</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_FEATURE_NOT_PRESENT,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetShaderInfoAMD</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkPipeline</type> <name>pipeline</name></param>
            <param><type>VkShaderStageFlagBits</type> <name>shaderStage</name></param>
            <param><type>VkShaderInfoTypeAMD</type> <name>infoType</name></param>
            <param optional="false,true"><type>size_t</type>* <name>pInfoSize</name></param>
            <param optional="true" len="pInfoSize"><type>void</type>* <name>pInfo</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkSetLocalDimmingAMD</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkSwapchainKHR</type> <name>swapChain</name></param>
            <param><type>VkBool32</type> <name>localDimmingEnable</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceCalibrateableTimeDomainsKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pTimeDomainCount</name></param>
            <param optional="true" len="pTimeDomainCount"><type>VkTimeDomainKHR</type>* <name>pTimeDomains</name></param>
        </command>
        <command name="vkGetPhysicalDeviceCalibrateableTimeDomainsEXT" alias="vkGetPhysicalDeviceCalibrateableTimeDomainsKHR"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetCalibratedTimestampsKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>uint32_t</type> <name>timestampCount</name></param>
            <param len="timestampCount">const <type>VkCalibratedTimestampInfoKHR</type>* <name>pTimestampInfos</name></param>
            <param len="timestampCount"><type>uint64_t</type>* <name>pTimestamps</name></param>
            <param><type>uint64_t</type>* <name>pMaxDeviation</name></param>
        </command>
        <command name="vkGetCalibratedTimestampsEXT" alias="vkGetCalibratedTimestampsKHR"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkSetDebugUtilsObjectNameEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="pNameInfo-&gt;objectHandle">const <type>VkDebugUtilsObjectNameInfoEXT</type>* <name>pNameInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkSetDebugUtilsObjectTagEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="pTagInfo-&gt;objectHandle">const <type>VkDebugUtilsObjectTagInfoEXT</type>* <name>pTagInfo</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkQueueBeginDebugUtilsLabelEXT</name></proto>
            <param><type>VkQueue</type> <name>queue</name></param>
            <param>const <type>VkDebugUtilsLabelEXT</type>* <name>pLabelInfo</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkQueueEndDebugUtilsLabelEXT</name></proto>
            <param><type>VkQueue</type> <name>queue</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkQueueInsertDebugUtilsLabelEXT</name></proto>
            <param><type>VkQueue</type> <name>queue</name></param>
            <param>const <type>VkDebugUtilsLabelEXT</type>* <name>pLabelInfo</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="action,state">
            <proto><type>void</type> <name>vkCmdBeginDebugUtilsLabelEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkDebugUtilsLabelEXT</type>* <name>pLabelInfo</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="action,state">
            <proto><type>void</type> <name>vkCmdEndDebugUtilsLabelEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdInsertDebugUtilsLabelEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkDebugUtilsLabelEXT</type>* <name>pLabelInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateDebugUtilsMessengerEXT</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkDebugUtilsMessengerCreateInfoEXT</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkDebugUtilsMessengerEXT</type>* <name>pMessenger</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyDebugUtilsMessengerEXT</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param optional="true" externsync="true"><type>VkDebugUtilsMessengerEXT</type> <name>messenger</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkSubmitDebugUtilsMessageEXT</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param><type>VkDebugUtilsMessageSeverityFlagBitsEXT</type> <name>messageSeverity</name></param>
            <param><type>VkDebugUtilsMessageTypeFlagsEXT</type> <name>messageTypes</name></param>
            <param>const <type>VkDebugUtilsMessengerCallbackDataEXT</type>* <name>pCallbackData</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE">
            <proto><type>VkResult</type> <name>vkGetMemoryHostPointerPropertiesEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></param>
            <param>const <type>void</type>* <name>pHostPointer</name></param>
            <param><type>VkMemoryHostPointerPropertiesEXT</type>* <name>pMemoryHostPointerProperties</name></param>
        </command>
        <command queues="transfer,graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdWriteBufferMarkerAMD</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param optional="true"><type>VkPipelineStageFlagBits</type> <name>pipelineStage</name></param>
            <param><type>VkBuffer</type> <name>dstBuffer</name></param>
            <param><type>VkDeviceSize</type> <name>dstOffset</name></param>
            <param><type>uint32_t</type> <name>marker</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateRenderPass2</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkRenderPassCreateInfo2</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkRenderPass</type>* <name>pRenderPass</name></param>
        </command>
        <command name="vkCreateRenderPass2KHR"                                 alias="vkCreateRenderPass2"/>
        <command queues="graphics" renderpass="outside" cmdbufferlevel="primary" tasks="action,state,synchronization">
            <proto><type>void</type> <name>vkCmdBeginRenderPass2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkRenderPassBeginInfo</type>*      <name>pRenderPassBegin</name></param>
            <param>const <type>VkSubpassBeginInfo</type>*      <name>pSubpassBeginInfo</name></param>
        </command>
        <command name="vkCmdBeginRenderPass2KHR"                               alias="vkCmdBeginRenderPass2"/>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary" tasks="action,state,synchronization">
            <proto><type>void</type> <name>vkCmdNextSubpass2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkSubpassBeginInfo</type>*      <name>pSubpassBeginInfo</name></param>
            <param>const <type>VkSubpassEndInfo</type>*        <name>pSubpassEndInfo</name></param>
        </command>
        <command name="vkCmdNextSubpass2KHR"                                   alias="vkCmdNextSubpass2"/>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary" tasks="action,state,synchronization">
            <proto><type>void</type> <name>vkCmdEndRenderPass2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkSubpassEndInfo</type>*        <name>pSubpassEndInfo</name></param>
        </command>
        <command name="vkCmdEndRenderPass2KHR"                                 alias="vkCmdEndRenderPass2"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST">
            <proto><type>VkResult</type> <name>vkGetSemaphoreCounterValue</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkSemaphore</type> <name>semaphore</name></param>
            <param><type>uint64_t</type>* <name>pValue</name></param>
        </command>
        <command name="vkGetSemaphoreCounterValueKHR"              alias="vkGetSemaphoreCounterValue"/>
        <command successcodes="VK_SUCCESS,VK_TIMEOUT" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST">
            <proto><type>VkResult</type> <name>vkWaitSemaphores</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkSemaphoreWaitInfo</type>* <name>pWaitInfo</name></param>
            <param><type>uint64_t</type> <name>timeout</name></param>
        </command>
        <command name="vkWaitSemaphoresKHR"                        alias="vkWaitSemaphores"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkSignalSemaphore</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkSemaphoreSignalInfo</type>* <name>pSignalInfo</name></param>
        </command>
        <command name="vkSignalSemaphoreKHR"                       alias="vkSignalSemaphore"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR">
            <proto><type>VkResult</type> <name>vkGetAndroidHardwareBufferPropertiesANDROID</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const struct <type>AHardwareBuffer</type>* <name>buffer</name></param>
            <param><type>VkAndroidHardwareBufferPropertiesANDROID</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetMemoryAndroidHardwareBufferANDROID</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkMemoryGetAndroidHardwareBufferInfoANDROID</type>* <name>pInfo</name></param>
            <param>struct <type>AHardwareBuffer</type>** <name>pBuffer</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDrawIndirectCount</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBuffer</type> <name>buffer</name></param>
            <param><type>VkDeviceSize</type> <name>offset</name></param>
            <param><type>VkBuffer</type> <name>countBuffer</name></param>
            <param><type>VkDeviceSize</type> <name>countBufferOffset</name></param>
            <param><type>uint32_t</type> <name>maxDrawCount</name></param>
            <param><type>uint32_t</type> <name>stride</name></param>
        </command>
        <command name="vkCmdDrawIndirectCountKHR"                              alias="vkCmdDrawIndirectCount"/>
        <command name="vkCmdDrawIndirectCountAMD"                              alias="vkCmdDrawIndirectCount"/>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDrawIndexedIndirectCount</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBuffer</type> <name>buffer</name></param>
            <param><type>VkDeviceSize</type> <name>offset</name></param>
            <param><type>VkBuffer</type> <name>countBuffer</name></param>
            <param><type>VkDeviceSize</type> <name>countBufferOffset</name></param>
            <param><type>uint32_t</type> <name>maxDrawCount</name></param>
            <param><type>uint32_t</type> <name>stride</name></param>
        </command>
        <command name="vkCmdDrawIndexedIndirectCountKHR"                       alias="vkCmdDrawIndexedIndirectCount"/>
        <command name="vkCmdDrawIndexedIndirectCountAMD"                       alias="vkCmdDrawIndexedIndirectCount"/>
        <command queues="graphics,compute,transfer" renderpass="both" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdSetCheckpointNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param noautovalidity="true">const <type>void</type>* <name>pCheckpointMarker</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetQueueCheckpointDataNV</name></proto>
            <param><type>VkQueue</type> <name>queue</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pCheckpointDataCount</name></param>
            <param optional="true" len="pCheckpointDataCount"><type>VkCheckpointDataNV</type>* <name>pCheckpointData</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdBindTransformFeedbackBuffersEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstBinding</name></param>
            <param><type>uint32_t</type> <name>bindingCount</name></param>
            <param len="bindingCount">const <type>VkBuffer</type>* <name>pBuffers</name></param>
            <param len="bindingCount">const <type>VkDeviceSize</type>* <name>pOffsets</name></param>
            <param optional="true" len="bindingCount" noautovalidity="true">const <type>VkDeviceSize</type>* <name>pSizes</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdBeginTransformFeedbackEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstCounterBuffer</name></param>
            <param optional="true"><type>uint32_t</type> <name>counterBufferCount</name></param>
            <param noautovalidity="true" len="counterBufferCount">const <type>VkBuffer</type>* <name>pCounterBuffers</name></param>
            <param optional="true" len="counterBufferCount">const <type>VkDeviceSize</type>* <name>pCounterBufferOffsets</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdEndTransformFeedbackEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstCounterBuffer</name></param>
            <param optional="true"><type>uint32_t</type> <name>counterBufferCount</name></param>
            <param noautovalidity="true" len="counterBufferCount">const <type>VkBuffer</type>* <name>pCounterBuffers</name></param>
            <param optional="true" len="counterBufferCount">const <type>VkDeviceSize</type>* <name>pCounterBufferOffsets</name></param>
        </command>
        <command queues="graphics,compute,decode,encode" renderpass="both" cmdbufferlevel="primary,secondary" tasks="action,state">
            <proto><type>void</type> <name>vkCmdBeginQueryIndexedEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkQueryPool</type> <name>queryPool</name></param>
            <param><type>uint32_t</type> <name>query</name></param>
            <param optional="true"><type>VkQueryControlFlags</type> <name>flags</name></param>
            <param><type>uint32_t</type> <name>index</name></param>
        </command>
        <command queues="graphics,compute,decode,encode" renderpass="both" cmdbufferlevel="primary,secondary" tasks="action,state">
            <proto><type>void</type> <name>vkCmdEndQueryIndexedEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkQueryPool</type> <name>queryPool</name></param>
            <param><type>uint32_t</type> <name>query</name></param>
            <param><type>uint32_t</type> <name>index</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDrawIndirectByteCountEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>instanceCount</name></param>
            <param><type>uint32_t</type> <name>firstInstance</name></param>
            <param><type>VkBuffer</type> <name>counterBuffer</name></param>
            <param><type>VkDeviceSize</type> <name>counterBufferOffset</name></param>
            <param><type>uint32_t</type> <name>counterOffset</name></param>
            <param><type>uint32_t</type> <name>vertexStride</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetExclusiveScissorNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstExclusiveScissor</name></param>
            <param><type>uint32_t</type> <name>exclusiveScissorCount</name></param>
            <param len="exclusiveScissorCount">const <type>VkRect2D</type>* <name>pExclusiveScissors</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetExclusiveScissorEnableNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstExclusiveScissor</name></param>
            <param><type>uint32_t</type> <name>exclusiveScissorCount</name></param>
            <param len="exclusiveScissorCount">const <type>VkBool32</type>* <name>pExclusiveScissorEnables</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdBindShadingRateImageNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param optional="true"><type>VkImageView</type> <name>imageView</name></param>
            <param><type>VkImageLayout</type> <name>imageLayout</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetViewportShadingRatePaletteNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstViewport</name></param>
            <param><type>uint32_t</type> <name>viewportCount</name></param>
            <param len="viewportCount">const <type>VkShadingRatePaletteNV</type>* <name>pShadingRatePalettes</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetCoarseSampleOrderNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkCoarseSampleOrderTypeNV</type> <name>sampleOrderType</name></param>
            <param optional="true"><type>uint32_t</type> <name>customSampleOrderCount</name></param>
            <param len="customSampleOrderCount">const <type>VkCoarseSampleOrderCustomNV</type>* <name>pCustomSampleOrders</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDrawMeshTasksNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>taskCount</name></param>
            <param><type>uint32_t</type> <name>firstTask</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDrawMeshTasksIndirectNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBuffer</type> <name>buffer</name></param>
            <param><type>VkDeviceSize</type> <name>offset</name></param>
            <param><type>uint32_t</type> <name>drawCount</name></param>
            <param><type>uint32_t</type> <name>stride</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDrawMeshTasksIndirectCountNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBuffer</type> <name>buffer</name></param>
            <param><type>VkDeviceSize</type> <name>offset</name></param>
            <param><type>VkBuffer</type> <name>countBuffer</name></param>
            <param><type>VkDeviceSize</type> <name>countBufferOffset</name></param>
            <param><type>uint32_t</type> <name>maxDrawCount</name></param>
            <param><type>uint32_t</type> <name>stride</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDrawMeshTasksEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>groupCountX</name></param>
            <param><type>uint32_t</type> <name>groupCountY</name></param>
            <param><type>uint32_t</type> <name>groupCountZ</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDrawMeshTasksIndirectEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBuffer</type> <name>buffer</name></param>
            <param><type>VkDeviceSize</type> <name>offset</name></param>
            <param><type>uint32_t</type> <name>drawCount</name></param>
            <param><type>uint32_t</type> <name>stride</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDrawMeshTasksIndirectCountEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBuffer</type> <name>buffer</name></param>
            <param><type>VkDeviceSize</type> <name>offset</name></param>
            <param><type>VkBuffer</type> <name>countBuffer</name></param>
            <param><type>VkDeviceSize</type> <name>countBufferOffset</name></param>
            <param><type>uint32_t</type> <name>maxDrawCount</name></param>
            <param><type>uint32_t</type> <name>stride</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCompileDeferredNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkPipeline</type> <name>pipeline</name></param>
            <param><type>uint32_t</type> <name>shader</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateAccelerationStructureNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkAccelerationStructureCreateInfoNV</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkAccelerationStructureNV</type>* <name>pAccelerationStructure</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdBindInvocationMaskHUAWEI</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param optional="true"><type>VkImageView</type> <name>imageView</name></param>
            <param><type>VkImageLayout</type> <name>imageLayout</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyAccelerationStructureKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkAccelerationStructureKHR</type> <name>accelerationStructure</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyAccelerationStructureNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkAccelerationStructureNV</type> <name>accelerationStructure</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetAccelerationStructureMemoryRequirementsNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkAccelerationStructureMemoryRequirementsInfoNV</type>* <name>pInfo</name></param>
            <param><type>VkMemoryRequirements2KHR</type>* <name>pMemoryRequirements</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkBindAccelerationStructureMemoryNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>uint32_t</type> <name>bindInfoCount</name></param>
            <param len="bindInfoCount">const <type>VkBindAccelerationStructureMemoryInfoNV</type>* <name>pBindInfos</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyAccelerationStructureNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkAccelerationStructureNV</type> <name>dst</name></param>
            <param><type>VkAccelerationStructureNV</type> <name>src</name></param>
            <param><type>VkCopyAccelerationStructureModeKHR</type> <name>mode</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyAccelerationStructureKHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkCopyAccelerationStructureInfoKHR</type>* <name>pInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCopyAccelerationStructureKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true"><type>VkDeferredOperationKHR</type> <name>deferredOperation</name></param>
            <param>const <type>VkCopyAccelerationStructureInfoKHR</type>* <name>pInfo</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyAccelerationStructureToMemoryKHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkCopyAccelerationStructureToMemoryInfoKHR</type>* <name>pInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCopyAccelerationStructureToMemoryKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true"><type>VkDeferredOperationKHR</type> <name>deferredOperation</name></param>
            <param>const <type>VkCopyAccelerationStructureToMemoryInfoKHR</type>* <name>pInfo</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyMemoryToAccelerationStructureKHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkCopyMemoryToAccelerationStructureInfoKHR</type>* <name>pInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCopyMemoryToAccelerationStructureKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true"><type>VkDeferredOperationKHR</type> <name>deferredOperation</name></param>
            <param>const <type>VkCopyMemoryToAccelerationStructureInfoKHR</type>* <name>pInfo</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdWriteAccelerationStructuresPropertiesKHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>accelerationStructureCount</name></param>
            <param len="accelerationStructureCount">const <type>VkAccelerationStructureKHR</type>* <name>pAccelerationStructures</name></param>
            <param><type>VkQueryType</type> <name>queryType</name></param>
            <param><type>VkQueryPool</type> <name>queryPool</name></param>
            <param><type>uint32_t</type> <name>firstQuery</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdWriteAccelerationStructuresPropertiesNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>accelerationStructureCount</name></param>
            <param len="accelerationStructureCount">const <type>VkAccelerationStructureNV</type>* <name>pAccelerationStructures</name></param>
            <param><type>VkQueryType</type> <name>queryType</name></param>
            <param><type>VkQueryPool</type> <name>queryPool</name></param>
            <param><type>uint32_t</type> <name>firstQuery</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdBuildAccelerationStructureNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkAccelerationStructureInfoNV</type>* <name>pInfo</name></param>
            <param optional="true"><type>VkBuffer</type> <name>instanceData</name></param>
            <param><type>VkDeviceSize</type> <name>instanceOffset</name></param>
            <param><type>VkBool32</type> <name>update</name></param>
            <param><type>VkAccelerationStructureNV</type> <name>dst</name></param>
            <param optional="true"><type>VkAccelerationStructureNV</type> <name>src</name></param>
            <param><type>VkBuffer</type> <name>scratch</name></param>
            <param><type>VkDeviceSize</type> <name>scratchOffset</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkWriteAccelerationStructuresPropertiesKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>uint32_t</type> <name>accelerationStructureCount</name></param>
            <param len="accelerationStructureCount">const <type>VkAccelerationStructureKHR</type>* <name>pAccelerationStructures</name></param>
            <param><type>VkQueryType</type>  <name>queryType</name></param>
            <param><type>size_t</type>       <name>dataSize</name></param>
            <param len="dataSize"><type>void</type>* <name>pData</name></param>
            <param><type>size_t</type> <name>stride</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdTraceRaysKHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkStridedDeviceAddressRegionKHR</type>* <name>pRaygenShaderBindingTable</name></param>
            <param>const <type>VkStridedDeviceAddressRegionKHR</type>* <name>pMissShaderBindingTable</name></param>
            <param>const <type>VkStridedDeviceAddressRegionKHR</type>* <name>pHitShaderBindingTable</name></param>
            <param>const <type>VkStridedDeviceAddressRegionKHR</type>* <name>pCallableShaderBindingTable</name></param>
            <param><type>uint32_t</type> <name>width</name></param>
            <param><type>uint32_t</type> <name>height</name></param>
            <param><type>uint32_t</type> <name>depth</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdTraceRaysNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBuffer</type> <name>raygenShaderBindingTableBuffer</name></param>
            <param><type>VkDeviceSize</type> <name>raygenShaderBindingOffset</name></param>
            <param optional="true"><type>VkBuffer</type> <name>missShaderBindingTableBuffer</name></param>
            <param><type>VkDeviceSize</type> <name>missShaderBindingOffset</name></param>
            <param><type>VkDeviceSize</type> <name>missShaderBindingStride</name></param>
            <param optional="true"><type>VkBuffer</type> <name>hitShaderBindingTableBuffer</name></param>
            <param><type>VkDeviceSize</type> <name>hitShaderBindingOffset</name></param>
            <param><type>VkDeviceSize</type> <name>hitShaderBindingStride</name></param>
            <param optional="true"><type>VkBuffer</type> <name>callableShaderBindingTableBuffer</name></param>
            <param><type>VkDeviceSize</type> <name>callableShaderBindingOffset</name></param>
            <param><type>VkDeviceSize</type> <name>callableShaderBindingStride</name></param>
            <param><type>uint32_t</type> <name>width</name></param>
            <param><type>uint32_t</type> <name>height</name></param>
            <param><type>uint32_t</type> <name>depth</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetRayTracingShaderGroupHandlesKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkPipeline</type> <name>pipeline</name></param>
            <param><type>uint32_t</type> <name>firstGroup</name></param>
            <param><type>uint32_t</type> <name>groupCount</name></param>
            <param><type>size_t</type> <name>dataSize</name></param>
            <param len="dataSize"><type>void</type>* <name>pData</name></param>
        </command>
        <command name="vkGetRayTracingShaderGroupHandlesNV"                 alias="vkGetRayTracingShaderGroupHandlesKHR"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetRayTracingCaptureReplayShaderGroupHandlesKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkPipeline</type> <name>pipeline</name></param>
            <param><type>uint32_t</type> <name>firstGroup</name></param>
            <param><type>uint32_t</type> <name>groupCount</name></param>
            <param><type>size_t</type> <name>dataSize</name></param>
            <param len="dataSize"><type>void</type>* <name>pData</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetAccelerationStructureHandleNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkAccelerationStructureNV</type> <name>accelerationStructure</name></param>
            <param><type>size_t</type> <name>dataSize</name></param>
            <param len="dataSize"><type>void</type>* <name>pData</name></param>
        </command>
        <command api="vulkan" successcodes="VK_SUCCESS,VK_PIPELINE_COMPILE_REQUIRED_EXT" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_SHADER_NV">
            <proto><type>VkResult</type> <name>vkCreateRayTracingPipelinesNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true"><type>VkPipelineCache</type> <name>pipelineCache</name></param>
            <param><type>uint32_t</type> <name>createInfoCount</name></param>
            <param len="createInfoCount">const <type>VkRayTracingPipelineCreateInfoNV</type>* <name>pCreateInfos</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param len="createInfoCount"><type>VkPipeline</type>* <name>pPipelines</name></param>
        </command>
        <command api="vulkansc" successcodes="VK_SUCCESS,VK_PIPELINE_COMPILE_REQUIRED_EXT" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NO_PIPELINE_MATCH,VK_ERROR_OUT_OF_POOL_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateRayTracingPipelinesNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkPipelineCache</type> <name>pipelineCache</name></param>
            <param><type>uint32_t</type> <name>createInfoCount</name></param>
            <param len="createInfoCount">const <type>VkRayTracingPipelineCreateInfoNV</type>* <name>pCreateInfos</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param len="createInfoCount"><type>VkPipeline</type>* <name>pPipelines</name></param>
        </command>
        <command api="vulkan" successcodes="VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR,VK_PIPELINE_COMPILE_REQUIRED_EXT" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS">
            <proto><type>VkResult</type> <name>vkCreateRayTracingPipelinesKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true"><type>VkDeferredOperationKHR</type> <name>deferredOperation</name></param>
            <param optional="true"><type>VkPipelineCache</type> <name>pipelineCache</name></param>
            <param><type>uint32_t</type> <name>createInfoCount</name></param>
            <param len="createInfoCount">const <type>VkRayTracingPipelineCreateInfoKHR</type>* <name>pCreateInfos</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param len="createInfoCount"><type>VkPipeline</type>* <name>pPipelines</name></param>
        </command>
        <command api="vulkansc" successcodes="VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR,VK_PIPELINE_COMPILE_REQUIRED_EXT" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,VK_ERROR_NO_PIPELINE_MATCH,VK_ERROR_OUT_OF_POOL_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateRayTracingPipelinesKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true"><type>VkDeferredOperationKHR</type> <name>deferredOperation</name></param>
            <param><type>VkPipelineCache</type> <name>pipelineCache</name></param>
            <param><type>uint32_t</type> <name>createInfoCount</name></param>
            <param len="createInfoCount">const <type>VkRayTracingPipelineCreateInfoKHR</type>* <name>pCreateInfos</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param len="createInfoCount"><type>VkPipeline</type>* <name>pPipelines</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceCooperativeMatrixPropertiesNV</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkCooperativeMatrixPropertiesNV</type>* <name>pProperties</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdTraceRaysIndirectKHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkStridedDeviceAddressRegionKHR</type>* <name>pRaygenShaderBindingTable</name></param>
            <param>const <type>VkStridedDeviceAddressRegionKHR</type>* <name>pMissShaderBindingTable</name></param>
            <param>const <type>VkStridedDeviceAddressRegionKHR</type>* <name>pHitShaderBindingTable</name></param>
            <param>const <type>VkStridedDeviceAddressRegionKHR</type>* <name>pCallableShaderBindingTable</name></param>
            <param><type>VkDeviceAddress</type> <name>indirectDeviceAddress</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdTraceRaysIndirect2KHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkDeviceAddress</type> <name>indirectDeviceAddress</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetClusterAccelerationStructureBuildSizesNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkClusterAccelerationStructureInputInfoNV</type>* <name>pInfo</name></param>
            <param><type>VkAccelerationStructureBuildSizesInfoKHR</type>* <name>pSizeInfo</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
           <proto><type>void</type> <name>vkCmdBuildClusterAccelerationStructureIndirectNV</name></proto>
           <param externsync="true"><type>VkCommandBuffer</type>                     <name>commandBuffer</name></param>
           <param>const <type>VkClusterAccelerationStructureCommandsInfoNV</type>*  <name>pCommandInfos</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetDeviceAccelerationStructureCompatibilityKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkAccelerationStructureVersionInfoKHR</type>* <name>pVersionInfo</name></param>
            <param><type>VkAccelerationStructureCompatibilityKHR</type>* <name>pCompatibility</name></param>
        </command>
        <command>
            <proto><type>VkDeviceSize</type> <name>vkGetRayTracingShaderGroupStackSizeKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkPipeline</type> <name>pipeline</name></param>
            <param><type>uint32_t</type> <name>group</name></param>
            <param><type>VkShaderGroupShaderKHR</type> <name>groupShader</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetRayTracingPipelineStackSizeKHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>pipelineStackSize</name></param>
        </command>
        <command>
            <proto><type>uint32_t</type> <name>vkGetImageViewHandleNVX</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkImageViewHandleInfoNVX</type>* <name>pInfo</name></param>
        </command>
        <command>
            <proto><type>uint64_t</type> <name>vkGetImageViewHandle64NVX</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkImageViewHandleInfoNVX</type>* <name>pInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetImageViewAddressNVX</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkImageView</type> <name>imageView</name></param>
            <param><type>VkImageViewAddressPropertiesNVX</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceSurfacePresentModes2EXT</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkPhysicalDeviceSurfaceInfo2KHR</type>* <name>pSurfaceInfo</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPresentModeCount</name></param>
            <param optional="true" len="pPresentModeCount"><type>VkPresentModeKHR</type>* <name>pPresentModes</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkGetDeviceGroupSurfacePresentModes2EXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkPhysicalDeviceSurfaceInfo2KHR</type>* <name>pSurfaceInfo</name></param>
            <param optional="false,true"><type>VkDeviceGroupPresentModeFlagsKHR</type>* <name>pModes</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkAcquireFullScreenExclusiveModeEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkSwapchainKHR</type> <name>swapchain</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkReleaseFullScreenExclusiveModeEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkSwapchainKHR</type> <name>swapchain</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>uint32_t</type> <name>queueFamilyIndex</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pCounterCount</name></param>
            <param optional="true" len="pCounterCount"><type>VkPerformanceCounterKHR</type>* <name>pCounters</name></param>
            <param optional="true" len="pCounterCount"><type>VkPerformanceCounterDescriptionKHR</type>* <name>pCounterDescriptions</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkQueryPoolPerformanceCreateInfoKHR</type>* <name>pPerformanceQueryCreateInfo</name></param>
            <param><type>uint32_t</type>* <name>pNumPasses</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_TIMEOUT">
            <proto><type>VkResult</type> <name>vkAcquireProfilingLockKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkAcquireProfilingLockInfoKHR</type>* <name>pInfo</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkReleaseProfilingLockKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetImageDrmFormatModifierPropertiesEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkImage</type> <name>image</name></param>
            <param><type>VkImageDrmFormatModifierPropertiesEXT</type>* <name>pProperties</name></param>
        </command>
        <command>
            <proto><type>uint64_t</type> <name>vkGetBufferOpaqueCaptureAddress</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkBufferDeviceAddressInfo</type>* <name>pInfo</name></param>
        </command>
        <command name="vkGetBufferOpaqueCaptureAddressKHR" alias="vkGetBufferOpaqueCaptureAddress"/>
        <command>
            <proto><type>VkDeviceAddress</type> <name>vkGetBufferDeviceAddress</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkBufferDeviceAddressInfo</type>* <name>pInfo</name></param>
        </command>
        <command name="vkGetBufferDeviceAddressKHR"        alias="vkGetBufferDeviceAddress"/>
        <command name="vkGetBufferDeviceAddressEXT"        alias="vkGetBufferDeviceAddress"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateHeadlessSurfaceEXT</name></proto>
            <param><type>VkInstance</type> <name>instance</name></param>
            <param>const <type>VkHeadlessSurfaceCreateInfoEXT</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkSurfaceKHR</type>* <name>pSurface</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pCombinationCount</name></param>
            <param optional="true" len="pCombinationCount"><type>VkFramebufferMixedSamplesCombinationNV</type>* <name>pCombinations</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkInitializePerformanceApiINTEL</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkInitializePerformanceApiInfoINTEL</type>* <name>pInitializeInfo</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkUninitializePerformanceApiINTEL</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
        </command>
        <command queues="graphics,compute,transfer" renderpass="both" cmdbufferlevel="primary,secondary" successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY" tasks="action,state">
            <proto><type>VkResult</type> <name>vkCmdSetPerformanceMarkerINTEL</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkPerformanceMarkerInfoINTEL</type>* <name>pMarkerInfo</name></param>
        </command>
        <command queues="graphics,compute,transfer" renderpass="both" cmdbufferlevel="primary,secondary" successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY" tasks="action,state">
            <proto><type>VkResult</type> <name>vkCmdSetPerformanceStreamMarkerINTEL</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkPerformanceStreamMarkerInfoINTEL</type>* <name>pMarkerInfo</name></param>
        </command>
        <command queues="graphics,compute,transfer" renderpass="both" cmdbufferlevel="primary,secondary" successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY" tasks="state">
            <proto><type>VkResult</type> <name>vkCmdSetPerformanceOverrideINTEL</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkPerformanceOverrideInfoINTEL</type>* <name>pOverrideInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkAcquirePerformanceConfigurationINTEL</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkPerformanceConfigurationAcquireInfoINTEL</type>* <name>pAcquireInfo</name></param>
            <param><type>VkPerformanceConfigurationINTEL</type>* <name>pConfiguration</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkReleasePerformanceConfigurationINTEL</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkPerformanceConfigurationINTEL</type> <name>configuration</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkQueueSetPerformanceConfigurationINTEL</name></proto>
            <param><type>VkQueue</type> <name>queue</name></param>
            <param><type>VkPerformanceConfigurationINTEL</type> <name>configuration</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPerformanceParameterINTEL</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkPerformanceParameterTypeINTEL</type> <name>parameter</name></param>
            <param><type>VkPerformanceValueINTEL</type>* <name>pValue</name></param>
        </command>
        <command>
            <proto><type>uint64_t</type> <name>vkGetDeviceMemoryOpaqueCaptureAddress</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkDeviceMemoryOpaqueCaptureAddressInfo</type>* <name>pInfo</name></param>
        </command>
        <command name="vkGetDeviceMemoryOpaqueCaptureAddressKHR"        alias="vkGetDeviceMemoryOpaqueCaptureAddress"/>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPipelineExecutablePropertiesKHR</name></proto>
            <param><type>VkDevice</type>                        <name>device</name></param>
            <param>const <type>VkPipelineInfoKHR</type>*        <name>pPipelineInfo</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pExecutableCount</name></param>
            <param optional="true" len="pExecutableCount"><type>VkPipelineExecutablePropertiesKHR</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPipelineExecutableStatisticsKHR</name></proto>
            <param><type>VkDevice</type>                        <name>device</name></param>
            <param>const <type>VkPipelineExecutableInfoKHR</type>*  <name>pExecutableInfo</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pStatisticCount</name></param>
            <param optional="true" len="pStatisticCount"><type>VkPipelineExecutableStatisticKHR</type>* <name>pStatistics</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPipelineExecutableInternalRepresentationsKHR</name></proto>
            <param><type>VkDevice</type>                        <name>device</name></param>
            <param>const <type>VkPipelineExecutableInfoKHR</type>*  <name>pExecutableInfo</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pInternalRepresentationCount</name></param>
            <param optional="true" len="pInternalRepresentationCount"><type>VkPipelineExecutableInternalRepresentationKHR</type>* <name>pInternalRepresentations</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetLineStipple</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>lineStippleFactor</name></param>
            <param><type>uint16_t</type> <name>lineStipplePattern</name></param>
        </command>
        <command name="vkCmdSetLineStippleKHR" alias="vkCmdSetLineStipple"/>
        <command name="vkCmdSetLineStippleEXT" alias="vkCmdSetLineStipple"/>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetFaultData</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkFaultQueryBehavior</type> <name>faultQueryBehavior</name></param>
            <param><type>VkBool32</type>* <name>pUnrecordedFaults</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pFaultCount</name></param>
            <param optional="true" len="pFaultCount"><type>VkFaultData</type>* <name>pFaults</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceToolProperties</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pToolCount</name></param>
            <param optional="true" len="pToolCount"><type>VkPhysicalDeviceToolProperties</type>* <name>pToolProperties</name></param>
        </command>
        <command name="vkGetPhysicalDeviceToolPropertiesEXT" alias="vkGetPhysicalDeviceToolProperties"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR">
            <proto><type>VkResult</type> <name>vkCreateAccelerationStructureKHR</name></proto>
            <param><type>VkDevice</type>                                           <name>device</name></param>
            <param>const <type>VkAccelerationStructureCreateInfoKHR</type>*        <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>*       <name>pAllocator</name></param>
            <param><type>VkAccelerationStructureKHR</type>*                        <name>pAccelerationStructure</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdBuildAccelerationStructuresKHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type>                                    <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>infoCount</name></param>
            <param len="infoCount">const <type>VkAccelerationStructureBuildGeometryInfoKHR</type>* <name>pInfos</name></param>
            <param len="infoCount">const <type>VkAccelerationStructureBuildRangeInfoKHR</type>* const* <name>ppBuildRangeInfos</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdBuildAccelerationStructuresIndirectKHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type>                  <name>commandBuffer</name></param>
            <param><type>uint32_t</type>                                           <name>infoCount</name></param>
            <param len="infoCount">const <type>VkAccelerationStructureBuildGeometryInfoKHR</type>* <name>pInfos</name></param>
            <param len="infoCount">const <type>VkDeviceAddress</type>*             <name>pIndirectDeviceAddresses</name></param>
            <param len="infoCount">const <type>uint32_t</type>*                    <name>pIndirectStrides</name></param>
            <param len="infoCount">const <type>uint32_t</type>* const*             <name>ppMaxPrimitiveCounts</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkBuildAccelerationStructuresKHR</name></proto>
            <param><type>VkDevice</type>                                           <name>device</name></param>
            <param optional="true"><type>VkDeferredOperationKHR</type> <name>deferredOperation</name></param>
            <param><type>uint32_t</type> <name>infoCount</name></param>
            <param len="infoCount">const <type>VkAccelerationStructureBuildGeometryInfoKHR</type>* <name>pInfos</name></param>
            <param len="infoCount">const <type>VkAccelerationStructureBuildRangeInfoKHR</type>* const* <name>ppBuildRangeInfos</name></param>
        </command>
        <command>
            <proto><type>VkDeviceAddress</type> <name>vkGetAccelerationStructureDeviceAddressKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkAccelerationStructureDeviceAddressInfoKHR</type>* <name>pInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateDeferredOperationKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkDeferredOperationKHR</type>* <name>pDeferredOperation</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyDeferredOperationKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkDeferredOperationKHR</type> <name>operation</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command>
            <proto><type>uint32_t</type> <name>vkGetDeferredOperationMaxConcurrencyKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkDeferredOperationKHR</type> <name>operation</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_NOT_READY">
            <proto><type>VkResult</type> <name>vkGetDeferredOperationResultKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkDeferredOperationKHR</type> <name>operation</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_THREAD_DONE_KHR,VK_THREAD_IDLE_KHR" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkDeferredOperationJoinKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkDeferredOperationKHR</type> <name>operation</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetPipelineIndirectMemoryRequirementsNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkComputePipelineCreateInfo</type>* <name>pCreateInfo</name></param>
            <param><type>VkMemoryRequirements2</type>* <name>pMemoryRequirements</name></param>
        </command>
        <command>
            <proto><type>VkDeviceAddress</type> <name>vkGetPipelineIndirectDeviceAddressNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkPipelineIndirectDeviceAddressInfoNV</type>* <name>pInfo</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkAntiLagUpdateAMD</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkAntiLagDataAMD</type>* <name>pData</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetCullMode</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param optional="true"><type>VkCullModeFlags</type> <name>cullMode</name></param>
        </command>
        <command name="vkCmdSetCullModeEXT" alias="vkCmdSetCullMode"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetFrontFace</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkFrontFace</type> <name>frontFace</name></param>
        </command>
        <command name="vkCmdSetFrontFaceEXT" alias="vkCmdSetFrontFace"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetPrimitiveTopology</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkPrimitiveTopology</type> <name>primitiveTopology</name></param>
        </command>
        <command name="vkCmdSetPrimitiveTopologyEXT" alias="vkCmdSetPrimitiveTopology"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetViewportWithCount</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>viewportCount</name></param>
            <param len="viewportCount">const <type>VkViewport</type>* <name>pViewports</name></param>
        </command>
        <command name="vkCmdSetViewportWithCountEXT" alias="vkCmdSetViewportWithCount"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetScissorWithCount</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>scissorCount</name></param>
            <param len="scissorCount">const <type>VkRect2D</type>* <name>pScissors</name></param>
        </command>
        <command name="vkCmdSetScissorWithCountEXT" alias="vkCmdSetScissorWithCount"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdBindIndexBuffer2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param optional="true"><type>VkBuffer</type> <name>buffer</name></param>
            <param><type>VkDeviceSize</type> <name>offset</name></param>
            <param><type>VkDeviceSize</type> <name>size</name></param>
            <param><type>VkIndexType</type> <name>indexType</name></param>
        </command>
        <command name="vkCmdBindIndexBuffer2KHR" alias="vkCmdBindIndexBuffer2"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdBindVertexBuffers2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstBinding</name></param>
            <param><type>uint32_t</type> <name>bindingCount</name></param>
            <param len="bindingCount" optional="false,true">const <type>VkBuffer</type>* <name>pBuffers</name></param>
            <param len="bindingCount">const <type>VkDeviceSize</type>* <name>pOffsets</name></param>
            <param optional="true" len="bindingCount">const <type>VkDeviceSize</type>* <name>pSizes</name></param>
            <param optional="true" len="bindingCount">const <type>VkDeviceSize</type>* <name>pStrides</name></param>
        </command>
        <command name="vkCmdBindVertexBuffers2EXT" alias="vkCmdBindVertexBuffers2"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDepthTestEnable</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>depthTestEnable</name></param>
        </command>
        <command name="vkCmdSetDepthTestEnableEXT" alias="vkCmdSetDepthTestEnable"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDepthWriteEnable</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>depthWriteEnable</name></param>
        </command>
        <command name="vkCmdSetDepthWriteEnableEXT" alias="vkCmdSetDepthWriteEnable"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDepthCompareOp</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkCompareOp</type> <name>depthCompareOp</name></param>
        </command>
        <command name="vkCmdSetDepthCompareOpEXT" alias="vkCmdSetDepthCompareOp"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDepthBoundsTestEnable</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>depthBoundsTestEnable</name></param>
        </command>
        <command name="vkCmdSetDepthBoundsTestEnableEXT" alias="vkCmdSetDepthBoundsTestEnable"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetStencilTestEnable</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>stencilTestEnable</name></param>
        </command>
        <command name="vkCmdSetStencilTestEnableEXT" alias="vkCmdSetStencilTestEnable"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetStencilOp</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkStencilFaceFlags</type> <name>faceMask</name></param>
            <param><type>VkStencilOp</type> <name>failOp</name></param>
            <param><type>VkStencilOp</type> <name>passOp</name></param>
            <param><type>VkStencilOp</type> <name>depthFailOp</name></param>
            <param><type>VkCompareOp</type> <name>compareOp</name></param>
        </command>
        <command name="vkCmdSetStencilOpEXT" alias="vkCmdSetStencilOp"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetPatchControlPointsEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>patchControlPoints</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetRasterizerDiscardEnable</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>rasterizerDiscardEnable</name></param>
        </command>
        <command name="vkCmdSetRasterizerDiscardEnableEXT" alias="vkCmdSetRasterizerDiscardEnable"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDepthBiasEnable</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>depthBiasEnable</name></param>
        </command>
        <command name="vkCmdSetDepthBiasEnableEXT" alias="vkCmdSetDepthBiasEnable"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetLogicOpEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkLogicOp</type> <name>logicOp</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetPrimitiveRestartEnable</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>primitiveRestartEnable</name></param>
        </command>
        <command name="vkCmdSetPrimitiveRestartEnableEXT" alias="vkCmdSetPrimitiveRestartEnable"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetTessellationDomainOriginEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkTessellationDomainOrigin</type> <name>domainOrigin</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDepthClampEnableEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>depthClampEnable</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetPolygonModeEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkPolygonMode</type> <name>polygonMode</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetRasterizationSamplesEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkSampleCountFlagBits</type>  <name>rasterizationSamples</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetSampleMaskEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkSampleCountFlagBits</type>  <name>samples</name></param>
            <param len="latexmath:[\lceil{\mathit{samples} \over 32}\rceil]" altlen="(samples + 31) / 32">const <type>VkSampleMask</type>*    <name>pSampleMask</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetAlphaToCoverageEnableEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>alphaToCoverageEnable</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetAlphaToOneEnableEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>alphaToOneEnable</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetLogicOpEnableEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>logicOpEnable</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetColorBlendEnableEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstAttachment</name></param>
            <param><type>uint32_t</type> <name>attachmentCount</name></param>
            <param len="attachmentCount">const <type>VkBool32</type>* <name>pColorBlendEnables</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetColorBlendEquationEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstAttachment</name></param>
            <param><type>uint32_t</type> <name>attachmentCount</name></param>
            <param len="attachmentCount">const <type>VkColorBlendEquationEXT</type>* <name>pColorBlendEquations</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetColorWriteMaskEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstAttachment</name></param>
            <param><type>uint32_t</type> <name>attachmentCount</name></param>
            <param len="attachmentCount" optional="false,true">const <type>VkColorComponentFlags</type>* <name>pColorWriteMasks</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetRasterizationStreamEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>rasterizationStream</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetConservativeRasterizationModeEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkConservativeRasterizationModeEXT</type> <name>conservativeRasterizationMode</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetExtraPrimitiveOverestimationSizeEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>float</type> <name>extraPrimitiveOverestimationSize</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDepthClipEnableEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>depthClipEnable</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetSampleLocationsEnableEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>sampleLocationsEnable</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetColorBlendAdvancedEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstAttachment</name></param>
            <param><type>uint32_t</type> <name>attachmentCount</name></param>
            <param len="attachmentCount">const <type>VkColorBlendAdvancedEXT</type>* <name>pColorBlendAdvanced</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetProvokingVertexModeEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkProvokingVertexModeEXT</type> <name>provokingVertexMode</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetLineRasterizationModeEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkLineRasterizationModeEXT</type> <name>lineRasterizationMode</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetLineStippleEnableEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>stippledLineEnable</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDepthClipNegativeOneToOneEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>negativeOneToOne</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetViewportWScalingEnableNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>viewportWScalingEnable</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetViewportSwizzleNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>firstViewport</name></param>
            <param><type>uint32_t</type> <name>viewportCount</name></param>
            <param len="viewportCount">const <type>VkViewportSwizzleNV</type>* <name>pViewportSwizzles</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetCoverageToColorEnableNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>coverageToColorEnable</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetCoverageToColorLocationNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>coverageToColorLocation</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetCoverageModulationModeNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkCoverageModulationModeNV</type> <name>coverageModulationMode</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetCoverageModulationTableEnableNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>coverageModulationTableEnable</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetCoverageModulationTableNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>coverageModulationTableCount</name></param>
            <param len="coverageModulationTableCount">const <type>float</type>* <name>pCoverageModulationTable</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetShadingRateImageEnableNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>shadingRateImageEnable</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetCoverageReductionModeNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkCoverageReductionModeNV</type> <name>coverageReductionMode</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetRepresentativeFragmentTestEnableNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkBool32</type> <name>representativeFragmentTestEnable</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkCreatePrivateDataSlot</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkPrivateDataSlotCreateInfo</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkPrivateDataSlot</type>* <name>pPrivateDataSlot</name></param>
        </command>
        <command name="vkCreatePrivateDataSlotEXT" alias="vkCreatePrivateDataSlot"/>
        <command>
            <proto><type>void</type> <name>vkDestroyPrivateDataSlot</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkPrivateDataSlot</type> <name>privateDataSlot</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command name="vkDestroyPrivateDataSlotEXT" alias="vkDestroyPrivateDataSlot"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkSetPrivateData</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkObjectType</type> <name>objectType</name></param>
            <param objecttype="objectType"><type>uint64_t</type> <name>objectHandle</name></param>
            <param><type>VkPrivateDataSlot</type> <name>privateDataSlot</name></param>
            <param><type>uint64_t</type> <name>data</name></param>
        </command>
        <command name="vkSetPrivateDataEXT" alias="vkSetPrivateData"/>
        <command>
            <proto><type>void</type> <name>vkGetPrivateData</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkObjectType</type> <name>objectType</name></param>
            <param objecttype="objectType"><type>uint64_t</type> <name>objectHandle</name></param>
            <param><type>VkPrivateDataSlot</type> <name>privateDataSlot</name></param>
            <param><type>uint64_t</type>* <name>pData</name></param>
        </command>
        <command name="vkGetPrivateDataEXT" alias="vkGetPrivateData"/>
        <command queues="transfer,graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyBuffer2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkCopyBufferInfo2</type>* <name>pCopyBufferInfo</name></param>
        </command>
        <command name="vkCmdCopyBuffer2KHR" alias="vkCmdCopyBuffer2"/>
        <command queues="transfer,graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyImage2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkCopyImageInfo2</type>* <name>pCopyImageInfo</name></param>
        </command>
        <command name="vkCmdCopyImage2KHR" alias="vkCmdCopyImage2"/>
        <command queues="graphics" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdBlitImage2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkBlitImageInfo2</type>* <name>pBlitImageInfo</name></param>
        </command>
        <command name="vkCmdBlitImage2KHR" alias="vkCmdBlitImage2"/>
        <command queues="transfer,graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyBufferToImage2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkCopyBufferToImageInfo2</type>* <name>pCopyBufferToImageInfo</name></param>
        </command>
        <command name="vkCmdCopyBufferToImage2KHR" alias="vkCmdCopyBufferToImage2"/>
        <command queues="transfer,graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyImageToBuffer2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkCopyImageToBufferInfo2</type>* <name>pCopyImageToBufferInfo</name></param>
        </command>
        <command name="vkCmdCopyImageToBuffer2KHR" alias="vkCmdCopyImageToBuffer2"/>
        <command queues="graphics" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdResolveImage2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkResolveImageInfo2</type>* <name>pResolveImageInfo</name></param>
        </command>
        <command name="vkCmdResolveImage2KHR" alias="vkCmdResolveImage2"/>
        <command queues="graphics,compute,transfer" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdRefreshObjectsKHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkRefreshObjectListKHR</type>* <name>pRefreshObjects</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceRefreshableObjectTypesKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pRefreshableObjectTypeCount</name></param>
            <param optional="true" len="pRefreshableObjectTypeCount"><type>VkObjectType</type>* <name>pRefreshableObjectTypes</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetFragmentShadingRateKHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type>           <name>commandBuffer</name></param>
            <param>const <type>VkExtent2D</type>*                           <name>pFragmentSize</name></param>
            <param>const <type>VkFragmentShadingRateCombinerOpKHR</type>    <name>combinerOps</name>[2]</param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceFragmentShadingRatesKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pFragmentShadingRateCount</name></param>
            <param optional="true" len="pFragmentShadingRateCount"><type>VkPhysicalDeviceFragmentShadingRateKHR</type>* <name>pFragmentShadingRates</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetFragmentShadingRateEnumNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type>           <name>commandBuffer</name></param>
            <param><type>VkFragmentShadingRateNV</type>                     <name>shadingRate</name></param>
            <param>const <type>VkFragmentShadingRateCombinerOpKHR</type>    <name>combinerOps</name>[2]</param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetAccelerationStructureBuildSizesKHR</name></proto>
            <param><type>VkDevice</type>                                            <name>device</name></param>
            <param><type>VkAccelerationStructureBuildTypeKHR</type>                 <name>buildType</name></param>
            <param>const <type>VkAccelerationStructureBuildGeometryInfoKHR</type>*  <name>pBuildInfo</name></param>
            <param optional="true" len="pBuildInfo-&gt;geometryCount">const <type>uint32_t</type>*  <name>pMaxPrimitiveCounts</name></param>
            <param><type>VkAccelerationStructureBuildSizesInfoKHR</type>*           <name>pSizeInfo</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetVertexInputEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param optional="true"><type>uint32_t</type> <name>vertexBindingDescriptionCount</name></param>
            <param len="vertexBindingDescriptionCount">const <type>VkVertexInputBindingDescription2EXT</type>* <name>pVertexBindingDescriptions</name></param>
            <param optional="true"><type>uint32_t</type> <name>vertexAttributeDescriptionCount</name></param>
            <param len="vertexAttributeDescriptionCount">const <type>VkVertexInputAttributeDescription2EXT</type>* <name>pVertexAttributeDescriptions</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type>                                    <name>vkCmdSetColorWriteEnableEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type>       <name>commandBuffer</name></param>
            <param><type>uint32_t</type>                                <name>attachmentCount</name></param>
            <param len="attachmentCount">const <type>VkBool32</type>*   <name>pColorWriteEnables</name></param>
        </command>
        <command queues="graphics,compute,decode,encode" renderpass="outside" videocoding="both" cmdbufferlevel="primary,secondary" tasks="synchronization">
            <proto><type>void</type> <name>vkCmdSetEvent2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type>                   <name>commandBuffer</name></param>
            <param><type>VkEvent</type>                                             <name>event</name></param>
            <param>const <type>VkDependencyInfo</type>*                             <name>pDependencyInfo</name></param>
        </command>
        <command name="vkCmdSetEvent2KHR" alias="vkCmdSetEvent2"/>
        <command queues="graphics,compute,decode,encode" renderpass="outside" videocoding="both" cmdbufferlevel="primary,secondary" tasks="synchronization">
            <proto><type>void</type> <name>vkCmdResetEvent2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type>                   <name>commandBuffer</name></param>
            <param><type>VkEvent</type>                                             <name>event</name></param>
            <param optional="true"><type>VkPipelineStageFlags2</type>               <name>stageMask</name></param>
        </command>
        <command name="vkCmdResetEvent2KHR" alias="vkCmdResetEvent2"/>
        <command queues="graphics,compute,decode,encode" renderpass="both" videocoding="both" cmdbufferlevel="primary,secondary" tasks="synchronization">
            <proto><type>void</type> <name>vkCmdWaitEvents2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type>                   <name>commandBuffer</name></param>
            <param><type>uint32_t</type>                                            <name>eventCount</name></param>
            <param len="eventCount">const <type>VkEvent</type>*                     <name>pEvents</name></param>
            <param len="eventCount">const <type>VkDependencyInfo</type>*            <name>pDependencyInfos</name></param>
        </command>
        <command name="vkCmdWaitEvents2KHR" alias="vkCmdWaitEvents2"/>
        <command queues="transfer,graphics,compute,decode,encode" renderpass="both" videocoding="both" cmdbufferlevel="primary,secondary" tasks="synchronization">
            <proto><type>void</type> <name>vkCmdPipelineBarrier2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type>                   <name>commandBuffer</name></param>
            <param>const <type>VkDependencyInfo</type>*                             <name>pDependencyInfo</name></param>
        </command>
        <command name="vkCmdPipelineBarrier2KHR" alias="vkCmdPipelineBarrier2"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST">
            <proto><type>VkResult</type> <name>vkQueueSubmit2</name></proto>
            <param externsync="true"><type>VkQueue</type>                           <name>queue</name></param>
            <param optional="true"><type>uint32_t</type>                            <name>submitCount</name></param>
            <param len="submitCount">const <type>VkSubmitInfo2</type>*              <name>pSubmits</name></param>
            <param optional="true" externsync="true"><type>VkFence</type>           <name>fence</name></param>
        </command>
        <command name="vkQueueSubmit2KHR" alias="vkQueueSubmit2"/>
        <command queues="transfer,graphics,compute,decode,encode" renderpass="both" videocoding="both" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdWriteTimestamp2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type>                   <name>commandBuffer</name></param>
            <param optional="true"><type>VkPipelineStageFlags2</type>               <name>stage</name></param>
            <param><type>VkQueryPool</type>                                         <name>queryPool</name></param>
            <param><type>uint32_t</type>                                            <name>query</name></param>
        </command>
        <command name="vkCmdWriteTimestamp2KHR" alias="vkCmdWriteTimestamp2"/>
        <command queues="transfer,graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdWriteBufferMarker2AMD</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type>                   <name>commandBuffer</name></param>
            <param optional="true"><type>VkPipelineStageFlags2</type>               <name>stage</name></param>
            <param><type>VkBuffer</type>                                            <name>dstBuffer</name></param>
            <param><type>VkDeviceSize</type>                                        <name>dstOffset</name></param>
            <param><type>uint32_t</type>                                            <name>marker</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetQueueCheckpointData2NV</name></proto>
            <param><type>VkQueue</type> <name>queue</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pCheckpointDataCount</name></param>
            <param optional="true" len="pCheckpointDataCount"><type>VkCheckpointData2NV</type>* <name>pCheckpointData</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_MEMORY_MAP_FAILED">
            <proto><type>VkResult</type> <name>vkCopyMemoryToImage</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkCopyMemoryToImageInfo</type>*    <name>pCopyMemoryToImageInfo</name></param>
        </command>
        <command name="vkCopyMemoryToImageEXT" alias="vkCopyMemoryToImage"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_MEMORY_MAP_FAILED">
            <proto><type>VkResult</type> <name>vkCopyImageToMemory</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkCopyImageToMemoryInfo</type>*    <name>pCopyImageToMemoryInfo</name></param>
        </command>
        <command name="vkCopyImageToMemoryEXT" alias="vkCopyImageToMemory"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_MEMORY_MAP_FAILED">
            <proto><type>VkResult</type> <name>vkCopyImageToImage</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkCopyImageToImageInfo</type>*    <name>pCopyImageToImageInfo</name></param>
        </command>
        <command name="vkCopyImageToImageEXT" alias="vkCopyImageToImage"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_MEMORY_MAP_FAILED">
            <proto><type>VkResult</type> <name>vkTransitionImageLayout</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>uint32_t</type> <name>transitionCount</name></param>
            <param len="transitionCount">const <type>VkHostImageLayoutTransitionInfo</type>*    <name>pTransitions</name></param>
        </command>
        <command name="vkTransitionImageLayoutEXT" alias="vkTransitionImageLayout"/>
        <command>
            <proto><type>void</type> <name>vkGetCommandPoolMemoryConsumption</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkCommandPool</type> <name>commandPool</name></param>
            <param optional="true" externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkCommandPoolMemoryConsumption</type>* <name>pConsumption</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceVideoCapabilitiesKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkVideoProfileInfoKHR</type>* <name>pVideoProfile</name></param>
            <param><type>VkVideoCapabilitiesKHR</type>* <name>pCapabilities</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceVideoFormatPropertiesKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkPhysicalDeviceVideoFormatInfoKHR</type>* <name>pVideoFormatInfo</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pVideoFormatPropertyCount</name></param>
            <param optional="true" len="pVideoFormatPropertyCount"><type>VkVideoFormatPropertiesKHR</type>* <name>pVideoFormatProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR</type>* <name>pQualityLevelInfo</name></param>
            <param><type>VkVideoEncodeQualityLevelPropertiesKHR</type>* <name>pQualityLevelProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR,VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR">
            <proto><type>VkResult</type> <name>vkCreateVideoSessionKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkVideoSessionCreateInfoKHR</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkVideoSessionKHR</type>* <name>pVideoSession</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyVideoSessionKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkVideoSessionKHR</type> <name>videoSession</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR">
            <proto><type>VkResult</type> <name>vkCreateVideoSessionParametersKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkVideoSessionParametersCreateInfoKHR</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkVideoSessionParametersKHR</type>* <name>pVideoSessionParameters</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR">
            <proto><type>VkResult</type> <name>vkUpdateVideoSessionParametersKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkVideoSessionParametersKHR</type> <name>videoSessionParameters</name></param>
            <param>const <type>VkVideoSessionParametersUpdateInfoKHR</type>* <name>pUpdateInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetEncodedVideoSessionParametersKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkVideoEncodeSessionParametersGetInfoKHR</type>* <name>pVideoSessionParametersInfo</name></param>
            <param optional="true"><type>VkVideoEncodeSessionParametersFeedbackInfoKHR</type>* <name>pFeedbackInfo</name></param>
            <param optional="false,true"><type>size_t</type>* <name>pDataSize</name></param>
            <param optional="true" len="pDataSize"><type>void</type>* <name>pData</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyVideoSessionParametersKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkVideoSessionParametersKHR</type> <name>videoSessionParameters</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE">
            <proto><type>VkResult</type> <name>vkGetVideoSessionMemoryRequirementsKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkVideoSessionKHR</type> <name>videoSession</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pMemoryRequirementsCount</name></param>
            <param optional="true" len="pMemoryRequirementsCount"><type>VkVideoSessionMemoryRequirementsKHR</type>* <name>pMemoryRequirements</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkBindVideoSessionMemoryKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkVideoSessionKHR</type> <name>videoSession</name></param>
            <param><type>uint32_t</type> <name>bindSessionMemoryInfoCount</name></param>
            <param len="bindSessionMemoryInfoCount">const <type>VkBindVideoSessionMemoryInfoKHR</type>* <name>pBindSessionMemoryInfos</name></param>
        </command>
        <command queues="decode" renderpass="outside" videocoding="inside" cmdbufferlevel="primary" tasks="action">
            <proto><type>void</type> <name>vkCmdDecodeVideoKHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkVideoDecodeInfoKHR</type>* <name>pDecodeInfo</name></param>
        </command>
        <command queues="decode,encode" renderpass="outside" videocoding="outside" cmdbufferlevel="primary" tasks="action,state">
            <proto><type>void</type> <name>vkCmdBeginVideoCodingKHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkVideoBeginCodingInfoKHR</type>* <name>pBeginInfo</name></param>
        </command>
        <command queues="decode,encode" renderpass="outside" videocoding="inside" cmdbufferlevel="primary" tasks="action">
            <proto><type>void</type> <name>vkCmdControlVideoCodingKHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkVideoCodingControlInfoKHR</type>* <name>pCodingControlInfo</name></param>
        </command>
        <command queues="decode,encode" renderpass="outside" videocoding="inside" cmdbufferlevel="primary" tasks="action,state">
            <proto><type>void</type> <name>vkCmdEndVideoCodingKHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkVideoEndCodingInfoKHR</type>* <name>pEndCodingInfo</name></param>
        </command>
        <command queues="encode" renderpass="outside" videocoding="inside" cmdbufferlevel="primary" tasks="action">
            <proto><type>void</type> <name>vkCmdEncodeVideoKHR</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkVideoEncodeInfoKHR</type>* <name>pEncodeInfo</name></param>
        </command>
        <command queues="graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDecompressMemoryNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>decompressRegionCount</name></param>
            <param len="decompressRegionCount">const <type>VkDecompressMemoryRegionNV</type>* <name>pDecompressMemoryRegions</name></param>
        </command>
        <command queues="graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdDecompressMemoryIndirectCountNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkDeviceAddress</type> <name>indirectCommandsAddress</name></param>
            <param><type>VkDeviceAddress</type> <name>indirectCommandsCountAddress</name></param>
            <param><type>uint32_t</type> <name>stride</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetPartitionedAccelerationStructuresBuildSizesNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkPartitionedAccelerationStructureInstancesInputNV</type>* <name>pInfo</name></param>
            <param><type>VkAccelerationStructureBuildSizesInfoKHR</type>*                  <name>pSizeInfo</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
           <proto><type>void</type> <name>vkCmdBuildPartitionedAccelerationStructuresNV</name></proto>
           <param externsync="true"><type>VkCommandBuffer</type>                     <name>commandBuffer</name></param>
           <param>const <type>VkBuildPartitionedAccelerationStructureInfoNV</type>*  <name>pBuildInfo</name></param>
       </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkCreateCuModuleNVX</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkCuModuleCreateInfoNVX</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkCuModuleNVX</type>* <name>pModule</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkCreateCuFunctionNVX</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkCuFunctionCreateInfoNVX</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkCuFunctionNVX</type>* <name>pFunction</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyCuModuleNVX</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkCuModuleNVX</type> <name>module</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyCuFunctionNVX</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkCuFunctionNVX</type> <name>function</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCuLaunchKernelNVX</name></proto>
            <param><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkCuLaunchInfoNVX</type>* <name>pLaunchInfo</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetDescriptorSetLayoutSizeEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkDescriptorSetLayout</type> <name>layout</name></param>
            <param><type>VkDeviceSize</type>* <name>pLayoutSizeInBytes</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetDescriptorSetLayoutBindingOffsetEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkDescriptorSetLayout</type> <name>layout</name></param>
            <param><type>uint32_t</type> <name>binding</name></param>
            <param><type>VkDeviceSize</type>* <name>pOffset</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetDescriptorEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkDescriptorGetInfoEXT</type>* <name>pDescriptorInfo</name></param>
            <param><type>size_t</type> <name>dataSize</name></param>
            <param len="dataSize"><type>void</type>* <name>pDescriptor</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdBindDescriptorBuffersEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>bufferCount</name></param>
            <param len="bufferCount">const <type>VkDescriptorBufferBindingInfoEXT</type>* <name>pBindingInfos</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDescriptorBufferOffsetsEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkPipelineBindPoint</type> <name>pipelineBindPoint</name></param>
            <param><type>VkPipelineLayout</type> <name>layout</name></param>
            <param><type>uint32_t</type> <name>firstSet</name></param>
            <param><type>uint32_t</type> <name>setCount</name></param>
            <param len="setCount">const <type>uint32_t</type>* <name>pBufferIndices</name></param>
            <param len="setCount">const <type>VkDeviceSize</type>* <name>pOffsets</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdBindDescriptorBufferEmbeddedSamplersEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkPipelineBindPoint</type> <name>pipelineBindPoint</name></param>
            <param><type>VkPipelineLayout</type> <name>layout</name></param>
            <param><type>uint32_t</type> <name>set</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetBufferOpaqueCaptureDescriptorDataEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkBufferCaptureDescriptorDataInfoEXT</type>* <name>pInfo</name></param>
            <param><type>void</type>* <name>pData</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetImageOpaqueCaptureDescriptorDataEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkImageCaptureDescriptorDataInfoEXT</type>* <name>pInfo</name></param>
            <param><type>void</type>* <name>pData</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetImageViewOpaqueCaptureDescriptorDataEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkImageViewCaptureDescriptorDataInfoEXT</type>* <name>pInfo</name></param>
            <param><type>void</type>* <name>pData</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetSamplerOpaqueCaptureDescriptorDataEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkSamplerCaptureDescriptorDataInfoEXT</type>* <name>pInfo</name></param>
            <param><type>void</type>* <name>pData</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkAccelerationStructureCaptureDescriptorDataInfoEXT</type>* <name>pInfo</name></param>
            <param><type>void</type>* <name>pData</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkSetDeviceMemoryPriorityEXT</name></proto>
            <param><type>VkDevice</type>       <name>device</name></param>
            <param><type>VkDeviceMemory</type> <name>memory</name></param>
            <param><type>float</type>          <name>priority</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkAcquireDrmDisplayEXT</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>int32_t</type> <name>drmFd</name></param>
            <param><type>VkDisplayKHR</type> <name>display</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetDrmDisplayEXT</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param><type>int32_t</type> <name>drmFd</name></param>
            <param><type>uint32_t</type> <name>connectorId</name></param>
            <param><type>VkDisplayKHR</type>* <name>display</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_TIMEOUT,VK_SUBOPTIMAL_KHR" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT">
            <proto><type>VkResult</type> <name>vkWaitForPresentKHR</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param externsync="true"><type>VkSwapchainKHR</type> <name>swapchain</name></param>
            <param><type>uint64_t</type> <name>presentId</name></param>
            <param><type>uint64_t</type> <name>timeout</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkCreateBufferCollectionFUCHSIA</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkBufferCollectionCreateInfoFUCHSIA</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkBufferCollectionFUCHSIA</type>* <name>pCollection</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED">
            <proto><type>VkResult</type> <name>vkSetBufferCollectionBufferConstraintsFUCHSIA</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkBufferCollectionFUCHSIA</type> <name>collection</name></param>
            <param>const <type>VkBufferConstraintsInfoFUCHSIA</type>* <name>pBufferConstraintsInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED">
            <proto><type>VkResult</type> <name>vkSetBufferCollectionImageConstraintsFUCHSIA</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkBufferCollectionFUCHSIA</type> <name>collection</name></param>
            <param>const <type>VkImageConstraintsInfoFUCHSIA</type>* <name>pImageConstraintsInfo</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyBufferCollectionFUCHSIA</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkBufferCollectionFUCHSIA</type> <name>collection</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkGetBufferCollectionPropertiesFUCHSIA</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkBufferCollectionFUCHSIA</type> <name>collection</name></param>
            <param><type>VkBufferCollectionPropertiesFUCHSIA</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateCudaModuleNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkCudaModuleCreateInfoNV</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkCudaModuleNV</type>* <name>pModule</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkGetCudaModuleCacheNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkCudaModuleNV</type> <name>module</name></param>
            <param optional="false,true"><type>size_t</type>* <name>pCacheSize</name></param>
            <param optional="true" len="pCacheSize"><type>void</type>* <name>pCacheData</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateCudaFunctionNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkCudaFunctionCreateInfoNV</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkCudaFunctionNV</type>* <name>pFunction</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyCudaModuleNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkCudaModuleNV</type> <name>module</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyCudaFunctionNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkCudaFunctionNV</type> <name>function</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCudaLaunchKernelNV</name></proto>
            <param><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkCudaLaunchInfoNV</type>* <name>pLaunchInfo</name></param>
        </command>
        <command queues="graphics" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action,state">
            <proto><type>void</type> <name>vkCmdBeginRendering</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type>                   <name>commandBuffer</name></param>
            <param>const <type>VkRenderingInfo</type>*                              <name>pRenderingInfo</name></param>
        </command>
        <command name="vkCmdBeginRenderingKHR" alias="vkCmdBeginRendering"/>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="action,state">
            <proto><type>void</type> <name>vkCmdEndRendering</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type>                   <name>commandBuffer</name></param>
        </command>

        <command name="vkCmdEndRenderingKHR" alias="vkCmdEndRendering"/>
        <command>
            <proto><type>void</type> <name>vkGetDescriptorSetLayoutHostMappingInfoVALVE</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkDescriptorSetBindingReferenceVALVE</type>* <name>pBindingReference</name></param>
            <param><type>VkDescriptorSetLayoutHostMappingInfoVALVE</type>* <name>pHostMapping</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetDescriptorSetHostMappingVALVE</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkDescriptorSet</type> <name>descriptorSet</name></param>
            <param><type>void</type>** <name>ppData</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR">
            <proto><type>VkResult</type> <name>vkCreateMicromapEXT</name></proto>
            <param><type>VkDevice</type>                                           <name>device</name></param>
            <param>const <type>VkMicromapCreateInfoEXT</type>*        <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>*       <name>pAllocator</name></param>
            <param><type>VkMicromapEXT</type>*                        <name>pMicromap</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdBuildMicromapsEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type>                                    <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>infoCount</name></param>
            <param len="infoCount">const <type>VkMicromapBuildInfoEXT</type>* <name>pInfos</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkBuildMicromapsEXT</name></proto>
            <param><type>VkDevice</type>                                           <name>device</name></param>
            <param optional="true"><type>VkDeferredOperationKHR</type> <name>deferredOperation</name></param>
            <param><type>uint32_t</type> <name>infoCount</name></param>
            <param len="infoCount">const <type>VkMicromapBuildInfoEXT</type>* <name>pInfos</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyMicromapEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkMicromapEXT</type> <name>micromap</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyMicromapEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkCopyMicromapInfoEXT</type>* <name>pInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCopyMicromapEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true"><type>VkDeferredOperationKHR</type> <name>deferredOperation</name></param>
            <param>const <type>VkCopyMicromapInfoEXT</type>* <name>pInfo</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyMicromapToMemoryEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkCopyMicromapToMemoryInfoEXT</type>* <name>pInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCopyMicromapToMemoryEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true"><type>VkDeferredOperationKHR</type> <name>deferredOperation</name></param>
            <param>const <type>VkCopyMicromapToMemoryInfoEXT</type>* <name>pInfo</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdCopyMemoryToMicromapEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkCopyMemoryToMicromapInfoEXT</type>* <name>pInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCopyMemoryToMicromapEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true"><type>VkDeferredOperationKHR</type> <name>deferredOperation</name></param>
            <param>const <type>VkCopyMemoryToMicromapInfoEXT</type>* <name>pInfo</name></param>
        </command>
        <command queues="compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdWriteMicromapsPropertiesEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>micromapCount</name></param>
            <param len="micromapCount">const <type>VkMicromapEXT</type>* <name>pMicromaps</name></param>
            <param><type>VkQueryType</type> <name>queryType</name></param>
            <param><type>VkQueryPool</type> <name>queryPool</name></param>
            <param><type>uint32_t</type> <name>firstQuery</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkWriteMicromapsPropertiesEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>uint32_t</type> <name>micromapCount</name></param>
            <param len="micromapCount">const <type>VkMicromapEXT</type>* <name>pMicromaps</name></param>
            <param><type>VkQueryType</type>  <name>queryType</name></param>
            <param><type>size_t</type>       <name>dataSize</name></param>
            <param len="dataSize"><type>void</type>* <name>pData</name></param>
            <param><type>size_t</type> <name>stride</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetDeviceMicromapCompatibilityEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkMicromapVersionInfoEXT</type>* <name>pVersionInfo</name></param>
            <param><type>VkAccelerationStructureCompatibilityKHR</type>* <name>pCompatibility</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetMicromapBuildSizesEXT</name></proto>
            <param><type>VkDevice</type>                                            <name>device</name></param>
            <param><type>VkAccelerationStructureBuildTypeKHR</type>                 <name>buildType</name></param>
            <param>const <type>VkMicromapBuildInfoEXT</type>*  <name>pBuildInfo</name></param>
            <param><type>VkMicromapBuildSizesInfoEXT</type>*           <name>pSizeInfo</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetShaderModuleIdentifierEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkShaderModule</type> <name>shaderModule</name></param>
            <param><type>VkShaderModuleIdentifierEXT</type>* <name>pIdentifier</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetShaderModuleCreateInfoIdentifierEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkShaderModuleCreateInfo</type>* <name>pCreateInfo</name></param>
            <param><type>VkShaderModuleIdentifierEXT</type>* <name>pIdentifier</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetImageSubresourceLayout2</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkImage</type> <name>image</name></param>
            <param>const <type>VkImageSubresource2</type>* <name>pSubresource</name></param>
            <param><type>VkSubresourceLayout2</type>* <name>pLayout</name></param>
        </command>
        <command name="vkGetImageSubresourceLayout2KHR" alias="vkGetImageSubresourceLayout2"/>
        <command name="vkGetImageSubresourceLayout2EXT"        alias="vkGetImageSubresourceLayout2"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPipelinePropertiesEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkPipelineInfoEXT</type>* <name>pPipelineInfo</name></param>
            <param noautovalidity="true" validstructs="VkPipelinePropertiesIdentifierEXT"><type>VkBaseOutStructure</type>* <name>pPipelineProperties</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkExportMetalObjectsEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkExportMetalObjectsInfoEXT</type>* <name>pMetalObjectsInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE">
            <proto><type>VkResult</type> <name>vkGetFramebufferTilePropertiesQCOM</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkFramebuffer</type> <name>framebuffer</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertiesCount</name></param>
            <param optional="true" len="pPropertiesCount"><type>VkTilePropertiesQCOM</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS">
            <proto><type>VkResult</type> <name>vkGetDynamicRenderingTilePropertiesQCOM</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkRenderingInfo</type>* <name>pRenderingInfo</name></param>
            <param><type>VkTilePropertiesQCOM</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_EXTENSION_NOT_PRESENT,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_FORMAT_NOT_SUPPORTED">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceOpticalFlowImageFormatsNV</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param>const <type>VkOpticalFlowImageFormatInfoNV</type>* <name>pOpticalFlowImageFormatInfo</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pFormatCount</name></param>
            <param optional="true" len="pFormatCount"><type>VkOpticalFlowImageFormatPropertiesNV</type>* <name>pImageFormatProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkCreateOpticalFlowSessionNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkOpticalFlowSessionCreateInfoNV</type>* <name>pCreateInfo</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param><type>VkOpticalFlowSessionNV</type>* <name>pSession</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyOpticalFlowSessionNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkOpticalFlowSessionNV</type> <name>session</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkBindOpticalFlowSessionImageNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkOpticalFlowSessionNV</type> <name>session</name></param>
            <param><type>VkOpticalFlowSessionBindingPointNV</type> <name>bindingPoint</name></param>
            <param optional="true"><type>VkImageView</type> <name>view</name></param>
            <param><type>VkImageLayout</type> <name>layout</name></param>
        </command>
        <command queues="opticalflow" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdOpticalFlowExecuteNV</name></proto>
            <param><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkOpticalFlowSessionNV</type> <name>session</name></param>
            <param>const <type>VkOpticalFlowExecuteInfoNV</type>* <name>pExecuteInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetDeviceFaultInfoEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkDeviceFaultCountsEXT</type>* <name>pFaultCounts</name></param>
            <param optional="true"><type>VkDeviceFaultInfoEXT</type>* <name>pFaultInfo</name></param>
        </command>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDepthBias2EXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkDepthBiasInfoEXT</type>*         <name>pDepthBiasInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_SURFACE_LOST_KHR">
            <proto><type>VkResult</type> <name>vkReleaseSwapchainImagesEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkReleaseSwapchainImagesInfoEXT</type>* <name>pReleaseInfo</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetDeviceImageSubresourceLayout</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkDeviceImageSubresourceInfo</type>* <name>pInfo</name></param>
            <param><type>VkSubresourceLayout2</type>* <name>pLayout</name></param>
        </command>
        <command name="vkGetDeviceImageSubresourceLayoutKHR" alias="vkGetDeviceImageSubresourceLayout"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_MEMORY_MAP_FAILED">
            <proto><type>VkResult</type> <name>vkMapMemory2</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkMemoryMapInfo</type>* <name>pMemoryMapInfo</name></param>
            <param optional="false,true"><type>void</type>** <name>ppData</name></param>
        </command>
        <command name="vkMapMemory2KHR" alias="vkMapMemory2"/>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_MEMORY_MAP_FAILED">
            <proto><type>VkResult</type> <name>vkUnmapMemory2</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkMemoryUnmapInfo</type>* <name>pMemoryUnmapInfo</name></param>
        </command>
        <command name="vkUnmapMemory2KHR" alias="vkUnmapMemory2"/>
        <command successcodes="VK_SUCCESS,VK_INCOMPATIBLE_SHADER_BINARY_EXT" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkCreateShadersEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>uint32_t</type> <name>createInfoCount</name></param>
            <param len="createInfoCount">const <type>VkShaderCreateInfoEXT</type>* <name>pCreateInfos</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
            <param len="createInfoCount"><type>VkShaderEXT</type>* <name>pShaders</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkDestroyShaderEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param optional="true" externsync="true"><type>VkShaderEXT</type> <name>shader</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetShaderBinaryDataEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkShaderEXT</type> <name>shader</name></param>
            <param optional="false,true"><type>size_t</type>* <name>pDataSize</name></param>
            <param optional="true" len="pDataSize"><type>void</type>* <name>pData</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdBindShadersEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>stageCount</name></param>
            <param len="stageCount">const <type>VkShaderStageFlagBits</type>* <name>pStages</name></param>
            <param optional="true,true" len="stageCount">const <type>VkShaderEXT</type>* <name>pShaders</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR">
            <proto><type>VkResult</type> <name>vkGetScreenBufferPropertiesQNX</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const struct <type>_screen_buffer</type>* <name>buffer</name></param>
            <param><type>VkScreenBufferPropertiesQNX</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkCooperativeMatrixPropertiesKHR</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetExecutionGraphPipelineScratchSizeAMDX</name></proto>
            <param><type>VkDevice</type>                                        <name>device</name></param>
            <param><type>VkPipeline</type>                                      <name>executionGraph</name></param>
            <param><type>VkExecutionGraphPipelineScratchSizeAMDX</type>*        <name>pSizeInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetExecutionGraphPipelineNodeIndexAMDX</name></proto>
            <param><type>VkDevice</type>                                        <name>device</name></param>
            <param><type>VkPipeline</type>                                      <name>executionGraph</name></param>
            <param>const <type>VkPipelineShaderStageNodeCreateInfoAMDX</type>*  <name>pNodeInfo</name></param>
            <param><type>uint32_t</type>*                                       <name>pNodeIndex</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_PIPELINE_COMPILE_REQUIRED_EXT" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkCreateExecutionGraphPipelinesAMDX</name></proto>
            <param><type>VkDevice</type>                                        <name>device</name></param>
            <param optional="true"><type>VkPipelineCache</type>                 <name>pipelineCache</name></param>
            <param><type>uint32_t</type>                                        <name>createInfoCount</name></param>
            <param len="createInfoCount">const <type>VkExecutionGraphPipelineCreateInfoAMDX</type>* <name>pCreateInfos</name></param>
            <param optional="true">const <type>VkAllocationCallbacks</type>*    <name>pAllocator</name></param>
            <param len="createInfoCount"><type>VkPipeline</type>*               <name>pPipelines</name></param>
        </command>
        <command queues="graphics,compute" tasks="action" renderpass="both" cmdbufferlevel="primary">
            <proto><type>void</type> <name>vkCmdInitializeGraphScratchMemoryAMDX</name></proto>
            <param><type>VkCommandBuffer</type>                                 <name>commandBuffer</name></param>
            <param><type>VkPipeline</type>                                      <name>executionGraph</name></param>
            <param><type>VkDeviceAddress</type>                                 <name>scratch</name></param>
            <param><type>VkDeviceSize</type>                                    <name>scratchSize</name></param>
        </command>
        <command queues="graphics,compute" tasks="action" renderpass="both" cmdbufferlevel="primary">
            <proto><type>void</type> <name>vkCmdDispatchGraphAMDX</name></proto>
            <param><type>VkCommandBuffer</type>                                 <name>commandBuffer</name></param>
            <param><type>VkDeviceAddress</type>                                 <name>scratch</name></param>
            <param><type>VkDeviceSize</type>                                    <name>scratchSize</name></param>
            <param>const <type>VkDispatchGraphCountInfoAMDX</type>*             <name>pCountInfo</name></param>
        </command>
        <command queues="graphics,compute" tasks="action" renderpass="both" cmdbufferlevel="primary">
            <proto><type>void</type> <name>vkCmdDispatchGraphIndirectAMDX</name></proto>
            <param><type>VkCommandBuffer</type>                                 <name>commandBuffer</name></param>
            <param><type>VkDeviceAddress</type>                                 <name>scratch</name></param>
            <param><type>VkDeviceSize</type>                                    <name>scratchSize</name></param>
            <param>const <type>VkDispatchGraphCountInfoAMDX</type>*             <name>pCountInfo</name></param>
        </command>
        <command queues="graphics,compute" tasks="action" renderpass="both" cmdbufferlevel="primary">
            <proto><type>void</type> <name>vkCmdDispatchGraphIndirectCountAMDX</name></proto>
            <param><type>VkCommandBuffer</type>                                 <name>commandBuffer</name></param>
            <param><type>VkDeviceAddress</type>                                 <name>scratch</name></param>
            <param><type>VkDeviceSize</type>                                    <name>scratchSize</name></param>
            <param><type>VkDeviceAddress</type>                                 <name>countInfo</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdBindDescriptorSets2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkBindDescriptorSetsInfo</type>*   <name>pBindDescriptorSetsInfo</name></param>
        </command>
        <command name="vkCmdBindDescriptorSets2KHR" alias="vkCmdBindDescriptorSets2"/>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdPushConstants2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkPushConstantsInfo</type>*        <name>pPushConstantsInfo</name></param>
        </command>
        <command name="vkCmdPushConstants2KHR" alias="vkCmdPushConstants2"/>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdPushDescriptorSet2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkPushDescriptorSetInfo</type>*    <name>pPushDescriptorSetInfo</name></param>
        </command>
        <command name="vkCmdPushDescriptorSet2KHR" alias="vkCmdPushDescriptorSet2"/>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdPushDescriptorSetWithTemplate2</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkPushDescriptorSetWithTemplateInfo</type>* <name>pPushDescriptorSetWithTemplateInfo</name></param>
        </command>
        <command name="vkCmdPushDescriptorSetWithTemplate2KHR" alias="vkCmdPushDescriptorSetWithTemplate2"/>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDescriptorBufferOffsets2EXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkSetDescriptorBufferOffsetsInfoEXT</type>* <name>pSetDescriptorBufferOffsetsInfo</name></param>
        </command>
        <command queues="graphics,compute" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdBindDescriptorBufferEmbeddedSamplers2EXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkBindDescriptorBufferEmbeddedSamplersInfoEXT</type>* <name>pBindDescriptorBufferEmbeddedSamplersInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_INITIALIZATION_FAILED">
            <proto><type>VkResult</type> <name>vkSetLatencySleepModeNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkSwapchainKHR</type> <name>swapchain</name></param>
            <param>const <type>VkLatencySleepModeInfoNV</type>* <name>pSleepModeInfo</name></param>
        </command>
        <command successcodes="VK_SUCCESS">
            <proto><type>VkResult</type> <name>vkLatencySleepNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkSwapchainKHR</type> <name>swapchain</name></param>
            <param>const <type>VkLatencySleepInfoNV</type>* <name>pSleepInfo</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkSetLatencyMarkerNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkSwapchainKHR</type> <name>swapchain</name></param>
            <param>const <type>VkSetLatencyMarkerInfoNV</type>* <name>pLatencyMarkerInfo</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkGetLatencyTimingsNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkSwapchainKHR</type> <name>swapchain</name></param>
            <param><type>VkGetLatencyMarkerInfoNV</type>* <name>pLatencyMarkerInfo</name></param>
        </command>
        <command>
            <proto><type>void</type> <name>vkQueueNotifyOutOfBandNV</name></proto>
            <param><type>VkQueue</type> <name>queue</name></param>
            <param>const <type>VkOutOfBandQueueTypeInfoNV</type>* <name>pQueueTypeInfo</name></param>
        </command>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetRenderingAttachmentLocations</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkRenderingAttachmentLocationInfo</type>* <name>pLocationInfo</name></param>
        </command>
        <command name="vkCmdSetRenderingAttachmentLocationsKHR" alias="vkCmdSetRenderingAttachmentLocations"/>
        <command queues="graphics" renderpass="inside" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetRenderingInputAttachmentIndices</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param>const <type>VkRenderingInputAttachmentIndexInfo</type>* <name>pInputAttachmentIndexInfo</name></param>
        </command>
        <command name="vkCmdSetRenderingInputAttachmentIndicesKHR" alias="vkCmdSetRenderingInputAttachmentIndices"/>
        <command queues="graphics" renderpass="both" cmdbufferlevel="primary,secondary" tasks="state">
            <proto><type>void</type> <name>vkCmdSetDepthClampRangeEXT</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>VkDepthClampModeEXT</type> <name>depthClampMode</name></param>
            <param optional="true">const <type>VkDepthClampRangeEXT</type>* <name>pDepthClampRange</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkCooperativeMatrixFlexibleDimensionsPropertiesNV</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkGetMemoryMetalHandleEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkMemoryGetMetalHandleInfoEXT</type>* <name>pGetMetalHandleInfo</name></param>
            <param><type>void</type>** <name>pHandle</name></param>
        </command>
        <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE">
            <proto><type>VkResult</type> <name>vkGetMemoryMetalHandlePropertiesEXT</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param><type>VkExternalMemoryHandleTypeFlagBits</type> <name>handleType</name></param>
            <param>const <type>void</type>* <name>pHandle</name></param>
            <param><type>VkMemoryMetalHandlePropertiesEXT</type>* <name>pMemoryMetalHandleProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY">
            <proto><type>VkResult</type> <name>vkGetPhysicalDeviceCooperativeVectorPropertiesNV</name></proto>
            <param><type>VkPhysicalDevice</type> <name>physicalDevice</name></param>
            <param optional="false,true"><type>uint32_t</type>* <name>pPropertyCount</name></param>
            <param optional="true" len="pPropertyCount"><type>VkCooperativeVectorPropertiesNV</type>* <name>pProperties</name></param>
        </command>
        <command successcodes="VK_SUCCESS,VK_INCOMPLETE" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY">
            <proto><type>VkResult</type> <name>vkConvertCooperativeVectorMatrixNV</name></proto>
            <param><type>VkDevice</type> <name>device</name></param>
            <param>const <type>VkConvertCooperativeVectorMatrixInfoNV</type>* <name>pInfo</name></param>
        </command>
        <command queues="graphics,compute" renderpass="outside" cmdbufferlevel="primary,secondary" tasks="action">
            <proto><type>void</type> <name>vkCmdConvertCooperativeVectorMatrixNV</name></proto>
            <param externsync="true"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>
            <param><type>uint32_t</type> <name>infoCount</name></param>
            <param len="infoCount">const <type>VkConvertCooperativeVectorMatrixInfoNV</type>* <name>pInfos</name></param>
        </command>
    </commands>

    <feature api="vulkan,vulkansc" name="VK_VERSION_1_0" number="1.0" comment="Vulkan core API interface definitions">
        <require comment="Header boilerplate">
            <type name="vk_platform"/>
            <type name="VK_DEFINE_HANDLE"/>
            <type name="VK_USE_64_BIT_PTR_DEFINES"/>
            <type name="VK_DEFINE_NON_DISPATCHABLE_HANDLE"/>
            <type name="VK_NULL_HANDLE"/>
        </require>
        <require comment="Fundamental types used by many commands and structures">
            <type name="VkBool32"/>
            <type name="VkDeviceAddress"/>
            <type name="VkDeviceSize"/>
            <type name="VkExtent2D"/>
            <type name="VkExtent3D"/>
            <type name="VkFlags"/>
            <type name="VkOffset2D"/>
            <type name="VkOffset3D"/>
            <type name="VkRect2D"/>
            <type name="VkResult"/>
            <type name="VkStructureType"/>
        </require>
        <require comment="API constants">
            <enum name="VK_ATTACHMENT_UNUSED"/>
            <enum name="VK_FALSE"/>
            <enum name="VK_LOD_CLAMP_NONE"/>
            <enum name="VK_QUEUE_FAMILY_IGNORED"/>
            <enum name="VK_REMAINING_ARRAY_LAYERS"/>
            <enum name="VK_REMAINING_MIP_LEVELS"/>
            <enum name="VK_SUBPASS_EXTERNAL"/>
            <enum name="VK_TRUE"/>
            <enum name="VK_WHOLE_SIZE"/>
            <enum name="VK_MAX_MEMORY_TYPES"/>
            <enum name="VK_MAX_PHYSICAL_DEVICE_NAME_SIZE"/>
            <enum name="VK_UUID_SIZE"/>
            <enum name="VK_MAX_EXTENSION_NAME_SIZE"/>
            <enum name="VK_MAX_DESCRIPTION_SIZE"/>
            <enum name="VK_MAX_MEMORY_HEAPS"/>
            <type name="VkPipelineCacheHeaderVersion"/>
        </require>
        <require comment="These types are part of the API, though not directly used in API commands or data structures">
            <type name="VkBaseInStructure"/>
            <type name="VkBaseOutStructure"/>
            <type name="VkBufferMemoryBarrier"/>
            <type name="VkDispatchIndirectCommand"/>
            <type name="VkDrawIndexedIndirectCommand"/>
            <type name="VkDrawIndirectCommand"/>
            <type name="VkImageMemoryBarrier"/>
            <type name="VkMemoryBarrier"/>
            <type name="VkObjectType"/>
            <type name="VkPipelineCacheHeaderVersionOne"/>
            <type name="VkVendorId"/>
        </require>
        <require comment="API version macros">
            <type name="VK_API_VERSION"/>
            <type name="VK_API_VERSION_1_0"/>
            <type name="VK_HEADER_VERSION"/>
            <type name="VK_HEADER_VERSION_COMPLETE"/>
            <type name="VK_MAKE_VERSION"/>
            <type name="VK_VERSION_MAJOR"/>
            <type name="VK_VERSION_MINOR"/>
            <type name="VK_VERSION_PATCH"/>
            <type name="VK_MAKE_API_VERSION"/>
            <type name="VK_API_VERSION_VARIANT"/>
            <type name="VK_API_VERSION_MAJOR"/>
            <type name="VK_API_VERSION_MINOR"/>
            <type name="VK_API_VERSION_PATCH"/>
        </require>
        <require comment="Device initialization">
            <type name="PFN_vkAllocationFunction"/>
            <type name="PFN_vkFreeFunction"/>
            <type name="PFN_vkInternalAllocationNotification"/>
            <type name="PFN_vkInternalFreeNotification"/>
            <type name="PFN_vkReallocationFunction"/>
            <type name="PFN_vkVoidFunction"/>
            <type name="VkAllocationCallbacks"/>
            <type name="VkApplicationInfo"/>
            <type name="VkFormat"/>
            <type name="VkFormatFeatureFlagBits"/>
            <type name="VkFormatFeatureFlags"/>
            <type name="VkFormatProperties"/>
            <type name="VkImageCreateFlagBits"/>
            <type name="VkImageCreateFlags"/>
            <type name="VkImageFormatProperties"/>
            <type name="VkImageTiling"/>
            <type name="VkImageType"/>
            <type name="VkImageUsageFlagBits"/>
            <type name="VkImageUsageFlags"/>
            <type name="VkInstance"/>
            <type name="VkInstanceCreateFlags"/>
            <type name="VkInstanceCreateFlagBits"/>
            <type name="VkInstanceCreateInfo"/>
            <type name="VkInternalAllocationType"/>
            <type name="VkMemoryHeap"/>
            <type name="VkMemoryHeapFlagBits"/>
            <type name="VkMemoryHeapFlags"/>
            <type name="VkMemoryPropertyFlagBits"/>
            <type name="VkMemoryPropertyFlags"/>
            <type name="VkMemoryType"/>
            <type name="VkPhysicalDevice"/>
            <type name="VkPhysicalDeviceFeatures"/>
            <type name="VkPhysicalDeviceLimits"/>
            <type name="VkPhysicalDeviceMemoryProperties"/>
            <type name="VkPhysicalDeviceProperties"/>
            <type name="VkPhysicalDeviceSparseProperties"/>
            <type name="VkPhysicalDeviceType"/>
            <type name="VkQueueFamilyProperties"/>
            <type name="VkQueueFlagBits"/>
            <type name="VkQueueFlags"/>
            <type name="VkSampleCountFlagBits"/>
            <type name="VkSampleCountFlags"/>
            <type name="VkSystemAllocationScope"/>
            <command name="vkCreateInstance"/>
            <command name="vkDestroyInstance"/>
            <command name="vkEnumeratePhysicalDevices"/>
            <command name="vkGetPhysicalDeviceFeatures"/>
            <command name="vkGetPhysicalDeviceFormatProperties"/>
            <command name="vkGetPhysicalDeviceImageFormatProperties"/>
            <command name="vkGetPhysicalDeviceProperties"/>
            <command name="vkGetPhysicalDeviceQueueFamilyProperties"/>
            <command name="vkGetPhysicalDeviceMemoryProperties"/>
            <command name="vkGetInstanceProcAddr"/>
            <command name="vkGetDeviceProcAddr"/>
            <feature name="robustBufferAccess" struct="VkPhysicalDeviceFeatures"/>
        </require>
        <require comment="Device commands">
            <type name="VkDevice"/>
            <type name="VkDeviceCreateFlags" comment="Will add VkDeviceCreateFlagBits when bits are defined in the future"/>
            <type name="VkDeviceCreateInfo"/>
            <type name="VkDeviceQueueCreateFlags" comment="VkDeviceQueueCreateFlagBits was added later"/>
            <type name="VkDeviceQueueCreateInfo"/>
            <command name="vkCreateDevice"/>
            <command name="vkDestroyDevice"/>
        </require>
        <require comment="Extension discovery commands">
            <type name="VkExtensionProperties"/>
            <command name="vkEnumerateInstanceExtensionProperties"/>
            <command name="vkEnumerateDeviceExtensionProperties"/>
        </require>
        <require comment="Layer discovery commands">
            <type name="VkLayerProperties"/>
            <command name="vkEnumerateInstanceLayerProperties"/>
            <command name="vkEnumerateDeviceLayerProperties"/>
        </require>
        <require comment="Queue commands">
            <type name="VkPipelineStageFlagBits"/>
            <type name="VkPipelineStageFlags"/>
            <type name="VkQueue"/>
            <type name="VkSubmitInfo"/>
            <command name="vkGetDeviceQueue"/>
            <command name="vkQueueSubmit"/>
            <command name="vkQueueWaitIdle"/>
            <command name="vkDeviceWaitIdle"/>
        </require>
        <require comment="Memory commands">
            <type name="VkMappedMemoryRange"/>
            <type name="VkMemoryAllocateInfo"/>
            <type name="VkMemoryMapFlagBits"/>
            <type name="VkMemoryMapFlags"/>
            <command name="vkAllocateMemory"/>
            <command name="vkFreeMemory"/>
            <command name="vkMapMemory"/>
            <command name="vkUnmapMemory"/>
            <command name="vkFlushMappedMemoryRanges"/>
            <command name="vkInvalidateMappedMemoryRanges"/>
            <command name="vkGetDeviceMemoryCommitment"/>
        </require>
        <require comment="Memory management API commands">
            <type name="VkDeviceMemory"/>
            <type name="VkMemoryRequirements"/>
            <command name="vkBindBufferMemory"/>
            <command name="vkBindImageMemory"/>
            <command name="vkGetBufferMemoryRequirements"/>
            <command name="vkGetImageMemoryRequirements"/>
        </require>
        <require comment="Sparse resource memory management API commands">
            <type name="VkBindSparseInfo"/>
            <type name="VkImageAspectFlagBits"/>
            <type name="VkImageAspectFlags"/>
            <type name="VkImageSubresource"/>
            <type name="VkSparseBufferMemoryBindInfo"/>
            <type name="VkSparseImageFormatFlagBits"/>
            <type name="VkSparseImageFormatFlags"/>
            <type name="VkSparseImageFormatProperties"/>
            <type name="VkSparseImageMemoryBind"/>
            <type name="VkSparseImageMemoryBindInfo"/>
            <type name="VkSparseImageMemoryRequirements"/>
            <type name="VkSparseImageOpaqueMemoryBindInfo"/>
            <type name="VkSparseMemoryBind"/>
            <type name="VkSparseMemoryBindFlagBits"/>
            <type name="VkSparseMemoryBindFlags"/>
            <command name="vkGetImageSparseMemoryRequirements"/>
            <command name="vkGetPhysicalDeviceSparseImageFormatProperties"/>
            <command name="vkQueueBindSparse"/>
        </require>
        <require comment="Fence commands">
            <type name="VkFence"/>
            <type name="VkFenceCreateFlagBits"/>
            <type name="VkFenceCreateFlags"/>
            <type name="VkFenceCreateInfo"/>
            <command name="vkCreateFence"/>
            <command name="vkDestroyFence"/>
            <command name="vkResetFences"/>
            <command name="vkGetFenceStatus"/>
            <command name="vkWaitForFences"/>
        </require>
        <require comment="Queue semaphore commands">
            <type name="VkSemaphore"/>
            <type name="VkSemaphoreCreateFlags" comment="Will add VkSemaphoreCreateFlagBits when bits are defined in the future"/>
            <type name="VkSemaphoreCreateInfo"/>
            <command name="vkCreateSemaphore"/>
            <command name="vkDestroySemaphore"/>
        </require>
        <require comment="Event commands">
            <type name="VkEvent"/>
            <type name="VkEventCreateFlags"/>
            <type name="VkEventCreateFlagBits"/>
            <type name="VkEventCreateInfo"/>
            <command name="vkCreateEvent"/>
            <command name="vkDestroyEvent"/>
            <command name="vkGetEventStatus"/>
            <command name="vkSetEvent"/>
            <command name="vkResetEvent"/>
        </require>
        <require comment="Query commands">
            <type name="VkQueryPipelineStatisticFlagBits"/>
            <type name="VkQueryPipelineStatisticFlags"/>
            <type name="VkQueryPool"/>
            <type name="VkQueryPoolCreateFlags" comment="Will add VkQueryPoolCreateFlagBits when bits are defined in the future"/>
            <type name="VkQueryPoolCreateInfo"/>
            <type name="VkQueryResultFlagBits"/>
            <type name="VkQueryResultFlags"/>
            <type name="VkQueryType"/>
            <command name="vkCreateQueryPool"/>
            <command name="vkDestroyQueryPool"/>
            <command name="vkGetQueryPoolResults"/>
        </require>
        <require comment="Buffer commands">
            <type name="VkBuffer"/>
            <type name="VkBufferCreateFlagBits"/>
            <type name="VkBufferCreateFlags"/>
            <type name="VkBufferCreateInfo"/>
            <type name="VkBufferUsageFlagBits"/>
            <type name="VkBufferUsageFlags"/>
            <type name="VkSharingMode"/>
            <command name="vkCreateBuffer"/>
            <command name="vkDestroyBuffer"/>
        </require>
        <require comment="Buffer view commands">
            <type name="VkBufferView"/>
            <type name="VkBufferViewCreateFlags" comment="Will add VkBufferViewFlagBits when bits are defined in the future"/>
            <type name="VkBufferViewCreateInfo"/>
            <command name="vkCreateBufferView"/>
            <command name="vkDestroyBufferView"/>
        </require>
        <require comment="Image commands">
            <type name="VkImage"/>
            <type name="VkImageCreateInfo"/>
            <type name="VkImageLayout"/>
            <type name="VkSubresourceLayout"/>
            <command name="vkCreateImage"/>
            <command name="vkDestroyImage"/>
            <command name="vkGetImageSubresourceLayout"/>
        </require>
        <require comment="Image view commands">
            <type name="VkComponentMapping"/>
            <type name="VkComponentSwizzle"/>
            <type name="VkImageSubresourceRange"/>
            <type name="VkImageView"/>
            <type name="VkImageViewCreateFlagBits"/>
            <type name="VkImageViewCreateFlags"/>
            <type name="VkImageViewCreateInfo"/>
            <type name="VkImageViewType"/>
            <command name="vkCreateImageView"/>
            <command name="vkDestroyImageView"/>
        </require>
        <require comment="Shader commands">
            <type name="VkShaderModule"/>
            <type name="VkShaderModuleCreateFlags"/>
            <type name="VkShaderModuleCreateInfo"/>
            <command name="vkCreateShaderModule"/>
            <command name="vkDestroyShaderModule"/>
        </require>
        <require comment="Pipeline Cache commands">
            <type name="VkPipelineCache"/>
            <type name="VkPipelineCacheCreateFlags" comment="VkPipelineCacheCreateFlagBits was added later"/>
            <type name="VkPipelineCacheCreateInfo"/>
            <command name="vkCreatePipelineCache"/>
            <command name="vkDestroyPipelineCache"/>
            <command name="vkGetPipelineCacheData"/>
            <command name="vkMergePipelineCaches"/>
        </require>
        <require comment="Pipeline commands">
            <type name="VkBlendFactor"/>
            <type name="VkBlendOp"/>
            <type name="VkColorComponentFlagBits"/>
            <type name="VkColorComponentFlags"/>
            <type name="VkCompareOp"/>
            <type name="VkComputePipelineCreateInfo"/>
            <type name="VkCullModeFlagBits"/>
            <type name="VkCullModeFlags"/>
            <type name="VkDynamicState"/>
            <type name="VkFrontFace"/>
            <type name="VkGraphicsPipelineCreateInfo"/>
            <type name="VkLogicOp"/>
            <type name="VkPipeline"/>
            <type name="VkPipelineColorBlendAttachmentState"/>
            <type name="VkPipelineColorBlendStateCreateFlags" comment="Will add VkPipeline*StateFlagBits when bits are defined in the future"/>
            <type name="VkPipelineColorBlendStateCreateInfo"/>
            <type name="VkPipelineCreateFlagBits"/>
            <type name="VkPipelineCreateFlags"/>
            <type name="VkPipelineDepthStencilStateCreateFlags" comment="Will add VkPipeline*StateFlagBits when bits are defined in the future"/>
            <type name="VkPipelineDepthStencilStateCreateInfo"/>
            <type name="VkPipelineDynamicStateCreateFlags" comment="Will add VkPipeline*StateFlagBits when bits are defined in the future"/>
            <type name="VkPipelineDynamicStateCreateInfo"/>
            <type name="VkPipelineInputAssemblyStateCreateFlags" comment="Will add VkPipeline*StateFlagBits when bits are defined in the future"/>
            <type name="VkPipelineInputAssemblyStateCreateInfo"/>
            <type name="VkPipelineLayoutCreateFlags" comment="Will add VkPipelineLayoutCreateFlagBits when bits are defined in the future"/>
            <type name="VkPipelineMultisampleStateCreateFlags" comment="Will add VkPipelineMultisampleStateCreateFlagBits when bits are defined in the future"/>
            <type name="VkPipelineMultisampleStateCreateInfo"/>
            <type name="VkPipelineRasterizationStateCreateFlags" comment="Will add VkPipelineRasterizationStateCreateFlagBits when bits are defined in the future"/>
            <type name="VkPipelineRasterizationStateCreateInfo"/>
            <type name="VkPipelineShaderStageCreateFlagBits"/>
            <type name="VkPipelineShaderStageCreateFlags"/>
            <type name="VkPipelineShaderStageCreateInfo"/>
            <type name="VkPipelineTessellationStateCreateFlags" comment="Will add VkPipelineTessellationStateCreateFlagBits when bits are defined in the future"/>
            <type name="VkPipelineTessellationStateCreateInfo"/>
            <type name="VkPipelineVertexInputStateCreateFlags" comment="Will add VkPipelineVertexInputStateCreateFlagBits when bits are defined in the future"/>
            <type name="VkPipelineVertexInputStateCreateInfo"/>
            <type name="VkPipelineViewportStateCreateFlags" comment="Will add VkPipelineViewportStateCreateFlagBits when bits are defined in the future"/>
            <type name="VkPipelineViewportStateCreateInfo"/>
            <type name="VkPolygonMode"/>
            <type name="VkPrimitiveTopology"/>
            <type name="VkSampleMask"/>
            <type name="VkShaderStageFlagBits"/>
            <type name="VkShaderStageFlags"/>
            <type name="VkSpecializationInfo"/>
            <type name="VkSpecializationMapEntry"/>
            <type name="VkStencilOp"/>
            <type name="VkStencilOpState"/>
            <type name="VkVertexInputAttributeDescription"/>
            <type name="VkVertexInputBindingDescription"/>
            <type name="VkVertexInputRate"/>
            <type name="VkViewport"/>
            <command name="vkCreateGraphicsPipelines"/>
            <command name="vkCreateComputePipelines"/>
            <command name="vkDestroyPipeline"/>
        </require>
        <require comment="Pipeline layout commands">
            <type name="VkPipelineLayout"/>
            <type name="VkPipelineLayoutCreateInfo"/>
            <type name="VkPushConstantRange"/>
            <command name="vkCreatePipelineLayout"/>
            <command name="vkDestroyPipelineLayout"/>
        </require>
        <require comment="Sampler commands">
            <type name="VkBorderColor"/>
            <type name="VkFilter"/>
            <type name="VkSampler"/>
            <type name="VkSamplerAddressMode"/>
            <type name="VkSamplerCreateFlagBits"/>
            <type name="VkSamplerCreateFlags"/>
            <type name="VkSamplerCreateInfo"/>
            <type name="VkSamplerMipmapMode"/>
            <command name="vkCreateSampler"/>
            <command name="vkDestroySampler"/>
        </require>
        <require comment="Descriptor set commands">
            <type name="VkCopyDescriptorSet"/>
            <type name="VkDescriptorBufferInfo"/>
            <type name="VkDescriptorImageInfo"/>
            <type name="VkDescriptorPool"/>
            <type name="VkDescriptorPoolCreateFlagBits"/>
            <type name="VkDescriptorPoolCreateFlags"/>
            <type name="VkDescriptorPoolCreateInfo"/>
            <type name="VkDescriptorPoolResetFlags"/>
            <type name="VkDescriptorPoolSize"/>
            <type name="VkDescriptorSet"/>
            <type name="VkDescriptorSetAllocateInfo"/>
            <type name="VkDescriptorSetLayout"/>
            <type name="VkDescriptorSetLayoutBinding"/>
            <type name="VkDescriptorSetLayoutCreateFlagBits"/>
            <type name="VkDescriptorSetLayoutCreateFlags"/>
            <type name="VkDescriptorSetLayoutCreateInfo"/>
            <type name="VkDescriptorType"/>
            <type name="VkWriteDescriptorSet"/>
            <command name="vkCreateDescriptorSetLayout"/>
            <command name="vkDestroyDescriptorSetLayout"/>
            <command name="vkCreateDescriptorPool"/>
            <command name="vkDestroyDescriptorPool"/>
            <command name="vkResetDescriptorPool"/>
            <command name="vkAllocateDescriptorSets"/>
            <command name="vkFreeDescriptorSets"/>
            <command name="vkUpdateDescriptorSets"/>
        </require>
        <require comment="Pass commands">
            <type name="VkAccessFlagBits"/>
            <type name="VkAccessFlags"/>
            <type name="VkAttachmentDescription"/>
            <type name="VkAttachmentDescriptionFlagBits"/>
            <type name="VkAttachmentDescriptionFlags"/>
            <type name="VkAttachmentLoadOp"/>
            <type name="VkAttachmentReference"/>
            <type name="VkAttachmentStoreOp"/>
            <type name="VkDependencyFlagBits"/>
            <type name="VkDependencyFlags"/>
            <type name="VkFramebuffer"/>
            <type name="VkFramebufferCreateFlagBits"/>
            <type name="VkFramebufferCreateFlags"/>
            <type name="VkFramebufferCreateInfo"/>
            <type name="VkPipelineBindPoint"/>
            <type name="VkRenderPass"/>
            <type name="VkRenderPassCreateFlagBits"/>
            <type name="VkRenderPassCreateFlags"/>
            <type name="VkRenderPassCreateInfo"/>
            <type name="VkSubpassDependency"/>
            <type name="VkSubpassDescription"/>
            <type name="VkSubpassDescriptionFlagBits"/>
            <type name="VkSubpassDescriptionFlags"/>
            <command name="vkCreateFramebuffer"/>
            <command name="vkDestroyFramebuffer"/>
            <command name="vkCreateRenderPass"/>
            <command name="vkDestroyRenderPass"/>
            <command name="vkGetRenderAreaGranularity"/>
        </require>
        <require comment="Command pool commands">
            <type name="VkCommandPool"/>
            <type name="VkCommandPoolCreateFlagBits"/>
            <type name="VkCommandPoolCreateFlags"/>
            <type name="VkCommandPoolCreateInfo"/>
            <type name="VkCommandPoolResetFlagBits"/>
            <type name="VkCommandPoolResetFlags"/>
            <command name="vkCreateCommandPool"/>
            <command name="vkDestroyCommandPool"/>
            <command name="vkResetCommandPool"/>
        </require>
        <require comment="Command buffer commands">
            <type name="VkCommandBuffer"/>
            <type name="VkCommandBufferAllocateInfo"/>
            <type name="VkCommandBufferBeginInfo"/>
            <type name="VkCommandBufferInheritanceInfo"/>
            <type name="VkCommandBufferLevel"/>
            <type name="VkCommandBufferResetFlagBits"/>
            <type name="VkCommandBufferResetFlags"/>
            <type name="VkCommandBufferUsageFlagBits"/>
            <type name="VkCommandBufferUsageFlags"/>
            <type name="VkQueryControlFlagBits"/>
            <type name="VkQueryControlFlags"/>
            <command name="vkAllocateCommandBuffers"/>
            <command name="vkFreeCommandBuffers"/>
            <command name="vkBeginCommandBuffer"/>
            <command name="vkEndCommandBuffer"/>
            <command name="vkResetCommandBuffer"/>
        </require>
        <require comment="Command buffer building commands">
            <type name="VkBufferCopy"/>
            <type name="VkBufferImageCopy"/>
            <type name="VkClearAttachment"/>
            <type name="VkClearColorValue"/>
            <type name="VkClearDepthStencilValue"/>
            <type name="VkClearRect"/>
            <type name="VkClearValue"/>
            <type name="VkImageBlit"/>
            <type name="VkImageCopy"/>
            <type name="VkImageResolve"/>
            <type name="VkImageSubresourceLayers"/>
            <type name="VkIndexType"/>
            <type name="VkRenderPassBeginInfo"/>
            <type name="VkStencilFaceFlagBits"/>
            <type name="VkStencilFaceFlags"/>
            <type name="VkSubpassContents"/>
            <command name="vkCmdBindPipeline"/>
            <command name="vkCmdSetViewport"/>
            <command name="vkCmdSetScissor"/>
            <command name="vkCmdSetLineWidth"/>
            <command name="vkCmdSetDepthBias"/>
            <command name="vkCmdSetBlendConstants"/>
            <command name="vkCmdSetDepthBounds"/>
            <command name="vkCmdSetStencilCompareMask"/>
            <command name="vkCmdSetStencilWriteMask"/>
            <command name="vkCmdSetStencilReference"/>
            <command name="vkCmdBindDescriptorSets"/>
            <command name="vkCmdBindIndexBuffer"/>
            <command name="vkCmdBindVertexBuffers"/>
            <command name="vkCmdDraw"/>
            <command name="vkCmdDrawIndexed"/>
            <command name="vkCmdDrawIndirect"/>
            <command name="vkCmdDrawIndexedIndirect"/>
            <command name="vkCmdDispatch"/>
            <command name="vkCmdDispatchIndirect"/>
            <command name="vkCmdCopyBuffer"/>
            <command name="vkCmdCopyImage"/>
            <command name="vkCmdBlitImage"/>
            <command name="vkCmdCopyBufferToImage"/>
            <command name="vkCmdCopyImageToBuffer"/>
            <command name="vkCmdUpdateBuffer"/>
            <command name="vkCmdFillBuffer"/>
            <command name="vkCmdClearColorImage"/>
            <command name="vkCmdClearDepthStencilImage"/>
            <command name="vkCmdClearAttachments"/>
            <command name="vkCmdResolveImage"/>
            <command name="vkCmdSetEvent"/>
            <command name="vkCmdResetEvent"/>
            <command name="vkCmdWaitEvents"/>
            <command name="vkCmdPipelineBarrier"/>
            <command name="vkCmdBeginQuery"/>
            <command name="vkCmdEndQuery"/>
            <command name="vkCmdResetQueryPool"/>
            <command name="vkCmdWriteTimestamp"/>
            <command name="vkCmdCopyQueryPoolResults"/>
            <command name="vkCmdPushConstants"/>
            <command name="vkCmdBeginRenderPass"/>
            <command name="vkCmdNextSubpass"/>
            <command name="vkCmdEndRenderPass"/>
            <command name="vkCmdExecuteCommands"/>
        </require>
    </feature>
    <feature api="vulkan,vulkansc" name="VK_VERSION_1_1" number="1.1" depends="VK_VERSION_1_0" comment="Vulkan 1.1 core API interface definitions.">
        <require>
            <type name="VK_API_VERSION_1_1"/>
        </require>
        <require comment="Device Initialization">
            <command name="vkEnumerateInstanceVersion"/>
        </require>
        <require comment="Promoted from VK_KHR_relaxed_block_layout, which has no API"/>
        <require comment="Promoted from VK_KHR_storage_buffer_storage_class, which has no API"/>
        <require comment="Originally based on VK_KHR_subgroup (extension 94), but the actual enum block used was, incorrectly, that of extension 95">
            <enum extends="VkStructureType" extnumber="95"  offset="0"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES"/>
            <type                                       name="VkPhysicalDeviceSubgroupProperties"/>
            <type                                       name="VkSubgroupFeatureFlags"/>
            <type                                       name="VkSubgroupFeatureFlagBits"/>
        </require>
        <require comment="Promoted from VK_KHR_bind_memory2">
            <command name="vkBindBufferMemory2"/>
            <command name="vkBindImageMemory2"/>
            <enum extends="VkStructureType" extnumber="158" offset="0"          name="VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO"/>
            <enum extends="VkStructureType" extnumber="158" offset="1"          name="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO"/>
            <enum bitpos="10" extends="VkImageCreateFlagBits"                   name="VK_IMAGE_CREATE_ALIAS_BIT"/>
            <type name="VkBindBufferMemoryInfo"/>
            <type name="VkBindImageMemoryInfo"/>
        </require>
        <require comment="Promoted from VK_KHR_16bit_storage">
            <enum extends="VkStructureType" extnumber="84"  offset="0"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES"/>
            <type name="VkPhysicalDevice16BitStorageFeatures"/>
        </require>
        <require depends="VkPhysicalDevice16BitStorageFeatures::uniformAndStorageBuffer16BitAccess">
            <feature name="storageBuffer16BitAccess" struct="VkPhysicalDevice16BitStorageFeatures"/>
        </require>
        <require comment="Promoted from VK_KHR_dedicated_allocation">
            <enum extends="VkStructureType" extnumber="128" offset="0"          name="VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS"/>
            <enum extends="VkStructureType" extnumber="128" offset="1"          name="VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO"/>
            <type name="VkMemoryDedicatedRequirements"/>
            <type name="VkMemoryDedicatedAllocateInfo"/>
        </require>
        <require comment="Promoted from VK_KHR_device_group">
            <enum extends="VkStructureType" extnumber="61"  offset="0"          name="VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO"/>
            <comment>offset 1 reserved for the old VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHX enum</comment>
            <comment>offset 2 reserved for the old VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHX enum</comment>
            <enum extends="VkStructureType" extnumber="61"  offset="3"          name="VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO"/>
            <enum extends="VkStructureType" extnumber="61"  offset="4"          name="VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO"/>
            <enum extends="VkStructureType" extnumber="61"  offset="5"          name="VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO"/>
            <enum extends="VkStructureType" extnumber="61"  offset="6"          name="VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO"/>
            <type name="VkPeerMemoryFeatureFlags"/>
            <type name="VkPeerMemoryFeatureFlagBits"/>
            <type name="VkMemoryAllocateFlags"/>
            <type name="VkMemoryAllocateFlagBits"/>
            <type name="VkMemoryAllocateFlagsInfo"/>
            <type name="VkDeviceGroupRenderPassBeginInfo"/>
            <type name="VkDeviceGroupCommandBufferBeginInfo"/>
            <type name="VkDeviceGroupSubmitInfo"/>
            <type name="VkDeviceGroupBindSparseInfo"/>
            <command name="vkGetDeviceGroupPeerMemoryFeatures"/>
            <command name="vkCmdSetDeviceMask"/>
            <command name="vkCmdDispatchBase"/>
            <enum bitpos="3"  extends="VkPipelineCreateFlagBits"                name="VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT"/>
            <enum bitpos="4"  extends="VkPipelineCreateFlagBits"                name="VK_PIPELINE_CREATE_DISPATCH_BASE_BIT"/>
            <enum extends="VkPipelineCreateFlagBits"                            name="VK_PIPELINE_CREATE_DISPATCH_BASE" alias="VK_PIPELINE_CREATE_DISPATCH_BASE_BIT"/>
            <enum bitpos="2"  extends="VkDependencyFlagBits"                    name="VK_DEPENDENCY_DEVICE_GROUP_BIT" comment="Dependency is across devices"/>
        </require>
        <require comment="Promoted from VK_KHR_device_group + VK_KHR_bind_memory2">
            <enum extends="VkStructureType" extnumber="61"  offset="13"         name="VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO"/>
            <enum extends="VkStructureType" extnumber="61"  offset="14"         name="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO"/>
            <type name="VkBindBufferMemoryDeviceGroupInfo"/>
            <type name="VkBindImageMemoryDeviceGroupInfo"/>
            <enum bitpos="6"  extends="VkImageCreateFlagBits"                   name="VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT" comment="Allows using VkBindImageMemoryDeviceGroupInfo::pSplitInstanceBindRegions when binding memory to the image"/>
        </require>
        <require comment="Promoted from VK_KHR_device_group_creation">
            <enum extends="VkStructureType" extnumber="71"  offset="0"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES"/>
            <enum extends="VkStructureType" extnumber="71"  offset="1"          name="VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO"/>
            <enum name="VK_MAX_DEVICE_GROUP_SIZE"/>
            <type name="VkPhysicalDeviceGroupProperties"/>
            <type name="VkDeviceGroupDeviceCreateInfo"/>
            <command name="vkEnumeratePhysicalDeviceGroups"/>
            <enum bitpos="1"  extends="VkMemoryHeapFlagBits"                    name="VK_MEMORY_HEAP_MULTI_INSTANCE_BIT" comment="If set, heap allocations allocate multiple instances by default"/>
        </require>
        <require comment="Promoted from VK_KHR_get_memory_requirements2">
            <enum extends="VkStructureType" extnumber="147" offset="0"          name="VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2"/>
            <enum extends="VkStructureType" extnumber="147" offset="1"          name="VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2"/>
            <enum extends="VkStructureType" extnumber="147" offset="2"          name="VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2"/>
            <enum extends="VkStructureType" extnumber="147" offset="3"          name="VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2"/>
            <enum extends="VkStructureType" extnumber="147" offset="4"          name="VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2"/>
            <type name="VkBufferMemoryRequirementsInfo2"/>
            <type name="VkImageMemoryRequirementsInfo2"/>
            <type name="VkImageSparseMemoryRequirementsInfo2"/>
            <type name="VkMemoryRequirements2"/>
            <type name="VkSparseImageMemoryRequirements2"/>
            <command name="vkGetImageMemoryRequirements2"/>
            <command name="vkGetBufferMemoryRequirements2"/>
            <command name="vkGetImageSparseMemoryRequirements2"/>
        </require>
        <require comment="Promoted from VK_KHR_get_physical_device_properties2">
            <enum extends="VkStructureType" extnumber="60"  offset="0"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2"/>
            <enum extends="VkStructureType" extnumber="60"  offset="1"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2"/>
            <enum extends="VkStructureType" extnumber="60"  offset="2"          name="VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2"/>
            <enum extends="VkStructureType" extnumber="60"  offset="3"          name="VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2"/>
            <enum extends="VkStructureType" extnumber="60"  offset="4"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2"/>
            <enum extends="VkStructureType" extnumber="60"  offset="5"          name="VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2"/>
            <enum extends="VkStructureType" extnumber="60"  offset="6"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2"/>
            <enum extends="VkStructureType" extnumber="60"  offset="7"          name="VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2"/>
            <enum extends="VkStructureType" extnumber="60"  offset="8"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2"/>
            <type name="VkPhysicalDeviceFeatures2"/>
            <type name="VkPhysicalDeviceProperties2"/>
            <type name="VkFormatProperties2"/>
            <type name="VkImageFormatProperties2"/>
            <type name="VkPhysicalDeviceImageFormatInfo2"/>
            <type name="VkQueueFamilyProperties2"/>
            <type name="VkPhysicalDeviceMemoryProperties2"/>
            <type name="VkSparseImageFormatProperties2"/>
            <type name="VkPhysicalDeviceSparseImageFormatInfo2"/>
            <command name="vkGetPhysicalDeviceFeatures2"/>
            <command name="vkGetPhysicalDeviceProperties2"/>
            <command name="vkGetPhysicalDeviceFormatProperties2"/>
            <command name="vkGetPhysicalDeviceImageFormatProperties2"/>
            <command name="vkGetPhysicalDeviceQueueFamilyProperties2"/>
            <command name="vkGetPhysicalDeviceMemoryProperties2"/>
            <command name="vkGetPhysicalDeviceSparseImageFormatProperties2"/>
        </require>
        <require comment="Promoted from VK_KHR_maintenance1">
            <enum extends="VkResult"        extnumber="70"  offset="0"  dir="-" name="VK_ERROR_OUT_OF_POOL_MEMORY"/>
            <enum bitpos="14" extends="VkFormatFeatureFlagBits"                 name="VK_FORMAT_FEATURE_TRANSFER_SRC_BIT" comment="Format can be used as the source image of image transfer commands"/>
            <enum bitpos="15" extends="VkFormatFeatureFlagBits"                 name="VK_FORMAT_FEATURE_TRANSFER_DST_BIT" comment="Format can be used as the destination image of image transfer commands"/>
            <enum bitpos="5"  extends="VkImageCreateFlagBits"                   name="VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT" comment="The 3D image can be viewed as a 2D or 2D array image"/>
            <command name="vkTrimCommandPool"/>
            <comment>Additional dependent types / tokens extending enumerants, not explicitly mentioned</comment>
            <type name="VkCommandPoolTrimFlags"/>
        </require>
        <require comment="Promoted from VK_KHR_maintenance2">
            <enum bitpos="7"  extends="VkImageCreateFlagBits"                   name="VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT"/>
            <enum bitpos="8"  extends="VkImageCreateFlagBits"                   name="VK_IMAGE_CREATE_EXTENDED_USAGE_BIT"/>
            <enum extends="VkStructureType" extnumber="118" offset="0"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES"/>
            <enum extends="VkStructureType" extnumber="118" offset="1"          name="VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO"/>
            <enum extends="VkStructureType" extnumber="118" offset="2"          name="VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO"/>
            <enum extends="VkStructureType" extnumber="118" offset="3"          name="VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO"/>
            <enum extends="VkImageLayout"   extnumber="118" offset="0"          name="VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL"/>
            <enum extends="VkImageLayout"   extnumber="118" offset="1"          name="VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL"/>
            <type name="VkPhysicalDevicePointClippingProperties"/>
            <type name="VkPointClippingBehavior"/>
            <type name="VkRenderPassInputAttachmentAspectCreateInfo"/>
            <type name="VkInputAttachmentAspectReference"/>
            <type name="VkImageViewUsageCreateInfo"/>
            <type name="VkTessellationDomainOrigin"/>
            <type name="VkPipelineTessellationDomainOriginStateCreateInfo"/>
        </require>
        <require comment="Promoted from VK_KHR_multiview">
            <enum extends="VkStructureType" extnumber="54"  offset="0"          name="VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO"/>
            <enum extends="VkStructureType" extnumber="54"  offset="1"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES"/>
            <enum extends="VkStructureType" extnumber="54"  offset="2"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES"/>
            <enum bitpos="1"  extends="VkDependencyFlagBits"                    name="VK_DEPENDENCY_VIEW_LOCAL_BIT"/>
            <type name="VkRenderPassMultiviewCreateInfo"/>
            <type name="VkPhysicalDeviceMultiviewFeatures"/>
            <type name="VkPhysicalDeviceMultiviewProperties"/>
            <feature name="multiview" struct="VkPhysicalDeviceMultiviewFeatures"/>
        </require>
        <require comment="Promoted from VK_KHR_variable_pointers">
            <enum extends="VkStructureType" extnumber="121" offset="0"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES"/>
            <enum api="vulkan" extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES"/>
            <type name="VkPhysicalDeviceVariablePointerFeatures"/>
            <type name="VkPhysicalDeviceVariablePointersFeatures"/>
        </require>
        <require comment="Originally based on VK_KHR_protected_memory (extension 146), which was never published; thus the mystifying large value= numbers below. These are not aliased since they were not actually promoted from an extension.">
            <enum extends="VkStructureType" extnumber="146" offset="0"          name="VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO"/>
            <enum extends="VkStructureType" extnumber="146" offset="1"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES"/>
            <enum extends="VkStructureType" extnumber="146" offset="2"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES"/>
            <enum extends="VkStructureType" extnumber="146" offset="3"          name="VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2"/>
            <enum bitpos="4"  extends="VkQueueFlagBits"                         name="VK_QUEUE_PROTECTED_BIT" comment="Queues may support protected operations"/>
            <enum bitpos="0"  extends="VkDeviceQueueCreateFlagBits"             name="VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT" comment="Queue is a protected-capable device queue"/>
            <type name="VkDeviceQueueCreateFlagBits" comment="This is a temporary workaround for processors not recognizing that VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT above also requires this type"/>
            <enum bitpos="5"  extends="VkMemoryPropertyFlagBits"                name="VK_MEMORY_PROPERTY_PROTECTED_BIT" comment="Memory is protected"/>
            <enum bitpos="3"  extends="VkBufferCreateFlagBits"                  name="VK_BUFFER_CREATE_PROTECTED_BIT" comment="Buffer requires protected memory"/>
            <enum bitpos="11" extends="VkImageCreateFlagBits"                   name="VK_IMAGE_CREATE_PROTECTED_BIT" comment="Image requires protected memory"/>
            <enum bitpos="2"  extends="VkCommandPoolCreateFlagBits"             name="VK_COMMAND_POOL_CREATE_PROTECTED_BIT" comment="Command buffers allocated from pool are protected command buffers"/>
            <type name="VkPhysicalDeviceProtectedMemoryFeatures"/>
            <type name="VkPhysicalDeviceProtectedMemoryProperties"/>
            <type name="VkDeviceQueueInfo2"/>
            <type name="VkProtectedSubmitInfo"/>
            <command name="vkGetDeviceQueue2"/>
        </require>
        <require comment="Promoted from VK_KHR_sampler_ycbcr_conversion">
            <enum extends="VkStructureType" extnumber="157" offset="0"          name="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO"/>
            <enum extends="VkStructureType" extnumber="157" offset="1"          name="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO"/>
            <enum extends="VkStructureType" extnumber="157" offset="2"          name="VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO"/>
            <enum extends="VkStructureType" extnumber="157" offset="3"          name="VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO"/>
            <enum extends="VkStructureType" extnumber="157" offset="4"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES"/>
            <enum extends="VkStructureType" extnumber="157" offset="5"          name="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES"/>
            <enum extends="VkObjectType"    extnumber="157" offset="0"          name="VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION"/>
            <enum extends="VkFormat"        extnumber="157" offset="0"          name="VK_FORMAT_G8B8G8R8_422_UNORM"/>
            <enum extends="VkFormat"        extnumber="157" offset="1"          name="VK_FORMAT_B8G8R8G8_422_UNORM"/>
            <enum extends="VkFormat"        extnumber="157" offset="2"          name="VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM"/>
            <enum extends="VkFormat"        extnumber="157" offset="3"          name="VK_FORMAT_G8_B8R8_2PLANE_420_UNORM"/>
            <enum extends="VkFormat"        extnumber="157" offset="4"          name="VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM"/>
            <enum extends="VkFormat"        extnumber="157" offset="5"          name="VK_FORMAT_G8_B8R8_2PLANE_422_UNORM"/>
            <enum extends="VkFormat"        extnumber="157" offset="6"          name="VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM"/>
            <enum extends="VkFormat"        extnumber="157" offset="7"          name="VK_FORMAT_R10X6_UNORM_PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="8"          name="VK_FORMAT_R10X6G10X6_UNORM_2PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="9"          name="VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="10"         name="VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="11"         name="VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="12"         name="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="13"         name="VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="14"         name="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="15"         name="VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="16"         name="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="17"         name="VK_FORMAT_R12X4_UNORM_PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="18"         name="VK_FORMAT_R12X4G12X4_UNORM_2PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="19"         name="VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="20"         name="VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="21"         name="VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="22"         name="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="23"         name="VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="24"         name="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="25"         name="VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="26"         name="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16"/>
            <enum extends="VkFormat"        extnumber="157" offset="27"         name="VK_FORMAT_G16B16G16R16_422_UNORM"/>
            <enum extends="VkFormat"        extnumber="157" offset="28"         name="VK_FORMAT_B16G16R16G16_422_UNORM"/>
            <enum extends="VkFormat"        extnumber="157" offset="29"         name="VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM"/>
            <enum extends="VkFormat"        extnumber="157" offset="30"         name="VK_FORMAT_G16_B16R16_2PLANE_420_UNORM"/>
            <enum extends="VkFormat"        extnumber="157" offset="31"         name="VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM"/>
            <enum extends="VkFormat"        extnumber="157" offset="32"         name="VK_FORMAT_G16_B16R16_2PLANE_422_UNORM"/>
            <enum extends="VkFormat"        extnumber="157" offset="33"         name="VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM"/>
            <enum bitpos="4"  extends="VkImageAspectFlagBits"                   name="VK_IMAGE_ASPECT_PLANE_0_BIT"/>
            <enum bitpos="5"  extends="VkImageAspectFlagBits"                   name="VK_IMAGE_ASPECT_PLANE_1_BIT"/>
            <enum bitpos="6"  extends="VkImageAspectFlagBits"                   name="VK_IMAGE_ASPECT_PLANE_2_BIT"/>
            <enum bitpos="9"  extends="VkImageCreateFlagBits"                   name="VK_IMAGE_CREATE_DISJOINT_BIT"/>
            <enum bitpos="17" extends="VkFormatFeatureFlagBits"                 name="VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT" comment="Format can have midpoint rather than cosited chroma samples"/>
            <enum bitpos="18" extends="VkFormatFeatureFlagBits"                 name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT" comment="Format can be used with linear filtering whilst color conversion is enabled"/>
            <enum bitpos="19" extends="VkFormatFeatureFlagBits"                 name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT" comment="Format can have different chroma, min and mag filters"/>
            <enum bitpos="20" extends="VkFormatFeatureFlagBits"                 name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT"/>
            <enum bitpos="21" extends="VkFormatFeatureFlagBits"                 name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT"/>
            <enum bitpos="22" extends="VkFormatFeatureFlagBits"                 name="VK_FORMAT_FEATURE_DISJOINT_BIT" comment="Format supports disjoint planes"/>
            <enum bitpos="23" extends="VkFormatFeatureFlagBits"                 name="VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT" comment="Format can have cosited rather than midpoint chroma samples"/>
            <type name="VkSamplerYcbcrConversionCreateInfo"/>
            <type name="VkSamplerYcbcrConversionInfo"/>
            <type name="VkBindImagePlaneMemoryInfo"/>
            <type name="VkImagePlaneMemoryRequirementsInfo"/>
            <type name="VkPhysicalDeviceSamplerYcbcrConversionFeatures"/>
            <type name="VkSamplerYcbcrConversionImageFormatProperties"/>
            <command name="vkCreateSamplerYcbcrConversion"/>
            <command name="vkDestroySamplerYcbcrConversion"/>
            <comment>Additional dependent types / tokens extending enumerants, not explicitly mentioned</comment>
            <type name="VkSamplerYcbcrConversion"/>
            <type name="VkSamplerYcbcrModelConversion"/>
            <type name="VkSamplerYcbcrRange"/>
            <type name="VkChromaLocation"/>
        </require>
        <require comment="Promoted from VK_KHR_descriptor_update_template">
            <enum extends="VkStructureType" extnumber="86"  offset="0"          name="VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO"/>
            <enum extends="VkObjectType"    extnumber="86"  offset="0"          name="VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE"/>
            <command name="vkCreateDescriptorUpdateTemplate"/>
            <command name="vkDestroyDescriptorUpdateTemplate"/>
            <command name="vkUpdateDescriptorSetWithTemplate"/>
            <type name="VkDescriptorUpdateTemplate"/>
            <type name="VkDescriptorUpdateTemplateCreateFlags"/>
            <type name="VkDescriptorUpdateTemplateType"/>
            <type name="VkDescriptorUpdateTemplateEntry"/>
            <type name="VkDescriptorUpdateTemplateCreateInfo"/>
        </require>
        <require comment="Promoted from VK_KHR_external_memory_capabilities">
            <enum extends="VkStructureType" extnumber="72"  offset="0"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO"/>
            <enum extends="VkStructureType" extnumber="72"  offset="1"          name="VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES"/>
            <enum extends="VkStructureType" extnumber="72"  offset="2"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO"/>
            <enum extends="VkStructureType" extnumber="72"  offset="3"          name="VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES"/>
            <enum extends="VkStructureType" extnumber="72"  offset="4"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES"/>
            <enum name="VK_LUID_SIZE"/>
            <type name="VkExternalMemoryHandleTypeFlags"/>
            <type name="VkExternalMemoryHandleTypeFlagBits"/>
            <type name="VkExternalMemoryFeatureFlags"/>
            <type name="VkExternalMemoryFeatureFlagBits"/>
            <type name="VkExternalMemoryProperties"/>
            <type name="VkPhysicalDeviceExternalImageFormatInfo"/>
            <type name="VkExternalImageFormatProperties"/>
            <type name="VkPhysicalDeviceExternalBufferInfo"/>
            <type name="VkExternalBufferProperties"/>
            <type name="VkPhysicalDeviceIDProperties"/>
            <command name="vkGetPhysicalDeviceExternalBufferProperties"/>
        </require>
        <require comment="Promoted from VK_KHR_external_memory">
            <enum extends="VkStructureType" extnumber="73"  offset="0"          name="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO"/>
            <enum extends="VkStructureType" extnumber="73"  offset="1"          name="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO"/>
            <enum extends="VkStructureType" extnumber="73"  offset="2"          name="VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO"/>
            <enum extends="VkResult"        extnumber="73"  offset="3"  dir="-" name="VK_ERROR_INVALID_EXTERNAL_HANDLE"/>
            <enum name="VK_QUEUE_FAMILY_EXTERNAL"/>
            <type name="VkExternalMemoryImageCreateInfo"/>
            <type name="VkExternalMemoryBufferCreateInfo"/>
            <type name="VkExportMemoryAllocateInfo"/>
        </require>
        <require comment="Promoted from VK_KHR_external_fence_capabilities">
            <enum extends="VkStructureType" extnumber="113" offset="0"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO"/>
            <enum extends="VkStructureType" extnumber="113" offset="1"          name="VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES"/>
            <type name="VkExternalFenceHandleTypeFlags"/>
            <type name="VkExternalFenceHandleTypeFlagBits"/>
            <type name="VkExternalFenceFeatureFlags"/>
            <type name="VkExternalFenceFeatureFlagBits"/>
            <type name="VkPhysicalDeviceExternalFenceInfo"/>
            <type name="VkExternalFenceProperties"/>
            <command name="vkGetPhysicalDeviceExternalFenceProperties"/>
        </require>
        <require comment="Promoted from VK_KHR_external_fence">
            <enum extends="VkStructureType" extnumber="114" offset="0"          name="VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO"/>
            <type name="VkFenceImportFlags"/>
            <type name="VkFenceImportFlagBits"/>
            <type name="VkExportFenceCreateInfo"/>
        </require>
        <require comment="Promoted from VK_KHR_external_semaphore">
            <enum extends="VkStructureType" extnumber="78"  offset="0"          name="VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO"/>
            <type name="VkSemaphoreImportFlags"/>
            <type name="VkSemaphoreImportFlagBits"/>
            <type name="VkExportSemaphoreCreateInfo"/>
        </require>
        <require comment="Promoted from VK_KHR_external_semaphore_capabilities">
            <enum extends="VkStructureType" extnumber="77"  offset="0"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO"/>
            <enum extends="VkStructureType" extnumber="77"  offset="1"          name="VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES"/>
            <type name="VkExternalSemaphoreHandleTypeFlags"/>
            <type name="VkExternalSemaphoreHandleTypeFlagBits"/>
            <type name="VkExternalSemaphoreFeatureFlags"/>
            <type name="VkExternalSemaphoreFeatureFlagBits"/>
            <type name="VkPhysicalDeviceExternalSemaphoreInfo"/>
            <type name="VkExternalSemaphoreProperties"/>
            <command name="vkGetPhysicalDeviceExternalSemaphoreProperties"/>
        </require>
        <require comment="Promoted from VK_KHR_maintenance3">
            <enum extends="VkStructureType" extnumber="169" offset="0"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES"/>
            <enum extends="VkStructureType" extnumber="169" offset="1"          name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT"/>
            <type name="VkPhysicalDeviceMaintenance3Properties"/>
            <type name="VkDescriptorSetLayoutSupport"/>
            <command name="vkGetDescriptorSetLayoutSupport"/>
        </require>
        <require comment="Promoted from VK_KHR_shader_draw_parameters, with a feature support query added">
            <enum extends="VkStructureType" extnumber="64"  offset="0"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES"/>
            <enum api="vulkan" extends="VkStructureType"                                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES"/>
            <type name="VkPhysicalDeviceShaderDrawParameterFeatures"/>
            <type name="VkPhysicalDeviceShaderDrawParametersFeatures"/>
        </require>
        <require depends="VK_KHR_shader_draw_parameters">
            <feature name="shaderDrawParameters" struct="VkPhysicalDeviceShaderDrawParametersFeatures"/>
        </require>
    </feature>
    <feature api="vulkan,vulkansc" name="VK_VERSION_1_2" number="1.2" depends="VK_VERSION_1_1" comment="Vulkan 1.2 core API interface definitions.">
        <require>
            <type name="VK_API_VERSION_1_2"/>
        </require>
        <require>
            <enum extends="VkStructureType" value="49" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES"/>
            <enum extends="VkStructureType" value="50" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES"/>
            <enum extends="VkStructureType" value="51" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES"/>
            <enum extends="VkStructureType" value="52" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES"/>
            <type name="VkPhysicalDeviceVulkan11Features"/>
            <type name="VkPhysicalDeviceVulkan11Properties"/>
            <type name="VkPhysicalDeviceVulkan12Features"/>
            <type name="VkPhysicalDeviceVulkan12Properties"/>
            <feature name="subgroupBroadcastDynamicId" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>
        <require comment="Promoted from VK_KHR_image_format_list (extension 148)">
            <enum offset="0" extends="VkStructureType"  extnumber="148"         name="VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO"/>
            <type name="VkImageFormatListCreateInfo"/>
        </require>
        <require comment="Promoted from VK_KHR_sampler_mirror_clamp_to_edge (extension 15)">
            <enum value="4" extends="VkSamplerAddressMode"                      name="VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE" comment="No need to add an extnumber attribute, since this uses a core enum value"/>
        </require>
        <require depends="VK_KHR_sampler_mirror_clamp_to_edge">
            <feature name="samplerMirrorClampToEdge" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>
        <require comment="Promoted from VK_KHR_draw_indirect_count (extension 170)">
            <command name="vkCmdDrawIndirectCount"/>
            <command name="vkCmdDrawIndexedIndirectCount"/>
        </require>
        <require depends="VK_KHR_draw_indirect_count">
            <feature name="drawIndirectCount" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>
        <require comment="Promoted from VK_KHR_create_renderpass2 (extension 110)">
            <enum offset="0" extends="VkStructureType" extnumber="110"          name="VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2"/>
            <enum offset="1" extends="VkStructureType" extnumber="110"          name="VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2"/>
            <enum offset="2" extends="VkStructureType" extnumber="110"          name="VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2"/>
            <enum offset="3" extends="VkStructureType" extnumber="110"          name="VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2"/>
            <enum offset="4" extends="VkStructureType" extnumber="110"          name="VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2"/>
            <enum offset="5" extends="VkStructureType" extnumber="110"          name="VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO"/>
            <enum offset="6" extends="VkStructureType" extnumber="110"          name="VK_STRUCTURE_TYPE_SUBPASS_END_INFO"/>
            <command name="vkCreateRenderPass2"/>
            <command name="vkCmdBeginRenderPass2"/>
            <command name="vkCmdNextSubpass2"/>
            <command name="vkCmdEndRenderPass2"/>
            <type name="VkRenderPassCreateInfo2"/>
            <type name="VkAttachmentDescription2"/>
            <type name="VkAttachmentReference2"/>
            <type name="VkSubpassDescription2"/>
            <type name="VkSubpassDependency2"/>
            <type name="VkSubpassBeginInfo"/>
            <type name="VkSubpassEndInfo"/>
        </require>
        <require comment="Promoted from VK_KHR_8bit_storage (extension 178)">
            <enum offset="0" extends="VkStructureType" extnumber="178"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES"/>
            <type name="VkPhysicalDevice8BitStorageFeatures"/>
        </require>
        <require depends="VkPhysicalDevice8BitStorageFeatures::uniformAndStorageBuffer8BitAccess">
            <feature name="storageBuffer8BitAccess" struct="VkPhysicalDevice8BitStorageFeatures"/>
            <feature name="storageBuffer8BitAccess" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>
        <require comment="Promoted from VK_KHR_driver_properties (extension 197)">
            <enum offset="0" extends="VkStructureType" extnumber="197"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES"/>
            <enum name="VK_MAX_DRIVER_NAME_SIZE"/>
            <enum name="VK_MAX_DRIVER_INFO_SIZE"/>
            <type name="VkDriverId"/>
            <type name="VkConformanceVersion"/>
            <type name="VkPhysicalDeviceDriverProperties"/>
        </require>
        <require comment="Promoted from VK_KHR_shader_atomic_int64 (extension 181)">
            <enum offset="0" extends="VkStructureType" extnumber="181"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES"/>
            <type name="VkPhysicalDeviceShaderAtomicInt64Features"/>
        </require>
        <require depends="VkPhysicalDeviceShaderAtomicInt64Features::shaderSharedInt64Atomics,VkPhysicalDeviceShaderAtomicInt64Features::shaderBufferInt64Atomics">
            <feature name="shaderInt64" struct="VkPhysicalDeviceFeatures"/>
        </require>
        <require comment="Promoted from VK_KHR_shader_float16_int8 (extension 83)">
            <enum offset="0" extends="VkStructureType" extnumber="83"           name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES"/>
            <type name="VkPhysicalDeviceShaderFloat16Int8Features"/>
        </require>
        <require comment="Promoted from VK_KHR_shader_float_controls (extension 198)">
            <enum offset="0" extends="VkStructureType" extnumber="198"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES"/>
            <type name="VkPhysicalDeviceFloatControlsProperties"/>
            <type name="VkShaderFloatControlsIndependence"/>
        </require>
        <require comment="Promoted from VK_EXT_descriptor_indexing (extension 162)">
            <enum offset="0" extends="VkStructureType" extnumber="162"          name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO"/>
            <enum offset="1" extends="VkStructureType" extnumber="162"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES"/>
            <enum offset="2" extends="VkStructureType" extnumber="162"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES"/>
            <enum offset="3" extends="VkStructureType" extnumber="162"          name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO"/>
            <enum offset="4" extends="VkStructureType" extnumber="162"          name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT"/>
            <enum bitpos="1" extends="VkDescriptorPoolCreateFlagBits"           name="VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT"/>
            <enum bitpos="1" extends="VkDescriptorSetLayoutCreateFlagBits"      name="VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT"/>
            <enum offset="0" dir="-" extends="VkResult" extnumber="162"         name="VK_ERROR_FRAGMENTATION"/>
            <type name="VkDescriptorSetLayoutBindingFlagsCreateInfo"/>
            <type name="VkPhysicalDeviceDescriptorIndexingFeatures"/>
            <type name="VkPhysicalDeviceDescriptorIndexingProperties"/>
            <type name="VkDescriptorSetVariableDescriptorCountAllocateInfo"/>
            <type name="VkDescriptorSetVariableDescriptorCountLayoutSupport"/>
            <type name="VkDescriptorBindingFlagBits"/>
            <type name="VkDescriptorBindingFlags"/>
        </require>
        <require depends="VK_EXT_descriptor_indexing">
            <feature name="descriptorIndexing" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>
        <require depends="VkPhysicalDeviceVulkan12Features::descriptorIndexing">
            <feature name="shaderSampledImageArrayDynamicIndexing" struct="VkPhysicalDeviceFeatures"/>
            <feature name="shaderStorageBufferArrayDynamicIndexing" struct="VkPhysicalDeviceFeatures"/>
            <feature name="shaderUniformTexelBufferArrayDynamicIndexing" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="shaderStorageTexelBufferArrayDynamicIndexing" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="shaderSampledImageArrayNonUniformIndexing" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="shaderStorageBufferArrayNonUniformIndexing" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="shaderUniformTexelBufferArrayNonUniformIndexing" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="descriptorBindingSampledImageUpdateAfterBind" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="descriptorBindingStorageImageUpdateAfterBind" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="descriptorBindingStorageBufferUpdateAfterBind" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="descriptorBindingUniformTexelBufferUpdateAfterBind" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="descriptorBindingStorageTexelBufferUpdateAfterBind" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="descriptorBindingUpdateUnusedWhilePending" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="descriptorBindingPartiallyBound" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="runtimeDescriptorArray" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>
        <require comment="Promoted from VK_KHR_depth_stencil_resolve (extension 200)">
            <enum offset="0" extends="VkStructureType" extnumber="200"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES"/>
            <enum offset="1" extends="VkStructureType" extnumber="200"          name="VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE"/>
            <type name="VkSubpassDescriptionDepthStencilResolve"/>
            <type name="VkPhysicalDeviceDepthStencilResolveProperties"/>
            <type name="VkResolveModeFlagBits"/>
            <type name="VkResolveModeFlags"/>
        </require>
        <require comment="Promoted from VK_EXT_scalar_block_layout (extension 222))">
            <type                                                               name="VkPhysicalDeviceScalarBlockLayoutFeatures"/>
            <enum offset="0" extends="VkStructureType" extnumber="222"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES"/>
        </require>
        <require comment="Promoted from VK_EXT_shader_viewport_index_layer, which has no API (extension 163)"/>
        <require depends="VK_EXT_shader_viewport_index_layer">
            <feature name="shaderOutputViewportIndex" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="shaderOutputLayer" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>
        <require comment="Promoted from VK_EXT_separate_stencil_usage (extension 247)">
            <enum offset="0" extends="VkStructureType" extnumber="247"          name="VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO"/>
            <type name="VkImageStencilUsageCreateInfo"/>
        </require>
        <require comment="Promoted from VK_EXT_sampler_filter_minmax (extension 131)">
            <enum offset="0" extends="VkStructureType" extnumber="131"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES"/>
            <enum offset="1" extends="VkStructureType" extnumber="131"          name="VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO"/>
            <enum bitpos="16" extends="VkFormatFeatureFlagBits"                 name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT" comment="Format can be used with min/max reduction filtering"/>
            <type name="VkSamplerReductionMode"/>
            <type name="VkSamplerReductionModeCreateInfo"/>
            <type name="VkPhysicalDeviceSamplerFilterMinmaxProperties"/>
        </require>
        <require depends="VK_EXT_sampler_filter_minmax">
            <feature name="samplerFilterMinmax" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>
        <require comment="Promoted from VK_KHR_vulkan_memory_model (extension 212)">
            <enum offset="0" extends="VkStructureType" extnumber="212"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES"/>
            <type name="VkPhysicalDeviceVulkanMemoryModelFeatures"/>
        </require>
        <require comment="Promoted from VK_KHR_imageless_framebuffer (extension 109)">
            <type name="VkPhysicalDeviceImagelessFramebufferFeatures"/>
            <type name="VkFramebufferAttachmentsCreateInfo"/>
            <type name="VkFramebufferAttachmentImageInfo"/>
            <type name="VkRenderPassAttachmentBeginInfo"/>
            <enum offset="0" extends="VkStructureType" extnumber="109"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES"/>
            <enum offset="1" extends="VkStructureType" extnumber="109"          name="VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO"/>
            <enum offset="2" extends="VkStructureType" extnumber="109"          name="VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO"/>
            <enum offset="3" extends="VkStructureType" extnumber="109"          name="VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO"/>
            <enum bitpos="0" extends="VkFramebufferCreateFlagBits"              name="VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT"/>
            <feature name="imagelessFramebuffer" struct="VkPhysicalDeviceImagelessFramebufferFeatures"/>
            <feature name="imagelessFramebuffer" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>
        <require comment="Promoted from VK_KHR_uniform_buffer_standard_layout (extension 254)">
            <type name="VkPhysicalDeviceUniformBufferStandardLayoutFeatures"/>
            <enum offset="0" extends="VkStructureType" extnumber="254"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES"/>
            <feature name="uniformBufferStandardLayout" struct="VkPhysicalDeviceUniformBufferStandardLayoutFeatures"/>
            <feature name="uniformBufferStandardLayout" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>
        <require comment="Promoted from VK_KHR_shader_subgroup_extended_types (extension 176)">
            <enum offset="0" extends="VkStructureType" extnumber="176"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES"/>
            <type name="VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures"/>
            <feature name="shaderSubgroupExtendedTypes" struct="VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures"/>
            <feature name="shaderSubgroupExtendedTypes" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>
        <require comment="Promoted from VK_KHR_spirv_1_4 (extension 237)">
        </require>
        <require comment="Promoted from VK_KHR_separate_depth_stencil_layouts (extension 242)">
            <enum offset="0" extends="VkStructureType" extnumber="242"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES"/>
            <enum offset="1" extends="VkStructureType" extnumber="242"          name="VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT"/>
            <enum offset="2" extends="VkStructureType" extnumber="242"          name="VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT"/>
            <enum offset="0" extends="VkImageLayout"   extnumber="242"          name="VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL"/>
            <enum offset="1" extends="VkImageLayout"   extnumber="242"          name="VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL"/>
            <enum offset="2" extends="VkImageLayout"   extnumber="242"          name="VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL"/>
            <enum offset="3" extends="VkImageLayout"   extnumber="242"          name="VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL"/>
            <type name="VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures"/>
            <type name="VkAttachmentReferenceStencilLayout"/>
            <type name="VkAttachmentDescriptionStencilLayout"/>
            <feature name="separateDepthStencilLayouts" struct="VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures"/>
            <feature name="separateDepthStencilLayouts" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>
        <require comment="Promoted from VK_EXT_host_query_reset (extension 262)">
            <enum offset="0" extends="VkStructureType" extnumber="262"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES"/>
            <type name="VkPhysicalDeviceHostQueryResetFeatures"/>
            <command name="vkResetQueryPool"/>
            <feature name="hostQueryReset" struct="VkPhysicalDeviceHostQueryResetFeatures"/>
            <feature name="hostQueryReset" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>
        <require comment="Promoted from VK_KHR_timeline_semaphore (extension 208)">
            <enum offset="0" extends="VkStructureType" extnumber="208"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES"/>
            <enum offset="1" extends="VkStructureType" extnumber="208"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES"/>
            <enum offset="2" extends="VkStructureType" extnumber="208"          name="VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO"/>
            <enum offset="3" extends="VkStructureType" extnumber="208"          name="VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO"/>
            <enum offset="4" extends="VkStructureType" extnumber="208"          name="VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO"/>
            <enum offset="5" extends="VkStructureType" extnumber="208"          name="VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO"/>
            <type name="VkSemaphoreType"/>
            <type name="VkPhysicalDeviceTimelineSemaphoreFeatures"/>
            <type name="VkPhysicalDeviceTimelineSemaphoreProperties"/>
            <type name="VkSemaphoreTypeCreateInfo"/>
            <type name="VkTimelineSemaphoreSubmitInfo"/>
            <type name="VkSemaphoreWaitFlagBits"/>
            <type name="VkSemaphoreWaitFlags"/>
            <type name="VkSemaphoreWaitInfo"/>
            <type name="VkSemaphoreSignalInfo"/>
            <command name="vkGetSemaphoreCounterValue"/>
            <command name="vkWaitSemaphores"/>
            <command name="vkSignalSemaphore"/>
            <feature name="timelineSemaphore" struct="VkPhysicalDeviceTimelineSemaphoreFeatures"/>
            <feature name="timelineSemaphore" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>
        <require comment="Promoted from VK_KHR_buffer_device_address (extension 258)">
            <enum offset="0" extends="VkStructureType" extnumber="258"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES"/>
            <enum offset="1" extends="VkStructureType" extnumber="245"          name="VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO"/>
            <enum offset="2" extends="VkStructureType" extnumber="258"          name="VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO"/>
            <enum offset="3" extends="VkStructureType" extnumber="258"          name="VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO"/>
            <enum offset="4" extends="VkStructureType" extnumber="258"          name="VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO"/>
            <enum bitpos="17" extends="VkBufferUsageFlagBits"                   name="VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT"/>
            <enum bitpos="4"  extends="VkBufferCreateFlagBits"                  name="VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT"/>
            <enum bitpos="1" extends="VkMemoryAllocateFlagBits"                 name="VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT"/>
            <enum bitpos="2" extends="VkMemoryAllocateFlagBits"                 name="VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT"/>
            <enum offset="0" dir="-" extends="VkResult" extnumber="258"         name="VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS"/>
            <type name="VkPhysicalDeviceBufferDeviceAddressFeatures"/>
            <type name="VkBufferDeviceAddressInfo"/>
            <type name="VkBufferOpaqueCaptureAddressCreateInfo"/>
            <type name="VkMemoryOpaqueCaptureAddressAllocateInfo"/>
            <type name="VkDeviceMemoryOpaqueCaptureAddressInfo"/>
            <command name="vkGetBufferDeviceAddress"/>
            <command name="vkGetBufferOpaqueCaptureAddress"/>
            <command name="vkGetDeviceMemoryOpaqueCaptureAddress"/>
        </require>
    </feature>
    <feature api="vulkan,vulkansc" name="VK_VERSION_1_3" number="1.3" depends="VK_VERSION_1_2" comment="Vulkan 1.3 core API interface definitions.">
        <require>
            <type name="VK_API_VERSION_1_3"/>
        </require>
        <require>
            <type name="VkFlags64"/>
        </require>
        <require>
            <enum extends="VkStructureType" value="53"                          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES"/>
            <enum extends="VkStructureType" value="54"                          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES"/>
            <type name="VkPhysicalDeviceVulkan13Features"/>
            <type name="VkPhysicalDeviceVulkan13Properties"/>
        </require>
        <require comment="Promoted from VK_EXT_pipeline_creation_feedback (extension 193)">
            <enum offset="0" extends="VkStructureType"  extnumber="193"         name="VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO"/>
            <type name="VkPipelineCreationFeedbackFlagBits"/>
            <type name="VkPipelineCreationFeedbackFlags"/>
            <type name="VkPipelineCreationFeedbackCreateInfo"/>
            <type name="VkPipelineCreationFeedback"/>
        </require>
        <require comment="Promoted from VK_KHR_shader_terminate_invocation (extension 216)">
            <enum offset="0" extends="VkStructureType"  extnumber="216"         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES"/>
            <type name="VkPhysicalDeviceShaderTerminateInvocationFeatures"/>
            <feature name="shaderTerminateInvocation" struct="VkPhysicalDeviceShaderTerminateInvocationFeatures"/>
            <feature name="shaderTerminateInvocation" struct="VkPhysicalDeviceVulkan13Features"/>
        </require>
        <require comment="Promoted from VK_EXT_tooling_info (extension 246)">
            <enum offset="0" extends="VkStructureType"  extnumber="246"         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES"/>
            <type name="VkToolPurposeFlagBits"/>
            <type name="VkToolPurposeFlags"/>
            <type name="VkPhysicalDeviceToolProperties"/>
            <command name="vkGetPhysicalDeviceToolProperties"/>
        </require>
        <require comment="Promoted from VK_EXT_shader_demote_to_helper_invocation (extension 277)">
            <enum offset="0" extends="VkStructureType"  extnumber="277"         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES"/>
            <type name="VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures"/>
            <feature name="shaderDemoteToHelperInvocation" struct="VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures"/>
            <feature name="shaderDemoteToHelperInvocation" struct="VkPhysicalDeviceVulkan13Features"/>
        </require>
        <require comment="Promoted from VK_KHR_shader_non_semantic_info (extension 294)">
        </require>
        <require comment="Promoted from VK_EXT_private_data (extension 296)">
            <enum offset="0" extends="VkStructureType"  extnumber="296"         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES"/>
            <enum offset="1" extends="VkStructureType"  extnumber="296"         name="VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO"/>
            <enum offset="2" extends="VkStructureType"  extnumber="296"         name="VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO"/>
            <enum offset="0" extends="VkObjectType"     extnumber="296"         name="VK_OBJECT_TYPE_PRIVATE_DATA_SLOT"/>
            <type name="VkPhysicalDevicePrivateDataFeatures"/>
            <type name="VkDevicePrivateDataCreateInfo"/>
            <type name="VkPrivateDataSlotCreateInfo"/>
            <type name="VkPrivateDataSlot"/>
            <type name="VkPrivateDataSlotCreateFlags" comment="Will add VkPrivateDataSlotCreateFlagBits when bits are defined in the future"/>
            <command name="vkCreatePrivateDataSlot"/>
            <command name="vkDestroyPrivateDataSlot"/>
            <command name="vkSetPrivateData"/>
            <command name="vkGetPrivateData"/>
            <feature name="privateData" struct="VkPhysicalDevicePrivateDataFeatures"/>
            <feature name="privateData" struct="VkPhysicalDeviceVulkan13Features"/>
        </require>
        <require comment="Promoted from VK_EXT_pipeline_creation_cache_control (extension 298)">
            <enum offset="0" extends="VkStructureType"  extnumber="298"         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES"/>
            <type name="VkPhysicalDevicePipelineCreationCacheControlFeatures"/>
            <enum bitpos="8" extends="VkPipelineCreateFlagBits"                 name="VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT"/>
            <enum bitpos="9" extends="VkPipelineCreateFlagBits"                 name="VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT"/>
            <enum offset="0" extends="VkResult"         extnumber="298"         name="VK_PIPELINE_COMPILE_REQUIRED"/>
            <enum bitpos="0" extends="VkPipelineCacheCreateFlagBits"            name="VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT"/>
            <feature name="pipelineCreationCacheControl" struct="VkPhysicalDevicePipelineCreationCacheControlFeatures"/>
            <feature name="pipelineCreationCacheControl" struct="VkPhysicalDeviceVulkan13Features"/>
        </require>
        <require comment="Promoted from VK_KHR_synchronization2 (extension 315)">
            <enum offset="0" extends="VkStructureType"  extnumber="315"         name="VK_STRUCTURE_TYPE_MEMORY_BARRIER_2"/>
            <enum offset="1" extends="VkStructureType"  extnumber="315"         name="VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2"/>
            <enum offset="2" extends="VkStructureType"  extnumber="315"         name="VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2"/>
            <enum offset="3" extends="VkStructureType"  extnumber="315"         name="VK_STRUCTURE_TYPE_DEPENDENCY_INFO"/>
            <enum offset="4" extends="VkStructureType"  extnumber="315"         name="VK_STRUCTURE_TYPE_SUBMIT_INFO_2"/>
            <enum offset="5" extends="VkStructureType"  extnumber="315"         name="VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO"/>
            <enum offset="6" extends="VkStructureType"  extnumber="315"         name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO"/>
            <enum offset="7" extends="VkStructureType"  extnumber="315"         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES"/>
            <enum bitpos="0" extends="VkEventCreateFlagBits"                    name="VK_EVENT_CREATE_DEVICE_ONLY_BIT"/>
            <enum offset="0" extends="VkImageLayout"    extnumber="315"         name="VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL"/>
            <enum offset="1" extends="VkImageLayout"    extnumber="315"         name="VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL"/>
            <enum value="0"  extends="VkPipelineStageFlagBits"                  name="VK_PIPELINE_STAGE_NONE"/>
            <enum value="0"  extends="VkAccessFlagBits"                         name="VK_ACCESS_NONE"/>
            <type name="VkPipelineStageFlags2"/>
            <type name="VkPipelineStageFlagBits2"/>
            <type name="VkAccessFlags2"/>
            <type name="VkAccessFlagBits2"/>
            <type name="VkMemoryBarrier2"/>
            <type name="VkBufferMemoryBarrier2"/>
            <type name="VkImageMemoryBarrier2"/>
            <type name="VkDependencyInfo"/>
            <type name="VkSubmitInfo2"/>
            <type name="VkSemaphoreSubmitInfo"/>
            <type name="VkCommandBufferSubmitInfo"/>
            <type name="VkSubmitFlagBits"/>
            <type name="VkSubmitFlags"/>
            <type name="VkPhysicalDeviceSynchronization2Features"/>
            <command name="vkCmdSetEvent2"/>
            <command name="vkCmdResetEvent2"/>
            <command name="vkCmdWaitEvents2"/>
            <command name="vkCmdPipelineBarrier2"/>
            <command name="vkCmdWriteTimestamp2"/>
            <command name="vkQueueSubmit2"/>
            <feature name="synchronization2" struct="VkPhysicalDeviceSynchronization2Features"/>
            <feature name="synchronization2" struct="VkPhysicalDeviceVulkan13Features"/>
        </require>
        <require comment="Promoted from VK_KHR_zero_initialize_workgroup_memory (extension 326)">
            <enum offset="0" extends="VkStructureType"  extnumber="326"         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES"/>
            <type name="VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures"/>
                <feature name="shaderZeroInitializeWorkgroupMemory" struct="VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures"/>
                <feature name="shaderZeroInitializeWorkgroupMemory" struct="VkPhysicalDeviceVulkan13Features"/>
        </require>
        <require comment="Promoted from VK_EXT_image_robustness (extension 336)">
            <enum offset="0" extends="VkStructureType"  extnumber="336"         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES"/>
            <type name="VkPhysicalDeviceImageRobustnessFeatures"/>
            <feature name="robustImageAccess" struct="VkPhysicalDeviceImageRobustnessFeatures"/>
            <feature name="robustImageAccess" struct="VkPhysicalDeviceVulkan13Features"/>
        </require>
        <require comment="Promoted from VK_KHR_copy_commands2 (extension 338)">
            <enum offset="0" extends="VkStructureType"  extnumber="338"         name="VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2"/>
            <enum offset="1" extends="VkStructureType"  extnumber="338"         name="VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2"/>
            <enum offset="2" extends="VkStructureType"  extnumber="338"         name="VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2"/>
            <enum offset="3" extends="VkStructureType"  extnumber="338"         name="VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2"/>
            <enum offset="4" extends="VkStructureType"  extnumber="338"         name="VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2"/>
            <enum offset="5" extends="VkStructureType"  extnumber="338"         name="VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2"/>
            <enum offset="6" extends="VkStructureType"  extnumber="338"         name="VK_STRUCTURE_TYPE_BUFFER_COPY_2"/>
            <enum offset="7" extends="VkStructureType"  extnumber="338"         name="VK_STRUCTURE_TYPE_IMAGE_COPY_2"/>
            <enum offset="8" extends="VkStructureType"  extnumber="338"         name="VK_STRUCTURE_TYPE_IMAGE_BLIT_2"/>
            <enum offset="9" extends="VkStructureType"  extnumber="338"         name="VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2"/>
            <enum offset="10" extends="VkStructureType" extnumber="338"         name="VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2"/>
            <type name="VkCopyBufferInfo2"/>
            <type name="VkCopyImageInfo2"/>
            <type name="VkCopyBufferToImageInfo2"/>
            <type name="VkCopyImageToBufferInfo2"/>
            <type name="VkBlitImageInfo2"/>
            <type name="VkResolveImageInfo2"/>
            <type name="VkBufferCopy2"/>
            <type name="VkImageCopy2"/>
            <type name="VkImageBlit2"/>
            <type name="VkBufferImageCopy2"/>
            <type name="VkImageResolve2"/>
            <command name="vkCmdCopyBuffer2"/>
            <command name="vkCmdCopyImage2"/>
            <command name="vkCmdCopyBufferToImage2"/>
            <command name="vkCmdCopyImageToBuffer2"/>
            <command name="vkCmdBlitImage2"/>
            <command name="vkCmdResolveImage2"/>
        </require>
        <require comment="Promoted from VK_EXT_subgroup_size_control (STDPROMOTE/PROPLIMCHANGE) (extension 226)">
            <type name="VkPhysicalDeviceSubgroupSizeControlFeatures"/>
            <type name="VkPhysicalDeviceSubgroupSizeControlProperties"/>
            <type name="VkPipelineShaderStageRequiredSubgroupSizeCreateInfo"/>
            <enum offset="0" extends="VkStructureType"  extnumber="226"         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES"/>
            <enum offset="1" extends="VkStructureType"  extnumber="226"         name="VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO"/>
            <enum offset="2" extends="VkStructureType"  extnumber="226"         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES"/>
            <enum bitpos="0" extends="VkPipelineShaderStageCreateFlagBits"      name="VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT"/>
            <enum bitpos="1" extends="VkPipelineShaderStageCreateFlagBits"      name="VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT"/>
            <feature name="subgroupSizeControl" struct="VkPhysicalDeviceSubgroupSizeControlFeatures"/>
            <feature name="computeFullSubgroups" struct="VkPhysicalDeviceSubgroupSizeControlFeatures"/>
            <feature name="subgroupSizeControl" struct="VkPhysicalDeviceVulkan13Features"/>
            <feature name="computeFullSubgroups" struct="VkPhysicalDeviceVulkan13Features"/>
        </require>
        <require comment="Promoted from VK_EXT_inline_uniform_block (STDPROMOTE/PROPLIMCHANGE) (extension 139)">
            <enum offset="0" extends="VkDescriptorType" extnumber="139"         name="VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK"/>
            <enum offset="0" extends="VkStructureType" extnumber="139"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES"/>
            <enum offset="1" extends="VkStructureType" extnumber="139"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES"/>
            <enum offset="2" extends="VkStructureType" extnumber="139"          name="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK"/>
            <enum offset="3" extends="VkStructureType" extnumber="139"          name="VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO"/>
            <type name="VkPhysicalDeviceInlineUniformBlockFeatures"/>
            <type name="VkPhysicalDeviceInlineUniformBlockProperties"/>
            <type name="VkWriteDescriptorSetInlineUniformBlock"/>
            <type name="VkDescriptorPoolInlineUniformBlockCreateInfo"/>
        </require>
        <require comment="Promoted from VK_EXT_ycbcr_2plane_444_formats (does not promote the Feature struct, just the formats) (extension 331)">
            <enum offset="0" extends="VkFormat" extnumber="331"                 name="VK_FORMAT_G8_B8R8_2PLANE_444_UNORM"/>
            <enum offset="1" extends="VkFormat" extnumber="331"                 name="VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16"/>
            <enum offset="2" extends="VkFormat" extnumber="331"                 name="VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16"/>
            <enum offset="3" extends="VkFormat" extnumber="331"                 name="VK_FORMAT_G16_B16R16_2PLANE_444_UNORM"/>
        </require>
        <require comment="Promoted from VK_EXT_4444_formats (does not promote the Feature struct, just the formats) (extension 341)">
            <enum offset="0" extends="VkFormat" extnumber="341"                 name="VK_FORMAT_A4R4G4B4_UNORM_PACK16"/>
            <enum offset="1" extends="VkFormat" extnumber="341"                 name="VK_FORMAT_A4B4G4R4_UNORM_PACK16"/>
        </require>
        <require comment="Promoted from VK_EXT_texture_compression_astc_hdr (Feature struct is promoted, but becomes optional) (extension 67)">
            <enum offset="0"  extends="VkStructureType" extnumber="67"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES"/>
            <type name="VkPhysicalDeviceTextureCompressionASTCHDRFeatures"/>
            <enum offset="0"  extends="VkFormat" extnumber="67"                 name="VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK"/>
            <enum offset="1"  extends="VkFormat" extnumber="67"                 name="VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK"/>
            <enum offset="2"  extends="VkFormat" extnumber="67"                 name="VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK"/>
            <enum offset="3"  extends="VkFormat" extnumber="67"                 name="VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK"/>
            <enum offset="4"  extends="VkFormat" extnumber="67"                 name="VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK"/>
            <enum offset="5"  extends="VkFormat" extnumber="67"                 name="VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK"/>
            <enum offset="6"  extends="VkFormat" extnumber="67"                 name="VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK"/>
            <enum offset="7"  extends="VkFormat" extnumber="67"                 name="VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK"/>
            <enum offset="8"  extends="VkFormat" extnumber="67"                 name="VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK"/>
            <enum offset="9"  extends="VkFormat" extnumber="67"                 name="VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK"/>
            <enum offset="10" extends="VkFormat" extnumber="67"                 name="VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK"/>
            <enum offset="11" extends="VkFormat" extnumber="67"                 name="VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK"/>
            <enum offset="12" extends="VkFormat" extnumber="67"                 name="VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK"/>
            <enum offset="13" extends="VkFormat" extnumber="67"                 name="VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK"/>
        </require>
        <require comment="Promoted from VK_KHR_dynamic_rendering (extension 45)">
            <command name="vkCmdBeginRendering"/>
            <command name="vkCmdEndRendering"/>
            <enum offset="0" extends="VkStructureType" extnumber="45"           name="VK_STRUCTURE_TYPE_RENDERING_INFO"/>
            <enum offset="1" extends="VkStructureType" extnumber="45"           name="VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO"/>
            <enum offset="2" extends="VkStructureType" extnumber="45"           name="VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO"/>
            <enum offset="3" extends="VkStructureType" extnumber="45"           name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES"/>
            <enum offset="4" extends="VkStructureType" extnumber="45"           name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO"/>
            <enum offset="0" extends="VkAttachmentStoreOp" extnumber="302"      name="VK_ATTACHMENT_STORE_OP_NONE"/>
            <type name="VkRenderingInfo"/>
            <type name="VkRenderingAttachmentInfo"/>
            <type name="VkPipelineRenderingCreateInfo"/>
            <type name="VkPhysicalDeviceDynamicRenderingFeatures"/>
            <type name="VkCommandBufferInheritanceRenderingInfo"/>
            <type name="VkRenderingFlags"/>
            <type name="VkRenderingFlagBits"/>
            <feature name="dynamicRendering" struct="VkPhysicalDeviceDynamicRenderingFeatures"/>
            <feature name="dynamicRendering" struct="VkPhysicalDeviceVulkan13Features"/>
        </require>
        <require comment="Promoted from VK_EXT_extended_dynamic_state (Feature struct is not promoted) (extension 268)">
            <enum offset="0" extends="VkDynamicState"  extnumber="268"          name="VK_DYNAMIC_STATE_CULL_MODE"/>
            <enum offset="1" extends="VkDynamicState"  extnumber="268"          name="VK_DYNAMIC_STATE_FRONT_FACE"/>
            <enum offset="2" extends="VkDynamicState"  extnumber="268"          name="VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY"/>
            <enum offset="3" extends="VkDynamicState"  extnumber="268"          name="VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT"/>
            <enum offset="4" extends="VkDynamicState"  extnumber="268"          name="VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT"/>
            <enum offset="5" extends="VkDynamicState"  extnumber="268"          name="VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE"/>
            <enum offset="6" extends="VkDynamicState"  extnumber="268"          name="VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE"/>
            <enum offset="7" extends="VkDynamicState"  extnumber="268"          name="VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE"/>
            <enum offset="8" extends="VkDynamicState"  extnumber="268"          name="VK_DYNAMIC_STATE_DEPTH_COMPARE_OP"/>
            <enum offset="9" extends="VkDynamicState"  extnumber="268"          name="VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE"/>
            <enum offset="10" extends="VkDynamicState" extnumber="268"          name="VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE"/>
            <enum offset="11" extends="VkDynamicState" extnumber="268"          name="VK_DYNAMIC_STATE_STENCIL_OP"/>
            <command name="vkCmdSetCullMode"/>
            <command name="vkCmdSetFrontFace"/>
            <command name="vkCmdSetPrimitiveTopology"/>
            <command name="vkCmdSetViewportWithCount"/>
            <command name="vkCmdSetScissorWithCount"/>
            <command name="vkCmdBindVertexBuffers2"/>
            <command name="vkCmdSetDepthTestEnable"/>
            <command name="vkCmdSetDepthWriteEnable"/>
            <command name="vkCmdSetDepthCompareOp"/>
            <command name="vkCmdSetDepthBoundsTestEnable"/>
            <command name="vkCmdSetStencilTestEnable"/>
            <command name="vkCmdSetStencilOp"/>
        </require>
        <require comment="Promoted from VK_KHR_shader_integer_dot_product (extension 281)">
            <enum offset="0" extends="VkStructureType" extnumber="281"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES"/>
            <enum offset="1" extends="VkStructureType" extnumber="281"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES"/>
            <type name="VkPhysicalDeviceShaderIntegerDotProductFeatures"/>
            <type name="VkPhysicalDeviceShaderIntegerDotProductProperties"/>
            <feature name="shaderIntegerDotProduct" struct="VkPhysicalDeviceShaderIntegerDotProductFeatures"/>
            <feature name="shaderIntegerDotProduct" struct="VkPhysicalDeviceVulkan13Features"/>
        </require>
        <require comment="Promoted from VK_EXT_texel_buffer_alignment (extension 282)">
            <enum offset="1" extends="VkStructureType" extnumber="282"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES"/>
            <type name="VkPhysicalDeviceTexelBufferAlignmentProperties"/>
        </require>
        <require comment="Promoted from VK_KHR_format_feature_flags2 (extension 361)">
            <enum offset="0" extends="VkStructureType" extnumber="361"          name="VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3"/>
            <type name="VkFormatFeatureFlags2"/>
            <type name="VkFormatFeatureFlagBits2"/>
            <type name="VkFormatProperties3"/>
            <enum bitpos="13" extends="VkFormatFeatureFlagBits2"                name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT" comment="This is an interaction with EXT_filter_cubic, though not tagged that way"/>
        </require>
        <require comment="Promoted from VK_EXT_extended_dynamic_state2 (Feature struct and optional state are not promoted) (extension 378)">
            <enum offset="1" extends="VkDynamicState"  extnumber="378"          name="VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE"/>
            <enum offset="2" extends="VkDynamicState"  extnumber="378"          name="VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE"/>
            <enum offset="4" extends="VkDynamicState"  extnumber="378"          name="VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE"/>
            <command name="vkCmdSetRasterizerDiscardEnable"/>
            <command name="vkCmdSetDepthBiasEnable"/>
            <command name="vkCmdSetPrimitiveRestartEnable"/>
        </require>
        <require comment="Promoted from VK_KHR_maintenance4 (extension 414)">
            <enum offset="0" extends="VkStructureType" extnumber="414"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES"/>
            <enum offset="1" extends="VkStructureType" extnumber="414"          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES"/>
            <enum offset="2" extends="VkStructureType" extnumber="414"          name="VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS"/>
            <enum offset="3" extends="VkStructureType" extnumber="414"          name="VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS"/>
            <enum value="0"  extends="VkImageAspectFlagBits"                    name="VK_IMAGE_ASPECT_NONE"/>
            <type name="VkPhysicalDeviceMaintenance4Features"/>
            <type name="VkPhysicalDeviceMaintenance4Properties"/>
            <type name="VkDeviceBufferMemoryRequirements"/>
            <type name="VkDeviceImageMemoryRequirements"/>
            <command name="vkGetDeviceBufferMemoryRequirements"/>
            <command name="vkGetDeviceImageMemoryRequirements"/>
            <command name="vkGetDeviceImageSparseMemoryRequirements"/>
            <feature name="maintenance4" struct="VkPhysicalDeviceMaintenance4Features"/>
            <feature name="maintenance4" struct="VkPhysicalDeviceVulkan13Features"/>
        </require>
        <require>
            <feature name="vulkanMemoryModel" struct="VkPhysicalDeviceVulkanMemoryModelFeatures"/>
            <feature name="vulkanMemoryModelDeviceScope" struct="VkPhysicalDeviceVulkanMemoryModelFeatures"/>
            <feature name="inlineUniformBlock" struct="VkPhysicalDeviceInlineUniformBlockFeatures"/>
            <feature name="bufferDeviceAddress" struct="VkPhysicalDeviceBufferDeviceAddressFeatures"/>
            <feature name="vulkanMemoryModel" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="vulkanMemoryModelDeviceScope" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="inlineUniformBlock" struct="VkPhysicalDeviceVulkan13Features"/>
            <feature name="bufferDeviceAddress" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>
        <require depends="VK_EXT_descriptor_indexing,VkPhysicalDeviceVulkan12Features::descriptorIndexing">
            <feature name="descriptorBindingInlineUniformBlockUpdateAfterBind" struct="VkPhysicalDeviceInlineUniformBlockFeatures"/>
            <feature name="descriptorBindingInlineUniformBlockUpdateAfterBind" struct="VkPhysicalDeviceVulkan13Features"/>
        </require>
    </feature>
    <feature api="vulkan,vulkansc" name="VK_VERSION_1_4" number="1.4" depends="VK_VERSION_1_3" comment="Vulkan 1.4 core API interface definitions.">
        <require>
            <type name="VK_API_VERSION_1_4"/>
        </require>
        <require>
            <enum extends="VkStructureType" value="55"                          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_FEATURES"/>
            <enum extends="VkStructureType" value="56"                          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_PROPERTIES"/>
            <type name="VkPhysicalDeviceVulkan14Features"/>
            <type name="VkPhysicalDeviceVulkan14Properties"/>
        </require>
        <require comment="Features now required from VK_VERSION_1_0">
            <feature name="fullDrawIndexUint32" struct="VkPhysicalDeviceFeatures"/>
            <feature name="imageCubeArray" struct="VkPhysicalDeviceFeatures"/>
            <feature name="independentBlend" struct="VkPhysicalDeviceFeatures"/>
            <feature name="sampleRateShading" struct="VkPhysicalDeviceFeatures"/>
            <feature name="drawIndirectFirstInstance" struct="VkPhysicalDeviceFeatures"/>
            <feature name="depthClamp" struct="VkPhysicalDeviceFeatures"/>
            <feature name="depthBiasClamp" struct="VkPhysicalDeviceFeatures"/>
            <feature name="samplerAnisotropy" struct="VkPhysicalDeviceFeatures"/>
            <feature name="fragmentStoresAndAtomics" struct="VkPhysicalDeviceFeatures"/>
            <feature name="shaderStorageImageExtendedFormats" struct="VkPhysicalDeviceFeatures"/>
            <feature name="shaderUniformBufferArrayDynamicIndexing" struct="VkPhysicalDeviceFeatures"/>
            <feature name="shaderSampledImageArrayDynamicIndexing" struct="VkPhysicalDeviceFeatures"/>
            <feature name="shaderStorageBufferArrayDynamicIndexing" struct="VkPhysicalDeviceFeatures"/>
            <feature name="shaderStorageImageArrayDynamicIndexing" struct="VkPhysicalDeviceFeatures"/>
            <feature name="shaderImageGatherExtended" struct="VkPhysicalDeviceFeatures"/>
            <feature name="shaderInt16" struct="VkPhysicalDeviceFeatures"/>
            <feature name="largePoints" struct="VkPhysicalDeviceFeatures"/>
        </require>
        <require comment="Features now required from VK_VERSION_1_1">
            <feature name="samplerYcbcrConversion" struct="VkPhysicalDeviceVulkan11Features"/>
            <feature name="storageBuffer16BitAccess" struct="VkPhysicalDeviceVulkan11Features"/>
            <feature name="variablePointers" struct="VkPhysicalDeviceVulkan11Features"/>
            <feature name="variablePointersStorageBuffer" struct="VkPhysicalDeviceVulkan11Features"/>
        </require>
        <require comment="Features now required from VK_VERSION_1_2">
            <feature name="samplerMirrorClampToEdge" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="scalarBlockLayout" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="shaderUniformTexelBufferArrayDynamicIndexing" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="shaderStorageTexelBufferArrayDynamicIndexing" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="shaderInt8" struct="VkPhysicalDeviceVulkan12Features"/>
            <feature name="storageBuffer8BitAccess" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>
        <require comment="Promoted from VK_KHR_global_priority (extension 189)">
            <enum offset="0" extends="VkStructureType" extnumber="175"      name="VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO"/>
            <enum offset="0" extends="VkStructureType" extnumber="389"      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES"/>
            <enum offset="1" extends="VkStructureType" extnumber="389"      name="VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES"/>
            <enum extends="VkResult" extnumber="175" offset="1" dir="-"     name="VK_ERROR_NOT_PERMITTED"/>
            <enum                                                           name="VK_MAX_GLOBAL_PRIORITY_SIZE"/>
            <type name="VkDeviceQueueGlobalPriorityCreateInfo"/>
            <type name="VkQueueGlobalPriority"/>
            <type name="VkPhysicalDeviceGlobalPriorityQueryFeatures"/>
            <type name="VkQueueFamilyGlobalPriorityProperties"/>
            <feature name="globalPriorityQuery" struct="VkPhysicalDeviceGlobalPriorityQueryFeatures"/>
        </require>
        <require comment="Promoted from VK_KHR_load_store_op_none (extension 527) 'Roadmap 2024' (VK_ATTACHMENT_STORE_OP_NONE is defined in Vulkan 1.3)">
            <enum offset="0"  extends="VkAttachmentLoadOp" extnumber="401"  name="VK_ATTACHMENT_LOAD_OP_NONE"/>
        </require>
        <require comment="Promoted from VK_KHR_shader_subgroup_rotate (extension 417) 'Roadmap 2024'">
            <enum offset="0"  extends="VkStructureType" extnumber="417"     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES"/>
            <enum bitpos="9"  extends="VkSubgroupFeatureFlagBits"           name="VK_SUBGROUP_FEATURE_ROTATE_BIT"/>
            <enum bitpos="10" extends="VkSubgroupFeatureFlagBits"           name="VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT"/>
            <type name="VkPhysicalDeviceShaderSubgroupRotateFeatures"/>
            <feature name="shaderSubgroupRotate" struct="VkPhysicalDeviceShaderSubgroupRotateFeatures"/>
            <feature name="shaderSubgroupRotateClustered" struct="VkPhysicalDeviceShaderSubgroupRotateFeatures"/>
        </require>
        <require comment="Promoted from VK_KHR_shader_float_controls2 (extension 529) 'Roadmap 2024'">
            <enum offset="0"  extends="VkStructureType" extnumber="529"     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES"/>
            <type name="VkPhysicalDeviceShaderFloatControls2Features"/>
            <feature name="shaderFloatControls2" struct="VkPhysicalDeviceShaderFloatControls2Features"/>
        </require>
        <require comment="Promoted from VK_KHR_shader_expect_assume (extension 545) 'Roadmap 2024'">
            <enum offset="0"  extends="VkStructureType" extnumber="545"     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES"/>
            <type name="VkPhysicalDeviceShaderExpectAssumeFeatures"/>
            <feature name="shaderExpectAssume" struct="VkPhysicalDeviceShaderExpectAssumeFeatures"/>
        </require>
        <require comment="Promoted from VK_KHR_line_rasterization (extension 535) 'Roadmap 2024'">
            <enum offset="0"  extends="VkStructureType" extnumber="260"     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES"/>
            <enum offset="1"  extends="VkStructureType" extnumber="260"     name="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO"/>
            <enum offset="2"  extends="VkStructureType" extnumber="260"     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES"/>
            <enum offset="0"  extends="VkDynamicState"  extnumber="260"     name="VK_DYNAMIC_STATE_LINE_STIPPLE"/>
            <type name="VkPhysicalDeviceLineRasterizationFeatures"/>
            <type name="VkPhysicalDeviceLineRasterizationProperties"/>
            <type name="VkPipelineRasterizationLineStateCreateInfo"/>
            <type name="VkLineRasterizationMode"/>
            <command name="vkCmdSetLineStipple"/>
            <feature name="bresenhamLines" struct="VkPhysicalDeviceLineRasterizationFeatures"/>
        </require>
        <require comment="Promoted from VK_KHR_vertex_attribute_divisor (extension 526) 'Roadmap 2024'">
            <enum offset="0"  extends="VkStructureType" extnumber="526"     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES"/>
            <enum offset="1"  extends="VkStructureType" extnumber="191"     name="VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO"/>
            <enum offset="2"  extends="VkStructureType" extnumber="191"     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES"/>
            <type name="VkPhysicalDeviceVertexAttributeDivisorProperties"/>
            <type name="VkVertexInputBindingDivisorDescription"/>
            <type name="VkPipelineVertexInputDivisorStateCreateInfo"/>
            <type name="VkPhysicalDeviceVertexAttributeDivisorFeatures"/>
            <feature name="vertexAttributeInstanceRateDivisor" struct="VkPhysicalDeviceVertexAttributeDivisorFeatures"/>
        </require>
        <require comment="Promoted from VK_KHR_index_type_uint8 (extension 534) 'Roadmap 2024'">
            <enum offset="0"  extends="VkStructureType" extnumber="266"     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES"/>
            <enum offset="0"  extends="VkIndexType" extnumber="266"         name="VK_INDEX_TYPE_UINT8"/>
            <type name="VkPhysicalDeviceIndexTypeUint8Features"/>
            <feature name="indexTypeUint8" struct="VkPhysicalDeviceIndexTypeUint8Features"/>
        </require>
        <require comment="Promoted from VK_KHR_map_memory2 (extension 272) 'Roadmap 2024'">
            <enum offset="0"  extends="VkStructureType" extnumber="272"     name="VK_STRUCTURE_TYPE_MEMORY_MAP_INFO"/>
            <enum offset="1"  extends="VkStructureType" extnumber="272"     name="VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO"/>
            <type name="VkMemoryMapInfo"/>
            <type name="VkMemoryUnmapInfo"/>
            <type name="VkMemoryUnmapFlagBits"/>
            <type name="VkMemoryUnmapFlags"/>
            <command name="vkMapMemory2"/>
            <command name="vkUnmapMemory2"/>
        </require>
        <require comment="Promoted from VK_KHR_maintenance5 (extension 471) 'Roadmap 2024'">
            <enum offset="0"  extends="VkStructureType" extnumber="471"     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES"/>
            <enum offset="1"  extends="VkStructureType" extnumber="471"     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES"/>
            <enum offset="3"  extends="VkStructureType" extnumber="471"     name="VK_STRUCTURE_TYPE_RENDERING_AREA_INFO"/>
            <enum offset="4"  extends="VkStructureType" extnumber="471"     name="VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO"/>
            <type name="VkPhysicalDeviceMaintenance5Features"/>
            <type name="VkPhysicalDeviceMaintenance5Properties"/>
            <enum offset="0"  extends="VkFormat" extnumber="471"            name="VK_FORMAT_A1B5G5R5_UNORM_PACK16"/>
            <enum offset="1"  extends="VkFormat" extnumber="471"            name="VK_FORMAT_A8_UNORM"/>
            <command name="vkCmdBindIndexBuffer2"/>
            <command name="vkGetRenderingAreaGranularity"/>
            <type name="VkRenderingAreaInfo"/>
            <command name="vkGetDeviceImageSubresourceLayout"/>
            <command name="vkGetImageSubresourceLayout2"/>
            <type name="VkDeviceImageSubresourceInfo"/>
            <type name="VkImageSubresource2"/>
            <type name="VkSubresourceLayout2"/>
            <enum offset="2"  extends="VkStructureType" extnumber="339"     name="VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2"/>
            <enum offset="3"  extends="VkStructureType" extnumber="339"     name="VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2"/>
            <type name="VkPipelineCreateFlags2"/>
            <type name="VkPipelineCreateFlagBits2"/>
            <type name="VkPipelineCreateFlags2CreateInfo"/>
            <type name="VkBufferUsageFlags2"/>
            <type name="VkBufferUsageFlagBits2"/>
            <type name="VkBufferUsageFlags2CreateInfo"/>
            <enum offset="5"  extends="VkStructureType" extnumber="471"     name="VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO"/>
            <enum offset="6"  extends="VkStructureType" extnumber="471"     name="VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO"/>
            <!-- enum bitpos="3"    name="VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT"        comment="Included in base enum"/ !-->
            <!-- enum bitpos="4"    name="VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT"                       comment="Included in base enum"/ !-->
            <!-- enum bitpos="8"    name="VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT"   comment="Included in base enum"/ !-->
            <!-- enum bitpos="9"    name="VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT"             comment="Included in base enum"/ !-->
            <enum bitpos="17" extends="VkBufferUsageFlagBits2"              name="VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT"/>
            <feature name="maintenance5" struct="VkPhysicalDeviceMaintenance5Features"/>
        </require>
        <require comment="Promoted as an interaction between VK_KHR_maintenance5 (extension 471) 'Roadmap 2024' and VK_EXT_pipeline_protected_access (extension 467) 'additional functionality'">
            <!-- enum bitpos="27"   name="VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT"                 comment="Included in base enum"/ !-->
            <!-- enum bitpos="30"   name="VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT"               comment="Included in base enum"/ !-->
        </require>
        <require comment="Promoted from VK_KHR_push_descriptor (extension 81) 'Roadmap 2024'">
            <enum offset="0"  extends="VkStructureType" extnumber="81"      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES"/>
            <enum bitpos="0"  extends="VkDescriptorSetLayoutCreateFlagBits" name="VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT"/>
            <command name="vkCmdPushDescriptorSet"/>
            <type name="VkPhysicalDevicePushDescriptorProperties"/>
            <command name="vkCmdPushDescriptorSetWithTemplate"/>
            <enum value="1"   extends="VkDescriptorUpdateTemplateType"      name="VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS"/>
            <feature name="pushDescriptor" struct="VkPhysicalDeviceVulkan14Features"/>
        </require>
        <require comment="Promoted from VK_KHR_dynamic_rendering_local_read (extension 233) 'Roadmap 2024'">
            <enum offset="0" extends="VkImageLayout" extnumber="233"        name="VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ"/>
            <command name="vkCmdSetRenderingAttachmentLocations"/>
            <command name="vkCmdSetRenderingInputAttachmentIndices"/>
            <type name="VkPhysicalDeviceDynamicRenderingLocalReadFeatures"/>
            <type name="VkRenderingAttachmentLocationInfo"/>
            <type name="VkRenderingInputAttachmentIndexInfo"/>
            <enum offset="0" extends="VkStructureType" extnumber="233"      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES"/>
            <enum offset="1" extends="VkStructureType" extnumber="233"      name="VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO"/>
            <enum offset="2" extends="VkStructureType" extnumber="233"      name="VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO"/>
            <feature name="dynamicRenderingLocalRead" struct="VkPhysicalDeviceDynamicRenderingLocalReadFeatures"/>
        </require>
        <require comment="Promoted from VK_KHR_maintenance6 (extension 546) 'additional functionality'">
            <enum offset="0"  extends="VkStructureType" extnumber="546"     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES"/>
            <enum offset="1"  extends="VkStructureType" extnumber="546"     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES"/>
            <enum offset="2"  extends="VkStructureType" extnumber="546"     name="VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS"/>
            <enum offset="3"  extends="VkStructureType" extnumber="546"     name="VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO"/>
            <enum offset="4"  extends="VkStructureType" extnumber="546"     name="VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO"/>
            <type name="VkPhysicalDeviceMaintenance6Features"/>
            <type name="VkPhysicalDeviceMaintenance6Properties"/>
            <type name="VkBindMemoryStatus"/>
            <type name="VkBindDescriptorSetsInfo"/>
            <type name="VkPushConstantsInfo"/>
            <command name="vkCmdBindDescriptorSets2"/>
            <command name="vkCmdPushConstants2"/>
            <enum offset="5"  extends="VkStructureType" extnumber="546"     name="VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO"/>
            <enum offset="6"  extends="VkStructureType" extnumber="546"     name="VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO"/>
            <type name="VkPushDescriptorSetInfo"/>
            <type name="VkPushDescriptorSetWithTemplateInfo"/>
            <command name="vkCmdPushDescriptorSet2"/>
            <command name="vkCmdPushDescriptorSetWithTemplate2"/>
            <feature name="maintenance6" struct="VkPhysicalDeviceMaintenance6Features"/>
        </require>
        <require comment="Promoted from VK_EXT_pipeline_protected_access (extension 467) 'additional functionality'">
            <enum offset="0"  extends="VkStructureType" extnumber="467"     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES"/>
            <enum bitpos="27" extends="VkPipelineCreateFlagBits"            name="VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT"/>
            <enum bitpos="30" extends="VkPipelineCreateFlagBits"            name="VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT"/>
            <type name="VkPhysicalDevicePipelineProtectedAccessFeatures"/>
        </require>
        <require depends="VkPhysicalDeviceProtectedMemoryFeatures::protectedMemory">
            <feature name="pipelineProtectedAccess" struct="VkPhysicalDevicePipelineProtectedAccessFeatures"/>
            <feature name="pipelineProtectedAccess" struct="VkPhysicalDeviceVulkan14Features"/>
        </require>
        <require comment="Promoted from VK_EXT_pipeline_robustness (extension 69) 'additional functionality'">
            <enum offset="0"  extends="VkStructureType" extnumber="69"      name="VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO"/>
            <enum offset="1"  extends="VkStructureType" extnumber="69"      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES"/>
            <enum offset="2"  extends="VkStructureType" extnumber="69"      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES"/>
            <type name="VkPhysicalDevicePipelineRobustnessFeatures"/>
            <type name="VkPhysicalDevicePipelineRobustnessProperties"/>
            <type name="VkPipelineRobustnessCreateInfo"/>
            <type name="VkPipelineRobustnessBufferBehavior"/>
            <type name="VkPipelineRobustnessImageBehavior"/>
            <feature name="pipelineRobustness" struct="VkPhysicalDevicePipelineRobustnessFeatures"/>
        </require>
        <require comment="Promoted (as optional feature) from VK_EXT_host_image_copy (extension 271) 'streaming transfers'">
            <enum offset="0"  extends="VkStructureType" extnumber="271"     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES"/>
            <enum offset="1"  extends="VkStructureType" extnumber="271"     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES"/>
            <enum offset="2"  extends="VkStructureType" extnumber="271"     name="VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY"/>
            <enum offset="3"  extends="VkStructureType" extnumber="271"     name="VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY"/>
            <enum offset="4"  extends="VkStructureType" extnumber="271"     name="VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO"/>
            <enum offset="5"  extends="VkStructureType" extnumber="271"     name="VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO"/>
            <enum offset="6"  extends="VkStructureType" extnumber="271"     name="VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO"/>
            <enum offset="7"  extends="VkStructureType" extnumber="271"     name="VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO"/>
            <enum offset="8"  extends="VkStructureType" extnumber="271"     name="VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE"/>
            <enum offset="9"  extends="VkStructureType" extnumber="271"     name="VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY"/>
            <enum bitpos="22" extends="VkImageUsageFlagBits"                name="VK_IMAGE_USAGE_HOST_TRANSFER_BIT"/>
            <enum bitpos="46" extends="VkFormatFeatureFlagBits2"            name="VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT"/>
            <type name="VkPhysicalDeviceHostImageCopyFeatures"/>
            <type name="VkPhysicalDeviceHostImageCopyProperties"/>
            <type name="VkHostImageCopyFlagBits"/>
            <type name="VkHostImageCopyFlags"/>
            <type name="VkMemoryToImageCopy"/>
            <type name="VkImageToMemoryCopy"/>
            <type name="VkCopyMemoryToImageInfo"/>
            <type name="VkCopyImageToMemoryInfo"/>
            <type name="VkCopyImageToImageInfo"/>
            <type name="VkHostImageLayoutTransitionInfo"/>
            <type name="VkSubresourceHostMemcpySize"/>
            <type name="VkHostImageCopyDevicePerformanceQuery"/>
            <command name="vkCopyMemoryToImage"/>
            <command name="vkCopyImageToMemory"/>
            <command name="vkCopyImageToImage"/>
            <command name="vkTransitionImageLayout"/>
            <!-- type name="VkSubresourceLayout2"               comment="Also promoted from KHR in VK_KHR_maintenance5"/ !-->
            <!-- type name="VkImageSubresource2"                comment="Also promoted from KHR in VK_KHR_maintenance5"/ !-->
            <!-- command name="vkGetImageSubresourceLayout2"    comment="Also promoted from KHR in VK_KHR_maintenance5"/ !-->
        </require>
    </feature>
    <feature api="vulkansc" name="VKSC_VERSION_1_0" number="1.0" depends="VK_VERSION_1_2" comment="Vulkan SC core API interface definitions">
        <require>
            <type name="VKSC_API_VARIANT"/>
            <type name="VKSC_API_VERSION_1_0"/>
            <type name="VkPhysicalDeviceVulkanSC10Features"/>
            <type name="VkPhysicalDeviceVulkanSC10Properties"/>
            <enum offset="0" extnumber="299" extends="VkStructureType"  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_SC_1_0_FEATURES"/>
            <enum offset="1" extnumber="299" extends="VkStructureType"  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_SC_1_0_PROPERTIES"/>
            <enum offset="1" extnumber="12" extends="VkResult" dir="-"  name="VK_ERROR_VALIDATION_FAILED"/>
        </require>
        <require comment="static memory functionality">
            <type name="VkDeviceObjectReservationCreateInfo"/>
            <type name="VkCommandPoolMemoryReservationCreateInfo"/>
            <type name="VkCommandPoolMemoryConsumption"/>
            <type name="VkPipelinePoolSize"/>
            <command name="vkGetCommandPoolMemoryConsumption"/>
            <enum offset="2" extnumber="299" extends="VkStructureType"  name="VK_STRUCTURE_TYPE_DEVICE_OBJECT_RESERVATION_CREATE_INFO"/>
            <enum offset="3" extnumber="299" extends="VkStructureType"  name="VK_STRUCTURE_TYPE_COMMAND_POOL_MEMORY_RESERVATION_CREATE_INFO"/>
            <enum offset="4" extnumber="299" extends="VkStructureType"  name="VK_STRUCTURE_TYPE_COMMAND_POOL_MEMORY_CONSUMPTION"/>
            <enum offset="5" extnumber="299" extends="VkStructureType"  name="VK_STRUCTURE_TYPE_PIPELINE_POOL_SIZE"/>
        </require>
        <require comment="fault handling functionality">
            <enum offset="7" extnumber="299" extends="VkStructureType"  name="VK_STRUCTURE_TYPE_FAULT_DATA"/>
            <enum offset="8" extnumber="299" extends="VkStructureType"  name="VK_STRUCTURE_TYPE_FAULT_CALLBACK_INFO"/>
            <type name="VkFaultData"/>
            <type name="VkFaultCallbackInfo"/>
            <type name="VkFaultLevel"/>
            <type name="VkFaultType"/>
            <type name="VkFaultQueryBehavior"/>
            <type name="PFN_vkFaultCallbackFunction"/>
            <command name="vkGetFaultData"/>
        </require>
        <require comment="pipeline offline create info">
            <enum offset="10" extnumber="299" extends="VkStructureType"  name="VK_STRUCTURE_TYPE_PIPELINE_OFFLINE_CREATE_INFO"/>
            <type name="VkPipelineOfflineCreateInfo"/>
            <type name="VkPipelineMatchControl"/>
        </require>
        <require comment="pipeline cache functionality">
            <enum offset="0" extnumber="299" extends="VkResult" dir="-" name="VK_ERROR_INVALID_PIPELINE_CACHE_DATA"/>
            <enum offset="1" extnumber="299" extends="VkResult" dir="-" name="VK_ERROR_NO_PIPELINE_MATCH"/>
            <enum bitpos="1" extends="VkPipelineCacheCreateFlagBits"    name="VK_PIPELINE_CACHE_CREATE_READ_ONLY_BIT"/>
            <enum bitpos="2" extends="VkPipelineCacheCreateFlagBits"    name="VK_PIPELINE_CACHE_CREATE_USE_APPLICATION_STORAGE_BIT"/>
            <type name="VkPipelineCacheCreateFlagBits" comment="This should be picked up from the extends= attributes above"/>
        </require>
        <require comment="seu safe memory functionality">
            <enum bitpos="2" extends="VkMemoryHeapFlagBits"             name="VK_MEMORY_HEAP_SEU_SAFE_BIT"/>
        </require>
        <require comment="pipeline cache header - These types are part of the API, though not all directly used in API commands or data structures">
            <enum offset="1" extnumber="299" extends="VkPipelineCacheHeaderVersion"    name="VK_PIPELINE_CACHE_HEADER_VERSION_SAFETY_CRITICAL_ONE"/>
            <type name="VkPipelineCacheValidationVersion"/>
            <type name="VkPipelineCacheStageValidationIndexEntry"/>
            <type name="VkPipelineCacheSafetyCriticalIndexEntry"/>
            <type name="VkPipelineCacheHeaderVersionSafetyCriticalOne"/>
        </require>
        <require depends="VK_VERSION_1_2">
            <feature name="vulkanMemoryModel" struct="VkPhysicalDeviceVulkanMemoryModelFeatures"/>
            <feature name="vulkanMemoryModel" struct="VkPhysicalDeviceVulkan12Features"/>
        </require>

        <remove comment="SC 1.0 removes some features from Vulkan 1.0/1.1/1.2">
            <enum name="VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO"/>
            <!--enum name="VK_OBJECT_TYPE_SHADER_MODULE" comment="leave this present for compatibility"/-->
            <enum name="VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT"/>
            <enum name="VK_PIPELINE_CREATE_DERIVATIVE_BIT"/>
            <enum name="VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT"/>

            <!-- Remove Vulkan and deprecated macros -->
            <type name="VK_API_VERSION"/>
            <type name="VK_MAKE_VERSION"/>
            <type name="VK_VERSION_MAJOR"/>
            <type name="VK_VERSION_MINOR"/>
            <type name="VK_VERSION_PATCH"/>

            <!--type name="VkShaderModule" comment="leave this present for compatibility"/-->
            <type name="VkShaderModuleCreateFlags"/>
            <type name="VkShaderModuleCreateFlagBits"/>
            <type name="VkShaderModuleCreateInfo"/>
            <type name="VkCommandPoolTrimFlags"/>
            <command name="vkCreateShaderModule"/>
            <command name="vkDestroyShaderModule"/>
            <command name="vkMergePipelineCaches"/>
            <command name="vkGetPipelineCacheData"/>
            <command name="vkTrimCommandPool"/>
            <command name="vkDestroyCommandPool"/>
            <command name="vkDestroyDescriptorPool"/>
            <command name="vkDestroyQueryPool"/>
            <command name="vkDestroySwapchainKHR"/>
            <command name="vkFreeMemory"/>

            <!-- Descriptor update templates are unsupported -->
            <enum name="VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO"/>
            <enum name="VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE"/>
            <command name="vkCreateDescriptorUpdateTemplate"/>
            <command name="vkDestroyDescriptorUpdateTemplate"/>
            <command name="vkUpdateDescriptorSetWithTemplate"/>
            <type name="VkDescriptorUpdateTemplate"/>
            <type name="VkDescriptorUpdateTemplateCreateFlags"/>
            <type name="VkDescriptorUpdateTemplateType"/>
            <type name="VkDescriptorUpdateTemplateEntry"/>
            <type name="VkDescriptorUpdateTemplateCreateInfo"/>
            <enum name="VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET"/>
	    <enum name="VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO"/>
	    <type name="VkPushDescriptorSetWithTemplateInfo"/>
	    <command name="vkCmdPushDescriptorSetWithTemplate"/>
	    <command name="vkCmdPushDescriptorSetWithTemplate2"/>

            <!-- Sparse resources are unsupported -->
            <enum name="VK_QUEUE_SPARSE_BINDING_BIT"/>
            <!--type name="VkPhysicalDeviceSparseProperties" comment="needed for VkPhysicalDeviceProperties"/-->
            <type name="VkSparseImageFormatProperties"/>
            <type name="VkSparseImageFormatFlagBits"/>
            <type name="VkSparseImageFormatFlags"/>
            <command name="vkGetPhysicalDeviceSparseImageFormatProperties"/>
            <command name="vkGetPhysicalDeviceSparseImageFormatProperties2"/>
            <type name="VkPhysicalDeviceSparseImageFormatInfo2"/>
            <enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2"/>
            <type name="VkSparseImageFormatProperties2"/>
            <enum name="VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2"/>
            <type name="VkSparseImageMemoryRequirements"/>
            <command name="vkGetImageSparseMemoryRequirements"/>
            <command name="vkGetImageSparseMemoryRequirements2"/>
            <type name="VkImageSparseMemoryRequirementsInfo2"/>
            <enum name="VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2"/>
            <type name="VkSparseImageMemoryRequirements2"/>
            <enum name="VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2"/>
            <type name="VkSparseMemoryBind"/>
            <type name="VkSparseMemoryBindFlagBits"/>
            <type name="VkSparseMemoryBindFlags"/>
            <type name="VkSparseBufferMemoryBindInfo"/>
            <type name="VkSparseImageOpaqueMemoryBindInfo"/>
            <type name="VkSparseImageMemoryBindInfo"/>
            <type name="VkSparseImageMemoryBind"/>
            <command name="vkQueueBindSparse"/>
            <type name="VkBindSparseInfo"/>
            <enum name="VK_STRUCTURE_TYPE_BIND_SPARSE_INFO"/>
            <type name="VkDeviceGroupBindSparseInfo"/>
            <enum name="VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO"/>

            <command name="vkDestroySemaphoreSciSyncPoolNV"/>
        </remove>

        <remove reasonlink="SCID-8">
            <feature name="multiview" struct="VkPhysicalDeviceMultiviewFeatures"/>
            <feature name="multiview" struct="VkPhysicalDeviceVulkan11Features"/>
            <feature name="timelineSemaphore" struct="VkPhysicalDeviceTimelineSemaphoreFeatures"/>
            <feature name="timelineSemaphore" struct="VkPhysicalDeviceVulkan12Features"/>
        </remove>
    </feature>

    <extensions comment="Vulkan extension interface definitions">
        <extension name="VK_KHR_surface" number="1" type="instance" author="KHR" contact="James Jones @cubanismo,Ian Elliott @ianelliottus" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="25"                                                name="VK_KHR_SURFACE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_surface&quot;"                        name="VK_KHR_SURFACE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkResult" dir="-"                     name="VK_ERROR_SURFACE_LOST_KHR"/>
                <enum offset="1" extends="VkResult" dir="-"                     name="VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"/>
                <enum offset="0" extends="VkObjectType"                         name="VK_OBJECT_TYPE_SURFACE_KHR"/>
                <type name="VkSurfaceKHR"/>
                <type name="VkSurfaceTransformFlagBitsKHR"/>
                <type name="VkPresentModeKHR"/>
                <type name="VkColorSpaceKHR"/>
                <type name="VkCompositeAlphaFlagBitsKHR"/>
                <type name="VkCompositeAlphaFlagsKHR"/>
                <type name="VkSurfaceCapabilitiesKHR"/>
                <type name="VkSurfaceFormatKHR"/>
                <command name="vkDestroySurfaceKHR"/>
                <command name="vkGetPhysicalDeviceSurfaceSupportKHR"/>
                <command name="vkGetPhysicalDeviceSurfaceCapabilitiesKHR"/>
                <command name="vkGetPhysicalDeviceSurfaceFormatsKHR"/>
                <command name="vkGetPhysicalDeviceSurfacePresentModesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_swapchain" number="2" type="device" depends="VK_KHR_surface" author="KHR" contact="James Jones @cubanismo,Ian Elliott @ianelliottus" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="70"                                                name="VK_KHR_SWAPCHAIN_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_swapchain&quot;"                      name="VK_KHR_SWAPCHAIN_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PRESENT_INFO_KHR"/>
                <enum offset="2" extends="VkImageLayout"                        name="VK_IMAGE_LAYOUT_PRESENT_SRC_KHR"/>
                <enum offset="3" extends="VkResult"                             name="VK_SUBOPTIMAL_KHR"/>
                <enum offset="4" extends="VkResult" dir="-"                     name="VK_ERROR_OUT_OF_DATE_KHR"/>
                <enum offset="0" extends="VkObjectType"                         name="VK_OBJECT_TYPE_SWAPCHAIN_KHR"/>
                <type name="VkSwapchainCreateFlagBitsKHR"/>
                <type name="VkSwapchainCreateFlagsKHR"/>
                <type name="VkSwapchainCreateInfoKHR"/>
                <type name="VkSwapchainKHR"/>
                <type name="VkPresentInfoKHR"/>
                <command name="vkCreateSwapchainKHR"/>
                <command name="vkDestroySwapchainKHR"/>
                <command name="vkGetSwapchainImagesKHR"/>
                <command name="vkAcquireNextImageKHR"/>
                <command name="vkQueuePresentKHR"/>
            </require>
            <require depends="VK_VERSION_1_1">
                <comment>This duplicates definitions in VK_KHR_device_group below</comment>
                <enum extends="VkStructureType" extnumber="61"  offset="7"      name="VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR"/>
                <enum extends="VkStructureType" extnumber="61"  offset="8"      name="VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR"/>
                <enum extends="VkStructureType" extnumber="61"  offset="9"      name="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR"/>
                <enum extends="VkStructureType" extnumber="61"  offset="10"     name="VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR"/>
                <enum extends="VkStructureType" extnumber="61"  offset="11"     name="VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR"/>
                <enum extends="VkStructureType" extnumber="61"  offset="12"     name="VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR"/>
                <enum bitpos="0" extends="VkSwapchainCreateFlagBitsKHR"         name="VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR" comment="Allow images with VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT"/>
                <type name="VkImageSwapchainCreateInfoKHR"/>
                <type name="VkBindImageMemorySwapchainInfoKHR"/>
                <type name="VkAcquireNextImageInfoKHR"/>
                <type name="VkDeviceGroupPresentModeFlagBitsKHR"/>
                <type name="VkDeviceGroupPresentModeFlagsKHR"/>
                <type name="VkDeviceGroupPresentCapabilitiesKHR"/>
                <type name="VkDeviceGroupPresentInfoKHR"/>
                <type name="VkDeviceGroupSwapchainCreateInfoKHR"/>
                <command name="vkGetDeviceGroupPresentCapabilitiesKHR"/>
                <command name="vkGetDeviceGroupSurfacePresentModesKHR"/>
                <command name="vkGetPhysicalDevicePresentRectanglesKHR"/>
                <command name="vkAcquireNextImage2KHR"/>
                <enum bitpos="1" extends="VkSwapchainCreateFlagBitsKHR"         name="VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR" comment="Swapchain is protected"/>
            </require>
        </extension>
        <extension name="VK_KHR_display" number="3" type="instance" depends="VK_KHR_surface" author="KHR" contact="James Jones @cubanismo,Norbert Nopper @FslNopper" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="23"                                                name="VK_KHR_DISPLAY_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_display&quot;"                        name="VK_KHR_DISPLAY_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR"/>
                <enum offset="0" extends="VkObjectType"                         name="VK_OBJECT_TYPE_DISPLAY_KHR"/>
                <enum offset="1" extends="VkObjectType"                         name="VK_OBJECT_TYPE_DISPLAY_MODE_KHR"/>
                <type name="VkDisplayKHR"/>
                <type name="VkDisplayModeCreateFlagsKHR"/>
                <type name="VkDisplayModeCreateInfoKHR"/>
                <type name="VkDisplayModeKHR"/>
                <type name="VkDisplayModeParametersKHR"/>
                <type name="VkDisplayModePropertiesKHR"/>
                <type name="VkDisplayPlaneAlphaFlagBitsKHR"/>
                <type name="VkDisplayPlaneAlphaFlagsKHR"/>
                <type name="VkDisplayPlaneCapabilitiesKHR"/>
                <type name="VkDisplayPlanePropertiesKHR"/>
                <type name="VkDisplayPropertiesKHR"/>
                <type name="VkDisplaySurfaceCreateFlagsKHR"/>
                <type name="VkDisplaySurfaceCreateInfoKHR"/>
                <type name="VkSurfaceTransformFlagsKHR"/>
                <command name="vkGetPhysicalDeviceDisplayPropertiesKHR"/>
                <command name="vkGetPhysicalDeviceDisplayPlanePropertiesKHR"/>
                <command name="vkGetDisplayPlaneSupportedDisplaysKHR"/>
                <command name="vkGetDisplayModePropertiesKHR"/>
                <command name="vkCreateDisplayModeKHR"/>
                <command name="vkGetDisplayPlaneCapabilitiesKHR"/>
                <command name="vkCreateDisplayPlaneSurfaceKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_display_swapchain" number="4" type="device" depends="VK_KHR_swapchain+VK_KHR_display" author="KHR" contact="James Jones @cubanismo" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="10"                                                name="VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_display_swapchain&quot;"              name="VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR"/>
                <enum offset="1" extends="VkResult" dir="-"                     name="VK_ERROR_INCOMPATIBLE_DISPLAY_KHR"/>
                <type name="VkDisplayPresentInfoKHR"/>
                <command name="vkCreateSharedSwapchainsKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_xlib_surface" number="5" type="instance" depends="VK_KHR_surface" platform="xlib" author="KHR" contact="Jesse Hall @critsec,Ian Elliott @ianelliottus" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="6"                                                 name="VK_KHR_XLIB_SURFACE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_xlib_surface&quot;"                   name="VK_KHR_XLIB_SURFACE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR"/>
                <type name="VkXlibSurfaceCreateFlagsKHR"/>
                <type name="VkXlibSurfaceCreateInfoKHR"/>
                <command name="vkCreateXlibSurfaceKHR"/>
                <command name="vkGetPhysicalDeviceXlibPresentationSupportKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_xcb_surface" number="6" type="instance" depends="VK_KHR_surface" platform="xcb" author="KHR" contact="Jesse Hall @critsec,Ian Elliott @ianelliottus" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="6"                                                 name="VK_KHR_XCB_SURFACE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_xcb_surface&quot;"                    name="VK_KHR_XCB_SURFACE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR"/>
                <type name="VkXcbSurfaceCreateFlagsKHR"/>
                <type name="VkXcbSurfaceCreateInfoKHR"/>
                <command name="vkCreateXcbSurfaceKHR"/>
                <command name="vkGetPhysicalDeviceXcbPresentationSupportKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_wayland_surface" number="7" type="instance" depends="VK_KHR_surface" platform="wayland" author="KHR" contact="Jesse Hall @critsec,Ian Elliott @ianelliottus" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="6"                                                 name="VK_KHR_WAYLAND_SURFACE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_wayland_surface&quot;"                name="VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR"/>
                <type name="VkWaylandSurfaceCreateFlagsKHR"/>
                <type name="VkWaylandSurfaceCreateInfoKHR"/>
                <command name="vkCreateWaylandSurfaceKHR"/>
                <command name="vkGetPhysicalDeviceWaylandPresentationSupportKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_mir_surface" number="8" type="instance" depends="VK_KHR_surface" author="KHR" supported="disabled" comment="Extension permanently disabled. Extension number should not be reused" ratified="vulkan">
            <require>
                <enum value="4"                                                 name="VK_KHR_MIR_SURFACE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_mir_surface&quot;"                    name="VK_KHR_MIR_SURFACE_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_android_surface" number="9" type="instance" depends="VK_KHR_surface" platform="android" author="KHR" contact="Jesse Hall @critsec" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="6"                                                 name="VK_KHR_ANDROID_SURFACE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_android_surface&quot;"                name="VK_KHR_ANDROID_SURFACE_EXTENSION_NAME"/>
                <type name="ANativeWindow"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR"/>
                <type name="VkAndroidSurfaceCreateFlagsKHR"/>
                <type name="VkAndroidSurfaceCreateInfoKHR"/>
                <command name="vkCreateAndroidSurfaceKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_win32_surface" number="10" type="instance" depends="VK_KHR_surface" platform="win32" author="KHR" contact="Jesse Hall @critsec,Ian Elliott @ianelliottus" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="6"                                                 name="VK_KHR_WIN32_SURFACE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_win32_surface&quot;"                  name="VK_KHR_WIN32_SURFACE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR"/>
                <type name="VkWin32SurfaceCreateFlagsKHR"/>
                <type name="VkWin32SurfaceCreateInfoKHR"/>
                <command name="vkCreateWin32SurfaceKHR"/>
                <command name="vkGetPhysicalDeviceWin32PresentationSupportKHR"/>
            </require>
        </extension>
        <extension name="VK_ANDROID_native_buffer" number="11" type="device" author="ANDROID" platform="android" contact="Jesse Hall @critsec" supported="disabled">
            <require>
                <comment>VK_ANDROID_native_buffer is used between the Android Vulkan loader and drivers to implement the WSI extensions. It is not exposed to applications and uses types that are not part of Android's stable public API, so it is left disabled to keep it out of the standard Vulkan headers.</comment>
                <enum value="8"                                                 name="VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION"/>
                <enum value="11"                                                name="VK_ANDROID_NATIVE_BUFFER_NUMBER"/>
                <enum value="&quot;VK_ANDROID_native_buffer&quot;"              name="VK_ANDROID_NATIVE_BUFFER_EXTENSION_NAME"/>
                <enum                                                           name="VK_ANDROID_NATIVE_BUFFER_NAME" alias="VK_ANDROID_NATIVE_BUFFER_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID"/>
                <enum offset="2" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID"/>
                <type name="VkNativeBufferANDROID"/>
                <type name="VkSwapchainImageCreateInfoANDROID"/>
                <type name="VkPhysicalDevicePresentationPropertiesANDROID"/>
                <type name="VkNativeBufferUsage2ANDROID"/>
                <type name="VkSwapchainImageUsageFlagBitsANDROID"/>
                <type name="VkSwapchainImageUsageFlagsANDROID"/>
                <command name="vkGetSwapchainGrallocUsageANDROID"/>
                <command name="vkAcquireImageANDROID"/>
                <command name="vkQueueSignalReleaseImageANDROID"/>
                <command name="vkGetSwapchainGrallocUsage2ANDROID"/>
            </require>
        </extension>
        <extension name="VK_EXT_debug_report" number="12" type="instance" author="GOOGLE" contact="Courtney Goeltzenleuchter @courtney-g" specialuse="debugging" supported="vulkan" deprecatedby="VK_EXT_debug_utils" nofeatures="true">
            <require>
                <enum value="10"                                                name="VK_EXT_DEBUG_REPORT_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_debug_report&quot;"                   name="VK_EXT_DEBUG_REPORT_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT"/>
                <enum alias="VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT" extends="VkStructureType" name="VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT" deprecated="aliased"/>
                <enum api="vulkan" offset="1" extends="VkResult" dir="-"        name="VK_ERROR_VALIDATION_FAILED_EXT"/>
                <enum api="vulkansc" extends="VkResult"                         name="VK_ERROR_VALIDATION_FAILED_EXT" alias="VK_ERROR_VALIDATION_FAILED"/>
                <enum offset="0" extends="VkObjectType"                         name="VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT"/>
                <type name="VkDebugReportCallbackEXT"/>
                <type name="PFN_vkDebugReportCallbackEXT"/>
                <type name="VkDebugReportFlagBitsEXT"/>
                <type name="VkDebugReportFlagsEXT"/>
                <type name="VkDebugReportObjectTypeEXT"/>
                <type name="VkDebugReportCallbackCreateInfoEXT"/>
                <command name="vkCreateDebugReportCallbackEXT"/>
                <command name="vkDestroyDebugReportCallbackEXT"/>
                <command name="vkDebugReportMessageEXT"/>
            </require>
            <require depends="VK_VERSION_1_1">
                <comment>This duplicates definitions in other extensions, below</comment>
                <enum extends="VkDebugReportObjectTypeEXT" extnumber="157" offset="0"  name="VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT"/>
                <enum extends="VkDebugReportObjectTypeEXT" extnumber="86"  offset="0"  name="VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT"/>
            </require>
        </extension>
        <extension name="VK_NV_glsl_shader" number="13" type="device" author="NV" contact="Piers Daniell @pdaniell-nv" supported="vulkan" deprecatedby="" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_NV_GLSL_SHADER_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_glsl_shader&quot;"                     name="VK_NV_GLSL_SHADER_EXTENSION_NAME"/>
                <enum offset="0" extends="VkResult" dir="-"                     name="VK_ERROR_INVALID_SHADER_NV"/>
            </require>
        </extension>
        <extension name="VK_EXT_depth_range_unrestricted" type="device" number="14" author="NV" contact="Piers Daniell @pdaniell-nv" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_depth_range_unrestricted&quot;"       name="VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_sampler_mirror_clamp_to_edge" type="device" number="15" author="KHR" contact="Tobias Hector @tobski" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="3"                                                 name="VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_sampler_mirror_clamp_to_edge&quot;"   name="VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME"/>
                <enum value="4" extends="VkSamplerAddressMode"                  name="VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE" comment="Note that this defines what was previously a core enum, and so uses the 'value' attribute rather than 'offset', and does not have a suffix. This is a special case, and should not be repeated"/>
                <enum           extends="VkSamplerAddressMode"                  name="VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR" alias="VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE"  deprecated="aliased" comment="Introduced for consistency with extension suffixing rules"/>
            </require>
        </extension>
        <extension name="VK_IMG_filter_cubic" number="16" type="device" author="IMG" contact="Tobias Hector @tobski" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_IMG_FILTER_CUBIC_SPEC_VERSION"/>
                <enum value="&quot;VK_IMG_filter_cubic&quot;"                   name="VK_IMG_FILTER_CUBIC_EXTENSION_NAME"/>
                <enum extends="VkFilter"                                        name="VK_FILTER_CUBIC_IMG" alias="VK_FILTER_CUBIC_EXT"/>
                <enum extends="VkFormatFeatureFlagBits"                         name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG" alias="VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT" comment="Format can be filtered with VK_FILTER_CUBIC_IMG when being sampled"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_17" number="17" author="AMD" contact="Daniel Rakos @drakos-amd" supported="disabled">
            <require>
                <enum value="0"                                                 name="VK_AMD_EXTENSION_17_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_17&quot;"                   name="VK_AMD_EXTENSION_17_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_18" number="18" author="AMD" contact="Daniel Rakos @drakos-amd" supported="disabled">
            <require>
                <enum value="0"                                                 name="VK_AMD_EXTENSION_18_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_18&quot;"                   name="VK_AMD_EXTENSION_18_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_rasterization_order" number="19" type="device" author="AMD" contact="Daniel Rakos @drakos-amd" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_rasterization_order&quot;"            name="VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD"/>
                <type name="VkRasterizationOrderAMD"/>
                <type name="VkPipelineRasterizationStateRasterizationOrderAMD"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_20" number="20" author="AMD" contact="Daniel Rakos @drakos-amd" supported="disabled">
            <require>
                <enum value="0"                                                 name="VK_AMD_EXTENSION_20_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_20&quot;"                   name="VK_AMD_EXTENSION_20_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_shader_trinary_minmax" number="21" type="device" author="AMD" contact="Qun Lin @linqun" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_shader_trinary_minmax&quot;"          name="VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_shader_explicit_vertex_parameter" number="22" type="device" author="AMD" contact="Qun Lin @linqun" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_shader_explicit_vertex_parameter&quot;" name="VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_debug_marker" number="23" type="device" depends="VK_EXT_debug_report" author="Baldur Karlsson" contact="Baldur Karlsson @baldurk" specialuse="debugging" supported="vulkan" promotedto="VK_EXT_debug_utils" nofeatures="true">
            <require>
                <enum value="4"                                                 name="VK_EXT_DEBUG_MARKER_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_debug_marker&quot;"                   name="VK_EXT_DEBUG_MARKER_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT"/>
                <enum offset="2" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT"/>
                <type name="VkDebugReportObjectTypeEXT"/>
                <type name="VkDebugMarkerObjectNameInfoEXT"/>
                <type name="VkDebugMarkerObjectTagInfoEXT"/>
                <type name="VkDebugMarkerMarkerInfoEXT"/>
                <command name="vkDebugMarkerSetObjectTagEXT"/>
                <command name="vkDebugMarkerSetObjectNameEXT"/>
                <command name="vkCmdDebugMarkerBeginEXT"/>
                <command name="vkCmdDebugMarkerEndEXT"/>
                <command name="vkCmdDebugMarkerInsertEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_video_queue" number="24" type="device" depends="(VK_VERSION_1_1+VK_KHR_synchronization2),VK_VERSION_1_3" author="KHR" contact="Tony Zlatinski @tzlatinski" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="8"                                         name="VK_KHR_VIDEO_QUEUE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_video_queue&quot;"            name="VK_KHR_VIDEO_QUEUE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR"/>
                <enum offset="2" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR"/>
                <enum offset="3" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR"/>
                <enum offset="4" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR"/>
                <enum offset="5" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR"/>
                <enum offset="6" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR"/>
                <enum offset="7" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR"/>
                <enum offset="8" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR"/>
                <enum offset="9" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR"/>
                <enum offset="10" extends="VkStructureType"             name="VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR"/>
                <enum offset="11" extends="VkStructureType"             name="VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR"/>
                <enum offset="12" extends="VkStructureType"             name="VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR"/>
                <enum offset="13" extends="VkStructureType"             name="VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR"/>
                <enum offset="14" extends="VkStructureType"             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR"/>
                <enum offset="15" extends="VkStructureType"             name="VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR"/>
                <enum offset="16" extends="VkStructureType"             name="VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR"/>

                <enum offset="0"  extends="VkObjectType"                name="VK_OBJECT_TYPE_VIDEO_SESSION_KHR" comment="VkVideoSessionKHR"/>
                <enum offset="1"  extends="VkObjectType"                name="VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR" comment="VkVideoSessionParametersKHR"/>

                <enum offset="0" extends="VkQueryType"                  name="VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR"/>
                <enum bitpos="4" extends="VkQueryResultFlagBits"        name="VK_QUERY_RESULT_WITH_STATUS_BIT_KHR"/>

                <enum offset="0" extends="VkResult" dir="-"             name="VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR"/>
                <enum offset="1" extends="VkResult" dir="-"             name="VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR"/>
                <enum offset="2" extends="VkResult" dir="-"             name="VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR"/>
                <enum offset="3" extends="VkResult" dir="-"             name="VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR"/>
                <enum offset="4" extends="VkResult" dir="-"             name="VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR"/>
                <enum offset="5" extends="VkResult" dir="-"             name="VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR"/>

                <type name="VkVideoSessionKHR"/>
                <type name="VkVideoSessionParametersKHR"/>

                <type name="VkVideoCodecOperationFlagBitsKHR"/>
                <type name="VkVideoCodecOperationFlagsKHR"/>
                <type name="VkVideoChromaSubsamplingFlagBitsKHR"/>
                <type name="VkVideoChromaSubsamplingFlagsKHR"/>
                <type name="VkVideoComponentBitDepthFlagBitsKHR"/>
                <type name="VkVideoComponentBitDepthFlagsKHR"/>
                <type name="VkVideoCapabilityFlagBitsKHR"/>
                <type name="VkVideoCapabilityFlagsKHR"/>
                <type name="VkVideoSessionCreateFlagBitsKHR"/>
                <type name="VkVideoSessionCreateFlagsKHR"/>
                <type name="VkVideoSessionParametersCreateFlagsKHR"/>
                <type name="VkVideoBeginCodingFlagsKHR"/>
                <type name="VkVideoEndCodingFlagsKHR"/>
                <type name="VkVideoCodingControlFlagBitsKHR"/>
                <type name="VkVideoCodingControlFlagsKHR"/>

                <type name="VkQueueFamilyQueryResultStatusPropertiesKHR"/>
                <type name="VkQueryResultStatusKHR"/>

                <type name="VkQueueFamilyVideoPropertiesKHR"/>
                <type name="VkVideoProfileInfoKHR"/>
                <type name="VkVideoProfileListInfoKHR"/>
                <type name="VkVideoCapabilitiesKHR"/>
                <type name="VkPhysicalDeviceVideoFormatInfoKHR"/>
                <type name="VkVideoFormatPropertiesKHR"/>
                <type name="VkVideoPictureResourceInfoKHR"/>
                <type name="VkVideoReferenceSlotInfoKHR"/>
                <type name="VkVideoSessionMemoryRequirementsKHR"/>
                <type name="VkBindVideoSessionMemoryInfoKHR"/>
                <type name="VkVideoSessionCreateInfoKHR"/>
                <type name="VkVideoSessionParametersCreateInfoKHR"/>
                <type name="VkVideoSessionParametersUpdateInfoKHR"/>
                <type name="VkVideoBeginCodingInfoKHR"/>
                <type name="VkVideoEndCodingInfoKHR"/>
                <type name="VkVideoCodingControlInfoKHR"/>

                <command name="vkGetPhysicalDeviceVideoCapabilitiesKHR"/>
                <command name="vkGetPhysicalDeviceVideoFormatPropertiesKHR"/>

                <command name="vkCreateVideoSessionKHR"/>
                <command name="vkDestroyVideoSessionKHR"/>
                <command name="vkGetVideoSessionMemoryRequirementsKHR"/>
                <command name="vkBindVideoSessionMemoryKHR"/>
                <command name="vkCreateVideoSessionParametersKHR"/>
                <command name="vkUpdateVideoSessionParametersKHR"/>
                <command name="vkDestroyVideoSessionParametersKHR"/>
                <command name="vkCmdBeginVideoCodingKHR"/>
                <command name="vkCmdEndVideoCodingKHR"/>
                <command name="vkCmdControlVideoCodingKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_video_decode_queue" number="25" type="device" depends="VK_KHR_video_queue+(VK_KHR_synchronization2,VK_VERSION_1_3)" author="KHR" contact="jake.beju@amd.com" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="8"                                         name="VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_video_decode_queue&quot;"     name="VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR"/>
                <enum offset="2" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR"/>
                <enum bitpos="5" extends="VkQueueFlagBits"              name="VK_QUEUE_VIDEO_DECODE_BIT_KHR"/>
                <!-- VkPipelineStageFlagBits bitpos="26" is reserved by this extension, but not used -->
                <enum bitpos="26" extends="VkPipelineStageFlagBits2"    name="VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR"/>
                <enum bitpos="35" extends="VkAccessFlagBits2"           name="VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR"/>
                <enum bitpos="36" extends="VkAccessFlagBits2"           name="VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR"/>
                <enum bitpos="13" extends="VkBufferUsageFlagBits"       name="VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR"/>
                <enum bitpos="14" extends="VkBufferUsageFlagBits"       name="VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR"/>
                <enum bitpos="10" extends="VkImageUsageFlagBits"        name="VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR"/>
                <enum bitpos="11" extends="VkImageUsageFlagBits"        name="VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR"/>
                <enum bitpos="12" extends="VkImageUsageFlagBits"        name="VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR"/>
                <enum bitpos="25" extends="VkFormatFeatureFlagBits"     name="VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR"/>
                <enum bitpos="26" extends="VkFormatFeatureFlagBits"     name="VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR"/>
                <enum offset="0" extends="VkImageLayout"                name="VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR"/>
                <enum offset="1" extends="VkImageLayout"                name="VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR"/>
                <enum offset="2" extends="VkImageLayout"                name="VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR"/>

                <type name="VkVideoDecodeCapabilityFlagBitsKHR"/>
                <type name="VkVideoDecodeCapabilityFlagsKHR"/>
                <type name="VkVideoDecodeCapabilitiesKHR"/>

                <type name="VkVideoDecodeUsageFlagBitsKHR"/>
                <type name="VkVideoDecodeUsageFlagsKHR"/>
                <type name="VkVideoDecodeUsageInfoKHR"/>

                <type name="VkVideoDecodeFlagsKHR"/>

                <type name="VkVideoDecodeInfoKHR"/>
                <command name="vkCmdDecodeVideoKHR"/>
            </require>
            <require depends="VK_KHR_format_feature_flags2,VK_VERSION_1_3">
                <enum bitpos="25" extends="VkFormatFeatureFlagBits2"        name="VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR"/>
                <enum bitpos="26" extends="VkFormatFeatureFlagBits2"        name="VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR"/>
            </require>
        </extension>
        <extension name="VK_AMD_gcn_shader" number="26" type="device" author="AMD" contact="Dominik Witczak @dominikwitczakamd" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_AMD_GCN_SHADER_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_gcn_shader&quot;"                     name="VK_AMD_GCN_SHADER_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_dedicated_allocation" number="27" type="device" author="NV" contact="Jeff Bolz @jeffbolznv" supported="vulkan" deprecatedby="VK_KHR_dedicated_allocation" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_dedicated_allocation&quot;"            name="VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV"/>
                <enum offset="2" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV"/>
                <type name="VkDedicatedAllocationImageCreateInfoNV"/>
                <type name="VkDedicatedAllocationBufferCreateInfoNV"/>
                <type name="VkDedicatedAllocationMemoryAllocateInfoNV"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_28" number="28" author="NV" contact="Piers Daniell @pdaniell-nv" supported="disabled">
            <require>
                <enum value="0"                                                 name="VK_EXT_EXTENSION_28_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_28&quot;"                   name="VK_EXT_EXTENSION_28_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_transform_feedback" number="29" type="device" author="NV" contact="Piers Daniell @pdaniell-nv" specialuse="glemulation,d3demulation,devtools" supported="vulkan" ratified="vulkan" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1">
            <require>
                <enum value="1"                                                 name="VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_transform_feedback&quot;"             name="VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME"/>
                <command name="vkCmdBindTransformFeedbackBuffersEXT"/>
                <command name="vkCmdBeginTransformFeedbackEXT"/>
                <command name="vkCmdEndTransformFeedbackEXT"/>
                <command name="vkCmdBeginQueryIndexedEXT"/>
                <command name="vkCmdEndQueryIndexedEXT"/>
                <command name="vkCmdDrawIndirectByteCountEXT"/>

                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT"/>
                <enum offset="2" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT"/>

                <enum offset="4" extends="VkQueryType"                          name="VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT"/>

                <enum bitpos="11" extends="VkBufferUsageFlagBits"               name="VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT"/>
                <enum bitpos="12" extends="VkBufferUsageFlagBits"               name="VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT"/>

                <enum bitpos="25" extends="VkAccessFlagBits"                    name="VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT"/>
                <enum bitpos="26" extends="VkAccessFlagBits"                    name="VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT"/>
                <enum bitpos="27" extends="VkAccessFlagBits"                    name="VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT"/>

                <enum bitpos="24" extends="VkPipelineStageFlagBits"             name="VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT"/>

                <type name="VkPhysicalDeviceTransformFeedbackFeaturesEXT"/>
                <type name="VkPhysicalDeviceTransformFeedbackPropertiesEXT"/>
                <type name="VkPipelineRasterizationStateStreamCreateInfoEXT"/>

                <type name="VkPipelineRasterizationStateStreamCreateFlagsEXT"/>
                <feature name="transformFeedback" struct="VkPhysicalDeviceTransformFeedbackFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_NVX_binary_import" number="30" type="device" author="NVX" contact="Eric Werness @ewerness-nv,Liam Middlebrook @liam-middlebrook" supported="vulkan" nofeatures="true">
            <require>
                <enum value="2"                                                 name="VK_NVX_BINARY_IMPORT_SPEC_VERSION"/>
                <enum value="&quot;VK_NVX_binary_import&quot;"                  name="VK_NVX_BINARY_IMPORT_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX"/>
                <enum offset="2" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX"/>
                <enum offset="4" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_CU_MODULE_TEXTURING_MODE_CREATE_INFO_NVX"/>
                <enum offset="0" extends="VkObjectType"                         name="VK_OBJECT_TYPE_CU_MODULE_NVX"/>
                <enum offset="1" extends="VkObjectType"                         name="VK_OBJECT_TYPE_CU_FUNCTION_NVX"/>
                <type name="VkCuModuleNVX"/>
                <type name="VkCuFunctionNVX"/>
                <type name="VkCuModuleCreateInfoNVX"/>
                <type name="VkCuModuleTexturingModeCreateInfoNVX"/>
                <type name="VkCuFunctionCreateInfoNVX"/>
                <type name="VkCuLaunchInfoNVX"/>
                <command name="vkCreateCuModuleNVX"/>
                <command name="vkCreateCuFunctionNVX"/>
                <command name="vkDestroyCuModuleNVX"/>
                <command name="vkDestroyCuFunctionNVX"/>
                <command name="vkCmdCuLaunchKernelNVX"/>
            </require>
            <require depends="VK_EXT_debug_report">
                <enum offset="0" extends="VkDebugReportObjectTypeEXT"           name="VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT"/>
                <enum offset="1" extends="VkDebugReportObjectTypeEXT"           name="VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT"/>
            </require>
        </extension>
        <extension name="VK_NVX_image_view_handle" number="31" type="device" author="NVX" contact="Eric Werness @ewerness-nv" supported="vulkan" nofeatures="true">
            <require>
                <enum value="3"                                                 name="VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION"/>
                <enum value="&quot;VK_NVX_image_view_handle&quot;"              name="VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX"/>
                <type name="VkImageViewHandleInfoNVX"/>
                <type name="VkImageViewAddressPropertiesNVX"/>
                <command name="vkGetImageViewHandleNVX"/>
                <command name="vkGetImageViewHandle64NVX"/>
                <command name="vkGetImageViewAddressNVX"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_32" number="32" author="AMD" contact="Daniel Rakos @drakos-amd" supported="disabled">
            <require>
                <enum value="0"                                                 name="VK_AMD_EXTENSION_32_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_32&quot;"                   name="VK_AMD_EXTENSION_32_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_33" number="33" author="AMD" contact="Daniel Rakos @drakos-amd" supported="disabled">
            <require>
                <enum value="0"                                                 name="VK_AMD_EXTENSION_33_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_33&quot;"                   name="VK_AMD_EXTENSION_33_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_draw_indirect_count" number="34" type="device" author="AMD" contact="Daniel Rakos @drakos-amd" supported="vulkan" promotedto="VK_KHR_draw_indirect_count" nofeatures="true">
            <require>
                <enum value="2"                                                 name="VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_draw_indirect_count&quot;"            name="VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME"/>
                <command name="vkCmdDrawIndirectCountAMD"/>
                <command name="vkCmdDrawIndexedIndirectCountAMD"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_35" number="35" author="AMD" contact="Daniel Rakos @drakos-amd" supported="disabled">
            <require>
                <enum value="0"                                                 name="VK_AMD_EXTENSION_35_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_35&quot;"                   name="VK_AMD_EXTENSION_35_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_negative_viewport_height" number="36" type="device" author="AMD" contact="Matthaeus G. Chajdas @anteru" supported="vulkan" obsoletedby="VK_KHR_maintenance1" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_negative_viewport_height&quot;"       name="VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_gpu_shader_half_float" number="37" type="device" author="AMD" contact="Dominik Witczak @dominikwitczakamd" supported="vulkan" deprecatedby="VK_KHR_shader_float16_int8" nofeatures="true">
            <require>
                <enum value="2"                                                 name="VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_gpu_shader_half_float&quot;"          name="VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_shader_ballot" number="38" type="device" author="AMD" contact="Dominik Witczak @dominikwitczakamd" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_AMD_SHADER_BALLOT_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_shader_ballot&quot;"                  name="VK_AMD_SHADER_BALLOT_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_video_encode_h264" number="39" type="device" depends="VK_KHR_video_encode_queue" author="KHR" contact="Ahmed Abdelkhalek @aabdelkh" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="14"                                                name="VK_KHR_VIDEO_ENCODE_H264_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_video_encode_h264&quot;"              name="VK_KHR_VIDEO_ENCODE_H264_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR"/>
                <enum offset="2" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR"/>
                <enum offset="3" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR"/>
                <enum offset="4" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR"/>
                <enum offset="5" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR"/>
                <enum offset="6" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR"/>
                <enum offset="7" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR"/>
                <enum offset="8" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR"/>
                <enum offset="9" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR"/>
                <enum offset="10" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR"/>
                <enum offset="11" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR"/>
                <enum offset="12" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR"/>
                <enum offset="13" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR"/>
                <enum bitpos="16" extends="VkVideoCodecOperationFlagBitsKHR"    name="VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR"/>

                <type name="VkVideoEncodeH264CapabilityFlagBitsKHR"/>
                <type name="VkVideoEncodeH264CapabilityFlagsKHR"/>
                <type name="VkVideoEncodeH264StdFlagBitsKHR"/>
                <type name="VkVideoEncodeH264StdFlagsKHR"/>
                <type name="VkVideoEncodeH264CapabilitiesKHR"/>
                <type name="VkVideoEncodeH264QualityLevelPropertiesKHR"/>
                <type name="VkVideoEncodeH264SessionCreateInfoKHR"/>
                <type name="VkVideoEncodeH264SessionParametersCreateInfoKHR"/>
                <type name="VkVideoEncodeH264SessionParametersAddInfoKHR"/>
                <type name="VkVideoEncodeH264SessionParametersGetInfoKHR"/>
                <type name="VkVideoEncodeH264SessionParametersFeedbackInfoKHR"/>
                <type name="VkVideoEncodeH264PictureInfoKHR"/>
                <type name="VkVideoEncodeH264DpbSlotInfoKHR"/>
                <type name="VkVideoEncodeH264NaluSliceInfoKHR"/>
                <type name="VkVideoEncodeH264ProfileInfoKHR"/>
                <type name="VkVideoEncodeH264RateControlInfoKHR"/>
                <type name="VkVideoEncodeH264RateControlFlagBitsKHR"/>
                <type name="VkVideoEncodeH264RateControlFlagsKHR"/>
                <type name="VkVideoEncodeH264RateControlLayerInfoKHR"/>
                <type name="VkVideoEncodeH264QpKHR"/>
                <type name="VkVideoEncodeH264FrameSizeKHR"/>
                <type name="VkVideoEncodeH264GopRemainingFrameInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_video_encode_h265" number="40" type="device" depends="VK_KHR_video_encode_queue" author="KHR" contact="Ahmed Abdelkhalek @aabdelkh" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="14"                                             name="VK_KHR_VIDEO_ENCODE_H265_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_video_encode_h265&quot;"           name="VK_KHR_VIDEO_ENCODE_H265_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR"/>
                <enum offset="1" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR"/>
                <enum offset="2" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR"/>
                <enum offset="3" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR"/>
                <enum offset="4" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR"/>
                <enum offset="5" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR"/>
                <enum offset="6" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR"/>
                <enum offset="7" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR"/>
                <enum offset="9" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR"/>
                <enum offset="10" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR"/>
                <enum offset="11" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR"/>
                <enum offset="12" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR"/>
                <enum offset="13" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR"/>
                <enum offset="14" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR"/>
                <enum bitpos="17" extends="VkVideoCodecOperationFlagBitsKHR" name="VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR"/>

                <type name="VkVideoEncodeH265CapabilityFlagBitsKHR"/>
                <type name="VkVideoEncodeH265CapabilityFlagsKHR"/>
                <type name="VkVideoEncodeH265StdFlagBitsKHR"/>
                <type name="VkVideoEncodeH265StdFlagsKHR"/>
                <type name="VkVideoEncodeH265CtbSizeFlagBitsKHR"/>
                <type name="VkVideoEncodeH265CtbSizeFlagsKHR"/>
                <type name="VkVideoEncodeH265TransformBlockSizeFlagBitsKHR"/>
                <type name="VkVideoEncodeH265TransformBlockSizeFlagsKHR"/>
                <type name="VkVideoEncodeH265CapabilitiesKHR"/>
                <type name="VkVideoEncodeH265SessionCreateInfoKHR"/>
                <type name="VkVideoEncodeH265QualityLevelPropertiesKHR"/>
                <type name="VkVideoEncodeH265SessionParametersCreateInfoKHR"/>
                <type name="VkVideoEncodeH265SessionParametersAddInfoKHR"/>
                <type name="VkVideoEncodeH265SessionParametersGetInfoKHR"/>
                <type name="VkVideoEncodeH265SessionParametersFeedbackInfoKHR"/>
                <type name="VkVideoEncodeH265PictureInfoKHR"/>
                <type name="VkVideoEncodeH265DpbSlotInfoKHR"/>
                <type name="VkVideoEncodeH265NaluSliceSegmentInfoKHR"/>
                <type name="VkVideoEncodeH265ProfileInfoKHR"/>
                <type name="VkVideoEncodeH265RateControlInfoKHR"/>
                <type name="VkVideoEncodeH265RateControlFlagBitsKHR"/>
                <type name="VkVideoEncodeH265RateControlFlagsKHR"/>
                <type name="VkVideoEncodeH265RateControlLayerInfoKHR"/>
                <type name="VkVideoEncodeH265QpKHR"/>
                <type name="VkVideoEncodeH265FrameSizeKHR"/>
                <type name="VkVideoEncodeH265GopRemainingFrameInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_video_decode_h264" number="41" type="device" depends="VK_KHR_video_decode_queue" author="KHR" contact="peter.fang@amd.com" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="9"                                              name="VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_video_decode_h264&quot;"           name="VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR"/>
                <enum offset="1" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR"/>
                <enum offset="3" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR"/>
                <enum offset="4" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR"/>
                <enum offset="5" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR"/>
                <enum offset="6" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR"/>
                <enum bitpos="0" extends="VkVideoCodecOperationFlagBitsKHR"  name="VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR"/>
                <type name="VkVideoDecodeH264PictureLayoutFlagBitsKHR"/>
                <type name="VkVideoDecodeH264PictureLayoutFlagsKHR"/>
                <type name="VkVideoDecodeH264ProfileInfoKHR"/>
                <type name="VkVideoDecodeH264CapabilitiesKHR"/>
                <type name="VkVideoDecodeH264SessionParametersCreateInfoKHR"/>
                <type name="VkVideoDecodeH264SessionParametersAddInfoKHR"/>
                <type name="VkVideoDecodeH264PictureInfoKHR"/>
                <type name="VkVideoDecodeH264DpbSlotInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_AMD_texture_gather_bias_lod" number="42" author="AMD" contact="Rex Xu @amdrexu" supported="vulkan" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_texture_gather_bias_lod&quot;"        name="VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD"/>
                <type name="VkTextureLODGatherFormatPropertiesAMD"/>
            </require>
        </extension>
        <extension name="VK_AMD_shader_info" number="43" author="AMD" contact="Jaakko Konttinen @jaakkoamd" supported="vulkan" specialuse="devtools" type="device" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_AMD_SHADER_INFO_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_shader_info&quot;"                    name="VK_AMD_SHADER_INFO_EXTENSION_NAME"/>
                <type name="VkShaderInfoTypeAMD"/>
                <type name="VkShaderResourceUsageAMD"/>
                <type name="VkShaderStatisticsInfoAMD"/>
                <command name="vkGetShaderInfoAMD"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_44" number="44" author="AMD" contact="Daniel Rakos @drakos-amd" supported="disabled">
            <require>
                <enum value="0"                                                 name="VK_AMD_EXTENSION_44_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_44&quot;"                   name="VK_AMD_EXTENSION_44_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_dynamic_rendering" number="45" author="KHR" type="device" depends="((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_depth_stencil_resolve),VK_VERSION_1_2" contact="Tobias Hector @tobski" supported="vulkan" promotedto="VK_VERSION_1_3" ratified="vulkan">
            <require>
                <enum value="1"                                                 name="VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_dynamic_rendering&quot;"              name="VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME"/>
                <command name="vkCmdBeginRenderingKHR"/>
                <command name="vkCmdEndRenderingKHR"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_RENDERING_INFO_KHR" alias="VK_STRUCTURE_TYPE_RENDERING_INFO"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR" alias="VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR" alias="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO"/>
                <enum extends="VkAttachmentStoreOp"                             name="VK_ATTACHMENT_STORE_OP_NONE_KHR" alias="VK_ATTACHMENT_STORE_OP_NONE"/>
                <enum extends="VkRenderingFlagBits"                             name="VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR" alias="VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT"/>
                <enum extends="VkRenderingFlagBits"                             name="VK_RENDERING_SUSPENDING_BIT_KHR" alias="VK_RENDERING_SUSPENDING_BIT"/>
                <enum extends="VkRenderingFlagBits"                             name="VK_RENDERING_RESUMING_BIT_KHR" alias="VK_RENDERING_RESUMING_BIT"/>
                <type name="VkRenderingInfoKHR"/>
                <type name="VkRenderingAttachmentInfoKHR"/>
                <type name="VkPipelineRenderingCreateInfoKHR"/>
                <type name="VkPhysicalDeviceDynamicRenderingFeaturesKHR"/>
                <type name="VkCommandBufferInheritanceRenderingInfoKHR"/>
                <type name="VkRenderingFlagsKHR"/>
                <type name="VkRenderingFlagBitsKHR"/>
                <feature name="dynamicRendering" struct="VkPhysicalDeviceDynamicRenderingFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_46" number="46" author="AMD" contact="Daniel Rakos @drakos-amd" supported="disabled">
            <require>
                <enum value="0"                                                 name="VK_AMD_EXTENSION_46_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_46&quot;"                   name="VK_AMD_EXTENSION_46_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_shader_image_load_store_lod" number="47" author="AMD" contact="Dominik Witczak @dominikwitczakamd" supported="vulkan" type="device" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_shader_image_load_store_lod&quot;"    name="VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NVX_extension_48" number="48" author="NVX" contact="James Jones @cubanismo" supported="disabled">
            <require>
                <enum value="0"                                                 name="VK_NVX_EXTENSION_48_SPEC_VERSION"/>
                <enum value="&quot;VK_NVX_extension_48&quot;"                   name="VK_NVX_EXTENSION_48_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_GOOGLE_extension_49" number="49" author="GOOGLE" contact="Jean-Francois Roy @jfroy" supported="disabled">
            <require>
                <enum value="0"                                                 name="VK_GOOGLE_EXTENSION_49_SPEC_VERSION"/>
                <enum value="&quot;VK_GOOGLE_extension_49&quot;"                name="VK_GOOGLE_EXTENSION_49_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_GGP_stream_descriptor_surface" number="50" type="instance" depends="VK_KHR_surface" platform="ggp" author="GGP" contact="Jean-Francois Roy @jfroy" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION"/>
                <enum value="&quot;VK_GGP_stream_descriptor_surface&quot;"      name="VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP"/>
                <type name="VkStreamDescriptorSurfaceCreateFlagsGGP"/>
                <type name="VkStreamDescriptorSurfaceCreateInfoGGP"/>
                <command name="vkCreateStreamDescriptorSurfaceGGP"/>
            </require>
        </extension>
        <extension name="VK_NV_corner_sampled_image" number="51" author="NV" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Daniel Koch @dgkoch" supported="vulkan">
            <require>
                <enum value="2"                                                 name="VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_corner_sampled_image&quot;"            name="VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME"/>
                <enum bitpos="13" extends="VkImageCreateFlagBits"               name="VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV"/>
                <type name="VkPhysicalDeviceCornerSampledImageFeaturesNV"/>
                <feature name="cornerSampledImage" struct="VkPhysicalDeviceCornerSampledImageFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_private_vendor_info" number="52" type="device" author="NV" contact="Daniel Koch @dgkoch" supported="vulkansc" nofeatures="true">
            <require>
                <enum value="2"                                                 name="VK_NV_PRIVATE_VENDOR_INFO_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_private_vendor_info&quot;"             name="VK_NV_PRIVATE_VENDOR_INFO_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PRIVATE_VENDOR_INFO_PLACEHOLDER_OFFSET_0_NV"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_53" number="53" author="NV" contact="Jeff Bolz @jeffbolznv" supported="disabled">
            <require>
                <enum value="0"                                                 name="VK_NV_EXTENSION_53_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_53&quot;"                    name="VK_NV_EXTENSION_53_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_multiview" number="54" type="device" author="KHR" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Jeff Bolz @jeffbolznv" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan">
            <require>
                <enum value="1"                                                 name="VK_KHR_MULTIVIEW_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_multiview&quot;"                      name="VK_KHR_MULTIVIEW_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES"/>
                <enum extends="VkDependencyFlagBits"                            name="VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR" alias="VK_DEPENDENCY_VIEW_LOCAL_BIT"/>
                <type name="VkRenderPassMultiviewCreateInfoKHR"/>
                <type name="VkPhysicalDeviceMultiviewFeaturesKHR"/>
                <type name="VkPhysicalDeviceMultiviewPropertiesKHR"/>
                <feature name="multiview" struct="VkPhysicalDeviceMultiviewFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_IMG_format_pvrtc" number="55" type="device" author="IMG" contact="Stuart Smith" supported="vulkan" deprecatedby="" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_IMG_FORMAT_PVRTC_SPEC_VERSION"/>
                <enum value="&quot;VK_IMG_format_pvrtc&quot;"                   name="VK_IMG_FORMAT_PVRTC_EXTENSION_NAME"/>
                <enum offset="0" extends="VkFormat"                             name="VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG"/>
                <enum offset="1" extends="VkFormat"                             name="VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG"/>
                <enum offset="2" extends="VkFormat"                             name="VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG"/>
                <enum offset="3" extends="VkFormat"                             name="VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG"/>
                <enum offset="4" extends="VkFormat"                             name="VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG"/>
                <enum offset="5" extends="VkFormat"                             name="VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG"/>
                <enum offset="6" extends="VkFormat"                             name="VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG"/>
                <enum offset="7" extends="VkFormat"                             name="VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG"/>
            </require>
        </extension>
        <extension name="VK_NV_external_memory_capabilities" number="56" type="instance" author="NV" contact="James Jones @cubanismo" supported="vulkan" deprecatedby="VK_KHR_external_memory_capabilities" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_external_memory_capabilities&quot;"    name="VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME"/>
                <type name="VkExternalMemoryHandleTypeFlagsNV"/>
                <type name="VkExternalMemoryHandleTypeFlagBitsNV"/>
                <type name="VkExternalMemoryFeatureFlagsNV"/>
                <type name="VkExternalMemoryFeatureFlagBitsNV"/>
                <type name="VkExternalImageFormatPropertiesNV"/>
                <command name="vkGetPhysicalDeviceExternalImageFormatPropertiesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_external_memory" number="57" type="device" depends="VK_NV_external_memory_capabilities" author="NV" contact="James Jones @cubanismo" supported="vulkan" deprecatedby="VK_KHR_external_memory" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_NV_EXTERNAL_MEMORY_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_external_memory&quot;"                 name="VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV"/>
                <type name="VkExternalMemoryImageCreateInfoNV"/>
                <type name="VkExportMemoryAllocateInfoNV"/>
            </require>
        </extension>
        <extension name="VK_NV_external_memory_win32" number="58" type="device" depends="VK_NV_external_memory" author="NV" contact="James Jones @cubanismo" platform="win32" supported="vulkan" deprecatedby="VK_KHR_external_memory_win32" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_external_memory_win32&quot;"           name="VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV"/>
                <type name="VkImportMemoryWin32HandleInfoNV"/>
                <type name="VkExportMemoryWin32HandleInfoNV"/>
                <command name="vkGetMemoryWin32HandleNV"/>
            </require>
        </extension>
        <extension name="VK_NV_win32_keyed_mutex" number="59" type="device" depends="VK_NV_external_memory_win32" author="NV" contact="Carsten Rohde @crohde" platform="win32" supported="vulkan" promotedto="VK_KHR_win32_keyed_mutex" nofeatures="true">
            <require>
                <enum value="2"                                                 name="VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_win32_keyed_mutex&quot;"               name="VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV"/>
                <type name="VkWin32KeyedMutexAcquireReleaseInfoNV"/>
            </require>
        </extension>
        <extension name="VK_KHR_get_physical_device_properties2" number="60" type="instance" author="KHR" contact="Jeff Bolz @jeffbolznv" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="2"                                                 name="VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_get_physical_device_properties2&quot;" name="VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR" alias="VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR" alias="VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR" alias="VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR" alias="VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2"/>
                <type name="VkPhysicalDeviceFeatures2KHR"/>
                <type name="VkPhysicalDeviceProperties2KHR"/>
                <type name="VkFormatProperties2KHR"/>
                <type name="VkImageFormatProperties2KHR"/>
                <type name="VkPhysicalDeviceImageFormatInfo2KHR"/>
                <type name="VkQueueFamilyProperties2KHR"/>
                <type name="VkPhysicalDeviceMemoryProperties2KHR"/>
                <type name="VkSparseImageFormatProperties2KHR"/>
                <type name="VkPhysicalDeviceSparseImageFormatInfo2KHR"/>
                <command name="vkGetPhysicalDeviceFeatures2KHR"/>
                <command name="vkGetPhysicalDeviceProperties2KHR"/>
                <command name="vkGetPhysicalDeviceFormatProperties2KHR"/>
                <command name="vkGetPhysicalDeviceImageFormatProperties2KHR"/>
                <command name="vkGetPhysicalDeviceQueueFamilyProperties2KHR"/>
                <command name="vkGetPhysicalDeviceMemoryProperties2KHR"/>
                <command name="vkGetPhysicalDeviceSparseImageFormatProperties2KHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_device_group" number="61" type="device" author="KHR" depends="VK_KHR_device_group_creation" contact="Jeff Bolz @jeffbolznv" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="4"                                                 name="VK_KHR_DEVICE_GROUP_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_device_group&quot;"                   name="VK_KHR_DEVICE_GROUP_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR" alias="VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR" alias="VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR" alias="VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR" alias="VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR" alias="VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO"/>
                <type name="VkPeerMemoryFeatureFlagsKHR"/>
                <type name="VkPeerMemoryFeatureFlagBitsKHR"/>
                <enum extends="VkPeerMemoryFeatureFlagBits"                     name="VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR" alias="VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT"/>
                <enum extends="VkPeerMemoryFeatureFlagBits"                     name="VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR" alias="VK_PEER_MEMORY_FEATURE_COPY_DST_BIT"/>
                <enum extends="VkPeerMemoryFeatureFlagBits"                     name="VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR" alias="VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT"/>
                <enum extends="VkPeerMemoryFeatureFlagBits"                     name="VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR" alias="VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT"/>
                <type name="VkMemoryAllocateFlagsKHR"/>
                <type name="VkMemoryAllocateFlagBitsKHR"/>
                <enum extends="VkMemoryAllocateFlagBits"                        name="VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR" alias="VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT"/>
                <type name="VkMemoryAllocateFlagsInfoKHR"/>
                <type name="VkDeviceGroupRenderPassBeginInfoKHR"/>
                <type name="VkDeviceGroupCommandBufferBeginInfoKHR"/>
                <type name="VkDeviceGroupSubmitInfoKHR"/>
                <type name="VkDeviceGroupBindSparseInfoKHR"/>
                <command name="vkGetDeviceGroupPeerMemoryFeaturesKHR"/>
                <command name="vkCmdSetDeviceMaskKHR"/>
                <command name="vkCmdDispatchBaseKHR"/>
                <enum extends="VkPipelineCreateFlagBits"                        name="VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR" alias="VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT"/>
                <enum extends="VkPipelineCreateFlagBits"                        name="VK_PIPELINE_CREATE_DISPATCH_BASE_KHR" alias="VK_PIPELINE_CREATE_DISPATCH_BASE"/>
                <enum extends="VkDependencyFlagBits"                            name="VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR" alias="VK_DEPENDENCY_DEVICE_GROUP_BIT"/>
            </require>
            <require depends="VK_KHR_bind_memory2">
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR" alias="VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR" alias="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO"/>
                <type name="VkBindBufferMemoryDeviceGroupInfoKHR"/>
                <type name="VkBindImageMemoryDeviceGroupInfoKHR"/>
                <enum extends="VkImageCreateFlagBits"                           name="VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR" alias="VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT"/>
            </require>
            <require depends="VK_KHR_surface">
                <enum offset="7" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR"/>
                <type name="VkDeviceGroupPresentModeFlagBitsKHR"/>
                <type name="VkDeviceGroupPresentModeFlagsKHR"/>
                <type name="VkDeviceGroupPresentCapabilitiesKHR"/>
                <command name="vkGetDeviceGroupPresentCapabilitiesKHR"/>
                <command name="vkGetDeviceGroupSurfacePresentModesKHR"/>
                <command name="vkGetPhysicalDevicePresentRectanglesKHR"/>
            </require>
            <require depends="VK_KHR_swapchain">
                <enum offset="8" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR"/>
                <enum offset="9" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR"/>
                <enum offset="10" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR"/>
                <enum offset="11" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR"/>
                <enum offset="12" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR"/>
                <enum bitpos="0" extends="VkSwapchainCreateFlagBitsKHR"         name="VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR" comment="Allow images with VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT"/>
                <type name="VkImageSwapchainCreateInfoKHR"/>
                <type name="VkBindImageMemorySwapchainInfoKHR"/>
                <type name="VkAcquireNextImageInfoKHR"/>
                <type name="VkDeviceGroupPresentInfoKHR"/>
                <type name="VkDeviceGroupSwapchainCreateInfoKHR"/>
                <command name="vkAcquireNextImage2KHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_validation_flags" number="62" type="instance" author="GOOGLE" contact="Tobin Ehlis @tobine" specialuse="debugging" supported="vulkan" deprecatedby="VK_EXT_layer_settings" nofeatures="true">
            <require>
                <enum value="3"                                                 name="VK_EXT_VALIDATION_FLAGS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_validation_flags&quot;"               name="VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT"/>
                <type name="VkValidationFlagsEXT"/>
                <type name="VkValidationCheckEXT"/>
            </require>
        </extension>
        <extension name="VK_NN_vi_surface" number="63" type="instance" author="NN" contact="Mathias Heyer gitlab:@mheyer" depends="VK_KHR_surface" platform="vi" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_NN_VI_SURFACE_SPEC_VERSION"/>
                <enum value="&quot;VK_NN_vi_surface&quot;"                      name="VK_NN_VI_SURFACE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN"/>
                <type name="VkViSurfaceCreateFlagsNN"/>
                <type name="VkViSurfaceCreateInfoNN"/>
                <command name="vkCreateViSurfaceNN"/>
            </require>
        </extension>
        <extension name="VK_KHR_shader_draw_parameters" number="64" type="device" author="KHR" contact="Daniel Koch @dgkoch" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shader_draw_parameters&quot;"         name="VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_shader_subgroup_ballot" number="65" type="device" author="NV" contact="Daniel Koch @dgkoch" supported="vulkan" deprecatedby="VK_VERSION_1_2" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_shader_subgroup_ballot&quot;"         name="VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_shader_subgroup_vote" number="66" type="device" author="NV" contact="Daniel Koch @dgkoch" supported="vulkan" deprecatedby="VK_VERSION_1_1" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_shader_subgroup_vote&quot;"           name="VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_texture_compression_astc_hdr" number="67" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="ARM" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="vulkan,vulkansc" promotedto="VK_VERSION_1_3" ratified="vulkansc">
            <require>
                <enum value="1"                                                 name="VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_texture_compression_astc_hdr&quot;"   name="VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES"/>
                <type name="VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT"/>
                <enum extends="VkFormat"                                        name="VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT" alias="VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK"/>
                <enum extends="VkFormat"                                        name="VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT" alias="VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK"/>
                <enum extends="VkFormat"                                        name="VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT" alias="VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK"/>
                <enum extends="VkFormat"                                        name="VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT" alias="VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK"/>
                <enum extends="VkFormat"                                        name="VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT" alias="VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK"/>
                <enum extends="VkFormat"                                        name="VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT" alias="VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK"/>
                <enum extends="VkFormat"                                        name="VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT" alias="VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK"/>
                <enum extends="VkFormat"                                        name="VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT" alias="VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK"/>
                <enum extends="VkFormat"                                        name="VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT" alias="VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK"/>
                <enum extends="VkFormat"                                        name="VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT" alias="VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK"/>
                <enum extends="VkFormat"                                        name="VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT" alias="VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK"/>
                <enum extends="VkFormat"                                        name="VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT" alias="VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK"/>
                <enum extends="VkFormat"                                        name="VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT" alias="VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK"/>
                <enum extends="VkFormat"                                        name="VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT" alias="VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK"/>
                <feature name="textureCompressionASTC_HDR" struct="VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_astc_decode_mode" number="68" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="ARM" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_astc_decode_mode&quot;"               name="VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT"/>
                <type name="VkImageViewASTCDecodeModeEXT"/>
                <type name="VkPhysicalDeviceASTCDecodeFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_pipeline_robustness" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" number="69" type="device" author="IMG" contact="Jarred Davies" supported="vulkan" ratified="vulkan" promotedto="VK_VERSION_1_4">
            <require>
                <enum value="1"                                                 name="VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_pipeline_robustness&quot;"            name="VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT" alias="VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES"/>
                <enum extends="VkPipelineRobustnessBufferBehavior"              name="VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT" alias="VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT"/>
                <enum extends="VkPipelineRobustnessBufferBehavior"              name="VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT" alias="VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED"/>
                <enum extends="VkPipelineRobustnessBufferBehavior"              name="VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT" alias="VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS"/>
                <enum extends="VkPipelineRobustnessBufferBehavior"              name="VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT" alias="VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2"/>
                <enum extends="VkPipelineRobustnessImageBehavior"               name="VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT" alias="VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT"/>
                <enum extends="VkPipelineRobustnessImageBehavior"               name="VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT" alias="VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED"/>
                <enum extends="VkPipelineRobustnessImageBehavior"               name="VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT" alias="VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS"/>
                <enum extends="VkPipelineRobustnessImageBehavior"               name="VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT" alias="VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2"/>
                <type name="VkPhysicalDevicePipelineRobustnessFeaturesEXT"/>
                <type name="VkPhysicalDevicePipelineRobustnessPropertiesEXT"/>
                <type name="VkPipelineRobustnessCreateInfoEXT"/>
                <type name="VkPipelineRobustnessBufferBehaviorEXT"/>
                <type name="VkPipelineRobustnessImageBehaviorEXT"/>
                <feature name="pipelineRobustness" struct="VkPhysicalDevicePipelineRobustnessFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_maintenance1" number="70" type="device" author="KHR" contact="Piers Daniell @pdaniell-nv" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="2"                                                 name="VK_KHR_MAINTENANCE_1_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_maintenance1&quot;"                   name="VK_KHR_MAINTENANCE_1_EXTENSION_NAME"/>
                <enum alias="VK_KHR_MAINTENANCE_1_SPEC_VERSION"                 name="VK_KHR_MAINTENANCE1_SPEC_VERSION" deprecated="aliased"/>
                <enum alias="VK_KHR_MAINTENANCE_1_EXTENSION_NAME"               name="VK_KHR_MAINTENANCE1_EXTENSION_NAME" deprecated="aliased"/>
                <enum extends="VkResult"                                        name="VK_ERROR_OUT_OF_POOL_MEMORY_KHR" alias="VK_ERROR_OUT_OF_POOL_MEMORY"/>
                <enum extends="VkFormatFeatureFlagBits"                         name="VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR" alias="VK_FORMAT_FEATURE_TRANSFER_SRC_BIT"/>
                <enum extends="VkFormatFeatureFlagBits"                         name="VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR" alias="VK_FORMAT_FEATURE_TRANSFER_DST_BIT"/>
                <enum extends="VkImageCreateFlagBits"                           name="VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR" alias="VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT"/>
                <type name="VkCommandPoolTrimFlagsKHR"/>
                <command name="vkTrimCommandPoolKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_device_group_creation" number="71" type="instance" author="KHR" contact="Jeff Bolz @jeffbolznv" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_device_group_creation&quot;"          name="VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO"/>
                <enum                                                           name="VK_MAX_DEVICE_GROUP_SIZE_KHR" alias="VK_MAX_DEVICE_GROUP_SIZE"/>
                <type name="VkPhysicalDeviceGroupPropertiesKHR"/>
                <type name="VkDeviceGroupDeviceCreateInfoKHR"/>
                <command name="vkEnumeratePhysicalDeviceGroupsKHR"/>
                <enum extends="VkMemoryHeapFlagBits"                            name="VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR" alias="VK_MEMORY_HEAP_MULTI_INSTANCE_BIT"/>
            </require>
        </extension>
        <extension name="VK_KHR_external_memory_capabilities" number="72" type="instance" author="KHR" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="James Jones @cubanismo" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_external_memory_capabilities&quot;"   name="VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES"/>
                <enum                                                           name="VK_LUID_SIZE_KHR" alias="VK_LUID_SIZE"/>
                <type name="VkExternalMemoryHandleTypeFlagsKHR"/>
                <type name="VkExternalMemoryHandleTypeFlagBitsKHR"/>
                <enum extends="VkExternalMemoryHandleTypeFlagBits"              name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR" alias="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT"/>
                <enum extends="VkExternalMemoryHandleTypeFlagBits"              name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR" alias="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT"/>
                <enum extends="VkExternalMemoryHandleTypeFlagBits"              name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR" alias="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT"/>
                <enum extends="VkExternalMemoryHandleTypeFlagBits"              name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR" alias="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT"/>
                <enum extends="VkExternalMemoryHandleTypeFlagBits"              name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR" alias="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT"/>
                <enum extends="VkExternalMemoryHandleTypeFlagBits"              name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR" alias="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT"/>
                <enum extends="VkExternalMemoryHandleTypeFlagBits"              name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR" alias="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT"/>
                <type name="VkExternalMemoryFeatureFlagsKHR"/>
                <type name="VkExternalMemoryFeatureFlagBitsKHR"/>
                <enum extends="VkExternalMemoryFeatureFlagBits"                 name="VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR" alias="VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT"/>
                <enum extends="VkExternalMemoryFeatureFlagBits"                 name="VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR" alias="VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT"/>
                <enum extends="VkExternalMemoryFeatureFlagBits"                 name="VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR" alias="VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT"/>
                <type name="VkExternalMemoryPropertiesKHR"/>
                <type name="VkPhysicalDeviceExternalImageFormatInfoKHR"/>
                <type name="VkExternalImageFormatPropertiesKHR"/>
                <type name="VkPhysicalDeviceExternalBufferInfoKHR"/>
                <type name="VkExternalBufferPropertiesKHR"/>
                <type name="VkPhysicalDeviceIDPropertiesKHR"/>
                <command name="vkGetPhysicalDeviceExternalBufferPropertiesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_external_memory" number="73" type="device" depends="VK_KHR_external_memory_capabilities,VK_VERSION_1_1" author="KHR" contact="James Jones @cubanismo" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_external_memory&quot;"                name="VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO"/>
                <enum extends="VkResult"                                        name="VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR" alias="VK_ERROR_INVALID_EXTERNAL_HANDLE"/>
                <enum                                                           name="VK_QUEUE_FAMILY_EXTERNAL_KHR" alias="VK_QUEUE_FAMILY_EXTERNAL"/>
                <type name="VkExternalMemoryImageCreateInfoKHR"/>
                <type name="VkExternalMemoryBufferCreateInfoKHR"/>
                <type name="VkExportMemoryAllocateInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_external_memory_win32" number="74" type="device" depends="VK_KHR_external_memory,VK_VERSION_1_1" author="KHR" contact="James Jones @cubanismo" platform="win32" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_external_memory_win32&quot;"          name="VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR"/>
                <enum offset="2" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR"/>
                <enum offset="3" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR"/>
                <type name="VkImportMemoryWin32HandleInfoKHR"/>
                <type name="VkExportMemoryWin32HandleInfoKHR"/>
                <type name="VkMemoryWin32HandlePropertiesKHR"/>
                <type name="VkMemoryGetWin32HandleInfoKHR"/>
                <command name="vkGetMemoryWin32HandleKHR"/>
                <command name="vkGetMemoryWin32HandlePropertiesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_external_memory_fd" number="75" type="device" depends="VK_KHR_external_memory,VK_VERSION_1_1" author="KHR" contact="James Jones @cubanismo" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_external_memory_fd&quot;"             name="VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR"/>
                <enum offset="2" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR"/>
                <type name="VkImportMemoryFdInfoKHR"/>
                <type name="VkMemoryFdPropertiesKHR"/>
                <type name="VkMemoryGetFdInfoKHR"/>
                <command name="vkGetMemoryFdKHR"/>
                <command name="vkGetMemoryFdPropertiesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_win32_keyed_mutex" number="76" type="device" depends="VK_KHR_external_memory_win32" author="KHR" contact="Carsten Rohde @crohde" platform="win32" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_win32_keyed_mutex&quot;"              name="VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR"/>
                <type name="VkWin32KeyedMutexAcquireReleaseInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_external_semaphore_capabilities" number="77" type="instance" author="KHR" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="James Jones @cubanismo" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_external_semaphore_capabilities&quot;" name="VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES"/>
                <enum name="VK_LUID_SIZE_KHR"/>
                <type name="VkExternalSemaphoreHandleTypeFlagsKHR"/>
                <type name="VkExternalSemaphoreHandleTypeFlagBitsKHR"/>
                <enum extends="VkExternalSemaphoreHandleTypeFlagBits"       name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR" alias="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT"/>
                <enum extends="VkExternalSemaphoreHandleTypeFlagBits"       name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR" alias="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT"/>
                <enum extends="VkExternalSemaphoreHandleTypeFlagBits"       name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR" alias="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT"/>
                <enum extends="VkExternalSemaphoreHandleTypeFlagBits"       name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR" alias="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT"/>
                <enum extends="VkExternalSemaphoreHandleTypeFlagBits"       name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR" alias="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT"/>
                <type name="VkExternalSemaphoreFeatureFlagsKHR"/>
                <type name="VkExternalSemaphoreFeatureFlagBitsKHR"/>
                <enum extends="VkExternalSemaphoreFeatureFlagBits"          name="VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR" alias="VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT"/>
                <enum extends="VkExternalSemaphoreFeatureFlagBits"          name="VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR" alias="VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT"/>
                <type name="VkPhysicalDeviceExternalSemaphoreInfoKHR"/>
                <type name="VkExternalSemaphorePropertiesKHR"/>
                <type name="VkPhysicalDeviceIDPropertiesKHR"/>
                <command name="vkGetPhysicalDeviceExternalSemaphorePropertiesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_external_semaphore" number="78" type="device" depends="VK_KHR_external_semaphore_capabilities" author="KHR" contact="James Jones @cubanismo" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_external_semaphore&quot;"         name="VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO"/>
                <type name="VkSemaphoreImportFlagsKHR"/>
                <type name="VkSemaphoreImportFlagBitsKHR"/>
                <enum extends="VkSemaphoreImportFlagBits"                   name="VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR" alias="VK_SEMAPHORE_IMPORT_TEMPORARY_BIT"/>
                <type name="VkExportSemaphoreCreateInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_external_semaphore_win32" number="79" type="device" depends="VK_KHR_external_semaphore" author="KHR" contact="James Jones @cubanismo" platform="win32" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_external_semaphore_win32&quot;"   name="VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR"/>
                <type name="VkImportSemaphoreWin32HandleInfoKHR"/>
                <type name="VkExportSemaphoreWin32HandleInfoKHR"/>
                <type name="VkD3D12FenceSubmitInfoKHR"/>
                <type name="VkSemaphoreGetWin32HandleInfoKHR"/>
                <command name="vkImportSemaphoreWin32HandleKHR"/>
                <command name="vkGetSemaphoreWin32HandleKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_external_semaphore_fd" number="80" type="device" depends="VK_KHR_external_semaphore,VK_VERSION_1_1" author="KHR" contact="James Jones @cubanismo" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_external_semaphore_fd&quot;"      name="VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR"/>
                <type name="VkImportSemaphoreFdInfoKHR"/>
                <type name="VkSemaphoreGetFdInfoKHR"/>
                <command name="vkImportSemaphoreFdKHR"/>
                <command name="vkGetSemaphoreFdKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_push_descriptor" number="81" type="device" author="KHR" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Jeff Bolz @jeffbolznv" supported="vulkan" promotedto="VK_VERSION_1_4" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="2"                                             name="VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_push_descriptor&quot;"            name="VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                           name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES"/>
                <enum extends="VkDescriptorSetLayoutCreateFlagBits"       name="VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR" alias="VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT" comment="Descriptors are pushed via flink:vkCmdPushDescriptorSet"/>
                <command name="vkCmdPushDescriptorSetKHR"/>
                <type name="VkPhysicalDevicePushDescriptorPropertiesKHR"/>
            </require>
            <require depends="VK_VERSION_1_1,VK_KHR_descriptor_update_template">
                <command name="vkCmdPushDescriptorSetWithTemplateKHR"/>
                <enum extends="VkDescriptorUpdateTemplateType"              name="VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR" alias="VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS" comment="Create descriptor update template for pushed descriptor updates"/>
            </require>
        </extension>
        <extension name="VK_EXT_conditional_rendering" number="82" type="device" author="NV" contact="Vikram Kushwaha @vkushwaha" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan">
            <require>
                <enum value="2"                                             name="VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_conditional_rendering&quot;"      name="VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT"/>
                <type name="VkConditionalRenderingFlagsEXT"/>
                <type name="VkConditionalRenderingFlagBitsEXT"/>
                <enum bitpos="20" extends="VkAccessFlagBits"                name="VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT" comment="read access flag for reading conditional rendering predicate"/>
                <enum bitpos="9"  extends="VkBufferUsageFlagBits"           name="VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT" comment="Specifies the buffer can be used as predicate in conditional rendering"/>
                <enum bitpos="18" extends="VkPipelineStageFlagBits"         name="VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT" comment="A pipeline stage for conditional rendering predicate fetch"/>
                <command name="vkCmdBeginConditionalRenderingEXT"/>
                <command name="vkCmdEndConditionalRenderingEXT"/>
                <type name="VkConditionalRenderingBeginInfoEXT"/>
                <type name="VkPhysicalDeviceConditionalRenderingFeaturesEXT"/>
                <type name="VkCommandBufferInheritanceConditionalRenderingInfoEXT"/>
                <feature name="conditionalRendering" struct="VkPhysicalDeviceConditionalRenderingFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_shader_float16_int8" number="83" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="KHR" contact="Alexander Galazin @alegal-arm" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shader_float16_int8&quot;"        name="VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES"/>
                <type name="VkPhysicalDeviceShaderFloat16Int8FeaturesKHR"/>
                <type name="VkPhysicalDeviceFloat16Int8FeaturesKHR"/>
                <feature name="shaderFloat16,shaderInt8" struct="VkPhysicalDeviceShaderFloat16Int8FeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_16bit_storage" number="84" type="device" depends="(VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class),VK_VERSION_1_1" author="KHR" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_16BIT_STORAGE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_16bit_storage&quot;"              name="VK_KHR_16BIT_STORAGE_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES"/>
                <type name="VkPhysicalDevice16BitStorageFeaturesKHR"/>
                <feature name="storageBuffer16BitAccess" struct="VkPhysicalDevice16BitStorageFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_incremental_present" number="85" type="device" author="KHR" depends="VK_KHR_swapchain" contact="Ian Elliott @ianelliottus" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="2"                                             name="VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_incremental_present&quot;"        name="VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR"/>
                <type name="VkPresentRegionsKHR"/>
                <type name="VkPresentRegionKHR"/>
                <type name="VkRectLayerKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_descriptor_update_template" number="86" type="device" author="KHR" contact="Markus Tavenrath @mtavenrath" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_descriptor_update_template&quot;" name="VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO"/>
                <enum extends="VkObjectType"                                name="VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR" alias="VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE"/>
                <command name="vkCreateDescriptorUpdateTemplateKHR"/>
                <command name="vkDestroyDescriptorUpdateTemplateKHR"/>
                <command name="vkUpdateDescriptorSetWithTemplateKHR"/>
                <type name="VkDescriptorUpdateTemplateKHR"/>
                <type name="VkDescriptorUpdateTemplateCreateFlagsKHR"/>
                <type name="VkDescriptorUpdateTemplateTypeKHR"/>
                <type name="VkDescriptorUpdateTemplateEntryKHR"/>
                <type name="VkDescriptorUpdateTemplateCreateInfoKHR"/>
                <enum extends="VkDescriptorUpdateTemplateType"              name="VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR" alias="VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET"/>
            </require>
            <require depends="VK_KHR_push_descriptor">
                <command name="vkCmdPushDescriptorSetWithTemplateKHR"/>
                <enum extends="VkDescriptorUpdateTemplateType"    name="VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR" alias="VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS" comment="Create descriptor update template for pushed descriptor updates"/>
            </require>
            <require depends="VK_EXT_debug_report">
                <enum extends="VkDebugReportObjectTypeEXT"                  name="VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT" alias="VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT"/>
            </require>
        </extension>
        <extension name="VK_NVX_device_generated_commands" number="87" type="device" author="NVX" contact="Christoph Kubisch @pixeljetstream" supported="disabled">
            <require>
                <enum value="3"                                             name="VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION"/>
                <enum value="&quot;VK_NVX_device_generated_commands&quot;"  name="VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_clip_space_w_scaling" number="88" type="device" author="NV" contact="Eric Werness @ewerness-nv" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_clip_space_w_scaling&quot;"        name="VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV"/>
                <enum offset="0" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV"/>
                <type name="VkViewportWScalingNV"/>
                <type name="VkPipelineViewportWScalingStateCreateInfoNV"/>
                <command name="vkCmdSetViewportWScalingNV"/>
            </require>
        </extension>
        <extension name="VK_EXT_direct_mode_display" number="89" type="instance" depends="VK_KHR_display" author="NV" contact="James Jones @cubanismo" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_direct_mode_display&quot;"        name="VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME"/>
                <command name="vkReleaseDisplayEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_acquire_xlib_display" number="90" type="instance" depends="VK_EXT_direct_mode_display" author="NV" contact="James Jones @cubanismo" platform="xlib_xrandr" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_acquire_xlib_display&quot;"       name="VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME"/>
                <command name="vkAcquireXlibDisplayEXT"/>
                <command name="vkGetRandROutputDisplayEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_display_surface_counter" number="91" type="instance" depends="VK_KHR_display" author="NV" contact="James Jones @cubanismo" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_display_surface_counter&quot;"    name="VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME"/>
                <enum offset="0"                                           extends="VkStructureType" name="VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT"/>
                <enum api="vulkan" extends="VkStructureType" name="VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT" alias="VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT" deprecated="aliased"/>
                <type name="VkSurfaceCounterFlagsEXT"/>
                <type name="VkSurfaceCounterFlagBitsEXT"/>
                <type name="VkSurfaceCapabilities2EXT"/>
                <command name="vkGetPhysicalDeviceSurfaceCapabilities2EXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_display_control" number="92" type="device" depends="VK_EXT_display_surface_counter+VK_KHR_swapchain" author="NV" contact="James Jones @cubanismo" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_DISPLAY_CONTROL_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_display_control&quot;"            name="VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT"/>
                <type name="VkDisplayPowerStateEXT"/>
                <type name="VkDeviceEventTypeEXT"/>
                <type name="VkDisplayEventTypeEXT"/>
                <type name="VkDisplayPowerInfoEXT"/>
                <type name="VkDeviceEventInfoEXT"/>
                <type name="VkDisplayEventInfoEXT"/>
                <type name="VkSwapchainCounterCreateInfoEXT"/>
                <command name="vkDisplayPowerControlEXT"/>
                <command name="vkRegisterDeviceEventEXT"/>
                <command name="vkRegisterDisplayEventEXT"/>
                <command name="vkGetSwapchainCounterEXT"/>
            </require>
        </extension>
        <extension name="VK_GOOGLE_display_timing" number="93" type="device" author="GOOGLE" depends="VK_KHR_swapchain" contact="Ian Elliott @ianelliottus" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION"/>
                <enum value="&quot;VK_GOOGLE_display_timing&quot;"          name="VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE"/>
                <type name="VkRefreshCycleDurationGOOGLE"/>
                <type name="VkPastPresentationTimingGOOGLE"/>
                <type name="VkPresentTimesInfoGOOGLE"/>
                <type name="VkPresentTimeGOOGLE"/>
                <command name="vkGetRefreshCycleDurationGOOGLE"/>
                <command name="vkGetPastPresentationTimingGOOGLE"/>
            </require>
        </extension>
        <extension name="VK_RESERVED_do_not_use_94" number="94" supported="disabled" comment="Used for functionality subsumed into Vulkan 1.1 and not published as an extension">
            <require>
                <enum value="1"                                             name="VK_RESERVED_DO_NOT_USE_94_SPEC_VERSION"/>
                <enum value="&quot;VK_RESERVED_do_not_use_94&quot;"         name="VK_RESERVED_DO_NOT_USE_94_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_sample_mask_override_coverage" number="95" type="device" author="NV" contact="Piers Daniell @pdaniell-nv" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_sample_mask_override_coverage&quot;" name="VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME"/>
                <comment>
                    enum offset=0 was mistakenly used for the 1.1 core enum
                    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES
                    (value=1000094000). Fortunately, no conflict resulted.
                </comment>
            </require>
        </extension>
        <extension name="VK_NV_geometry_shader_passthrough" number="96" type="device" author="NV" contact="Daniel Koch @dgkoch" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_geometry_shader_passthrough&quot;" name="VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_viewport_array2" number="97" type="device" author="NV" contact="Daniel Koch @dgkoch" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_viewport_array2&quot;"             name="VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME"/>
                <enum alias="VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION"           name="VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION" deprecated="aliased"/>
                <enum alias="VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME"         name="VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME" deprecated="aliased"/>
            </require>
        </extension>
        <extension name="VK_NVX_multiview_per_view_attributes" number="98" type="device" depends="VK_KHR_multiview,VK_VERSION_1_1" author="NVX" contact="Jeff Bolz @jeffbolznv" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION"/>
                <enum value="&quot;VK_NVX_multiview_per_view_attributes&quot;" name="VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX"/>
                <enum bitpos="0" extends="VkSubpassDescriptionFlagBits"     name="VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX"/>
                <enum bitpos="1" extends="VkSubpassDescriptionFlagBits"     name="VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX"/>
                <type name="VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX"/>
            </require>
            <require depends="VK_VERSION_1_3,VK_KHR_dynamic_rendering">
                <enum offset="9" extends="VkStructureType" extnumber="45"   name="VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX"/>
                <type name="VkMultiviewPerViewAttributesInfoNVX"/>
            </require>
        </extension>
        <extension name="VK_NV_viewport_swizzle" number="99" type="device" author="NV" contact="Piers Daniell @pdaniell-nv" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_viewport_swizzle&quot;"            name="VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV"/>
                <type name="VkViewportSwizzleNV"/>
                <type name="VkViewportCoordinateSwizzleNV"/>
                <type name="VkPipelineViewportSwizzleStateCreateInfoNV"/>
                <type name="VkPipelineViewportSwizzleStateCreateFlagsNV"/>
            </require>
        </extension>
        <extension name="VK_EXT_discard_rectangles" number="100" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="NV" contact="Piers Daniell @pdaniell-nv" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="2"                                             name="VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_discard_rectangles&quot;"         name="VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT"/>
                <enum offset="0" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT"/>
                <enum offset="1" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT"/>
                <enum offset="2" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT"/>
                <type name="VkPhysicalDeviceDiscardRectanglePropertiesEXT"/>
                <type name="VkPipelineDiscardRectangleStateCreateInfoEXT"/>
                <type name="VkPipelineDiscardRectangleStateCreateFlagsEXT"/>
                <type name="VkDiscardRectangleModeEXT"/>
                <command name="vkCmdSetDiscardRectangleEXT"/>
                <command name="vkCmdSetDiscardRectangleEnableEXT"/>
                <command name="vkCmdSetDiscardRectangleModeEXT"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_101" number="101" author="NV" contact="Daniel Koch @dgkoch" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_NV_EXTENSION_101_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_101&quot;"               name="VK_NV_EXTENSION_101_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_conservative_rasterization" number="102" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="NV" contact="Piers Daniell @pdaniell-nv" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_conservative_rasterization&quot;" name="VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT"/>
                <type name="VkPhysicalDeviceConservativeRasterizationPropertiesEXT"/>
                <type name="VkPipelineRasterizationConservativeStateCreateInfoEXT"/>
                <type name="VkPipelineRasterizationConservativeStateCreateFlagsEXT"/>
                <type name="VkConservativeRasterizationModeEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_depth_clip_enable" number="103" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Piers Daniell @pdaniell-nv" specialuse="d3demulation" supported="vulkan,vulkansc" ratified="vulkan,vulkansc">
            <require>
                <enum value="1"                                             name="VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_depth_clip_enable&quot;"          name="VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT"/>
                <type name="VkPhysicalDeviceDepthClipEnableFeaturesEXT"/>
                <type name="VkPipelineRasterizationDepthClipStateCreateInfoEXT"/>
                <type name="VkPipelineRasterizationDepthClipStateCreateFlagsEXT"/>
                <feature name="depthClipEnable" struct="VkPhysicalDeviceDepthClipEnableFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_104" number="104" author="NV" contact="Mathias Schott gitlab:@mschott" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_NV_EXTENSION_104_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_104&quot;"               name="VK_NV_EXTENSION_104_EXTENSION_NAME"/>
                <enum bitpos="0"  extends="VkPrivateDataSlotCreateFlagBits" name="VK_PRIVATE_DATA_SLOT_CREATE_RESERVED_0_BIT_NV"/>
            </require>
        </extension>
        <extension name="VK_EXT_swapchain_colorspace" number="105" type="instance" depends="VK_KHR_surface" author="GOOGLE" contact="Courtney Goeltzenleuchter @courtney-g" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="5"                                             name="VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_swapchain_colorspace&quot;"       name="VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME"/>
                <enum offset="1" extends="VkColorSpaceKHR"                  name="VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT"/>
                <enum offset="2" extends="VkColorSpaceKHR"                  name="VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT"/>
                <enum offset="3" extends="VkColorSpaceKHR"                  name="VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT"/>
                <enum offset="4" extends="VkColorSpaceKHR"                  name="VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT"/>
                <enum offset="5" extends="VkColorSpaceKHR"                  name="VK_COLOR_SPACE_BT709_LINEAR_EXT"/>
                <enum offset="6" extends="VkColorSpaceKHR"                  name="VK_COLOR_SPACE_BT709_NONLINEAR_EXT"/>
                <enum offset="7" extends="VkColorSpaceKHR"                  name="VK_COLOR_SPACE_BT2020_LINEAR_EXT"/>
                <enum offset="8" extends="VkColorSpaceKHR"                  name="VK_COLOR_SPACE_HDR10_ST2084_EXT"/>
                <enum offset="9" extends="VkColorSpaceKHR"                  name="VK_COLOR_SPACE_DOLBYVISION_EXT" deprecated="true"/>
                <enum offset="10" extends="VkColorSpaceKHR"                 name="VK_COLOR_SPACE_HDR10_HLG_EXT"/>
                <enum offset="11" extends="VkColorSpaceKHR"                 name="VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT"/>
                <enum offset="12" extends="VkColorSpaceKHR"                 name="VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT"/>
                <enum offset="13" extends="VkColorSpaceKHR"                 name="VK_COLOR_SPACE_PASS_THROUGH_EXT"/>
                <enum offset="14" extends="VkColorSpaceKHR"                 name="VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT"/>
                <enum api="vulkan" extends="VkColorSpaceKHR"                name="VK_COLOR_SPACE_DCI_P3_LINEAR_EXT" alias="VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT" deprecated="aliased"/>
            </require>
        </extension>
        <extension name="VK_EXT_hdr_metadata" number="106" type="device" depends="VK_KHR_swapchain" author="GOOGLE" contact="Courtney Goeltzenleuchter @courtney-g" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="3"                                             name="VK_EXT_HDR_METADATA_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_hdr_metadata&quot;"               name="VK_EXT_HDR_METADATA_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_HDR_METADATA_EXT"/>
                <type name="VkHdrMetadataEXT"/>
                <type name="VkXYColorEXT"/>
                <command name="vkSetHdrMetadataEXT"/>
            </require>
        </extension>
        <extension name="VK_IMG_extension_107" number="107" author="IMG" contact="Michael Worcester @michaelworcester" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_IMG_EXTENSION_107_SPEC_VERSION"/>
                <enum value="&quot;VK_IMG_extension_107&quot;"              name="VK_IMG_EXTENSION_107_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_IMG_extension_108" number="108" author="IMG" contact="Michael Worcester @michaelworcester" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_IMG_EXTENSION_108_SPEC_VERSION"/>
                <enum value="&quot;VK_IMG_extension_108&quot;"              name="VK_IMG_EXTENSION_108_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_imageless_framebuffer" depends="(((VK_KHR_get_physical_device_properties2+VK_KHR_maintenance2),VK_VERSION_1_1)+VK_KHR_image_format_list),VK_VERSION_1_2" number="109" author="KHR" contact="Tobias Hector @tobias" type="device" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_imageless_framebuffer&quot;"      name="VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME"/>
                <type name="VkPhysicalDeviceImagelessFramebufferFeaturesKHR"/>
                <type name="VkFramebufferAttachmentsCreateInfoKHR"/>
                <type name="VkFramebufferAttachmentImageInfoKHR"/>
                <type name="VkRenderPassAttachmentBeginInfoKHR"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR" alias="VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR" alias="VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO"/>
                <enum extends="VkFramebufferCreateFlagBits"                 name="VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR" alias="VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT"/>
                <feature name="imagelessFramebuffer" struct="VkPhysicalDeviceImagelessFramebufferFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_create_renderpass2" depends="(VK_KHR_multiview+VK_KHR_maintenance2),VK_VERSION_1_1" number="110" author="KHR" contact="Tobias Hector @tobias" type="device" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_create_renderpass2&quot;"         name="VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR" alias="VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR" alias="VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR" alias="VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR" alias="VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR" alias="VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR" alias="VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR" alias="VK_STRUCTURE_TYPE_SUBPASS_END_INFO"/>
                <command name="vkCreateRenderPass2KHR"/>
                <command name="vkCmdBeginRenderPass2KHR"/>
                <command name="vkCmdNextSubpass2KHR"/>
                <command name="vkCmdEndRenderPass2KHR"/>
                <type name="VkRenderPassCreateInfo2KHR"/>
                <type name="VkAttachmentDescription2KHR"/>
                <type name="VkAttachmentReference2KHR"/>
                <type name="VkSubpassDescription2KHR"/>
                <type name="VkSubpassDependency2KHR"/>
                <type name="VkSubpassBeginInfoKHR"/>
                <type name="VkSubpassEndInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_IMG_relaxed_line_rasterization" number="111" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="IMG" contact="James Fitzpatrick @jamesfitzpatrick" supported="vulkan" specialuse="glemulation">
            <require>
                <enum value="1"                                             name="VK_IMG_RELAXED_LINE_RASTERIZATION_SPEC_VERSION"/>
                <enum value="&quot;VK_IMG_relaxed_line_rasterization&quot;" name="VK_IMG_RELAXED_LINE_RASTERIZATION_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG"/>
                <type name="VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG"/>
                <feature name="relaxedLineRasterization" struct="VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG"/>
            </require>
        </extension>
        <extension name="VK_KHR_shared_presentable_image" number="112" type="device" depends="VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+(VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)" author="KHR" contact="Alon Or-bach @alonorbach" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shared_presentable_image&quot;"   name="VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR"/>
                <enum offset="0" extends="VkPresentModeKHR"                 name="VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR"/>
                <enum offset="1" extends="VkPresentModeKHR"                 name="VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR"/>
                <enum offset="0" extends="VkImageLayout"                    name="VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR"/>
                <type name="VkSharedPresentSurfaceCapabilitiesKHR"/>
                <command name="vkGetSwapchainStatusKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_external_fence_capabilities" number="113" type="instance" author="KHR" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Jesse Hall @critsec" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_external_fence_capabilities&quot;" name="VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES"/>
                <enum name="VK_LUID_SIZE_KHR"/>
                <type name="VkExternalFenceHandleTypeFlagsKHR"/>
                <type name="VkExternalFenceHandleTypeFlagBitsKHR"/>
                <enum extends="VkExternalFenceHandleTypeFlagBits"           name="VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR" alias="VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT"/>
                <enum extends="VkExternalFenceHandleTypeFlagBits"           name="VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR" alias="VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT"/>
                <enum extends="VkExternalFenceHandleTypeFlagBits"           name="VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR" alias="VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT"/>
                <enum extends="VkExternalFenceHandleTypeFlagBits"           name="VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR" alias="VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT"/>
                <type name="VkExternalFenceFeatureFlagsKHR"/>
                <type name="VkExternalFenceFeatureFlagBitsKHR"/>
                <enum extends="VkExternalFenceFeatureFlagBits"              name="VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR" alias="VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT"/>
                <enum extends="VkExternalFenceFeatureFlagBits"              name="VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR" alias="VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT"/>
                <type name="VkPhysicalDeviceExternalFenceInfoKHR"/>
                <type name="VkExternalFencePropertiesKHR"/>
                <type name="VkPhysicalDeviceIDPropertiesKHR"/>
                <command name="vkGetPhysicalDeviceExternalFencePropertiesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_external_fence" number="114" type="device" depends="VK_KHR_external_fence_capabilities" author="KHR" contact="Jesse Hall @critsec" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_EXTERNAL_FENCE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_external_fence&quot;"             name="VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO"/>
                <type name="VkFenceImportFlagsKHR"/>
                <type name="VkFenceImportFlagBitsKHR"/>
                <enum extends="VkFenceImportFlagBits"                       name="VK_FENCE_IMPORT_TEMPORARY_BIT_KHR" alias="VK_FENCE_IMPORT_TEMPORARY_BIT"/>
                <type name="VkExportFenceCreateInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_external_fence_win32" number="115" type="device" depends="VK_KHR_external_fence" author="KHR" contact="Jesse Hall @critsec" platform="win32" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_external_fence_win32&quot;"       name="VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR"/>
                <type name="VkImportFenceWin32HandleInfoKHR"/>
                <type name="VkExportFenceWin32HandleInfoKHR"/>
                <type name="VkFenceGetWin32HandleInfoKHR"/>
                <command name="vkImportFenceWin32HandleKHR"/>
                <command name="vkGetFenceWin32HandleKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_external_fence_fd" number="116" type="device" depends="VK_KHR_external_fence,VK_VERSION_1_1" author="KHR" contact="Jesse Hall @critsec" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_external_fence_fd&quot;"          name="VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR"/>
                <type name="VkImportFenceFdInfoKHR"/>
                <type name="VkFenceGetFdInfoKHR"/>
                <command name="vkImportFenceFdKHR"/>
                <command name="vkGetFenceFdKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_performance_query" number="117" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="KHR" contact="Alon Or-bach @alonorbach" specialuse="devtools" supported="vulkan,vulkansc" ratified="vulkan,vulkansc">
            <require>
                <enum value="1"                                    name="VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_performance_query&quot;" name="VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME"/>
                <enum offset="0" extends="VkQueryType"             name="VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR"/>
                <enum offset="0" extends="VkStructureType"         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR"/>
                <enum offset="1" extends="VkStructureType"         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR"/>
                <enum offset="2" extends="VkStructureType"         name="VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR"/>
                <enum offset="3" extends="VkStructureType"         name="VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR"/>
                <enum offset="4" extends="VkStructureType"         name="VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR"/>
                <enum offset="5" extends="VkStructureType"         name="VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR"/>
                <enum offset="6" extends="VkStructureType"         name="VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR"/>
                <type name="VkPhysicalDevicePerformanceQueryFeaturesKHR"/>
                <type name="VkPhysicalDevicePerformanceQueryPropertiesKHR"/>
                <type name="VkPerformanceCounterKHR"/>
                <type name="VkPerformanceCounterDescriptionKHR"/>
                <type name="VkPerformanceCounterDescriptionFlagsKHR"/>
                <type name="VkPerformanceCounterDescriptionFlagBitsKHR"/>
                <type name="VkQueryPoolPerformanceCreateInfoKHR"/>
                <type name="VkPerformanceCounterScopeKHR"/>
                <type name="VkPerformanceCounterStorageKHR"/>
                <type name="VkPerformanceCounterUnitKHR"/>
                <type name="VkPerformanceCounterResultKHR"/>
                <type name="VkAcquireProfilingLockInfoKHR"/>
                <type name="VkAcquireProfilingLockFlagsKHR"/>
                <type name="VkAcquireProfilingLockFlagBitsKHR"/>
                <type name="VkPerformanceQuerySubmitInfoKHR"/>
                <command name="vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"/>
                <command name="vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"/>
                <command name="vkAcquireProfilingLockKHR"/>
                <command name="vkReleaseProfilingLockKHR"/>
                <feature name="performanceCounterQueryPools" struct="VkPhysicalDevicePerformanceQueryFeaturesKHR"/>
            </require>
            <require depends="VKSC_VERSION_1_0" api="vulkansc">
                <enum offset="7" extends="VkStructureType"         name="VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_RESERVATION_INFO_KHR"/>
                <type name="VkPerformanceQueryReservationInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_maintenance2" number="118" type="device" author="KHR" contact="Michael Worcester @michaelworcester" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_MAINTENANCE_2_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_maintenance2&quot;"               name="VK_KHR_MAINTENANCE_2_EXTENSION_NAME"/>
                <enum alias="VK_KHR_MAINTENANCE_2_SPEC_VERSION"             name="VK_KHR_MAINTENANCE2_SPEC_VERSION" deprecated="aliased"/>
                <enum alias="VK_KHR_MAINTENANCE_2_EXTENSION_NAME"           name="VK_KHR_MAINTENANCE2_EXTENSION_NAME" deprecated="aliased"/>
                <enum extends="VkImageCreateFlagBits"                       name="VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR" alias="VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT"/>
                <enum extends="VkImageCreateFlagBits"                       name="VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR" alias="VK_IMAGE_CREATE_EXTENDED_USAGE_BIT"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO"/>
                <enum extends="VkImageLayout"                               name="VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR" alias="VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL"/>
                <enum extends="VkImageLayout"                               name="VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR" alias="VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL"/>
                <type name="VkPhysicalDevicePointClippingPropertiesKHR"/>
                <type name="VkPointClippingBehaviorKHR"/>
                <enum extends="VkPointClippingBehavior"                     name="VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR" alias="VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES"/>
                <enum extends="VkPointClippingBehavior"                     name="VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR" alias="VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY"/>
                <type name="VkRenderPassInputAttachmentAspectCreateInfoKHR"/>
                <type name="VkInputAttachmentAspectReferenceKHR"/>
                <type name="VkImageViewUsageCreateInfoKHR"/>
                <type name="VkTessellationDomainOriginKHR"/>
                <enum extends="VkTessellationDomainOrigin"                  name="VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR" alias="VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT"/>
                <enum extends="VkTessellationDomainOrigin"                  name="VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR" alias="VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT"/>
                <type name="VkPipelineTessellationDomainOriginStateCreateInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_119" number="119" author="KHR" contact="Michael Worcester @michaelworcester" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_119_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_119&quot;"              name="VK_KHR_EXTENSION_119_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_get_surface_capabilities2" number="120" type="instance" depends="VK_KHR_surface" author="KHR" contact="James Jones @cubanismo" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_get_surface_capabilities2&quot;"  name="VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR"/>
                <type name="VkPhysicalDeviceSurfaceInfo2KHR"/>
                <type name="VkSurfaceCapabilities2KHR"/>
                <type name="VkSurfaceFormat2KHR"/>
                <command name="vkGetPhysicalDeviceSurfaceCapabilities2KHR"/>
                <command name="vkGetPhysicalDeviceSurfaceFormats2KHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_variable_pointers" number="121" type="device" author="KHR" contact="Jesse Hall @critsec" depends="(VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class),VK_VERSION_1_1" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_VARIABLE_POINTERS_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_variable_pointers&quot;"          name="VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR"/>
                <type name="VkPhysicalDeviceVariablePointerFeaturesKHR"/>
                <type name="VkPhysicalDeviceVariablePointersFeaturesKHR"/>
                <feature name="variablePointersStorageBuffer" struct="VkPhysicalDeviceVariablePointerFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_get_display_properties2" number="122" type="instance" depends="VK_KHR_display" author="KHR" contact="James Jones @cubanismo" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_get_display_properties2&quot;"    name="VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR"/>
                <enum offset="4" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR"/>
                <type name="VkDisplayProperties2KHR"/>
                <type name="VkDisplayPlaneProperties2KHR"/>
                <type name="VkDisplayModeProperties2KHR"/>
                <type name="VkDisplayPlaneInfo2KHR"/>
                <type name="VkDisplayPlaneCapabilities2KHR"/>
                <command name="vkGetPhysicalDeviceDisplayProperties2KHR"/>
                <command name="vkGetPhysicalDeviceDisplayPlaneProperties2KHR"/>
                <command name="vkGetDisplayModeProperties2KHR"/>
                <command name="vkGetDisplayPlaneCapabilities2KHR"/>
            </require>
        </extension>
        <extension name="VK_MVK_ios_surface" number="123" type="instance" depends="VK_KHR_surface" platform="ios" supported="vulkan" author="MVK" contact="Bill Hollings @billhollings" deprecatedby="VK_EXT_metal_surface" nofeatures="true">
            <require>
                <enum value="3"                                             name="VK_MVK_IOS_SURFACE_SPEC_VERSION"/>
                <enum value="&quot;VK_MVK_ios_surface&quot;"                name="VK_MVK_IOS_SURFACE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK"/>
                <type name="VkIOSSurfaceCreateFlagsMVK"/>
                <type name="VkIOSSurfaceCreateInfoMVK"/>
                <command name="vkCreateIOSSurfaceMVK"/>
            </require>
        </extension>
        <extension name="VK_MVK_macos_surface" number="124" type="instance" depends="VK_KHR_surface" platform="macos" supported="vulkan" author="MVK" contact="Bill Hollings @billhollings" deprecatedby="VK_EXT_metal_surface" nofeatures="true">
            <require>
                <enum value="3"                                             name="VK_MVK_MACOS_SURFACE_SPEC_VERSION"/>
                <enum value="&quot;VK_MVK_macos_surface&quot;"              name="VK_MVK_MACOS_SURFACE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK"/>
                <type name="VkMacOSSurfaceCreateFlagsMVK"/>
                <type name="VkMacOSSurfaceCreateInfoMVK"/>
                <command name="vkCreateMacOSSurfaceMVK"/>
            </require>
        </extension>
        <extension name="VK_MVK_moltenvk" number="125" type="instance" author="MVK" contact="Bill Hollings @billhollings" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_MVK_MOLTENVK_SPEC_VERSION"/>
                <enum value="&quot;VK_MVK_moltenvk&quot;"                   name="VK_MVK_MOLTENVK_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_external_memory_dma_buf" number="126" type="device" depends="VK_KHR_external_memory_fd" author="EXT" contact="Lina Versace @linyaa-kiwi" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_external_memory_dma_buf&quot;"    name="VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME"/>
                <enum bitpos="9" extends="VkExternalMemoryHandleTypeFlagBits" name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_queue_family_foreign" number="127" type="device" author="EXT" depends="VK_KHR_external_memory,VK_VERSION_1_1" contact="Lina Versace @linyaa-kiwi" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_queue_family_foreign&quot;"       name="VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME"/>
                <enum                                                       name="VK_QUEUE_FAMILY_FOREIGN_EXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_dedicated_allocation" number="128" type="device" author="KHR" depends="VK_KHR_get_memory_requirements2,VK_VERSION_1_1" contact="James Jones @cubanismo" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="3"                                             name="VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_dedicated_allocation&quot;"       name="VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR" alias="VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO"/>
                <type name="VkMemoryDedicatedRequirementsKHR"/>
                <type name="VkMemoryDedicatedAllocateInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_debug_utils" number="129" type="instance" author="EXT" contact="Mark Young @marky-lunarg" specialuse="debugging" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="2"                                             name="VK_EXT_DEBUG_UTILS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_debug_utils&quot;"                name="VK_EXT_DEBUG_UTILS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT"/>
                <enum offset="4" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT"/>
                <enum offset="0" extends="VkObjectType"                     name="VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT"/>
                <type name="PFN_vkDebugUtilsMessengerCallbackEXT"/>
                <type name="VkDebugUtilsLabelEXT"/>
                <type name="VkDebugUtilsMessageSeverityFlagBitsEXT"/>
                <type name="VkDebugUtilsMessageSeverityFlagsEXT"/>
                <type name="VkDebugUtilsMessageTypeFlagBitsEXT"/>
                <type name="VkDebugUtilsMessageTypeFlagsEXT"/>
                <type name="VkDebugUtilsMessengerCallbackDataEXT"/>
                <type name="VkDebugUtilsMessengerCallbackDataFlagsEXT"/>
                <type name="VkDebugUtilsMessengerCreateFlagsEXT"/>
                <type name="VkDebugUtilsMessengerCreateInfoEXT"/>
                <type name="VkDebugUtilsMessengerEXT"/>
                <type name="VkDebugUtilsObjectNameInfoEXT"/>
                <type name="VkDebugUtilsObjectTagInfoEXT"/>
                <command name="vkSetDebugUtilsObjectNameEXT"/>
                <command name="vkSetDebugUtilsObjectTagEXT"/>
                <command name="vkQueueBeginDebugUtilsLabelEXT"/>
                <command name="vkQueueEndDebugUtilsLabelEXT"/>
                <command name="vkQueueInsertDebugUtilsLabelEXT"/>
                <command name="vkCmdBeginDebugUtilsLabelEXT"/>
                <command name="vkCmdEndDebugUtilsLabelEXT"/>
                <command name="vkCmdInsertDebugUtilsLabelEXT"/>
                <command name="vkCreateDebugUtilsMessengerEXT"/>
                <command name="vkDestroyDebugUtilsMessengerEXT"/>
                <command name="vkSubmitDebugUtilsMessageEXT"/>
            </require>
        </extension>
        <extension name="VK_ANDROID_external_memory_android_hardware_buffer" number="130" type="device" author="ANDROID" depends="((VK_KHR_sampler_ycbcr_conversion+VK_KHR_external_memory+VK_KHR_dedicated_allocation),VK_VERSION_1_1)+VK_EXT_queue_family_foreign" platform="android" contact="Jesse Hall @critsec" supported="vulkan" nofeatures="true">
            <require>
                <enum value="5"                                             name="VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION"/>
                <enum value="&quot;VK_ANDROID_external_memory_android_hardware_buffer&quot;" name="VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME"/>
                <enum bitpos="10" extends="VkExternalMemoryHandleTypeFlagBits" name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID"/>
                <enum offset="4" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID"/>
                <enum offset="5" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID"/>
                <type name="VkAndroidHardwareBufferUsageANDROID"/>
                <type name="VkAndroidHardwareBufferPropertiesANDROID"/>
                <type name="VkAndroidHardwareBufferFormatPropertiesANDROID"/>
                <type name="VkImportAndroidHardwareBufferInfoANDROID"/>
                <type name="VkMemoryGetAndroidHardwareBufferInfoANDROID"/>
                <type name="VkExternalFormatANDROID"/>
                <command name="vkGetAndroidHardwareBufferPropertiesANDROID"/>
                <command name="vkGetMemoryAndroidHardwareBufferANDROID"/>
                <type name="AHardwareBuffer"/>
            </require>
            <require depends="VK_KHR_format_feature_flags2,VK_VERSION_1_3">
                <type name="VkAndroidHardwareBufferFormatProperties2ANDROID"/>
                <enum offset="6" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID"/>
            </require>
        </extension>
        <extension name="VK_EXT_sampler_filter_minmax" number="131" type="device" author="NV" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Jeff Bolz @jeffbolznv" supported="vulkan" promotedto="VK_VERSION_1_2" nofeatures="true">
            <require>
                <enum value="2"                                             name="VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_sampler_filter_minmax&quot;"      name="VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT" alias="VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO"/>
                <enum extends="VkFormatFeatureFlagBits"                     name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT" alias="VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT"/>
                <enum extends="VkSamplerReductionMode"                      name="VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT" alias="VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE"/>
                <enum extends="VkSamplerReductionMode"                      name="VK_SAMPLER_REDUCTION_MODE_MIN_EXT" alias="VK_SAMPLER_REDUCTION_MODE_MIN"/>
                <enum extends="VkSamplerReductionMode"                      name="VK_SAMPLER_REDUCTION_MODE_MAX_EXT" alias="VK_SAMPLER_REDUCTION_MODE_MAX"/>
                <type name="VkSamplerReductionModeEXT"/>
                <type name="VkSamplerReductionModeCreateInfoEXT"/>
                <type name="VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_storage_buffer_storage_class" number="132" type="device" author="KHR" contact="Alexander Galazin @alegal-arm" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_storage_buffer_storage_class&quot;" name="VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_gpu_shader_int16" number="133" type="device" author="AMD" contact="Qun Lin @linqun" supported="vulkan" deprecatedby="VK_KHR_shader_float16_int8" nofeatures="true">
            <require>
                <enum value="2"                                             name="VK_AMD_GPU_SHADER_INT16_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_gpu_shader_int16&quot;"           name="VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_134" number="134" author="AMD" contact="Mais Alnasser @malnasse" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_AMD_EXTENSION_134_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_134&quot;"              name="VK_AMD_EXTENSION_134_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMDX_shader_enqueue" number="135" author="AMD" depends="((VK_KHR_synchronization2+VK_KHR_spirv_1_4+VK_EXT_extended_dynamic_state),VK_VERSION_1_3)+VK_KHR_maintenance5+VK_KHR_pipeline_library" type="device" contact="Tobias Hector @tobski" provisional="true" platform="provisional" supported="vulkan">
            <require>
                <enum value="2"                                             name="VK_AMDX_SHADER_ENQUEUE_SPEC_VERSION"/>
                <enum value="&quot;VK_AMDX_shader_enqueue&quot;"            name="VK_AMDX_SHADER_ENQUEUE_EXTENSION_NAME"/>
                <enum                                                       name="VK_SHADER_INDEX_UNUSED_AMDX"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX" protect="VK_ENABLE_BETA_EXTENSIONS"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_PROPERTIES_AMDX" protect="VK_ENABLE_BETA_EXTENSIONS"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_SCRATCH_SIZE_AMDX" protect="VK_ENABLE_BETA_EXTENSIONS"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_CREATE_INFO_AMDX" protect="VK_ENABLE_BETA_EXTENSIONS"/>
                <enum offset="4" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_NODE_CREATE_INFO_AMDX" protect="VK_ENABLE_BETA_EXTENSIONS"/>
                <enum bitpos="25" extends="VkBufferUsageFlagBits"           name="VK_BUFFER_USAGE_EXECUTION_GRAPH_SCRATCH_BIT_AMDX" protect="VK_ENABLE_BETA_EXTENSIONS"/>
                <enum offset="0" extends="VkPipelineBindPoint"              name="VK_PIPELINE_BIND_POINT_EXECUTION_GRAPH_AMDX" protect="VK_ENABLE_BETA_EXTENSIONS"/>
                <type name="VkPhysicalDeviceShaderEnqueueFeaturesAMDX"/>
                <type name="VkPhysicalDeviceShaderEnqueuePropertiesAMDX"/>
                <type name="VkExecutionGraphPipelineScratchSizeAMDX"/>
                <type name="VkExecutionGraphPipelineCreateInfoAMDX"/>
                <type name="VkDispatchGraphInfoAMDX"/>
                <type name="VkDispatchGraphCountInfoAMDX"/>
                <type name="VkPipelineShaderStageNodeCreateInfoAMDX"/>
                <type name="VkDeviceOrHostAddressConstAMDX"/>
                <command name="vkCreateExecutionGraphPipelinesAMDX"/>
                <command name="vkGetExecutionGraphPipelineScratchSizeAMDX"/>
                <command name="vkGetExecutionGraphPipelineNodeIndexAMDX"/>
                <command name="vkCmdInitializeGraphScratchMemoryAMDX"/>
                <command name="vkCmdDispatchGraphAMDX"/>
                <command name="vkCmdDispatchGraphIndirectAMDX"/>
                <command name="vkCmdDispatchGraphIndirectCountAMDX"/>
                <feature name="shaderEnqueue" struct="VkPhysicalDeviceShaderEnqueueFeaturesAMDX"/>
            </require>
            <require depends="VK_KHR_maintenance5,VK_VERSION_1_4">
                <enum bitpos="25" extends="VkBufferUsageFlagBits2"       name="VK_BUFFER_USAGE_2_EXECUTION_GRAPH_SCRATCH_BIT_AMDX" protect="VK_ENABLE_BETA_EXTENSIONS"/>
                <enum bitpos="32" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_EXECUTION_GRAPH_BIT_AMDX" protect="VK_ENABLE_BETA_EXTENSIONS"/>
            </require>
            <require depends="VK_EXT_mesh_shader">
                <feature name="shaderMeshEnqueue" struct="VkPhysicalDeviceShaderEnqueueFeaturesAMDX"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_136" number="136" type="device" depends="VK_KHR_maintenance5" author="KHR" contact="Tobias Hector @tobski" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_136_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_136&quot;"              name="VK_KHR_EXTENSION_136_EXTENSION_NAME"/>
                <enum bitpos="28" extends="VkBufferUsageFlagBits"           name="VK_BUFFER_USAGE_RESERVED_28_BIT_KHR"/>
                <enum bitpos="36" extends="VkPipelineCreateFlagBits2"       name="VK_PIPELINE_CREATE_RESERVED_36_BIT_KHR"/>
                <enum bitpos="39" extends="VkPipelineCreateFlagBits2"       name="VK_PIPELINE_CREATE_RESERVED_39_BIT_KHR"/>
                <enum bitpos="57" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_RESERVED_57_BIT_KHR"/>
                <enum bitpos="58" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_RESERVED_58_BIT_KHR"/>
                <enum bitpos="59" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_RESERVED_59_BIT_KHR"/>
            </require>
            <require depends="VK_KHR_maintenance5,VK_VERSION_1_4">
                <enum bitpos="28" extends="VkBufferUsageFlagBits2"          name="VK_BUFFER_USAGE_2_RESERVED_28_BIT_KHR"/>
            </require>
            <require depends="VK_EXT_shader_object">
                <enum bitpos="10"  extends="VkShaderCreateFlagBitsEXT"       name="VK_SHADER_CREATE_RESERVED_10_BIT_KHR"/>
                <enum bitpos="11"  extends="VkShaderCreateFlagBitsEXT"       name="VK_SHADER_CREATE_RESERVED_11_BIT_KHR"/>
            </require>
        </extension>
        <extension name="VK_AMD_mixed_attachment_samples" number="137" type="device" author="AMD" contact="Matthaeus G. Chajdas @anteru" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_mixed_attachment_samples&quot;"   name="VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME"/>
            </require>
            <require depends="VK_VERSION_1_3,VK_KHR_dynamic_rendering">
                <enum offset="8" extends="VkStructureType" extnumber="45"           name="VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD"/>
                <type name="VkAttachmentSampleCountInfoAMD"/>
            </require>
        </extension>
        <extension name="VK_AMD_shader_fragment_mask" number="138" author="AMD" contact="Aaron Hagan @AaronHaganAMD" supported="vulkan" type="device" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_shader_fragment_mask&quot;"       name="VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_inline_uniform_block" number="139" type="device" author="EXT" depends="(VK_KHR_get_physical_device_properties2+VK_KHR_maintenance1),VK_VERSION_1_1" contact="Daniel Rakos @aqnuep" supported="vulkan" promotedto="VK_VERSION_1_3">
            <require>
                <enum value="1"                                             name="VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_inline_uniform_block&quot;"       name="VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME"/>
                <enum extends="VkDescriptorType"                            name="VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT" alias="VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT" alias="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT" alias="VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO"/>
                <type name="VkPhysicalDeviceInlineUniformBlockFeaturesEXT"/>
                <type name="VkPhysicalDeviceInlineUniformBlockPropertiesEXT"/>
                <type name="VkWriteDescriptorSetInlineUniformBlockEXT"/>
                <type name="VkDescriptorPoolInlineUniformBlockCreateInfoEXT"/>
                <feature name="inlineUniformBlock" struct="VkPhysicalDeviceInlineUniformBlockFeaturesEXT"/>
            </require>
            <require depends="VK_EXT_descriptor_indexing">
                <feature name="descriptorBindingInlineUniformBlockUpdateAfterBind" struct="VkPhysicalDeviceInlineUniformBlockFeatures"/>
            </require>
            <require depends="VK_VERSION_1_2+VkPhysicalDeviceVulkan12Features::descriptorIndexing">
                <feature name="descriptorBindingInlineUniformBlockUpdateAfterBind" struct="VkPhysicalDeviceInlineUniformBlockFeatures"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_140" number="140" author="AMD" contact="Mais Alnasser @malnasse" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_AMD_EXTENSION_140_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_140&quot;"              name="VK_AMD_EXTENSION_140_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_shader_stencil_export" number="141" type="device" author="EXT" contact="Dominik Witczak @dominikwitczakamd" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_shader_stencil_export&quot;"      name="VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_142" number="142" author="AMD" contact="Mais Alnasser @malnasse" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_AMD_EXTENSION_142_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_142&quot;"              name="VK_AMD_EXTENSION_142_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_143" number="143" author="AMD" contact="Mais Alnasser @malnasse" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_AMD_EXTENSION_143_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_143&quot;"              name="VK_AMD_EXTENSION_143_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_sample_locations" number="144" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="AMD" contact="Daniel Rakos @drakos-amd" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_sample_locations&quot;"           name="VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME"/>
                <enum bitpos="12" extends="VkImageCreateFlagBits"           name="VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT"/>
                <enum offset="4" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT"/>
                <enum offset="0" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT"/>
                <type name="VkSampleLocationEXT"/>
                <type name="VkSampleLocationsInfoEXT"/>
                <type name="VkAttachmentSampleLocationsEXT"/>
                <type name="VkSubpassSampleLocationsEXT"/>
                <type name="VkRenderPassSampleLocationsBeginInfoEXT"/>
                <type name="VkPipelineSampleLocationsStateCreateInfoEXT"/>
                <type name="VkPhysicalDeviceSampleLocationsPropertiesEXT"/>
                <type name="VkMultisamplePropertiesEXT"/>
                <command name="vkCmdSetSampleLocationsEXT"/>
                <command name="vkGetPhysicalDeviceMultisamplePropertiesEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_relaxed_block_layout" number="145" type="device" author="KHR" contact="John Kessenich @johnkslang" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_relaxed_block_layout&quot;"       name="VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_RESERVED_do_not_use_146" number="146" supported="disabled" comment="Used for functionality subsumed into Vulkan 1.1 and not published as an extension">
            <require>
                <enum value="1"                                             name="VK_RESERVED_DO_NOT_USE_146_SPEC_VERSION"/>
                <enum value="&quot;VK_RESERVED_do_not_use_146&quot;"        name="VK_RESERVED_DO_NOT_USE_146_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_get_memory_requirements2" number="147" type="device" author="KHR" contact="Faith Ekstrand @gfxstrand" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1" name="VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_get_memory_requirements2&quot;"   name="VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR" alias="VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR" alias="VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR" alias="VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR" alias="VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR" alias="VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2"/>
                <type name="VkBufferMemoryRequirementsInfo2KHR"/>
                <type name="VkImageMemoryRequirementsInfo2KHR"/>
                <type name="VkImageSparseMemoryRequirementsInfo2KHR"/>
                <type name="VkMemoryRequirements2KHR"/>
                <type name="VkSparseImageMemoryRequirements2KHR"/>
                <command name="vkGetImageMemoryRequirements2KHR"/>
                <command name="vkGetBufferMemoryRequirements2KHR"/>
                <command name="vkGetImageSparseMemoryRequirements2KHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_image_format_list" number="148" type="device" author="KHR" contact="Faith Ekstrand @gfxstrand" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_image_format_list&quot;"          name="VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO"/>
                <type name="VkImageFormatListCreateInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_blend_operation_advanced" number="149" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="NV" contact="Jeff Bolz @jeffbolznv" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="2"                                             name="VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_blend_operation_advanced&quot;"   name="VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT"/>
                <type name="VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT"/>
                <type name="VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT"/>
                <type name="VkPipelineColorBlendAdvancedStateCreateInfoEXT"/>
                <type name="VkBlendOverlapEXT"/>
                <enum offset="0" extends="VkBlendOp"                        name="VK_BLEND_OP_ZERO_EXT"/>
                <enum offset="1" extends="VkBlendOp"                        name="VK_BLEND_OP_SRC_EXT"/>
                <enum offset="2" extends="VkBlendOp"                        name="VK_BLEND_OP_DST_EXT"/>
                <enum offset="3" extends="VkBlendOp"                        name="VK_BLEND_OP_SRC_OVER_EXT"/>
                <enum offset="4" extends="VkBlendOp"                        name="VK_BLEND_OP_DST_OVER_EXT"/>
                <enum offset="5" extends="VkBlendOp"                        name="VK_BLEND_OP_SRC_IN_EXT"/>
                <enum offset="6" extends="VkBlendOp"                        name="VK_BLEND_OP_DST_IN_EXT"/>
                <enum offset="7" extends="VkBlendOp"                        name="VK_BLEND_OP_SRC_OUT_EXT"/>
                <enum offset="8" extends="VkBlendOp"                        name="VK_BLEND_OP_DST_OUT_EXT"/>
                <enum offset="9" extends="VkBlendOp"                        name="VK_BLEND_OP_SRC_ATOP_EXT"/>
                <enum offset="10" extends="VkBlendOp"                       name="VK_BLEND_OP_DST_ATOP_EXT"/>
                <enum offset="11" extends="VkBlendOp"                       name="VK_BLEND_OP_XOR_EXT"/>
                <enum offset="12" extends="VkBlendOp"                       name="VK_BLEND_OP_MULTIPLY_EXT"/>
                <enum offset="13" extends="VkBlendOp"                       name="VK_BLEND_OP_SCREEN_EXT"/>
                <enum offset="14" extends="VkBlendOp"                       name="VK_BLEND_OP_OVERLAY_EXT"/>
                <enum offset="15" extends="VkBlendOp"                       name="VK_BLEND_OP_DARKEN_EXT"/>
                <enum offset="16" extends="VkBlendOp"                       name="VK_BLEND_OP_LIGHTEN_EXT"/>
                <enum offset="17" extends="VkBlendOp"                       name="VK_BLEND_OP_COLORDODGE_EXT"/>
                <enum offset="18" extends="VkBlendOp"                       name="VK_BLEND_OP_COLORBURN_EXT"/>
                <enum offset="19" extends="VkBlendOp"                       name="VK_BLEND_OP_HARDLIGHT_EXT"/>
                <enum offset="20" extends="VkBlendOp"                       name="VK_BLEND_OP_SOFTLIGHT_EXT"/>
                <enum offset="21" extends="VkBlendOp"                       name="VK_BLEND_OP_DIFFERENCE_EXT"/>
                <enum offset="22" extends="VkBlendOp"                       name="VK_BLEND_OP_EXCLUSION_EXT"/>
                <enum offset="23" extends="VkBlendOp"                       name="VK_BLEND_OP_INVERT_EXT"/>
                <enum offset="24" extends="VkBlendOp"                       name="VK_BLEND_OP_INVERT_RGB_EXT"/>
                <enum offset="25" extends="VkBlendOp"                       name="VK_BLEND_OP_LINEARDODGE_EXT"/>
                <enum offset="26" extends="VkBlendOp"                       name="VK_BLEND_OP_LINEARBURN_EXT"/>
                <enum offset="27" extends="VkBlendOp"                       name="VK_BLEND_OP_VIVIDLIGHT_EXT"/>
                <enum offset="28" extends="VkBlendOp"                       name="VK_BLEND_OP_LINEARLIGHT_EXT"/>
                <enum offset="29" extends="VkBlendOp"                       name="VK_BLEND_OP_PINLIGHT_EXT"/>
                <enum offset="30" extends="VkBlendOp"                       name="VK_BLEND_OP_HARDMIX_EXT"/>
                <enum offset="31" extends="VkBlendOp"                       name="VK_BLEND_OP_HSL_HUE_EXT"/>
                <enum offset="32" extends="VkBlendOp"                       name="VK_BLEND_OP_HSL_SATURATION_EXT"/>
                <enum offset="33" extends="VkBlendOp"                       name="VK_BLEND_OP_HSL_COLOR_EXT"/>
                <enum offset="34" extends="VkBlendOp"                       name="VK_BLEND_OP_HSL_LUMINOSITY_EXT"/>
                <enum offset="35" extends="VkBlendOp"                       name="VK_BLEND_OP_PLUS_EXT"/>
                <enum offset="36" extends="VkBlendOp"                       name="VK_BLEND_OP_PLUS_CLAMPED_EXT"/>
                <enum offset="37" extends="VkBlendOp"                       name="VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT"/>
                <enum offset="38" extends="VkBlendOp"                       name="VK_BLEND_OP_PLUS_DARKER_EXT"/>
                <enum offset="39" extends="VkBlendOp"                       name="VK_BLEND_OP_MINUS_EXT"/>
                <enum offset="40" extends="VkBlendOp"                       name="VK_BLEND_OP_MINUS_CLAMPED_EXT"/>
                <enum offset="41" extends="VkBlendOp"                       name="VK_BLEND_OP_CONTRAST_EXT"/>
                <enum offset="42" extends="VkBlendOp"                       name="VK_BLEND_OP_INVERT_OVG_EXT"/>
                <enum offset="43" extends="VkBlendOp"                       name="VK_BLEND_OP_RED_EXT"/>
                <enum offset="44" extends="VkBlendOp"                       name="VK_BLEND_OP_GREEN_EXT"/>
                <enum offset="45" extends="VkBlendOp"                       name="VK_BLEND_OP_BLUE_EXT"/>
                <enum bitpos="19" extends="VkAccessFlagBits"                name="VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT"/>
            </require>
        </extension>
        <extension name="VK_NV_fragment_coverage_to_color" number="150" type="device" author="NV" contact="Jeff Bolz @jeffbolznv" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_fragment_coverage_to_color&quot;"  name="VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV"/>
                <type name="VkPipelineCoverageToColorStateCreateFlagsNV"/>
                <type name="VkPipelineCoverageToColorStateCreateInfoNV"/>
            </require>
        </extension>
        <extension name="VK_KHR_acceleration_structure" number="151" type="device" depends="((VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address),VK_VERSION_1_2)+VK_KHR_deferred_host_operations" author="KHR" contact="Daniel Koch @dgkoch" supported="vulkan" sortorder="1" ratified="vulkan">
            <require>
                <enum value="13"                                            name="VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_acceleration_structure&quot;"     name="VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME"/>
                <enum offset="7"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR"/>
                <enum offset="0"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR"/>
                <enum offset="2"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR"/>
                <enum offset="3"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR"/>
                <enum offset="4"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR"/>
                <enum offset="5"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR"/>
                <enum offset="6"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR"/>
                <enum offset="9"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR"/>
                <enum offset="10" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR"/>
                <enum offset="11" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR"/>
                <enum offset="12" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR"/>
                <enum offset="13" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR"/>
                <enum offset="14" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR"/>
                <enum offset="17" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR"/>
                <enum offset="20" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR"/>
                <enum bitpos="25" extends="VkPipelineStageFlagBits"         name="VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR"/>
                <enum offset="0"  extends="VkDescriptorType"                name="VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR"/>
                <enum bitpos="21" extends="VkAccessFlagBits"                name="VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR"/>
                <enum bitpos="22" extends="VkAccessFlagBits"                name="VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR"/>
                <enum offset="0"  extends="VkQueryType"                     name="VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR"/>
                <enum offset="1"  extends="VkQueryType"                     name="VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR"/>
                <enum offset="0"  extends="VkObjectType"                    name="VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR"/>
                <enum offset="0"  extends="VkIndexType" extnumber="166"     name="VK_INDEX_TYPE_NONE_KHR"/>
                <enum bitpos="29" extends="VkFormatFeatureFlagBits"         name="VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR"/>
                <enum bitpos="19" extends="VkBufferUsageFlagBits"           name="VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR"/>
                <enum bitpos="20" extends="VkBufferUsageFlagBits"           name="VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR"/>
                <enum value="2" extends="VkCopyAccelerationStructureModeKHR" name="VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR"/>
                <enum value="3" extends="VkCopyAccelerationStructureModeKHR" name="VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR"/>
                <type name="VkAccelerationStructureTypeKHR"/>
                <type name="VkDeviceOrHostAddressKHR"/>
                <type name="VkDeviceOrHostAddressConstKHR"/>
                <type name="VkAccelerationStructureBuildRangeInfoKHR"/>
                <type name="VkAabbPositionsKHR"/>
                <type name="VkAccelerationStructureGeometryTrianglesDataKHR"/>
                <type name="VkTransformMatrixKHR"/>
                <type name="VkAccelerationStructureBuildGeometryInfoKHR"/>
                <type name="VkAccelerationStructureBuildTypeKHR"/>
                <type name="VkAccelerationStructureGeometryAabbsDataKHR"/>
                <type name="VkAccelerationStructureInstanceKHR"/>
                <type name="VkAccelerationStructureGeometryInstancesDataKHR"/>
                <type name="VkAccelerationStructureGeometryDataKHR"/>
                <type name="VkAccelerationStructureGeometryKHR"/>
                <type name="VkGeometryFlagsKHR"/>
                <type name="VkGeometryInstanceFlagsKHR"/>
                <type name="VkGeometryFlagBitsKHR"/>
                <type name="VkGeometryInstanceFlagBitsKHR"/>
                <type name="VkAccelerationStructureCreateInfoKHR"/>
                <type name="VkAccelerationStructureKHR"/>
                <type name="VkBuildAccelerationStructureFlagBitsKHR"/>
                <type name="VkBuildAccelerationStructureFlagsKHR"/>
                <type name="VkCopyAccelerationStructureModeKHR"/>
                <type name="VkGeometryTypeKHR"/>
                <type name="VkWriteDescriptorSetAccelerationStructureKHR"/>
                <type name="VkPhysicalDeviceAccelerationStructureFeaturesKHR"/>
                <type name="VkPhysicalDeviceAccelerationStructurePropertiesKHR"/>
                <type name="VkAccelerationStructureDeviceAddressInfoKHR"/>
                <type name="VkAccelerationStructureVersionInfoKHR"/>
                <type name="VkCopyAccelerationStructureToMemoryInfoKHR"/>
                <type name="VkCopyMemoryToAccelerationStructureInfoKHR"/>
                <type name="VkCopyAccelerationStructureInfoKHR"/>
                <type name="VkAccelerationStructureCompatibilityKHR"/>
                <type name="VkAccelerationStructureCreateFlagBitsKHR"/>
                <type name="VkAccelerationStructureCreateFlagsKHR"/>
                <type name="VkBuildAccelerationStructureModeKHR"/>
                <type name="VkAccelerationStructureBuildSizesInfoKHR"/>
                <command name="vkCreateAccelerationStructureKHR"/>
                <command name="vkDestroyAccelerationStructureKHR"/>
                <command name="vkCmdBuildAccelerationStructuresKHR"/>
                <command name="vkCmdBuildAccelerationStructuresIndirectKHR"/>
                <command name="vkBuildAccelerationStructuresKHR"/>
                <command name="vkCopyAccelerationStructureKHR"/>
                <command name="vkCopyAccelerationStructureToMemoryKHR"/>
                <command name="vkCopyMemoryToAccelerationStructureKHR"/>
                <command name="vkWriteAccelerationStructuresPropertiesKHR"/>
                <command name="vkCmdCopyAccelerationStructureKHR"/>
                <command name="vkCmdCopyAccelerationStructureToMemoryKHR"/>
                <command name="vkCmdCopyMemoryToAccelerationStructureKHR"/>
                <command name="vkGetAccelerationStructureDeviceAddressKHR"/>
                <command name="vkCmdWriteAccelerationStructuresPropertiesKHR"/>
                <command name="vkGetDeviceAccelerationStructureCompatibilityKHR"/>
                <command name="vkGetAccelerationStructureBuildSizesKHR"/>
                <feature name="accelerationStructure" struct="VkPhysicalDeviceAccelerationStructureFeaturesKHR"/>
                <feature name="bufferDeviceAddress" struct="VkPhysicalDeviceBufferDeviceAddressFeatures"/>
                <feature name="descriptorBindingAccelerationStructureUpdateAfterBind" struct="VkPhysicalDeviceAccelerationStructureFeaturesKHR"/>
            </require>
            <require depends="VK_KHR_format_feature_flags2,VK_VERSION_1_3">
                <enum bitpos="29" extends="VkFormatFeatureFlagBits2"        name="VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR"/>
            </require>
            <require depends="VK_EXT_debug_report">
                <enum offset="0"  extends="VkDebugReportObjectTypeEXT"      name="VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT"/>
            </require>
            <require depends="VK_VERSION_1_2">
                <feature name="descriptorIndexing" struct="VkPhysicalDeviceVulkan12Features"/>
            </require>
        </extension>
        <extension name="VK_KHR_ray_tracing_pipeline" number="348" type="device" depends="VK_KHR_spirv_1_4+VK_KHR_acceleration_structure" author="KHR" contact="Daniel Koch @dgkoch" supported="vulkan" sortorder="1" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_ray_tracing_pipeline&quot;"       name="VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME"/>
                <enum                                                       name="VK_SHADER_UNUSED_KHR"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR"/>
                <enum offset="15" extends="VkStructureType" extnumber="151" name="VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR"/>
                <enum offset="16" extends="VkStructureType" extnumber="151" name="VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR"/>
                <enum offset="18" extends="VkStructureType" extnumber="151" name="VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR"/>
                <enum bitpos="8"  extends="VkShaderStageFlagBits"           name="VK_SHADER_STAGE_RAYGEN_BIT_KHR"/>
                <enum bitpos="9"  extends="VkShaderStageFlagBits"           name="VK_SHADER_STAGE_ANY_HIT_BIT_KHR"/>
                <enum bitpos="10" extends="VkShaderStageFlagBits"           name="VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR"/>
                <enum bitpos="11" extends="VkShaderStageFlagBits"           name="VK_SHADER_STAGE_MISS_BIT_KHR"/>
                <enum bitpos="12" extends="VkShaderStageFlagBits"           name="VK_SHADER_STAGE_INTERSECTION_BIT_KHR"/>
                <enum bitpos="13" extends="VkShaderStageFlagBits"           name="VK_SHADER_STAGE_CALLABLE_BIT_KHR"/>
                <enum bitpos="21" extends="VkPipelineStageFlagBits"         name="VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR"/>
                <enum bitpos="10" extends="VkBufferUsageFlagBits"           name="VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR"/>
                <enum offset="0"  extends="VkPipelineBindPoint" extnumber="166" name="VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR"/>
                <enum bitpos="14" extends="VkPipelineCreateFlagBits"        name="VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR"/>
                <enum bitpos="15" extends="VkPipelineCreateFlagBits"        name="VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR"/>
                <enum bitpos="16" extends="VkPipelineCreateFlagBits"        name="VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR"/>
                <enum bitpos="17" extends="VkPipelineCreateFlagBits"        name="VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR"/>
                <enum bitpos="12" extends="VkPipelineCreateFlagBits"        name="VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR"/>
                <enum bitpos="13" extends="VkPipelineCreateFlagBits"        name="VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR"/>
                <enum bitpos="19" extends="VkPipelineCreateFlagBits"        name="VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR"/>
                <enum offset="0"  extends="VkDynamicState"                  name="VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR"/>
                <enum extends="VkPipelineCreateFlagBits2"                   name="VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_BUILT_IN_PRIMITIVES_BIT_KHR" alias="VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR"/>
                <type name="VkRayTracingShaderGroupCreateInfoKHR"/>
                <type name="VkRayTracingShaderGroupTypeKHR"/>
                <type name="VkRayTracingPipelineCreateInfoKHR"/>
                <type name="VkPhysicalDeviceRayTracingPipelineFeaturesKHR"/>
                <type name="VkPhysicalDeviceRayTracingPipelinePropertiesKHR"/>
                <type name="VkStridedDeviceAddressRegionKHR"/>
                <type name="VkTraceRaysIndirectCommandKHR"/>
                <type name="VkRayTracingPipelineInterfaceCreateInfoKHR"/>
                <type name="VkShaderGroupShaderKHR"/>
                <command name="vkCmdTraceRaysKHR"/>
                <command name="vkCreateRayTracingPipelinesKHR"/>
                <command name="vkGetRayTracingShaderGroupHandlesKHR"/>
                <command name="vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"/>
                <command name="vkCmdTraceRaysIndirectKHR"/>
                <command name="vkGetRayTracingShaderGroupStackSizeKHR"/>
                <command name="vkCmdSetRayTracingPipelineStackSizeKHR"/>
                <feature name="rayTracingPipeline" struct="VkPhysicalDeviceRayTracingPipelineFeaturesKHR"/>
                <feature name="rayTracingPipelineTraceRaysIndirect" struct="VkPhysicalDeviceRayTracingPipelineFeaturesKHR"/>
            </require>
            <require depends="VK_KHR_ray_query">
                <feature name="rayTraversalPrimitiveCulling" struct="VkPhysicalDeviceRayTracingPipelineFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_ray_query" number="349" type="device" depends="VK_KHR_spirv_1_4+VK_KHR_acceleration_structure" author="KHR" contact="Daniel Koch @dgkoch" supported="vulkan" sortorder="1" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_RAY_QUERY_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_ray_query&quot;"                  name="VK_KHR_RAY_QUERY_EXTENSION_NAME"/>
                <enum offset="13" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR"/>
                <type name="VkPhysicalDeviceRayQueryFeaturesKHR"/>
                <feature name="rayQuery" struct="VkPhysicalDeviceRayQueryFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_152" number="152" author="NV" contact="Jeff Bolz @jeffbolznv" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_NV_EXTENSION_152_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_152&quot;"               name="VK_NV_EXTENSION_152_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_framebuffer_mixed_samples" number="153" type="device" author="NV" contact="Jeff Bolz @jeffbolznv" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_framebuffer_mixed_samples&quot;"   name="VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV"/>
                <type name="VkPipelineCoverageModulationStateCreateInfoNV"/>
                <type name="VkPipelineCoverageModulationStateCreateFlagsNV"/>
                <type name="VkCoverageModulationModeNV"/>
            </require>
            <require depends="VK_VERSION_1_3,VK_KHR_dynamic_rendering">
                <enum extends="VkStructureType" name="VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV" alias="VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD"/>
                <type name="VkAttachmentSampleCountInfoNV"/>
            </require>
        </extension>
        <extension name="VK_NV_fill_rectangle" number="154" type="device" author="NV" contact="Jeff Bolz @jeffbolznv" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_NV_FILL_RECTANGLE_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_fill_rectangle&quot;"              name="VK_NV_FILL_RECTANGLE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkPolygonMode"                    name="VK_POLYGON_MODE_FILL_RECTANGLE_NV"/>
            </require>
        </extension>
        <extension name="VK_NV_shader_sm_builtins" number="155" type="device" depends="VK_VERSION_1_1" author="NV" contact="Daniel Koch @dgkoch" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_shader_sm_builtins&quot;"          name="VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV"/>
                <type name="VkPhysicalDeviceShaderSMBuiltinsPropertiesNV"/>
                <type name="VkPhysicalDeviceShaderSMBuiltinsFeaturesNV"/>
                <feature name="shaderSMBuiltins" struct="VkPhysicalDeviceShaderSMBuiltinsFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_EXT_post_depth_coverage" number="156" type="device" author="NV" contact="Daniel Koch @dgkoch" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_post_depth_coverage&quot;"        name="VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_sampler_ycbcr_conversion" number="157" type="device" depends="(VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2),VK_VERSION_1_1" author="KHR" contact="Andrew Garrard @fluppeteer" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan">
            <require>
                <enum value="14"                                            name="VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_sampler_ycbcr_conversion&quot;"   name="VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR" alias="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR" alias="VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR" alias="VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES"/>
                <enum extends="VkObjectType"                                name="VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR" alias="VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G8B8G8R8_422_UNORM_KHR" alias="VK_FORMAT_G8B8G8R8_422_UNORM"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_B8G8R8G8_422_UNORM_KHR" alias="VK_FORMAT_B8G8R8G8_422_UNORM"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR" alias="VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR" alias="VK_FORMAT_G8_B8R8_2PLANE_420_UNORM"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR" alias="VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR" alias="VK_FORMAT_G8_B8R8_2PLANE_422_UNORM"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR" alias="VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_R10X6_UNORM_PACK16_KHR" alias="VK_FORMAT_R10X6_UNORM_PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR" alias="VK_FORMAT_R10X6G10X6_UNORM_2PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR" alias="VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR" alias="VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR" alias="VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR" alias="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR" alias="VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR" alias="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR" alias="VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR" alias="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_R12X4_UNORM_PACK16_KHR" alias="VK_FORMAT_R12X4_UNORM_PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR" alias="VK_FORMAT_R12X4G12X4_UNORM_2PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR" alias="VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR" alias="VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR" alias="VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR" alias="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR" alias="VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR" alias="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR" alias="VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR" alias="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G16B16G16R16_422_UNORM_KHR" alias="VK_FORMAT_G16B16G16R16_422_UNORM"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_B16G16R16G16_422_UNORM_KHR" alias="VK_FORMAT_B16G16R16G16_422_UNORM"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR" alias="VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR" alias="VK_FORMAT_G16_B16R16_2PLANE_420_UNORM"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR" alias="VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR" alias="VK_FORMAT_G16_B16R16_2PLANE_422_UNORM"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR" alias="VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM"/>
                <enum extends="VkImageAspectFlagBits"                       name="VK_IMAGE_ASPECT_PLANE_0_BIT_KHR" alias="VK_IMAGE_ASPECT_PLANE_0_BIT"/>
                <enum extends="VkImageAspectFlagBits"                       name="VK_IMAGE_ASPECT_PLANE_1_BIT_KHR" alias="VK_IMAGE_ASPECT_PLANE_1_BIT"/>
                <enum extends="VkImageAspectFlagBits"                       name="VK_IMAGE_ASPECT_PLANE_2_BIT_KHR" alias="VK_IMAGE_ASPECT_PLANE_2_BIT"/>
                <enum extends="VkImageCreateFlagBits"                       name="VK_IMAGE_CREATE_DISJOINT_BIT_KHR" alias="VK_IMAGE_CREATE_DISJOINT_BIT"/>
                <enum extends="VkFormatFeatureFlagBits"                     name="VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR" alias="VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT"/>
                <enum extends="VkFormatFeatureFlagBits"                     name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR" alias="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT"/>
                <enum extends="VkFormatFeatureFlagBits"                     name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR" alias="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT"/>
                <enum extends="VkFormatFeatureFlagBits"                     name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR" alias="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT"/>
                <enum extends="VkFormatFeatureFlagBits"                     name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR" alias="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT"/>
                <enum extends="VkFormatFeatureFlagBits"                     name="VK_FORMAT_FEATURE_DISJOINT_BIT_KHR" alias="VK_FORMAT_FEATURE_DISJOINT_BIT"/>
                <enum extends="VkFormatFeatureFlagBits"                     name="VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR" alias="VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT"/>
                <type name="VkSamplerYcbcrConversionCreateInfoKHR"/>
                <type name="VkSamplerYcbcrConversionInfoKHR"/>
                <type name="VkBindImagePlaneMemoryInfoKHR"/>
                <type name="VkImagePlaneMemoryRequirementsInfoKHR"/>
                <type name="VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR"/>
                <type name="VkSamplerYcbcrConversionImageFormatPropertiesKHR"/>
                <command name="vkCreateSamplerYcbcrConversionKHR"/>
                <command name="vkDestroySamplerYcbcrConversionKHR"/>
                <type name="VkSamplerYcbcrConversionKHR"/>
                <type name="VkSamplerYcbcrModelConversionKHR"/>
                <enum extends="VkSamplerYcbcrModelConversion"               name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR" alias="VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY"/>
                <enum extends="VkSamplerYcbcrModelConversion"               name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR" alias="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY"/>
                <enum extends="VkSamplerYcbcrModelConversion"               name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR" alias="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709"/>
                <enum extends="VkSamplerYcbcrModelConversion"               name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR" alias="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601"/>
                <enum extends="VkSamplerYcbcrModelConversion"               name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR" alias="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020"/>
                <type name="VkSamplerYcbcrRangeKHR"/>
                <enum extends="VkSamplerYcbcrRange"                         name="VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR" alias="VK_SAMPLER_YCBCR_RANGE_ITU_FULL"/>
                <enum extends="VkSamplerYcbcrRange"                         name="VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR" alias="VK_SAMPLER_YCBCR_RANGE_ITU_NARROW"/>
                <type name="VkChromaLocationKHR"/>
                <enum extends="VkChromaLocation"                            name="VK_CHROMA_LOCATION_COSITED_EVEN_KHR" alias="VK_CHROMA_LOCATION_COSITED_EVEN"/>
                <enum extends="VkChromaLocation"                            name="VK_CHROMA_LOCATION_MIDPOINT_KHR" alias="VK_CHROMA_LOCATION_MIDPOINT"/>
                <feature name="samplerYcbcrConversion" struct="VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR"/>
            </require>
            <require depends="VK_EXT_debug_report">
                <enum extends="VkDebugReportObjectTypeEXT" offset="0"       name="VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT"/>
                <enum extends="VkDebugReportObjectTypeEXT"                  name="VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT" alias="VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_bind_memory2" number="158" type="device" author="KHR" contact="Tobias Hector @tobski" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_BIND_MEMORY_2_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_bind_memory2&quot;"               name="VK_KHR_BIND_MEMORY_2_EXTENSION_NAME"/>
                <command name="vkBindBufferMemory2KHR"/>
                <command name="vkBindImageMemory2KHR"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR" alias="VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR" alias="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO"/>
                <enum extends="VkImageCreateFlagBits"                       name="VK_IMAGE_CREATE_ALIAS_BIT_KHR" alias="VK_IMAGE_CREATE_ALIAS_BIT"/>
                <type name="VkBindBufferMemoryInfoKHR"/>
                <type name="VkBindImageMemoryInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_image_drm_format_modifier" number="159" type="device" depends="(((VK_KHR_bind_memory2+VK_KHR_get_physical_device_properties2+VK_KHR_sampler_ycbcr_conversion),VK_VERSION_1_1)+VK_KHR_image_format_list),VK_VERSION_1_2" author="EXT" contact="Lina Versace @linyaa-kiwi" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="2"                                             name="VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_image_drm_format_modifier&quot;"  name="VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME"/>
                <enum offset="0" dir="-" extends="VkResult"                 name="VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT"/>
                <enum offset="4" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT"/>
                <enum offset="5" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT"/>
                <enum offset="0" extends="VkImageTiling"                    name="VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT"/>
                <enum bitpos="7"  extends="VkImageAspectFlagBits"           name="VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT"/>
                <enum bitpos="8"  extends="VkImageAspectFlagBits"           name="VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT"/>
                <enum bitpos="9"  extends="VkImageAspectFlagBits"           name="VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT"/>
                <enum bitpos="10" extends="VkImageAspectFlagBits"           name="VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT"/>
                <type name="VkDrmFormatModifierPropertiesListEXT"/>
                <type name="VkDrmFormatModifierPropertiesEXT"/>
                <type name="VkPhysicalDeviceImageDrmFormatModifierInfoEXT"/>
                <type name="VkImageDrmFormatModifierListCreateInfoEXT"/>
                <type name="VkImageDrmFormatModifierExplicitCreateInfoEXT"/>
                <type name="VkImageDrmFormatModifierPropertiesEXT"/>
                <command name="vkGetImageDrmFormatModifierPropertiesEXT"/>
            </require>
            <require depends="VK_KHR_format_feature_flags2,VK_VERSION_1_3">
                <type name="VkDrmFormatModifierPropertiesList2EXT"/>
                <type name="VkDrmFormatModifierProperties2EXT"/>
                <enum offset="6" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_160" number="160" author="EXT" contact="Mark Young @marky-lunarg" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_160_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_160&quot;"              name="VK_EXT_EXTENSION_160_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_validation_cache" number="161" type="device" author="GOOGLE" contact="Cort Stratton @cdwfs" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_VALIDATION_CACHE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_validation_cache&quot;"           name="VK_EXT_VALIDATION_CACHE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT"/>
                <enum offset="0" extends="VkObjectType"                     name="VK_OBJECT_TYPE_VALIDATION_CACHE_EXT"/>
                <type name="VkValidationCacheEXT"/>
                <type name="VkValidationCacheCreateInfoEXT"/>
                <type name="VkShaderModuleValidationCacheCreateInfoEXT"/>
                <type name="VkValidationCacheHeaderVersionEXT"/>
                <type name="VkValidationCacheCreateFlagsEXT"/>
                <command name="vkCreateValidationCacheEXT"/>
                <command name="vkDestroyValidationCacheEXT"/>
                <command name="vkMergeValidationCachesEXT"/>
                <command name="vkGetValidationCacheDataEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_descriptor_indexing" number="162" type="device" depends="(VK_KHR_get_physical_device_properties2+VK_KHR_maintenance3),VK_VERSION_1_1" author="NV" contact="Jeff Bolz @jeffbolznv" supported="vulkan" ratified="vulkan" promotedto="VK_VERSION_1_2">
            <require>
                <enum value="2"                                             name="VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_descriptor_indexing&quot;"        name="VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT" alias="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT" alias="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT" alias="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT"/>
                <enum extends="VkDescriptorBindingFlagBits"                 name="VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT" alias="VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT"/>
                <enum extends="VkDescriptorBindingFlagBits"                 name="VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT" alias="VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT"/>
                <enum extends="VkDescriptorBindingFlagBits"                 name="VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT" alias="VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT"/>
                <enum extends="VkDescriptorBindingFlagBits"                 name="VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT" alias="VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT"/>
                <enum extends="VkDescriptorPoolCreateFlagBits"              name="VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT" alias="VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT"/>
                <enum extends="VkDescriptorSetLayoutCreateFlagBits"         name="VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT" alias="VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT"/>
                <enum extends="VkResult"                                    name="VK_ERROR_FRAGMENTATION_EXT" alias="VK_ERROR_FRAGMENTATION"/>
                <type name="VkDescriptorSetLayoutBindingFlagsCreateInfoEXT"/>
                <type name="VkPhysicalDeviceDescriptorIndexingFeaturesEXT"/>
                <type name="VkPhysicalDeviceDescriptorIndexingPropertiesEXT"/>
                <type name="VkDescriptorSetVariableDescriptorCountAllocateInfoEXT"/>
                <type name="VkDescriptorSetVariableDescriptorCountLayoutSupportEXT"/>
                <type name="VkDescriptorBindingFlagBitsEXT"/>
                <type name="VkDescriptorBindingFlagsEXT"/>
                <feature name="shaderSampledImageArrayDynamicIndexing" struct="VkPhysicalDeviceFeatures"/>
                <feature name="shaderStorageBufferArrayDynamicIndexing" struct="VkPhysicalDeviceFeatures"/>
                <feature name="shaderUniformTexelBufferArrayDynamicIndexing" struct="VkPhysicalDeviceDescriptorIndexingFeaturesEXT"/>
                <feature name="shaderStorageTexelBufferArrayDynamicIndexing" struct="VkPhysicalDeviceDescriptorIndexingFeaturesEXT"/>
                <feature name="shaderSampledImageArrayNonUniformIndexing" struct="VkPhysicalDeviceDescriptorIndexingFeaturesEXT"/>
                <feature name="shaderStorageBufferArrayNonUniformIndexing" struct="VkPhysicalDeviceDescriptorIndexingFeaturesEXT"/>
                <feature name="shaderUniformTexelBufferArrayNonUniformIndexing" struct="VkPhysicalDeviceDescriptorIndexingFeaturesEXT"/>
                <feature name="descriptorBindingSampledImageUpdateAfterBind" struct="VkPhysicalDeviceDescriptorIndexingFeaturesEXT"/>
                <feature name="descriptorBindingStorageImageUpdateAfterBind" struct="VkPhysicalDeviceDescriptorIndexingFeaturesEXT"/>
                <feature name="descriptorBindingStorageBufferUpdateAfterBind" struct="VkPhysicalDeviceDescriptorIndexingFeaturesEXT"/>
                <feature name="descriptorBindingUniformTexelBufferUpdateAfterBind" struct="VkPhysicalDeviceDescriptorIndexingFeaturesEXT"/>
                <feature name="descriptorBindingStorageTexelBufferUpdateAfterBind" struct="VkPhysicalDeviceDescriptorIndexingFeaturesEXT"/>
                <feature name="descriptorBindingUpdateUnusedWhilePending" struct="VkPhysicalDeviceDescriptorIndexingFeaturesEXT"/>
                <feature name="descriptorBindingPartiallyBound" struct="VkPhysicalDeviceDescriptorIndexingFeaturesEXT"/>
                <feature name="runtimeDescriptorArray" struct="VkPhysicalDeviceDescriptorIndexingFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_shader_viewport_index_layer" number="163" type="device" author="NV" contact="Daniel Koch @dgkoch" supported="vulkan" promotedto="VK_VERSION_1_2" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_shader_viewport_index_layer&quot;" name="VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_portability_subset" number="164" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="KHR" contact="Bill Hollings @billhollings" platform="provisional" supported="vulkan" provisional="true" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_PORTABILITY_SUBSET_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_portability_subset&quot;"         name="VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR" protect="VK_ENABLE_BETA_EXTENSIONS"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR" protect="VK_ENABLE_BETA_EXTENSIONS"/>
                <type name="VkPhysicalDevicePortabilitySubsetFeaturesKHR"/>
                <type name="VkPhysicalDevicePortabilitySubsetPropertiesKHR"/>
            </require>
            <remove>
                <feature name="robustBufferAccess" struct="VkPhysicalDeviceFeatures"/>
            </remove>
        </extension>
        <extension name="VK_NV_shading_rate_image" number="165" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="NV" contact="Pat Brown @nvpbrown" supported="vulkan">
            <require>
                <enum value="3"                                             name="VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_shading_rate_image&quot;"          name="VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV"/>
                <enum            extends="VkImageLayout"                    name="VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV" alias="VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR"/>
                <enum offset="4" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV"/>
                <enum            extends="VkAccessFlagBits"                 name="VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV" alias="VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR"/>
                <enum            extends="VkImageUsageFlagBits"             name="VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV" alias="VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"/>
                <enum            extends="VkPipelineStageFlagBits"          name="VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV" alias="VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"/>
                <enum offset="5" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV"/>
                <enum offset="6" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV"/>
                <type name="VkShadingRatePaletteEntryNV"/>
                <type name="VkShadingRatePaletteNV"/>
                <type name="VkPipelineViewportShadingRateImageStateCreateInfoNV"/>
                <type name="VkPhysicalDeviceShadingRateImageFeaturesNV"/>
                <type name="VkPhysicalDeviceShadingRateImagePropertiesNV"/>
                <type name="VkCoarseSampleLocationNV"/>
                <type name="VkCoarseSampleOrderCustomNV"/>
                <type name="VkPipelineViewportCoarseSampleOrderStateCreateInfoNV"/>
                <type name="VkCoarseSampleOrderTypeNV"/>
                <command name="vkCmdBindShadingRateImageNV"/>
                <command name="vkCmdSetViewportShadingRatePaletteNV"/>
                <command name="vkCmdSetCoarseSampleOrderNV"/>
                <feature name="shadingRateImage" struct="VkPhysicalDeviceShadingRateImageFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_ray_tracing" number="166" type="device" depends="(VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2),VK_VERSION_1_1" author="NV" contact="Eric Werness @ewerness-nv" supported="vulkan" deprecatedby="VK_KHR_ray_tracing_pipeline" nofeatures="true">
            <require>
                <enum value="3"                               name="VK_NV_RAY_TRACING_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_ray_tracing&quot;"   name="VK_NV_RAY_TRACING_EXTENSION_NAME"/>
                <enum                                         name="VK_SHADER_UNUSED_NV" alias="VK_SHADER_UNUSED_KHR"/>
                <enum offset="0"  extends="VkStructureType"   name="VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV"/>
                <enum offset="1"  extends="VkStructureType"   name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV"/>
                <enum offset="3"  extends="VkStructureType"   name="VK_STRUCTURE_TYPE_GEOMETRY_NV"/>
                <enum offset="4"  extends="VkStructureType"   name="VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV"/>
                <enum offset="5"  extends="VkStructureType"   name="VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV"/>
                <enum offset="6"  extends="VkStructureType"   name="VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV"/>
                <enum offset="7"  extends="VkStructureType"   name="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV"/>
                <enum offset="8"  extends="VkStructureType"   name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV"/>
                <enum offset="9"  extends="VkStructureType"   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV"/>
                <enum offset="11" extends="VkStructureType"   name="VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV"/>
                <enum offset="12" extends="VkStructureType"   name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV"/>
                <enum extends="VkShaderStageFlagBits"         name="VK_SHADER_STAGE_RAYGEN_BIT_NV" alias="VK_SHADER_STAGE_RAYGEN_BIT_KHR"/>
                <enum extends="VkShaderStageFlagBits"         name="VK_SHADER_STAGE_ANY_HIT_BIT_NV" alias="VK_SHADER_STAGE_ANY_HIT_BIT_KHR"/>
                <enum extends="VkShaderStageFlagBits"         name="VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV" alias="VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR"/>
                <enum extends="VkShaderStageFlagBits"         name="VK_SHADER_STAGE_MISS_BIT_NV" alias="VK_SHADER_STAGE_MISS_BIT_KHR"/>
                <enum extends="VkShaderStageFlagBits"         name="VK_SHADER_STAGE_INTERSECTION_BIT_NV" alias="VK_SHADER_STAGE_INTERSECTION_BIT_KHR"/>
                <enum extends="VkShaderStageFlagBits"         name="VK_SHADER_STAGE_CALLABLE_BIT_NV" alias="VK_SHADER_STAGE_CALLABLE_BIT_KHR"/>
                <enum extends="VkPipelineStageFlagBits"       name="VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV" alias="VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR"/>
                <enum extends="VkPipelineStageFlagBits"       name="VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV" alias="VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR"/>
                <enum extends="VkBufferUsageFlagBits"         name="VK_BUFFER_USAGE_RAY_TRACING_BIT_NV" alias="VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR"/>
                <enum extends="VkPipelineBindPoint"           name="VK_PIPELINE_BIND_POINT_RAY_TRACING_NV" alias="VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR"/>
                <enum offset="0" extends="VkDescriptorType"   name="VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV"/>
                <enum extends="VkAccessFlagBits"              name="VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV" alias="VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR"/>
                <enum extends="VkAccessFlagBits"              name="VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV" alias="VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR"/>
                <enum offset="0" extends="VkQueryType"        name="VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV"/>
                <enum bitpos="5" extends="VkPipelineCreateFlagBits"      name="VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV"/>
                <enum offset="0" extends="VkObjectType"       name="VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV"/>
                <enum extends="VkIndexType"                   name="VK_INDEX_TYPE_NONE_NV" alias="VK_INDEX_TYPE_NONE_KHR"/>
                <type name="VkRayTracingShaderGroupCreateInfoNV"/>
                <type name="VkRayTracingShaderGroupTypeNV"/>
                <enum extends="VkRayTracingShaderGroupTypeKHR" name="VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV" alias="VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR"/>
                <enum extends="VkRayTracingShaderGroupTypeKHR" name="VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV" alias="VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR"/>
                <enum extends="VkRayTracingShaderGroupTypeKHR" name="VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV" alias="VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR"/>
                <type name="VkRayTracingPipelineCreateInfoNV"/>
                <type name="VkGeometryTypeNV"/>
                <enum extends="VkGeometryTypeKHR" name="VK_GEOMETRY_TYPE_TRIANGLES_NV" alias="VK_GEOMETRY_TYPE_TRIANGLES_KHR"/>
                <enum extends="VkGeometryTypeKHR" name="VK_GEOMETRY_TYPE_AABBS_NV" alias="VK_GEOMETRY_TYPE_AABBS_KHR"/>
                <type name="VkAccelerationStructureTypeNV"/>
                <enum extends="VkAccelerationStructureTypeKHR" name="VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV" alias="VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR"/>
                <enum extends="VkAccelerationStructureTypeKHR" name="VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV" alias="VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR"/>
                <type name="VkGeometryTrianglesNV"/>
                <type name="VkGeometryAABBNV"/>
                <type name="VkGeometryDataNV"/>
                <type name="VkGeometryNV"/>
                <type name="VkGeometryFlagsNV"/>
                <type name="VkGeometryFlagBitsNV"/>
                <enum extends="VkGeometryFlagBitsKHR" name="VK_GEOMETRY_OPAQUE_BIT_NV" alias="VK_GEOMETRY_OPAQUE_BIT_KHR"/>
                <enum extends="VkGeometryFlagBitsKHR" name="VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV" alias="VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR"/>
                <type name="VkGeometryInstanceFlagsNV"/>
                <type name="VkGeometryInstanceFlagBitsNV"/>
                <enum extends="VkGeometryInstanceFlagBitsKHR" name="VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV" alias="VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR"/>
                <enum extends="VkGeometryInstanceFlagBitsKHR" name="VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV" alias="VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR"/>
                <enum extends="VkGeometryInstanceFlagBitsKHR" name="VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV" alias="VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR"/>
                <enum extends="VkGeometryInstanceFlagBitsKHR" name="VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV" alias="VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR"/>
                <type name="VkAccelerationStructureInfoNV"/>
                <type name="VkAccelerationStructureCreateInfoNV"/>
                <type name="VkAccelerationStructureNV"/>
                <type name="VkBuildAccelerationStructureFlagBitsNV"/>
                <enum extends="VkBuildAccelerationStructureFlagBitsKHR" name="VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV" alias="VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR"/>
                <enum extends="VkBuildAccelerationStructureFlagBitsKHR" name="VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV" alias="VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR"/>
                <enum extends="VkBuildAccelerationStructureFlagBitsKHR" name="VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV" alias="VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR"/>
                <enum extends="VkBuildAccelerationStructureFlagBitsKHR" name="VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV" alias="VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR"/>
                <enum extends="VkBuildAccelerationStructureFlagBitsKHR" name="VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV" alias="VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR"/>
                <type name="VkBuildAccelerationStructureFlagsNV"/>
                <type name="VkCopyAccelerationStructureModeNV"/>
                <enum extends="VkCopyAccelerationStructureModeKHR" name="VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV" alias="VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR"/>
                <enum extends="VkCopyAccelerationStructureModeKHR" name="VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV" alias="VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR"/>
                <type name="VkBindAccelerationStructureMemoryInfoNV"/>
                <type name="VkWriteDescriptorSetAccelerationStructureNV"/>
                <type name="VkAccelerationStructureMemoryRequirementsInfoNV"/>
                <type name="VkPhysicalDeviceRayTracingPropertiesNV"/>
                <type name="VkAccelerationStructureMemoryRequirementsTypeNV"/>
                <type name="VkTransformMatrixNV"/>
                <type name="VkAabbPositionsNV"/>
                <type name="VkAccelerationStructureInstanceNV"/>
                <command name="vkCreateAccelerationStructureNV"/>
                <command name="vkDestroyAccelerationStructureNV"/>
                <command name="vkGetAccelerationStructureMemoryRequirementsNV"/>
                <command name="vkBindAccelerationStructureMemoryNV"/>
                <command name="vkCmdBuildAccelerationStructureNV"/>
                <command name="vkCmdCopyAccelerationStructureNV"/>
                <command name="vkCmdTraceRaysNV"/>
                <command name="vkCreateRayTracingPipelinesNV"/>
                <command name="vkGetRayTracingShaderGroupHandlesNV"/>
                <command name="vkGetAccelerationStructureHandleNV"/>
                <command name="vkCmdWriteAccelerationStructuresPropertiesNV"/>
                <command name="vkCompileDeferredNV"/>
            </require>
            <require depends="VK_KHR_get_memory_requirements2,VK_VERSION_1_1">
                <type name="VkMemoryRequirements2KHR"/>
            </require>
            <require depends="VK_EXT_debug_report">
                <enum offset="0" extends="VkDebugReportObjectTypeEXT" name="VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT"/>
            </require>
        </extension>
        <extension name="VK_NV_representative_fragment_test" number="167" type="device" author="NV" contact="Kedarnath Thangudu @kthangudu" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan">
            <require>
                <enum value="2"                                             name="VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_representative_fragment_test&quot;" name="VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType"  name="VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV"/>
                <type name="VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV"/>
                <type name="VkPipelineRepresentativeFragmentTestStateCreateInfoNV"/>
                <feature name="representativeFragmentTest" struct="VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_168" number="168" author="NV" contact="Daniel Koch @dgkoch" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_NV_EXTENSION_168_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_168&quot;"               name="VK_NV_EXTENSION_168_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_maintenance3" number="169" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="KHR" contact="Jeff Bolz @jeffbolznv" supported="vulkan" promotedto="VK_VERSION_1_1" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_MAINTENANCE_3_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_maintenance3&quot;"               name="VK_KHR_MAINTENANCE_3_EXTENSION_NAME"/>
                <enum alias="VK_KHR_MAINTENANCE_3_SPEC_VERSION"             name="VK_KHR_MAINTENANCE3_SPEC_VERSION" deprecated="aliased"/>
                <enum alias="VK_KHR_MAINTENANCE_3_EXTENSION_NAME"           name="VK_KHR_MAINTENANCE3_EXTENSION_NAME" deprecated="aliased"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR" alias="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT"/>
                <type name="VkPhysicalDeviceMaintenance3PropertiesKHR"/>
                <type name="VkDescriptorSetLayoutSupportKHR"/>
                <command name="vkGetDescriptorSetLayoutSupportKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_draw_indirect_count" number="170" type="device" author="KHR" contact="Piers Daniell @pdaniell-nv" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_draw_indirect_count&quot;"        name="VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME"/>
                <command name="vkCmdDrawIndirectCountKHR"/>
                <command name="vkCmdDrawIndexedIndirectCountKHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_filter_cubic" number="171" type="device" author="QCOM" contact="Matthew Netsch @mnetsch" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="3"                                             name="VK_EXT_FILTER_CUBIC_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_filter_cubic&quot;"               name="VK_EXT_FILTER_CUBIC_EXTENSION_NAME"/>
                <enum offset="0" extends="VkFilter" extnumber="16"          name="VK_FILTER_CUBIC_EXT"/>
                <enum bitpos="13" extends="VkFormatFeatureFlagBits"         name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT"/>
                <type name="VkPhysicalDeviceImageViewImageFormatInfoEXT"/>
                <type name="VkFilterCubicImageViewImageFormatPropertiesEXT"/>
            </require>
        </extension>
        <extension name="VK_QCOM_render_pass_shader_resolve" number="172" type="device" author="QCOM" contact="Matthew Netsch @mnetsch" supported="vulkan" nofeatures="true">
            <require>
                <enum value="4"                                                 name="VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_render_pass_shader_resolve&quot;"    name="VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME"/>
                <enum bitpos="2" extends="VkSubpassDescriptionFlagBits"         name="VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM"/>
                <enum bitpos="3" extends="VkSubpassDescriptionFlagBits"         name="VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM"/>
            </require>
        </extension>
        <extension name="VK_QCOM_extension_173" number="173" author="QCOM" contact="Matthew Netsch @mnetsch" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_QCOM_EXTENSION_173_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_extension_173&quot;"             name="VK_QCOM_EXTENSION_173_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_QCOM_extension_174" number="174" author="QCOM" contact="Matthew Netsch @mnetsch" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_QCOM_EXTENSION_174_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_extension_174&quot;"             name="VK_QCOM_EXTENSION_174_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_global_priority" number="175" type="device" author="EXT" contact="Andres Rodriguez @lostgoat" supported="vulkan" promotedto="VK_KHR_global_priority" nofeatures="true">
            <require>
                <enum value="2"                                             name="VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_global_priority&quot;"            name="VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT" alias="VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO"/>
                <enum extends="VkResult"                                    name="VK_ERROR_NOT_PERMITTED_EXT" alias="VK_ERROR_NOT_PERMITTED"/>
                <enum extends="VkQueueGlobalPriority"                       name="VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT" alias="VK_QUEUE_GLOBAL_PRIORITY_LOW"/>
                <enum extends="VkQueueGlobalPriority"                       name="VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT" alias="VK_QUEUE_GLOBAL_PRIORITY_MEDIUM"/>
                <enum extends="VkQueueGlobalPriority"                       name="VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT" alias="VK_QUEUE_GLOBAL_PRIORITY_HIGH"/>
                <enum extends="VkQueueGlobalPriority"                       name="VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT" alias="VK_QUEUE_GLOBAL_PRIORITY_REALTIME"/>
                <type name="VkDeviceQueueGlobalPriorityCreateInfoEXT"/>
                <type name="VkQueueGlobalPriorityEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_shader_subgroup_extended_types" number="176" type="device" depends="VK_VERSION_1_1" author="KHR" contact="Neil Henning @sheredom" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan">
            <require>
                <enum value="1"                                                 name="VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shader_subgroup_extended_types&quot;" name="VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES"/>
                <type name="VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR"/>
                <feature name="shaderSubgroupExtendedTypes" struct="VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_177" number="177" author="EXT" contact="Neil Henning @sheredom" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_177_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_177&quot;"              name="VK_EXT_EXTENSION_177_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_8bit_storage" number="178" type="device" depends="(VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class),VK_VERSION_1_1" author="KHR" contact="Alexander Galazin @alegal-arm" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_8BIT_STORAGE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_8bit_storage&quot;"               name="VK_KHR_8BIT_STORAGE_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES"/>
                <type name="VkPhysicalDevice8BitStorageFeaturesKHR"/>
                <feature name="storageBuffer8BitAccess" struct="VkPhysicalDevice8BitStorageFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_external_memory_host" number="179" type="device" author="EXT" depends="VK_KHR_external_memory,VK_VERSION_1_1" contact="Daniel Rakos @drakos-amd" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_external_memory_host&quot;"       name="VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT"/>
                <enum bitpos="7" extends="VkExternalMemoryHandleTypeFlagBits" name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT"/>
                <enum bitpos="8" extends="VkExternalMemoryHandleTypeFlagBits" name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT"/>
                <type name="VkImportMemoryHostPointerInfoEXT"/>
                <type name="VkMemoryHostPointerPropertiesEXT"/>
                <type name="VkPhysicalDeviceExternalMemoryHostPropertiesEXT"/>
                <command name="vkGetMemoryHostPointerPropertiesEXT"/>
            </require>
        </extension>
        <extension name="VK_AMD_buffer_marker" number="180" type="device" author="AMD" contact="Daniel Rakos @drakos-amd" specialuse="devtools" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                          name="VK_AMD_BUFFER_MARKER_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_buffer_marker&quot;"           name="VK_AMD_BUFFER_MARKER_EXTENSION_NAME"/>
                <command name="vkCmdWriteBufferMarkerAMD"/>
            </require>
            <require depends="VK_VERSION_1_3,VK_KHR_synchronization2">
                <command name="vkCmdWriteBufferMarker2AMD"/>
            </require>
        </extension>
        <extension name="VK_KHR_shader_atomic_int64" number="181" type="device" author="KHR" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Aaron Hagan @ahagan" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shader_atomic_int64&quot;"        name="VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES"/>
                <type name="VkPhysicalDeviceShaderAtomicInt64FeaturesKHR"/>
                <feature name="shaderBufferInt64Atomics" struct="VkPhysicalDeviceShaderAtomicInt64FeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_shader_clock" number="182" type="device" author="KHR" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Aaron Hagan @ahagan" supported="vulkan,vulkansc" ratified="vulkan,vulkansc">
            <require>
                <enum value="1"                                          name="VK_KHR_SHADER_CLOCK_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shader_clock&quot;"            name="VK_KHR_SHADER_CLOCK_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"               name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR"/>
                <type name="VkPhysicalDeviceShaderClockFeaturesKHR"/>
                <feature name="shaderSubgroupClock" struct="VkPhysicalDeviceShaderClockFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_183" number="183" author="AMD" contact="Daniel Rakos @drakos-amd" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_AMD_EXTENSION_183_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_183&quot;"              name="VK_AMD_EXTENSION_183_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_pipeline_compiler_control" number="184" type="device" author="AMD" contact="Matthaeus G. Chajdas @anteru" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_pipeline_compiler_control&quot;"  name="VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD"/>
                <type name="VkPipelineCompilerControlFlagBitsAMD"/>
                <type name="VkPipelineCompilerControlFlagsAMD"/>
                <type name="VkPipelineCompilerControlCreateInfoAMD"/>
            </require>
        </extension>
        <extension name="VK_EXT_calibrated_timestamps" number="185" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Daniel Rakos @drakos-amd" promotedto="VK_KHR_calibrated_timestamps" supported="vulkan" nofeatures="true">
            <require>
                <enum value="2"                                             name="VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_calibrated_timestamps&quot;"      name="VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT" alias="VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR"/>
                <enum extends="VkTimeDomainKHR"                             name="VK_TIME_DOMAIN_DEVICE_EXT"                       alias="VK_TIME_DOMAIN_DEVICE_KHR"/>
                <enum extends="VkTimeDomainKHR"                             name="VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT"              alias="VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR"/>
                <enum extends="VkTimeDomainKHR"                             name="VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT"          alias="VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR"/>
                <enum extends="VkTimeDomainKHR"                             name="VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT"    alias="VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR"/>
                <type name="VkTimeDomainEXT"/>
                <type name="VkCalibratedTimestampInfoEXT"/>
                <command name="vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"/>
                <command name="vkGetCalibratedTimestampsEXT"/>
            </require>
        </extension>
        <extension name="VK_AMD_shader_core_properties" number="186" type="device" author="AMD" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Martin Dinkov @mdinkov" supported="vulkan" nofeatures="true">
            <require>
                <enum value="2"                                          name="VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_shader_core_properties&quot;"  name="VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"               name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD"/>
                <type name="VkPhysicalDeviceShaderCorePropertiesAMD"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_187" number="187" author="AMD" contact="Daniel Rakos @drakos-amd" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_AMD_EXTENSION_187_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_187&quot;"              name="VK_AMD_EXTENSION_187_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_video_decode_h265" number="188" type="device" depends="VK_KHR_video_decode_queue" author="KHR" contact="peter.fang@amd.com" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="8"                                             name="VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_video_decode_h265&quot;"          name="VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR"/>
                <enum offset="4" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR"/>
                <enum offset="5" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR"/>
                <enum bitpos="1" extends="VkVideoCodecOperationFlagBitsKHR" name="VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR"/>

                <type name="VkVideoDecodeH265ProfileInfoKHR"/>
                <type name="VkVideoDecodeH265CapabilitiesKHR"/>

                <type name="VkVideoDecodeH265SessionParametersCreateInfoKHR"/>
                <type name="VkVideoDecodeH265SessionParametersAddInfoKHR"/>
                <type name="VkVideoDecodeH265PictureInfoKHR"/>
                <type name="VkVideoDecodeH265DpbSlotInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_global_priority" number="189" type="device" author="KHR" contact="Tobias Hector @tobski" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan,vulkansc" promotedto="VK_VERSION_1_4" ratified="vulkan,vulkansc">
            <require>
                <enum value="1"                                             name="VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_global_priority&quot;"            name="VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES"/>
                <enum extends="VkResult"                                    name="VK_ERROR_NOT_PERMITTED_KHR" alias="VK_ERROR_NOT_PERMITTED"/>
                <enum                                                       name="VK_MAX_GLOBAL_PRIORITY_SIZE_KHR" alias="VK_MAX_GLOBAL_PRIORITY_SIZE"/>
                <enum extends="VkQueueGlobalPriority"                       name="VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR" alias="VK_QUEUE_GLOBAL_PRIORITY_LOW"/>
                <enum extends="VkQueueGlobalPriority"                       name="VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR" alias="VK_QUEUE_GLOBAL_PRIORITY_MEDIUM"/>
                <enum extends="VkQueueGlobalPriority"                       name="VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR" alias="VK_QUEUE_GLOBAL_PRIORITY_HIGH"/>
                <enum extends="VkQueueGlobalPriority"                       name="VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR" alias="VK_QUEUE_GLOBAL_PRIORITY_REALTIME"/>
                <type name="VkDeviceQueueGlobalPriorityCreateInfoKHR"/>
                <type name="VkQueueGlobalPriorityKHR"/>
                <type name="VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR"/>
                <type name="VkQueueFamilyGlobalPriorityPropertiesKHR"/>
                <feature name="globalPriorityQuery" struct="VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_AMD_memory_overallocation_behavior" number="190" type="device" author="AMD" contact="Martin Dinkov @mdinkov" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_memory_overallocation_behavior&quot;"    name="VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD"/>
                <type name="VkMemoryOverallocationBehaviorAMD"/>
                <type name="VkDeviceMemoryOverallocationCreateInfoAMD"/>
            </require>
        </extension>
        <extension name="VK_EXT_vertex_attribute_divisor" number="191" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="NV" contact="Vikram Kushwaha @vkushwaha" supported="vulkan" promotedto="VK_KHR_vertex_attribute_divisor">
            <require>
                <enum value="3"                                           name="VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_vertex_attribute_divisor&quot;" name="VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT"/>
                <enum            extends="VkStructureType"                name="VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT" alias="VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO"/>
                <enum            extends="VkStructureType"                name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES"/>
                <type name="VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT"/>
                <type name="VkVertexInputBindingDivisorDescriptionEXT"/>
                <type name="VkPipelineVertexInputDivisorStateCreateInfoEXT"/>
                <type name="VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT"/>
                <feature name="vertexAttributeInstanceRateDivisor" struct="VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_GGP_frame_token" number="192" type="device" depends="VK_KHR_swapchain+VK_GGP_stream_descriptor_surface" platform="ggp" author="GGP" contact="Jean-Francois Roy @jfroy" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_GGP_FRAME_TOKEN_SPEC_VERSION"/>
                <enum value="&quot;VK_GGP_frame_token&quot;"                    name="VK_GGP_FRAME_TOKEN_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP"/>
                <type name="VkPresentFrameTokenGGP"/>
            </require>
        </extension>
        <extension name="VK_EXT_pipeline_creation_feedback" number="193" type="device" author="GOOGLE" contact="Jean-Francois Roy @jfroy" specialuse="devtools" supported="vulkan" promotedto="VK_VERSION_1_3" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_pipeline_creation_feedback&quot;" name="VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT" alias="VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO"/>
                <enum extends="VkPipelineCreationFeedbackFlagBits"          name="VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT" alias="VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT"/>
                <enum extends="VkPipelineCreationFeedbackFlagBits"          name="VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT" alias="VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT"/>
                <enum extends="VkPipelineCreationFeedbackFlagBits"          name="VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT" alias="VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT"/>
                <type name="VkPipelineCreationFeedbackFlagBitsEXT"/>
                <type name="VkPipelineCreationFeedbackFlagsEXT"/>
                <type name="VkPipelineCreationFeedbackCreateInfoEXT"/>
                <type name="VkPipelineCreationFeedbackEXT"/>
            </require>
        </extension>
        <extension name="VK_GOOGLE_extension_194" number="194" author="GOOGLE" contact="Jean-Francois Roy @jfroy" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_GOOGLE_EXTENSION_194_SPEC_VERSION"/>
                <enum value="&quot;VK_GOOGLE_extension_194&quot;"       name="VK_GOOGLE_EXTENSION_194_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_GOOGLE_extension_195" number="195" author="GOOGLE" contact="Jean-Francois Roy @jfroy" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_GOOGLE_EXTENSION_195_SPEC_VERSION"/>
                <enum value="&quot;VK_GOOGLE_extension_195&quot;"       name="VK_GOOGLE_EXTENSION_195_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_GOOGLE_extension_196" number="196" author="GOOGLE" contact="Jean-Francois Roy @jfroy" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_GOOGLE_EXTENSION_196_SPEC_VERSION"/>
                <enum value="&quot;VK_GOOGLE_extension_196&quot;"       name="VK_GOOGLE_EXTENSION_196_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_driver_properties" number="197" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="KHR" contact="Daniel Rakos @drakos-amd" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_driver_properties&quot;"          name="VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES"/>
                <enum                                                       name="VK_MAX_DRIVER_NAME_SIZE_KHR" alias="VK_MAX_DRIVER_NAME_SIZE"/>
                <enum                                                       name="VK_MAX_DRIVER_INFO_SIZE_KHR" alias="VK_MAX_DRIVER_INFO_SIZE"/>
                <type name="VkDriverIdKHR"/>
                <enum extends="VkDriverId"                                  name="VK_DRIVER_ID_AMD_PROPRIETARY_KHR" alias="VK_DRIVER_ID_AMD_PROPRIETARY"/>
                <enum extends="VkDriverId"                                  name="VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR" alias="VK_DRIVER_ID_AMD_OPEN_SOURCE"/>
                <enum extends="VkDriverId"                                  name="VK_DRIVER_ID_MESA_RADV_KHR" alias="VK_DRIVER_ID_MESA_RADV"/>
                <enum extends="VkDriverId"                                  name="VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR" alias="VK_DRIVER_ID_NVIDIA_PROPRIETARY"/>
                <enum extends="VkDriverId"                                  name="VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR" alias="VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS"/>
                <enum extends="VkDriverId"                                  name="VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR" alias="VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA"/>
                <enum extends="VkDriverId"                                  name="VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR" alias="VK_DRIVER_ID_IMAGINATION_PROPRIETARY"/>
                <enum extends="VkDriverId"                                  name="VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR" alias="VK_DRIVER_ID_QUALCOMM_PROPRIETARY"/>
                <enum extends="VkDriverId"                                  name="VK_DRIVER_ID_ARM_PROPRIETARY_KHR" alias="VK_DRIVER_ID_ARM_PROPRIETARY"/>
                <enum extends="VkDriverId"                                  name="VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR" alias="VK_DRIVER_ID_GOOGLE_SWIFTSHADER"/>
                <enum extends="VkDriverId"                                  name="VK_DRIVER_ID_GGP_PROPRIETARY_KHR" alias="VK_DRIVER_ID_GGP_PROPRIETARY"/>
                <enum extends="VkDriverId"                                  name="VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR" alias="VK_DRIVER_ID_BROADCOM_PROPRIETARY"/>
                <type name="VkConformanceVersionKHR"/>
                <type name="VkPhysicalDeviceDriverPropertiesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_shader_float_controls" number="198" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="KHR" contact="Alexander Galazin @alegal-arm" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="4"                                             name="VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shader_float_controls&quot;"      name="VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES"/>
                <type name="VkPhysicalDeviceFloatControlsPropertiesKHR"/>
                <type name="VkShaderFloatControlsIndependenceKHR"/>
                <enum extends="VkShaderFloatControlsIndependence"           name="VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR" alias="VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY"/>
                <enum extends="VkShaderFloatControlsIndependence"           name="VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR"         alias="VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL"/>
                <enum extends="VkShaderFloatControlsIndependence"           name="VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR"        alias="VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE"/>
            </require>
        </extension>
        <extension name="VK_NV_shader_subgroup_partitioned" number="199" type="device" depends="VK_VERSION_1_1" author="NV" contact="Jeff Bolz @jeffbolznv" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_shader_subgroup_partitioned&quot;" name="VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME"/>
                <enum bitpos="8" extends="VkSubgroupFeatureFlagBits"        name="VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV"/>
            </require>
        </extension>
        <extension name="VK_KHR_depth_stencil_resolve" number="200" type="device" depends="VK_KHR_create_renderpass2,VK_VERSION_1_2" author="KHR" contact="Jan-Harald Fredriksen @janharald" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_depth_stencil_resolve&quot;"      name="VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR" alias="VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE"/>
                <type name="VkSubpassDescriptionDepthStencilResolveKHR"/>
                <type name="VkPhysicalDeviceDepthStencilResolvePropertiesKHR"/>
                <type name="VkResolveModeFlagBitsKHR"/>
                <type name="VkResolveModeFlagsKHR"/>
                <enum extends="VkResolveModeFlagBits"                       name="VK_RESOLVE_MODE_NONE_KHR" alias="VK_RESOLVE_MODE_NONE"/>
                <enum extends="VkResolveModeFlagBits"                       name="VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR" alias="VK_RESOLVE_MODE_SAMPLE_ZERO_BIT"/>
                <enum extends="VkResolveModeFlagBits"                       name="VK_RESOLVE_MODE_AVERAGE_BIT_KHR" alias="VK_RESOLVE_MODE_AVERAGE_BIT"/>
                <enum extends="VkResolveModeFlagBits"                       name="VK_RESOLVE_MODE_MIN_BIT_KHR" alias="VK_RESOLVE_MODE_MIN_BIT"/>
                <enum extends="VkResolveModeFlagBits"                       name="VK_RESOLVE_MODE_MAX_BIT_KHR" alias="VK_RESOLVE_MODE_MAX_BIT"/>
            </require>
        </extension>
        <extension name="VK_KHR_swapchain_mutable_format" number="201" type="device" author="KHR" depends="VK_KHR_swapchain+(VK_KHR_maintenance2,VK_VERSION_1_1)+(VK_KHR_image_format_list,VK_VERSION_1_2)" contact="Daniel Rakos @drakos-amd" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                         name="VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_swapchain_mutable_format&quot;" name="VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME"/>
                <enum bitpos="2" extends="VkSwapchainCreateFlagBitsKHR" name="VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR"/>
            </require>
        </extension>
        <extension name="VK_NV_compute_shader_derivatives" number="202" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="NV" contact="Pat Brown @nvpbrown" supported="vulkan" promotedto="VK_KHR_compute_shader_derivatives">
            <require>
                <enum value="1"                                         name="VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_compute_shader_derivatives&quot;" name="VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME"/>
                <enum extends="VkStructureType" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR"/>
                <type name="VkPhysicalDeviceComputeShaderDerivativesFeaturesNV"/>
                <feature name="computeDerivativeGroupQuads,computeDerivativeGroupLinear" struct="VkPhysicalDeviceComputeShaderDerivativesFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_mesh_shader" number="203" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="NV" contact="Christoph Kubisch @pixeljetstream" supported="vulkan">
            <require>
                <enum value="1"                                         name="VK_NV_MESH_SHADER_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_mesh_shader&quot;"             name="VK_NV_MESH_SHADER_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV"/>
                <enum extends="VkShaderStageFlagBits"                   name="VK_SHADER_STAGE_TASK_BIT_NV" alias="VK_SHADER_STAGE_TASK_BIT_EXT"/>
                <enum extends="VkShaderStageFlagBits"                   name="VK_SHADER_STAGE_MESH_BIT_NV" alias="VK_SHADER_STAGE_MESH_BIT_EXT"/>
                <enum extends="VkPipelineStageFlagBits"                 name="VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV" alias="VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT"/>
                <enum extends="VkPipelineStageFlagBits"                 name="VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV" alias="VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT"/>
                <command name="vkCmdDrawMeshTasksNV"/>
                <command name="vkCmdDrawMeshTasksIndirectNV"/>
                <type name="VkPhysicalDeviceMeshShaderFeaturesNV"/>
                <type name="VkPhysicalDeviceMeshShaderPropertiesNV"/>
                <type name="VkDrawMeshTasksIndirectCommandNV"/>
                <feature name="meshShader" struct="VkPhysicalDeviceMeshShaderFeaturesNV"/>
            </require>
            <require depends="VK_KHR_draw_indirect_count,VK_VERSION_1_2">
                <command name="vkCmdDrawMeshTasksIndirectCountNV"/>
            </require>
            <require depends="VK_EXT_device_generated_commands">
                <enum offset="2" extends="VkIndirectCommandsTokenTypeEXT" name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV_EXT"/>
                <enum offset="3" extends="VkIndirectCommandsTokenTypeEXT" name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_NV_EXT"/>
            </require>
        </extension>
        <extension name="VK_NV_fragment_shader_barycentric" number="204" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="NV" contact="Pat Brown @nvpbrown" supported="vulkan" promotedto="VK_KHR_fragment_shader_barycentric" nofeatures="true">
            <require>
                <enum value="1"                                         name="VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_fragment_shader_barycentric&quot;" name="VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME"/>
                <enum extends="VkStructureType" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR"/>
                <type name="VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_shader_image_footprint" number="205" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="NV" contact="Pat Brown @nvpbrown" supported="vulkan">
            <require>
                <enum value="2"                                         name="VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_shader_image_footprint&quot;"  name="VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV"/>
                <type name="VkPhysicalDeviceShaderImageFootprintFeaturesNV"/>
                <feature name="imageFootprint" struct="VkPhysicalDeviceShaderImageFootprintFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_scissor_exclusive" number="206" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="NV" contact="Pat Brown @nvpbrown" supported="vulkan">
            <require>
                <enum value="2"                                         name="VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_scissor_exclusive&quot;"       name="VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV"/>
                <enum offset="2" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV"/>
                <enum offset="0" extends="VkDynamicState" name="VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV"/>
                <enum offset="1" extends="VkDynamicState" name="VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV"/>
                <type name="VkPipelineViewportExclusiveScissorStateCreateInfoNV"/>
                <type name="VkPhysicalDeviceExclusiveScissorFeaturesNV"/>
                <command name="vkCmdSetExclusiveScissorEnableNV"/>
                <command name="vkCmdSetExclusiveScissorNV"/>
                <feature name="exclusiveScissor" struct="VkPhysicalDeviceExclusiveScissorFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_device_diagnostic_checkpoints" type="device" number="207" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="NVIDIA" contact="Nuno Subtil @nsubtil" supported="vulkan" nofeatures="true">
            <require>
                <enum value="2"                                         name="VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_device_diagnostic_checkpoints&quot;" name="VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV"/>
                <type name="VkQueueFamilyCheckpointPropertiesNV"/>
                <type name="VkCheckpointDataNV"/>
                <command name="vkCmdSetCheckpointNV"/>
                <command name="vkGetQueueCheckpointDataNV"/>
            </require>
            <require depends="VK_VERSION_1_3,VK_KHR_synchronization2">
                <type name="VkQueueFamilyCheckpointProperties2NV"/>
                <type name="VkCheckpointData2NV"/>
                <command name="vkGetQueueCheckpointData2NV"/>
                <enum offset="8" extends="VkStructureType" extnumber="315"  name="VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV"/>
                <enum offset="9" extends="VkStructureType" extnumber="315"  name="VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV"/>
            </require>
        </extension>
        <extension name="VK_KHR_timeline_semaphore" number="208" type="device" author="KHR" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Faith Ekstrand @gfxstrand" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan">
            <require>
                <enum value="2"                                         name="VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_timeline_semaphore&quot;"     name="VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR" alias="VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR" alias="VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR" alias="VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO"/>
                <enum extends="VkSemaphoreType"                             name="VK_SEMAPHORE_TYPE_BINARY_KHR" alias="VK_SEMAPHORE_TYPE_BINARY"/>
                <enum extends="VkSemaphoreType"                             name="VK_SEMAPHORE_TYPE_TIMELINE_KHR" alias="VK_SEMAPHORE_TYPE_TIMELINE"/>
                <enum extends="VkSemaphoreWaitFlagBits"                     name="VK_SEMAPHORE_WAIT_ANY_BIT_KHR" alias="VK_SEMAPHORE_WAIT_ANY_BIT"/>
                <type name="VkSemaphoreTypeKHR"/>
                <type name="VkPhysicalDeviceTimelineSemaphoreFeaturesKHR"/>
                <type name="VkPhysicalDeviceTimelineSemaphorePropertiesKHR"/>
                <type name="VkSemaphoreTypeCreateInfoKHR"/>
                <type name="VkTimelineSemaphoreSubmitInfoKHR"/>
                <type name="VkSemaphoreWaitFlagBitsKHR"/>
                <type name="VkSemaphoreWaitFlagsKHR"/>
                <type name="VkSemaphoreWaitInfoKHR"/>
                <type name="VkSemaphoreSignalInfoKHR"/>
                <command name="vkGetSemaphoreCounterValueKHR"/>
                <command name="vkWaitSemaphoresKHR"/>
                <command name="vkSignalSemaphoreKHR"/>
                <feature name="timelineSemaphore" struct="VkPhysicalDeviceTimelineSemaphoreFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_209" number="209" type="device" author="KHR" contact="Ian Elliott @ianelliott" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_KHR_EXTENSION_209_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_209&quot;"          name="VK_KHR_EXTENSION_209_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_INTEL_shader_integer_functions2" number="210" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="INTEL" contact="Ian Romanick @ianromanick" supported="vulkan">
            <require>
                <enum value="1"                                         name="VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION"/>
                <enum value="&quot;VK_INTEL_shader_integer_functions2&quot;" name="VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL"/>
                <type name="VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL"/>
                <feature name="shaderIntegerFunctions2" struct="VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL"/>
            </require>
        </extension>
        <extension name="VK_INTEL_performance_query" number="211" type="device" author="INTEL" contact="Lionel Landwerlin @llandwerlin" specialuse="devtools" supported="vulkan" nofeatures="true">
            <require>
                <enum value="2"                                         name="VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION"/>
                <enum value="&quot;VK_INTEL_performance_query&quot;"    name="VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL"/>
                <enum extends="VkStructureType" name="VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL" alias="VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL" deprecated="aliased"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL"/>
                <enum offset="2" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL"/>
                <enum offset="3" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL"/>
                <enum offset="4" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL"/>
                <enum offset="5" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL"/>
                <enum offset="0" extends="VkQueryType"                  name="VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL"/>
                <enum offset="0" extends="VkObjectType"                 name="VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL"/>
                <type name="VkPerformanceConfigurationTypeINTEL"/>
                <type name="VkQueryPoolSamplingModeINTEL"/>
                <type name="VkPerformanceOverrideTypeINTEL"/>
                <type name="VkPerformanceParameterTypeINTEL"/>
                <type name="VkPerformanceValueTypeINTEL"/>
                <type name="VkPerformanceValueDataINTEL"/>
                <type name="VkPerformanceValueINTEL"/>
                <type name="VkInitializePerformanceApiInfoINTEL"/>
                <type name="VkQueryPoolCreateInfoINTEL"/>
                <type name="VkQueryPoolPerformanceQueryCreateInfoINTEL"/>
                <type name="VkPerformanceMarkerInfoINTEL"/>
                <type name="VkPerformanceStreamMarkerInfoINTEL"/>
                <type name="VkPerformanceOverrideInfoINTEL"/>
                <type name="VkPerformanceConfigurationAcquireInfoINTEL"/>
                <type name="VkPerformanceConfigurationINTEL"/>
                <command name="vkInitializePerformanceApiINTEL"/>
                <command name="vkUninitializePerformanceApiINTEL"/>
                <command name="vkCmdSetPerformanceMarkerINTEL"/>
                <command name="vkCmdSetPerformanceStreamMarkerINTEL"/>
                <command name="vkCmdSetPerformanceOverrideINTEL"/>
                <command name="vkAcquirePerformanceConfigurationINTEL"/>
                <command name="vkReleasePerformanceConfigurationINTEL"/>
                <command name="vkQueueSetPerformanceConfigurationINTEL"/>
                <command name="vkGetPerformanceParameterINTEL"/>
            </require>
        </extension>
        <extension name="VK_KHR_vulkan_memory_model" number="212" type="device" author="KHR" contact="Jeff Bolz @jeffbolznv" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan">
            <require>
                <enum value="3"                                         name="VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_vulkan_memory_model&quot;"    name="VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES"/>
                <type name="VkPhysicalDeviceVulkanMemoryModelFeaturesKHR"/>
                <feature name="vulkanMemoryModel" struct="VkPhysicalDeviceVulkanMemoryModelFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_pci_bus_info" number="213" type="device" author="EXT" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Matthaeus G. Chajdas @anteru" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="2"                                         name="VK_EXT_PCI_BUS_INFO_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_pci_bus_info&quot;"           name="VK_EXT_PCI_BUS_INFO_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT"/>
                <type name="VkPhysicalDevicePCIBusInfoPropertiesEXT"/>
            </require>
        </extension>
        <extension name="VK_AMD_display_native_hdr" number="214" type="device" author="AMD" depends="(VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_get_surface_capabilities2+VK_KHR_swapchain" contact="Matthaeus G. Chajdas @anteru" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                         name="VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_display_native_hdr&quot;"     name="VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD"/>
                <enum offset="0" extends="VkColorSpaceKHR"              name="VK_COLOR_SPACE_DISPLAY_NATIVE_AMD"/>
                <type name="VkDisplayNativeHdrSurfaceCapabilitiesAMD"/>
                <type name="VkSwapchainDisplayNativeHdrCreateInfoAMD"/>
                <command name="vkSetLocalDimmingAMD"/>
            </require>
        </extension>
        <extension name="VK_FUCHSIA_imagepipe_surface" number="215" type="instance" author="FUCHSIA" depends="VK_KHR_surface" platform="fuchsia" contact="Craig Stout @cdotstout" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                         name="VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION"/>
                <enum value="&quot;VK_FUCHSIA_imagepipe_surface&quot;"  name="VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA"/>
                <type name="VkImagePipeSurfaceCreateFlagsFUCHSIA"/>
                <type name="VkImagePipeSurfaceCreateInfoFUCHSIA"/>
                <command name="vkCreateImagePipeSurfaceFUCHSIA"/>
            </require>
        </extension>
        <extension name="VK_KHR_shader_terminate_invocation" number="216" type="device" author="KHR" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Jesse Hall @critsec" supported="vulkan,vulkansc" promotedto="VK_VERSION_1_3" ratified="vulkan,vulkansc">
            <require>
                <enum value="1"                                                 name="VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shader_terminate_invocation&quot;"    name="VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES"/>
                <type name="VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR"/>
                <feature name="shaderTerminateInvocation" struct="VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_GOOGLE_extension_217" number="217" author="GOOGLE" contact="Jesse Hall @critsec" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_GOOGLE_EXTENSION_217_SPEC_VERSION"/>
                <enum value="&quot;VK_GOOGLE_extension_217&quot;"           name="VK_GOOGLE_EXTENSION_217_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_metal_surface" number="218" type="instance" depends="VK_KHR_surface" platform="metal" supported="vulkan" author="EXT" contact="Dzmitry Malyshau @kvark" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_METAL_SURFACE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_metal_surface&quot;"              name="VK_EXT_METAL_SURFACE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT"/>
                <type name="VkMetalSurfaceCreateFlagsEXT"/>
                <type name="VkMetalSurfaceCreateInfoEXT"/>
                <command name="vkCreateMetalSurfaceEXT"/>
                <type name="CAMetalLayer"/>
            </require>
        </extension>
        <extension name="VK_EXT_fragment_density_map" number="219" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Matthew Netsch @mnetsch" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="2"                                             name="VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_fragment_density_map&quot;"       name="VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME"/>
                <enum offset="0"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT"/>
                <enum offset="1"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT"/>
                <enum offset="2"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT"/>
                <enum bitpos="14" extends="VkImageCreateFlagBits"           name="VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT"/>
                <enum offset="0"  extends="VkImageLayout"                   name="VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT"/>
                <enum bitpos="24" extends="VkAccessFlagBits"                name="VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT"/>
                <enum bitpos="24" extends="VkFormatFeatureFlagBits"         name="VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT"/>
                <enum bitpos="9"  extends="VkImageUsageFlagBits"            name="VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT"/>
                <enum bitpos="0"  extends="VkImageViewCreateFlagBits"       name="VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT"/>
                <enum bitpos="23" extends="VkPipelineStageFlagBits"         name="VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT"/>
                <enum bitpos="0"  extends="VkSamplerCreateFlagBits"         name="VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT"/>
                <enum bitpos="1"  extends="VkSamplerCreateFlagBits"         name="VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT"/>
                <type name="VkPhysicalDeviceFragmentDensityMapFeaturesEXT"/>
                <type name="VkPhysicalDeviceFragmentDensityMapPropertiesEXT"/>
                <type name="VkRenderPassFragmentDensityMapCreateInfoEXT"/>
                <feature name="fragmentDensityMap" struct="VkPhysicalDeviceFragmentDensityMapFeaturesEXT"/>
            </require>
            <require depends="VK_KHR_format_feature_flags2,VK_VERSION_1_3">
                <enum bitpos="24" extends="VkFormatFeatureFlagBits2"        name="VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT"/>
            </require>
            <require depends="VK_VERSION_1_3,VK_KHR_dynamic_rendering">
                <enum bitpos="22" extends="VkPipelineCreateFlagBits"                name="VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT"/>
                <enum alias="VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT" extends="VkPipelineCreateFlagBits" name="VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT" deprecated="aliased"/>
                <enum offset="7" extends="VkStructureType" extnumber="45"           name="VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT"/>
                <type name="VkRenderingFragmentDensityMapAttachmentInfoEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_220" number="220" author="EXT" contact="Dzmitry Malyshau @kvark" supported="disabled">
            <require>
                <enum value="0"                                              name="VK_EXT_EXTENSION_220_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_220&quot;"               name="VK_EXT_EXTENSION_220_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_221" number="221" author="KHR" contact="Tobias Hector @tobski" supported="disabled">
            <require>
                <enum value="0"                                              name="VK_KHR_EXTENSION_221_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_221&quot;"               name="VK_KHR_EXTENSION_221_EXTENSION_NAME"/>
                <enum bitpos="0" extends="VkRenderPassCreateFlagBits"        name="VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_scalar_block_layout" number="222" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" type="device" author="EXT" contact="Tobias Hector @tobski" supported="vulkan" promotedto="VK_VERSION_1_2">
            <require>
                <enum value="1"                                             name="VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_scalar_block_layout&quot;"        name="VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME"/>
                <type name="VkPhysicalDeviceScalarBlockLayoutFeaturesEXT"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES"/>
                <feature name="scalarBlockLayout" struct="VkPhysicalDeviceScalarBlockLayoutFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_223" number="223" author="EXT" contact="Tobias Hector @tobski" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_223_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_223&quot;"              name="VK_EXT_EXTENSION_223_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_GOOGLE_hlsl_functionality1" number="224" type="device" author="GOOGLE" contact="Hai Nguyen @chaoticbob" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION"/>
                <enum value="&quot;VK_GOOGLE_hlsl_functionality1&quot;"     name="VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME"/>
                <enum alias="VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION"   name="VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION" deprecated="aliased"/>
                <enum alias="VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME" name="VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME" deprecated="aliased"/>
            </require>
        </extension>
        <extension name="VK_GOOGLE_decorate_string" number="225" type="device" author="GOOGLE" contact="Hai Nguyen @chaoticbob" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_GOOGLE_DECORATE_STRING_SPEC_VERSION"/>
                <enum value="&quot;VK_GOOGLE_decorate_string&quot;"         name="VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_subgroup_size_control" number="226" type="device" depends="VK_VERSION_1_1" author="EXT" contact="Neil Henning @sheredom" supported="vulkan,vulkansc" promotedto="VK_VERSION_1_3" ratified="vulkansc">
            <require>
                <enum value="2"                                             name="VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_subgroup_size_control&quot;"      name="VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME"/>
                <type                                                       name="VkPhysicalDeviceSubgroupSizeControlFeaturesEXT"/>
                <type                                                       name="VkPhysicalDeviceSubgroupSizeControlPropertiesEXT"/>
                <type                                                       name="VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT" alias="VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES"/>
                <enum extends="VkPipelineShaderStageCreateFlagBits"         name="VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT" alias="VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT"/>
                <enum extends="VkPipelineShaderStageCreateFlagBits"         name="VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT" alias="VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT"/>
                <feature name="subgroupSizeControl" struct="VkPhysicalDeviceSubgroupSizeControlFeatures"/>
                <feature name="computeFullSubgroups" struct="VkPhysicalDeviceSubgroupSizeControlFeatures"/>
            </require>
        </extension>
        <extension name="VK_KHR_fragment_shading_rate" number="227" type="device" depends="((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_create_renderpass2),VK_VERSION_1_2" author="KHR" contact="Tobias Hector @tobski" supported="vulkan,vulkansc" ratified="vulkan,vulkansc">
            <require>
                <enum value="2"                                                 name="VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_fragment_shading_rate&quot;"          name="VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME"/>
                <type name="VkFragmentShadingRateCombinerOpKHR"/>
                <type name="VkFragmentShadingRateAttachmentInfoKHR"/>
                <type name="VkPipelineFragmentShadingRateStateCreateInfoKHR"/>
                <type name="VkPhysicalDeviceFragmentShadingRateFeaturesKHR"/>
                <type name="VkPhysicalDeviceFragmentShadingRatePropertiesKHR"/>
                <type name="VkPhysicalDeviceFragmentShadingRateKHR"/>
                <command name="vkGetPhysicalDeviceFragmentShadingRatesKHR"/>
                <command name="vkCmdSetFragmentShadingRateKHR"/>
                <enum offset="3" extends="VkImageLayout" extnumber="165"        name="VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR"/>
                <enum offset="0" extends="VkDynamicState"                       name="VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR"/>
                <enum offset="2" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR"/>
                <enum offset="3" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR"/>
                <enum offset="4" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR"/>
                <enum bitpos="23" extends="VkAccessFlagBits"                    name="VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR"/>
                <enum bitpos="8" extends="VkImageUsageFlagBits"                 name="VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"/>
                <enum bitpos="22" extends="VkPipelineStageFlagBits"             name="VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"/>
                <enum bitpos="30" extends="VkFormatFeatureFlagBits"             name="VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"/>
                <feature name="pipelineFragmentShadingRate" struct="VkPhysicalDeviceFragmentShadingRateFeaturesKHR"/>
            </require>
            <require depends="VK_KHR_format_feature_flags2,VK_VERSION_1_3">
                <enum bitpos="30" extends="VkFormatFeatureFlagBits2"            name="VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"/>
            </require>
            <require depends="VK_VERSION_1_3,VK_KHR_dynamic_rendering">
                <enum offset="6" extends="VkStructureType" extnumber="45"       name="VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR"/>
            </require>
            <require depends="VK_VERSION_1_3,VK_KHR_dynamic_rendering" api="vulkan" comment="Remove 'api' attribute once gitlab #4074 is fixed">
                <enum bitpos="21" extends="VkPipelineCreateFlagBits"            name="VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"/>
                <enum alias="VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR" extends="VkPipelineCreateFlagBits" name="VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR" deprecated="aliased"/>
                <type name="VkRenderingFragmentShadingRateAttachmentInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_AMD_shader_core_properties2" number="228" type="device" author="AMD" contact="Matthaeus G. Chajdas @anteru" supported="vulkan" depends="VK_AMD_shader_core_properties" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_shader_core_properties2&quot;"    name="VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD"/>
                <type                                                       name="VkPhysicalDeviceShaderCoreProperties2AMD"/>
                <type                                                       name="VkShaderCorePropertiesFlagBitsAMD"/>
                <type                                                       name="VkShaderCorePropertiesFlagsAMD"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_229" number="229" author="AMD" contact="Martin Dinkov @mdinkov" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_AMD_EXTENSION_229_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_229&quot;"              name="VK_AMD_EXTENSION_229_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_device_coherent_memory" number="230" type="device" author="AMD" contact="Tobias Hector @tobski" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_device_coherent_memory&quot;"     name="VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME"/>
                <enum bitpos="6" extends="VkMemoryPropertyFlagBits"         name="VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD"/>
                <enum bitpos="7" extends="VkMemoryPropertyFlagBits"         name="VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD"/>
                <type                                                       name="VkPhysicalDeviceCoherentMemoryFeaturesAMD"/>
                <feature name="deviceCoherentMemory"                        struct="VkPhysicalDeviceCoherentMemoryFeaturesAMD"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_231" number="231" author="AMD" contact="Martin Dinkov @mdinkov" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_AMD_EXTENSION_231_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_231&quot;"              name="VK_AMD_EXTENSION_231_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_232" number="232" author="AMD" contact="Martin Dinkov @mdinkov" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_AMD_EXTENSION_232_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_232&quot;"              name="VK_AMD_EXTENSION_232_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_dynamic_rendering_local_read" number="233" type="device" depends="VK_KHR_dynamic_rendering,VK_VERSION_1_3" author="AMD" contact="Tobias Hector @tobski" supported="vulkan" promotedto="VK_VERSION_1_4" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_dynamic_rendering_local_read&quot;" name="VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_EXTENSION_NAME"/>
                <enum extends="VkImageLayout"                               name="VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR" alias="VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ"/>
                <command name="vkCmdSetRenderingAttachmentLocationsKHR"/>
                <command name="vkCmdSetRenderingInputAttachmentIndicesKHR"/>
                <type name="VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR"/>
                <type name="VkRenderingAttachmentLocationInfoKHR"/>
                <type name="VkRenderingInputAttachmentIndexInfoKHR"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO_KHR" alias="VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR" alias="VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO"/>
                <feature name="dynamicRenderingLocalRead" struct="VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_234" number="234" author="AMD" contact="Martin Dinkov @mdinkov" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_AMD_EXTENSION_234_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_234&quot;"              name="VK_AMD_EXTENSION_234_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_shader_image_atomic_int64" number="235" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Tobias Hector @tobski" supported="vulkan,vulkansc" ratified="vulkan,vulkansc">
            <require>
                <enum value="1"                                             name="VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_shader_image_atomic_int64&quot;"  name="VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT"/>
                <type name="VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT"/>
                <feature name="shaderInt64" struct="VkPhysicalDeviceFeatures"/>
                <feature name="shaderImageInt64Atomics" struct="VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_shader_quad_control" number="236" type="device" depends="VK_VERSION_1_1+VK_KHR_vulkan_memory_model+VK_KHR_shader_maximal_reconvergence" author="KHR" contact="Tobias Hector @tobski" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_SHADER_QUAD_CONTROL_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shader_quad_control&quot;"          name="VK_KHR_SHADER_QUAD_CONTROL_EXTENSION_NAME"/>
                <type                                                       name="VkPhysicalDeviceShaderQuadControlFeaturesKHR"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR"/>
                <feature name="shaderQuadControl" struct="VkPhysicalDeviceShaderQuadControlFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_spirv_1_4" number="237" type="device" depends="VK_VERSION_1_1+VK_KHR_shader_float_controls" author="KHR" contact="Jesse Hall @critsec" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_SPIRV_1_4_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_spirv_1_4&quot;"                  name="VK_KHR_SPIRV_1_4_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_memory_budget" number="238" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Jeff Bolz @jeffbolznv" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_MEMORY_BUDGET_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_memory_budget&quot;"              name="VK_EXT_MEMORY_BUDGET_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT"/>
                <type name="VkPhysicalDeviceMemoryBudgetPropertiesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_memory_priority" number="239" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1"  author="EXT" contact="Jeff Bolz @jeffbolznv" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_MEMORY_PRIORITY_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_memory_priority&quot;"            name="VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT"/>
                <type name="VkPhysicalDeviceMemoryPriorityFeaturesEXT"/>
                <type name="VkMemoryPriorityAllocateInfoEXT"/>
                <feature name="memoryPriority" struct="VkPhysicalDeviceMemoryPriorityFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_surface_protected_capabilities" number="240" type="instance" depends="VK_VERSION_1_1+VK_KHR_get_surface_capabilities2" author="KHR" contact="Sandeep Shinde @sashinde" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_surface_protected_capabilities&quot;"   name="VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR"/>
                <type name="VkSurfaceProtectedCapabilitiesKHR"/>
            </require>
        </extension>
        <extension name="VK_NV_dedicated_allocation_image_aliasing" number="241" type="device" depends="(VK_KHR_dedicated_allocation+VK_KHR_get_physical_device_properties2),VK_VERSION_1_1" author="NVIDIA" contact="Nuno Subtil @nsubtil" supported="vulkan">
            <require>
                <enum value="1"                                                         name="VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_dedicated_allocation_image_aliasing&quot;"     name="VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV"/>
                <type name="VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV"/>
                <feature name="dedicatedAllocationImageAliasing" struct="VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_KHR_separate_depth_stencil_layouts" number="242" type="device" depends="((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_create_renderpass2),VK_VERSION_1_2" author="KHR" contact="Piers Daniell @pdaniell-nv" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan">
            <require>
                <enum value="1"                                                   name="VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_separate_depth_stencil_layouts&quot;"   name="VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR" alias="VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR" alias="VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT"/>
                <enum extends="VkImageLayout"                               name="VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR" alias="VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL"/>
                <enum extends="VkImageLayout"                               name="VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR" alias="VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL"/>
                <enum extends="VkImageLayout"                               name="VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR" alias="VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL"/>
                <enum extends="VkImageLayout"                               name="VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR" alias="VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL"/>
                <type name="VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR"/>
                <type name="VkAttachmentReferenceStencilLayoutKHR"/>
                <type name="VkAttachmentDescriptionStencilLayoutKHR"/>
                <feature name="separateDepthStencilLayouts" struct="VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_INTEL_extension_243" number="243" author="INTEL" contact="Slawek Grajewski @sgrajewski" supported="disabled">
            <require>
                <enum value="0"                                              name="VK_INTEL_EXTENSION_243_SPEC_VERSION"/>
                <enum value="&quot;VK_INTEL_extension_243&quot;"             name="VK_INTEL_EXTENSION_243_EXTENSION_NAME"/>
                <enum bitpos="46" extends="VkAccessFlagBits2"                name="VK_ACCESS_2_RESERVED_46_BIT_INTEL"/>
            </require>
        </extension>
        <extension name="VK_MESA_extension_244" number="244" author="MESA" contact="Andres Rodriguez @lostgoat" supported="disabled">
            <require>
                <enum value="0"                                              name="VK_MESA_EXTENSION_244_SPEC_VERSION"/>
                <enum value="&quot;VK_MESA_extension_244&quot;"              name="VK_MESA_EXTENSION_244_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_buffer_device_address" number="245" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="NV" contact="Jeff Bolz @jeffbolznv"  deprecatedby="VK_KHR_buffer_device_address" supported="vulkan">
            <require>
                <enum value="2"                                             name="VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_buffer_device_address&quot;"      name="VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT" alias="VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT"/>
                <enum extends="VkBufferUsageFlagBits"                       name="VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT" alias="VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT"/>
                <enum extends="VkBufferCreateFlagBits"                      name="VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT" alias="VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT"/>
                <enum extends="VkResult"                                    name="VK_ERROR_INVALID_DEVICE_ADDRESS_EXT" alias="VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS"/>
                <type name="VkPhysicalDeviceBufferAddressFeaturesEXT"/>
                <type name="VkPhysicalDeviceBufferDeviceAddressFeaturesEXT"/>
                <type name="VkBufferDeviceAddressInfoEXT"/>
                <type name="VkBufferDeviceAddressCreateInfoEXT"/>
                <command name="vkGetBufferDeviceAddressEXT"/>
                <feature name="bufferDeviceAddress" struct="VkPhysicalDeviceBufferDeviceAddressFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_tooling_info" number="246" type="device" author="EXT" contact="Tobias Hector @tobski" supported="vulkan" promotedto="VK_VERSION_1_3" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_TOOLING_INFO_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_tooling_info&quot;"               name="VK_EXT_TOOLING_INFO_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES"/>
                <enum extends="VkToolPurposeFlagBits"                       name="VK_TOOL_PURPOSE_VALIDATION_BIT_EXT" alias="VK_TOOL_PURPOSE_VALIDATION_BIT"/>
                <enum extends="VkToolPurposeFlagBits"                       name="VK_TOOL_PURPOSE_PROFILING_BIT_EXT" alias="VK_TOOL_PURPOSE_PROFILING_BIT"/>
                <enum extends="VkToolPurposeFlagBits"                       name="VK_TOOL_PURPOSE_TRACING_BIT_EXT" alias="VK_TOOL_PURPOSE_TRACING_BIT"/>
                <enum extends="VkToolPurposeFlagBits"                       name="VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT" alias="VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT"/>
                <enum extends="VkToolPurposeFlagBits"                       name="VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT"  alias="VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT"/>
                <type                                                       name="VkToolPurposeFlagBitsEXT"/>
                <type                                                       name="VkToolPurposeFlagsEXT"/>
                <type                                                       name="VkPhysicalDeviceToolPropertiesEXT"/>
                <command                                                    name="vkGetPhysicalDeviceToolPropertiesEXT"/>
            </require>
            <require depends="VK_EXT_debug_report">
                <enum bitpos="5" extends="VkToolPurposeFlagBits"            name="VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT"/>
            </require>
            <require depends="VK_EXT_debug_marker">
                <enum bitpos="6" extends="VkToolPurposeFlagBits"            name="VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT"/>
            </require>
            <require depends="VK_EXT_debug_utils">
                <enum bitpos="5" extends="VkToolPurposeFlagBits"            name="VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT"/>
                <enum bitpos="6" extends="VkToolPurposeFlagBits"            name="VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_separate_stencil_usage" number="247" type="device" author="EXT" contact="Daniel Rakos @drakos-amd" supported="vulkan" promotedto="VK_VERSION_1_2" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_separate_stencil_usage&quot;"     name="VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT" alias="VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO"/>
                <type name="VkImageStencilUsageCreateInfoEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_validation_features" number="248" type="instance" author="LUNARG" contact="Karl Schultz @karl-lunarg" specialuse="debugging" supported="vulkan,vulkansc" deprecatedby="VK_EXT_layer_settings" nofeatures="true">
            <require>
                <enum value="6"                                             name="VK_EXT_VALIDATION_FEATURES_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_validation_features&quot;"        name="VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT"/>
                <type name="VkValidationFeaturesEXT"/>
                <type name="VkValidationFeatureEnableEXT"/>
                <type name="VkValidationFeatureDisableEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_present_wait" number="249" type="device" depends="VK_KHR_swapchain+VK_KHR_present_id" author="KHR" contact="Keith Packard @keithp" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_KHR_PRESENT_WAIT_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_present_wait&quot;"           name="VK_KHR_PRESENT_WAIT_EXTENSION_NAME"/>
                <command name="vkWaitForPresentKHR"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR"/>
                <type name="VkPhysicalDevicePresentWaitFeaturesKHR"/>
                <feature name="presentWait" struct="VkPhysicalDevicePresentWaitFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_NV_cooperative_matrix" number="250" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="NV" contact="Jeff Bolz @jeffbolznv" supported="vulkan">
            <require>
                <enum value="1"                                              name="VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_cooperative_matrix&quot;"           name="VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV"/>
                <enum offset="2" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV"/>
                <type name="VkCooperativeMatrixPropertiesNV"/>
                <type name="VkScopeNV"/>
                <enum extends="VkScopeKHR" name="VK_SCOPE_DEVICE_NV"         alias="VK_SCOPE_DEVICE_KHR"/>
                <enum extends="VkScopeKHR" name="VK_SCOPE_WORKGROUP_NV"      alias="VK_SCOPE_WORKGROUP_KHR"/>
                <enum extends="VkScopeKHR" name="VK_SCOPE_SUBGROUP_NV"       alias="VK_SCOPE_SUBGROUP_KHR"/>
                <enum extends="VkScopeKHR" name="VK_SCOPE_QUEUE_FAMILY_NV"   alias="VK_SCOPE_QUEUE_FAMILY_KHR"/>
                <type name="VkComponentTypeNV"/>
                <enum extends="VkComponentTypeKHR" name="VK_COMPONENT_TYPE_FLOAT16_NV"  alias="VK_COMPONENT_TYPE_FLOAT16_KHR"/>
                <enum extends="VkComponentTypeKHR" name="VK_COMPONENT_TYPE_FLOAT32_NV"  alias="VK_COMPONENT_TYPE_FLOAT32_KHR"/>
                <enum extends="VkComponentTypeKHR" name="VK_COMPONENT_TYPE_FLOAT64_NV"  alias="VK_COMPONENT_TYPE_FLOAT64_KHR"/>
                <enum extends="VkComponentTypeKHR" name="VK_COMPONENT_TYPE_SINT8_NV"    alias="VK_COMPONENT_TYPE_SINT8_KHR"/>
                <enum extends="VkComponentTypeKHR" name="VK_COMPONENT_TYPE_SINT16_NV"   alias="VK_COMPONENT_TYPE_SINT16_KHR"/>
                <enum extends="VkComponentTypeKHR" name="VK_COMPONENT_TYPE_SINT32_NV"   alias="VK_COMPONENT_TYPE_SINT32_KHR"/>
                <enum extends="VkComponentTypeKHR" name="VK_COMPONENT_TYPE_SINT64_NV"   alias="VK_COMPONENT_TYPE_SINT64_KHR"/>
                <enum extends="VkComponentTypeKHR" name="VK_COMPONENT_TYPE_UINT8_NV"    alias="VK_COMPONENT_TYPE_UINT8_KHR"/>
                <enum extends="VkComponentTypeKHR" name="VK_COMPONENT_TYPE_UINT16_NV"   alias="VK_COMPONENT_TYPE_UINT16_KHR"/>
                <enum extends="VkComponentTypeKHR" name="VK_COMPONENT_TYPE_UINT32_NV"   alias="VK_COMPONENT_TYPE_UINT32_KHR"/>
                <enum extends="VkComponentTypeKHR" name="VK_COMPONENT_TYPE_UINT64_NV"   alias="VK_COMPONENT_TYPE_UINT64_KHR"/>
                <type name="VkPhysicalDeviceCooperativeMatrixFeaturesNV"/>
                <type name="VkPhysicalDeviceCooperativeMatrixPropertiesNV"/>
                <command name="vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"/>
                <feature name="cooperativeMatrix" struct="VkPhysicalDeviceCooperativeMatrixFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_coverage_reduction_mode" number="251" depends="VK_NV_framebuffer_mixed_samples+(VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)" type="device" author="NV" contact="Kedarnath Thangudu @kthangudu" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_coverage_reduction_mode&quot;"     name="VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV"/>
                <type name="VkPhysicalDeviceCoverageReductionModeFeaturesNV"/>
                <type name="VkPipelineCoverageReductionStateCreateInfoNV"/>
                <type name="VkPipelineCoverageReductionStateCreateFlagsNV"/>
                <type name="VkCoverageReductionModeNV"/>
                <type name="VkFramebufferMixedSamplesCombinationNV"/>
                <command name="vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"/>
                <feature name="coverageReductionMode" struct="VkPhysicalDeviceCoverageReductionModeFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_EXT_fragment_shader_interlock" number="252" author="EXT" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Piers Daniell @pdaniell-nv" supported="vulkan,vulkansc" ratified="vulkan,vulkansc">
            <require>
                <enum value="1"                                                 name="VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_fragment_shader_interlock&quot;"      name="VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT"/>
                <type name="VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT"/>
                <feature name="fragmentShaderSampleInterlock,fragmentShaderPixelInterlock,fragmentShaderShadingRateInterlock" struct="VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_ycbcr_image_arrays" number="253" type="device" depends="VK_KHR_sampler_ycbcr_conversion,VK_VERSION_1_1" author="EXT" contact="Piers Daniell @pdaniell-nv" supported="vulkan,vulkansc" ratified="vulkan,vulkansc">
            <require>
                <enum value="1"                                             name="VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_ycbcr_image_arrays&quot;"         name="VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT"/>
                <type name="VkPhysicalDeviceYcbcrImageArraysFeaturesEXT"/>
                <feature name="ycbcrImageArrays" struct="VkPhysicalDeviceYcbcrImageArraysFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_uniform_buffer_standard_layout" number="254" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" type="device" author="KHR" contact="Graeme Leese @gnl21" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan">
            <require>
                <enum value="1"                                                 name="VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_uniform_buffer_standard_layout&quot;" name="VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME"/>
                <type                                                           name="VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES"/>
                <feature name="uniformBufferStandardLayout" struct="VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_provoking_vertex" number="255" type="device" author="EXT" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Jesse Hall @jessehall" specialuse="glemulation" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_PROVOKING_VERTEX_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_provoking_vertex&quot;"           name="VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT"/>
                <type name="VkPhysicalDeviceProvokingVertexFeaturesEXT"/>
                <type name="VkPhysicalDeviceProvokingVertexPropertiesEXT"/>
                <type name="VkPipelineRasterizationProvokingVertexStateCreateInfoEXT"/>
                <type name="VkProvokingVertexModeEXT"/>
                <feature name="provokingVertexLast" struct="VkPhysicalDeviceProvokingVertexFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_full_screen_exclusive" number="256" type="device" author="EXT" depends="(VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_surface+VK_KHR_get_surface_capabilities2+VK_KHR_swapchain" platform="win32" contact="James Jones @cubanismo" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="4"                                             name="VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_full_screen_exclusive&quot;"      name="VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT"/>
                <enum offset="0" extends="VkResult" dir="-"                 name="VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT"/>
                <type name="VkFullScreenExclusiveEXT"/>
                <type name="VkSurfaceFullScreenExclusiveInfoEXT"/>
                <type name="VkSurfaceCapabilitiesFullScreenExclusiveEXT"/>
                <command name="vkGetPhysicalDeviceSurfacePresentModes2EXT"/>
                <command name="vkAcquireFullScreenExclusiveModeEXT"/>
                <command name="vkReleaseFullScreenExclusiveModeEXT"/>
            </require>
            <require depends="VK_KHR_win32_surface">
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT"/>
                <type name="VkSurfaceFullScreenExclusiveWin32InfoEXT"/>
            </require>
            <require depends="VK_KHR_device_group,VK_VERSION_1_1">
                <command name="vkGetDeviceGroupSurfacePresentModes2EXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_headless_surface" number="257" type="instance" depends="VK_KHR_surface" author="EXT" contact="Lisa Wu @chengtianww" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                                 name="VK_EXT_HEADLESS_SURFACE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_headless_surface&quot;"               name="VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT"/>
                <type name="VkHeadlessSurfaceCreateFlagsEXT"/>
                <type name="VkHeadlessSurfaceCreateInfoEXT"/>
                <command name="vkCreateHeadlessSurfaceEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_buffer_device_address" number="258" type="device" depends="(VK_KHR_get_physical_device_properties2+VK_KHR_device_group),VK_VERSION_1_1" author="KHR" contact="Jeff Bolz @jeffbolznv" supported="vulkan" promotedto="VK_VERSION_1_2" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_buffer_device_address&quot;"      name="VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR" alias="VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR" alias="VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO"/>
                <enum extends="VkBufferUsageFlagBits"                       name="VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR" alias="VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT"/>
                <enum extends="VkBufferCreateFlagBits"                      name="VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR" alias="VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT"/>
                <enum extends="VkMemoryAllocateFlagBits"                    name="VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR" alias="VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT"/>
                <enum extends="VkMemoryAllocateFlagBits"                    name="VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR" alias="VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT"/>
                <enum extends="VkResult"                                    name="VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR" alias="VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS"/>
                <type name="VkPhysicalDeviceBufferDeviceAddressFeaturesKHR"/>
                <type name="VkBufferDeviceAddressInfoKHR"/>
                <type name="VkBufferOpaqueCaptureAddressCreateInfoKHR"/>
                <type name="VkMemoryOpaqueCaptureAddressAllocateInfoKHR"/>
                <type name="VkDeviceMemoryOpaqueCaptureAddressInfoKHR"/>
                <command name="vkGetBufferDeviceAddressKHR"/>
                <command name="vkGetBufferOpaqueCaptureAddressKHR"/>
                <command name="vkGetDeviceMemoryOpaqueCaptureAddressKHR"/>
                <feature name="bufferDeviceAddress" struct="VkPhysicalDeviceBufferDeviceAddressFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_259" number="259" author="EXT" contact="Matthew Netsch @mnetsch" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_259_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_259&quot;"              name="VK_EXT_EXTENSION_259_EXTENSION_NAME"/>
                <enum bitpos="9"  extends="VkQueueFlagBits"                 name="VK_QUEUE_RESERVED_9_BIT_EXT"/>
                <enum bitpos="44" extends="VkFormatFeatureFlagBits2"        name="VK_FORMAT_FEATURE_2_RESERVED_44_BIT_EXT"/>
                <enum bitpos="45" extends="VkFormatFeatureFlagBits2"        name="VK_FORMAT_FEATURE_2_RESERVED_45_BIT_EXT"/>
                <enum bitpos="19" extends="VkImageCreateFlagBits"           name="VK_IMAGE_CREATE_RESERVED_19_BIT_EXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_line_rasterization" number="260" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Jeff Bolz @jeffbolznv" specialuse="cadsupport" supported="vulkan,vulkansc" promotedto="VK_KHR_line_rasterization">
            <require>
                <enum value="1"                                             name="VK_EXT_LINE_RASTERIZATION_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_line_rasterization&quot;"         name="VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT" alias="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES"/>
                <enum extends="VkDynamicState"                              name="VK_DYNAMIC_STATE_LINE_STIPPLE_EXT" alias="VK_DYNAMIC_STATE_LINE_STIPPLE"/>
                <enum extends="VkLineRasterizationMode"                     name="VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT" alias="VK_LINE_RASTERIZATION_MODE_DEFAULT"/>
                <enum extends="VkLineRasterizationMode"                     name="VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT" alias="VK_LINE_RASTERIZATION_MODE_RECTANGULAR"/>
                <enum extends="VkLineRasterizationMode"                     name="VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT" alias="VK_LINE_RASTERIZATION_MODE_BRESENHAM"/>
                <enum extends="VkLineRasterizationMode"                     name="VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT" alias="VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH"/>
                <type name="VkPhysicalDeviceLineRasterizationFeaturesEXT"/>
                <type name="VkPhysicalDeviceLineRasterizationPropertiesEXT"/>
                <type name="VkPipelineRasterizationLineStateCreateInfoEXT"/>
                <type name="VkLineRasterizationModeEXT"/>
                <command name="vkCmdSetLineStippleEXT"/>
                <feature name="rectangularLines,bresenhamLines,smoothLines,stippledRectangularLines,stippledBresenhamLines,stippledSmoothLines" struct="VkPhysicalDeviceLineRasterizationFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_shader_atomic_float" number="261" type="device" author="NV" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Vikram Kushwaha @vkushwaha-nv" supported="vulkan,vulkansc" ratified="vulkan,vulkansc">
            <require>
                <enum value="1"                                             name="VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_shader_atomic_float&quot;"        name="VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT"/>
                <type name="VkPhysicalDeviceShaderAtomicFloatFeaturesEXT"/>
                <feature name="shaderBufferFloat32Atomics,shaderBufferFloat32AtomicAdd,shaderBufferFloat64Atomics,shaderBufferFloat64AtomicAdd,shaderSharedFloat32Atomics,shaderSharedFloat32AtomicAdd,shaderSharedFloat64Atomics,shaderSharedFloat64AtomicAdd,shaderImageFloat32Atomics,shaderImageFloat32AtomicAdd" struct="VkPhysicalDeviceShaderAtomicFloatFeaturesEXT"/>
            </require>
            <require depends="VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::sparseImageFloat32Atomics">
                <feature name="shaderImageFloat32Atomics" struct="VkPhysicalDeviceShaderAtomicFloatFeaturesEXT"/>
            </require>
            <require depends="VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::sparseImageFloat32AtomicAdd">
                <feature name="shaderImageFloat32AtomicAdd" struct="VkPhysicalDeviceShaderAtomicFloatFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_host_query_reset" number="262" author="EXT" contact="Bas Nieuwenhuizen @BNieuwenhuizen" supported="vulkan" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" promotedto="VK_VERSION_1_2">
            <require>
                <enum value="1"                                             name="VK_EXT_HOST_QUERY_RESET_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_host_query_reset&quot;"           name="VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES"/>
                <type name="VkPhysicalDeviceHostQueryResetFeaturesEXT"/>
                <command name="vkResetQueryPoolEXT"/>
                <feature name="hostQueryReset" struct="VkPhysicalDeviceHostQueryResetFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_GGP_extension_263" number="263" author="GGP" contact="Jean-Francois Roy @jfroy" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_GGP_EXTENSION_263_SPEC_VERSION"/>
                <enum value="&quot;VK_GGP_extension_263&quot;"              name="VK_GGP_EXTENSION_263_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_BRCM_extension_264" number="264" author="BRCM" contact="Graeme Leese @gnl21" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_BRCM_EXTENSION_264_SPEC_VERSION"/>
                <enum value="&quot;VK_BRCM_extension_264&quot;"             name="VK_BRCM_EXTENSION_264_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_BRCM_extension_265" number="265" author="BRCM" contact="Graeme Leese @gnl21" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_BRCM_EXTENSION_265_SPEC_VERSION"/>
                <enum value="&quot;VK_BRCM_extension_265&quot;"             name="VK_BRCM_EXTENSION_265_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_index_type_uint8" number="266" type="device" author="EXT" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Piers Daniell @pdaniell-nv" supported="vulkan,vulkansc" promotedto="VK_KHR_index_type_uint8">
            <require>
                <enum value="1"                                             name="VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_index_type_uint8&quot;"           name="VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES"/>
                <enum extends="VkIndexType"                                 name="VK_INDEX_TYPE_UINT8_EXT" alias="VK_INDEX_TYPE_UINT8"/>
                <type name="VkPhysicalDeviceIndexTypeUint8FeaturesEXT"/>
                <feature name="indexTypeUint8" struct="VkPhysicalDeviceIndexTypeUint8FeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_267" number="267" type="device" author="EXT" contact="Piers Daniell @pdaniell-nv" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_267_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_267&quot;"              name="VK_EXT_EXTENSION_267_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extended_dynamic_state" number="268" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Piers Daniell @pdaniell-nv" supported="vulkan,vulkansc" promotedto="VK_VERSION_1_3" ratified="vulkansc">
            <require>
                <enum value="1"                                             name="VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extended_dynamic_state&quot;"     name="VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT" comment="Not promoted to 1.3"/>
                <enum extends="VkDynamicState"                              name="VK_DYNAMIC_STATE_CULL_MODE_EXT" alias="VK_DYNAMIC_STATE_CULL_MODE"/>
                <enum extends="VkDynamicState"                              name="VK_DYNAMIC_STATE_FRONT_FACE_EXT" alias="VK_DYNAMIC_STATE_FRONT_FACE"/>
                <enum extends="VkDynamicState"                              name="VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT" alias="VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY"/>
                <enum extends="VkDynamicState"                              name="VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT" alias="VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT"/>
                <enum extends="VkDynamicState"                              name="VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT" alias="VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT"/>
                <enum extends="VkDynamicState"                              name="VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT" alias="VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE"/>
                <enum extends="VkDynamicState"                              name="VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT" alias="VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE"/>
                <enum extends="VkDynamicState"                              name="VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT" alias="VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE"/>
                <enum extends="VkDynamicState"                              name="VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT" alias="VK_DYNAMIC_STATE_DEPTH_COMPARE_OP"/>
                <enum extends="VkDynamicState"                              name="VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT" alias="VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE"/>
                <enum extends="VkDynamicState"                              name="VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT" alias="VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE"/>
                <enum extends="VkDynamicState"                              name="VK_DYNAMIC_STATE_STENCIL_OP_EXT" alias="VK_DYNAMIC_STATE_STENCIL_OP"/>
                <type name="VkPhysicalDeviceExtendedDynamicStateFeaturesEXT" comment="Not promoted to 1.3"/>
                <command name="vkCmdSetCullModeEXT"/>
                <command name="vkCmdSetFrontFaceEXT"/>
                <command name="vkCmdSetPrimitiveTopologyEXT"/>
                <command name="vkCmdSetViewportWithCountEXT"/>
                <command name="vkCmdSetScissorWithCountEXT"/>
                <command name="vkCmdBindVertexBuffers2EXT"/>
                <command name="vkCmdSetDepthTestEnableEXT"/>
                <command name="vkCmdSetDepthWriteEnableEXT"/>
                <command name="vkCmdSetDepthCompareOpEXT"/>
                <command name="vkCmdSetDepthBoundsTestEnableEXT"/>
                <command name="vkCmdSetStencilTestEnableEXT"/>
                <command name="vkCmdSetStencilOpEXT"/>
                <feature name="extendedDynamicState" struct="VkPhysicalDeviceExtendedDynamicStateFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_deferred_host_operations" number="269" type="device" author="KHR" contact="Josh Barczak @jbarczak" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="4"                                             name="VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_deferred_host_operations&quot;"   name="VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkObjectType"                     name="VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR"/>
                <type name="VkDeferredOperationKHR"/>
                <command name="vkCreateDeferredOperationKHR"/>
                <command name="vkDestroyDeferredOperationKHR"/>
                <command name="vkGetDeferredOperationMaxConcurrencyKHR"/>
                <command name="vkGetDeferredOperationResultKHR"/>
                <command name="vkDeferredOperationJoinKHR"/>
                <enum extends="VkResult"       offset="0"       name="VK_THREAD_IDLE_KHR"/>
                <enum extends="VkResult"       offset="1"       name="VK_THREAD_DONE_KHR"/>
                <enum extends="VkResult"       offset="2"       name="VK_OPERATION_DEFERRED_KHR"/>
                <enum extends="VkResult"       offset="3"       name="VK_OPERATION_NOT_DEFERRED_KHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_pipeline_executable_properties" number="270" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="KHR" contact="Faith Ekstrand @gfxstrand" specialuse="devtools" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_pipeline_executable_properties&quot;"   name="VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR"/>
                <enum offset="2" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR"/>
                <enum offset="3" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR"/>
                <enum offset="4" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR"/>
                <enum offset="5" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR"/>
                <enum bitpos="6" extends="VkPipelineCreateFlagBits"     name="VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR"/>
                <enum bitpos="7" extends="VkPipelineCreateFlagBits"     name="VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR"/>
                <type name="VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR"/>
                <type name="VkPipelineInfoKHR"/>
                <type name="VkPipelineExecutablePropertiesKHR"/>
                <type name="VkPipelineExecutableInfoKHR"/>
                <type name="VkPipelineExecutableStatisticFormatKHR"/>
                <type name="VkPipelineExecutableStatisticValueKHR"/>
                <type name="VkPipelineExecutableStatisticKHR"/>
                <type name="VkPipelineExecutableInternalRepresentationKHR"/>
                <command name="vkGetPipelineExecutablePropertiesKHR"/>
                <command name="vkGetPipelineExecutableStatisticsKHR"/>
                <command name="vkGetPipelineExecutableInternalRepresentationsKHR"/>
                <feature name="pipelineExecutableInfo" struct="VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_host_image_copy" number="271" type="device" depends="((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_copy_commands2+VK_KHR_format_feature_flags2),VK_VERSION_1_3" author="EXT" contact="Shahbaz Youssefi @syoussefi" supported="vulkan" promotedto="VK_VERSION_1_4" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_EXT_HOST_IMAGE_COPY_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_host_image_copy&quot;"        name="VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT" alias="VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT" alias="VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT" alias="VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT" alias="VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT" alias="VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT" alias="VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT" alias="VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT" alias="VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY"/>
                <enum extends="VkImageUsageFlagBits"                    name="VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT" alias="VK_IMAGE_USAGE_HOST_TRANSFER_BIT" comment="Can be used with host image copies"/>
                <enum extends="VkFormatFeatureFlagBits2"                name="VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT" alias="VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT" comment="Host image copies are supported"/>
                <enum extends="VkHostImageCopyFlagBits"                 name="VK_HOST_IMAGE_COPY_MEMCPY_EXT" alias="VK_HOST_IMAGE_COPY_MEMCPY"/>
                <type name="VkPhysicalDeviceHostImageCopyFeaturesEXT"/>
                <type name="VkPhysicalDeviceHostImageCopyPropertiesEXT"/>
                <type name="VkHostImageCopyFlagBitsEXT"/>
                <type name="VkHostImageCopyFlagsEXT"/>
                <type name="VkMemoryToImageCopyEXT"/>
                <type name="VkImageToMemoryCopyEXT"/>
                <type name="VkCopyMemoryToImageInfoEXT"/>
                <type name="VkCopyImageToMemoryInfoEXT"/>
                <type name="VkCopyImageToImageInfoEXT"/>
                <type name="VkHostImageLayoutTransitionInfoEXT"/>
                <type name="VkSubresourceHostMemcpySizeEXT"/>
                <type name="VkHostImageCopyDevicePerformanceQueryEXT"/>
                <command name="vkCopyMemoryToImageEXT"/>
                <command name="vkCopyImageToMemoryEXT"/>
                <command name="vkCopyImageToImageEXT"/>
                <command name="vkTransitionImageLayoutEXT"/>
                <type name="VkSubresourceLayout2EXT"/>
                <type name="VkImageSubresource2EXT"/>
                <command name="vkGetImageSubresourceLayout2EXT" comment="Taken from VK_EXT_image_compression_control. VkStructureType enums defined in that extension"/>
                <feature name="hostImageCopy" struct="VkPhysicalDeviceHostImageCopyFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_map_memory2" number="272" type="device" author="KHR" contact="Faith Ekstrand @gfxstrand" supported="vulkan" promotedto="VK_VERSION_1_4" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                               name="VK_KHR_MAP_MEMORY_2_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_map_memory2&quot;"  name="VK_KHR_MAP_MEMORY_2_EXTENSION_NAME"/>
                <enum extends="VkStructureType"               name="VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR" alias="VK_STRUCTURE_TYPE_MEMORY_MAP_INFO"/>
                <enum extends="VkStructureType"               name="VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR" alias="VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO"/>
                <type name="VkMemoryMapInfoKHR"/>
                <type name="VkMemoryUnmapInfoKHR"/>
                <type name="VkMemoryUnmapFlagBitsKHR"/>
                <type name="VkMemoryUnmapFlagsKHR"/>
                <command name="vkMapMemory2KHR"/>
                <command name="vkUnmapMemory2KHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_map_memory_placed" number="273" type="device" depends="VK_KHR_map_memory2,VK_VERSION_1_4" author="EXT" contact="Faith Ekstrand @gfxstrand" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_EXT_MAP_MEMORY_PLACED_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_map_memory_placed&quot;"      name="VK_EXT_MAP_MEMORY_PLACED_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT"/>
                <enum offset="2" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT"/>
                <enum bitpos="0" extends="VkMemoryMapFlagBits"          name="VK_MEMORY_MAP_PLACED_BIT_EXT"/>
                <enum bitpos="0" extends="VkMemoryUnmapFlagBits"        name="VK_MEMORY_UNMAP_RESERVE_BIT_EXT"/>
                <type name="VkPhysicalDeviceMapMemoryPlacedFeaturesEXT"/>
                <type name="VkPhysicalDeviceMapMemoryPlacedPropertiesEXT"/>
                <type name="VkMemoryMapPlacedInfoEXT"/>
                <feature name="memoryMapPlaced" struct="VkPhysicalDeviceMapMemoryPlacedFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_shader_atomic_float2" number="274" type="device" depends="VK_EXT_shader_atomic_float" author="EXT" contact="Faith Ekstrand @gfxstrand" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_shader_atomic_float2&quot;"       name="VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT"/>
                <type name="VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT"/>
                <feature name="shaderBufferFloat16Atomics,shaderBufferFloat16AtomicAdd,shaderBufferFloat16AtomicMinMax,shaderBufferFloat32AtomicMinMax,shaderBufferFloat64AtomicMinMax,shaderSharedFloat16Atomics,shaderSharedFloat16AtomicAdd,shaderSharedFloat16AtomicMinMax,shaderSharedFloat32AtomicMinMax,shaderSharedFloat64AtomicMinMax,shaderImageFloat32AtomicMinMax" struct="VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT"/>
            </require>
            <require depends="VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::sparseImageFloat32AtomicMinMax">
                <feature name="shaderImageFloat32AtomicMinMax" struct="VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_surface_maintenance1" number="275" type="instance" depends="VK_KHR_surface+VK_KHR_get_surface_capabilities2" author="EXT" contact="Shahbaz Youssefi @syoussefi" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_surface_maintenance1&quot;"       name="VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT"/>
                <type name="VkSurfacePresentModeEXT"/>
                <type name="VkPresentScalingFlagBitsEXT"/>
                <type name="VkPresentScalingFlagsEXT"/>
                <type name="VkPresentGravityFlagBitsEXT"/>
                <type name="VkPresentGravityFlagsEXT"/>
                <type name="VkSurfacePresentScalingCapabilitiesEXT"/>
                <type name="VkSurfacePresentModeCompatibilityEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_swapchain_maintenance1" number="276" type="device" depends="VK_KHR_swapchain+VK_EXT_surface_maintenance1+(VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)" author="EXT" contact="Shahbaz Youssefi @syoussefi" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_swapchain_maintenance1&quot;"     name="VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT"/>
                <enum offset="4" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT"/>
                <enum offset="5" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT"/>
                <enum bitpos="3" extends="VkSwapchainCreateFlagBitsKHR"     name="VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT"/>
                <type name="VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT"/>
                <type name="VkSwapchainPresentFenceInfoEXT"/>
                <type name="VkSwapchainPresentModesCreateInfoEXT"/>
                <type name="VkSwapchainPresentModeInfoEXT"/>
                <type name="VkSwapchainPresentScalingCreateInfoEXT"/>
                <type name="VkReleaseSwapchainImagesInfoEXT"/>
                <command name="vkReleaseSwapchainImagesEXT"/>
                <feature name="swapchainMaintenance1" struct="VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_shader_demote_to_helper_invocation" number="277" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Jeff Bolz @jeffbolznv" supported="vulkan,vulkansc" promotedto="VK_VERSION_1_3" ratified="vulkansc">
            <require>
                <enum value="1"                                             name="VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_shader_demote_to_helper_invocation&quot;" name="VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES"/>
                <type name="VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT"/>
                <feature name="shaderDemoteToHelperInvocation" struct="VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_NV_device_generated_commands" number="278" type="device" depends="(VK_VERSION_1_1+VK_KHR_buffer_device_address),VK_VERSION_1_2" author="NV" contact="Christoph Kubisch @pixeljetstream" supported="vulkan">
            <require>
                <comment>
                    This extension requires buffer_device_address functionality.
                    VK_EXT_buffer_device_address is also acceptable, but since it is deprecated the KHR version is preferred.
                </comment>
                <enum value="3"                                             name="VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_device_generated_commands&quot;"   name="VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV"/>
                <enum offset="4" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV"/>
                <enum offset="5" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV"/>
                <enum offset="6" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV"/>
                <enum offset="7" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV"/>
                <enum bitpos="18" extends="VkPipelineCreateFlagBits"        name="VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV"/>
                <enum bitpos="17" extends="VkPipelineStageFlagBits"         name="VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV"/>
                <enum bitpos="17" extends="VkAccessFlagBits"                name="VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV"/>
                <enum bitpos="18" extends="VkAccessFlagBits"                name="VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV"/>
                <enum offset="0" extends="VkObjectType"                     name="VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV"/>
                <type name="VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV"/>
                <type name="VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV"/>
                <type name="VkGraphicsShaderGroupCreateInfoNV"/>
                <type name="VkGraphicsPipelineShaderGroupsCreateInfoNV"/>
                <type name="VkBindShaderGroupIndirectCommandNV"/>
                <type name="VkBindIndexBufferIndirectCommandNV"/>
                <type name="VkBindVertexBufferIndirectCommandNV"/>
                <type name="VkSetStateFlagsIndirectCommandNV"/>
                <type name="VkIndirectStateFlagBitsNV"/>
                <type name="VkIndirectStateFlagsNV"/>
                <type name="VkIndirectCommandsLayoutNV"/>
                <type name="VkIndirectCommandsTokenTypeNV"/>
                <type name="VkIndirectCommandsLayoutUsageFlagBitsNV"/>
                <type name="VkIndirectCommandsLayoutUsageFlagsNV"/>
                <type name="VkIndirectCommandsStreamNV"/>
                <type name="VkIndirectCommandsLayoutTokenNV"/>
                <type name="VkIndirectCommandsLayoutCreateInfoNV"/>
                <type name="VkGeneratedCommandsInfoNV"/>
                <type name="VkGeneratedCommandsMemoryRequirementsInfoNV"/>
                <command name="vkGetGeneratedCommandsMemoryRequirementsNV"/>
                <command name="vkCmdPreprocessGeneratedCommandsNV"/>
                <command name="vkCmdExecuteGeneratedCommandsNV"/>
                <command name="vkCmdBindPipelineShaderGroupNV"/>
                <command name="vkCreateIndirectCommandsLayoutNV"/>
                <command name="vkDestroyIndirectCommandsLayoutNV"/>
                <feature name="deviceGeneratedCommands" struct="VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_inherited_viewport_scissor" number="279" type="device" author="NV" contact="David Zhao Akeley @akeley98" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_inherited_viewport_scissor&quot;"  name="VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV"/>
                <type name="VkPhysicalDeviceInheritedViewportScissorFeaturesNV"/>
                <type name="VkCommandBufferInheritanceViewportScissorInfoNV"/>
                <feature name="inheritedViewportScissor2D" struct="VkPhysicalDeviceInheritedViewportScissorFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_280" number="280" type="device" author="KHR" contact="Kevin Petit @kpet" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_280_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_280&quot;"              name="VK_KHR_EXTENSION_280_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_shader_integer_dot_product" number="281" type="device" author="KHR" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Kevin Petit @kpet" supported="vulkan" promotedto="VK_VERSION_1_3" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shader_integer_dot_product&quot;" name="VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES"/>
                <type name="VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR"/>
                <type name="VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR"/>
                <feature name="shaderIntegerDotProduct" struct="VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_texel_buffer_alignment" number="282" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Jeff Bolz @jeffbolznv" supported="vulkan,vulkansc" promotedto="VK_VERSION_1_3" ratified="vulkansc">
            <require>
                <enum value="1"                                             name="VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_texel_buffer_alignment&quot;"     name="VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT" comment="Not promoted to 1.3"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES"/>
                <type name="VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT" comment="Not promoted to 1.3"/>
                <type name="VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT"/>
                <feature name="texelBufferAlignment" struct="VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_QCOM_render_pass_transform" number="283" type="device" author="QCOM" contact="Matthew Netsch @mnetsch" supported="vulkan" nofeatures="true">
            <require>
                <enum value="4"                                             name="VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_render_pass_transform&quot;"     name="VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM"/>
                <enum bitpos="1" extends="VkRenderPassCreateFlagBits"       name="VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM"/>
                <type name="VkRenderPassTransformBeginInfoQCOM"/>
                <type name="VkCommandBufferInheritanceRenderPassTransformInfoQCOM"/>
            </require>
        </extension>
        <extension name="VK_EXT_depth_bias_control" number="284" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Joshua Ashton @Joshua-Ashton" specialuse="d3demulation" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_DEPTH_BIAS_CONTROL_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_depth_bias_control&quot;"         name="VK_EXT_DEPTH_BIAS_CONTROL_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT"/>
                <type name="VkPhysicalDeviceDepthBiasControlFeaturesEXT"/>
                <type name="VkDepthBiasInfoEXT"/>
                <type name="VkDepthBiasRepresentationEXT"/>
                <type name="VkDepthBiasRepresentationInfoEXT"/>
                <command name="vkCmdSetDepthBias2EXT"/>
                <feature name="depthBiasControl" struct="VkPhysicalDeviceDepthBiasControlFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_device_memory_report" number="285" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Yiwei Zhang @zhangyiwei" specialuse="devtools" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="2"                                             name="VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_device_memory_report&quot;"       name="VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT"/>
                <type name="VkPhysicalDeviceDeviceMemoryReportFeaturesEXT"/>
                <type name="VkDeviceDeviceMemoryReportCreateInfoEXT"/>
                <type name="VkDeviceMemoryReportCallbackDataEXT"/>
                <type name="VkDeviceMemoryReportFlagsEXT"/>
                <type name="VkDeviceMemoryReportEventTypeEXT"/>
                <type name="PFN_vkDeviceMemoryReportCallbackEXT"/>
                <feature name="deviceMemoryReport" struct="VkPhysicalDeviceDeviceMemoryReportFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_acquire_drm_display" number="286" type="instance" depends="VK_EXT_direct_mode_display" author="EXT" contact="Drew DeVault sir@cmpwn.com" supported="vulkan" comment="codespell:ignore devault" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_acquire_drm_display&quot;"        name="VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME"/>
                <command name="vkAcquireDrmDisplayEXT"/>
                <command name="vkGetDrmDisplayEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_robustness2" number="287"  type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Liam Middlebrook @liam-middlebrook" supported="vulkan,vulkansc" ratified="vulkan,vulkansc">
            <require>
                <enum value="1"                                                 name="VK_EXT_ROBUSTNESS_2_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_robustness2&quot;"                    name="VK_EXT_ROBUSTNESS_2_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT"/>
                <type name="VkPhysicalDeviceRobustness2FeaturesEXT"/>
                <type name="VkPhysicalDeviceRobustness2PropertiesEXT"/>
                <feature name="robustBufferAccess2,robustImageAccess2,nullDescriptor" struct="VkPhysicalDeviceRobustness2FeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_custom_border_color" number="288" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Liam Middlebrook @liam-middlebrook" specialuse="glemulation,d3demulation" supported="vulkan,vulkansc" ratified="vulkan,vulkansc">
            <require>
                <enum value="12"                                            name="VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_custom_border_color&quot;"        name="VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT"/>
                <enum offset="3" extends="VkBorderColor"                    name="VK_BORDER_COLOR_FLOAT_CUSTOM_EXT"/>
                <enum offset="4" extends="VkBorderColor"                    name="VK_BORDER_COLOR_INT_CUSTOM_EXT"/>
                <type name="VkSamplerCustomBorderColorCreateInfoEXT"/>
                <type name="VkPhysicalDeviceCustomBorderColorPropertiesEXT"/>
                <type name="VkPhysicalDeviceCustomBorderColorFeaturesEXT"/>
                <feature name="customBorderColors" struct="VkPhysicalDeviceCustomBorderColorFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_289" number="289" author="EXT" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="disabled">
            <require>
                <comment>
                    These enums are present only to inform downstream
                    consumers like KTX2. There is no actual Vulkan extension
                    corresponding to the enums.
                </comment>
                <enum value="0"                                             name="VK_EXT_EXTENSION_289_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_289&quot;"              name="VK_EXT_EXTENSION_289_EXTENSION_NAME"/>
                <enum extends="VkFormat" extnumber="289" offset="0" name="VK_FORMAT_ASTC_3x3x3_UNORM_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="1" name="VK_FORMAT_ASTC_3x3x3_SRGB_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="2" name="VK_FORMAT_ASTC_3x3x3_SFLOAT_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="3" name="VK_FORMAT_ASTC_4x3x3_UNORM_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="4" name="VK_FORMAT_ASTC_4x3x3_SRGB_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="5" name="VK_FORMAT_ASTC_4x3x3_SFLOAT_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="6" name="VK_FORMAT_ASTC_4x4x3_UNORM_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="7" name="VK_FORMAT_ASTC_4x4x3_SRGB_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="8" name="VK_FORMAT_ASTC_4x4x3_SFLOAT_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="9" name="VK_FORMAT_ASTC_4x4x4_UNORM_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="10" name="VK_FORMAT_ASTC_4x4x4_SRGB_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="11" name="VK_FORMAT_ASTC_4x4x4_SFLOAT_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="12" name="VK_FORMAT_ASTC_5x4x4_UNORM_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="13" name="VK_FORMAT_ASTC_5x4x4_SRGB_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="14" name="VK_FORMAT_ASTC_5x4x4_SFLOAT_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="15" name="VK_FORMAT_ASTC_5x5x4_UNORM_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="16" name="VK_FORMAT_ASTC_5x5x4_SRGB_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="17" name="VK_FORMAT_ASTC_5x5x4_SFLOAT_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="18" name="VK_FORMAT_ASTC_5x5x5_UNORM_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="19" name="VK_FORMAT_ASTC_5x5x5_SRGB_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="20" name="VK_FORMAT_ASTC_5x5x5_SFLOAT_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="21" name="VK_FORMAT_ASTC_6x5x5_UNORM_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="22" name="VK_FORMAT_ASTC_6x5x5_SRGB_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="23" name="VK_FORMAT_ASTC_6x5x5_SFLOAT_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="24" name="VK_FORMAT_ASTC_6x6x5_UNORM_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="25" name="VK_FORMAT_ASTC_6x6x5_SRGB_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="26" name="VK_FORMAT_ASTC_6x6x5_SFLOAT_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="27" name="VK_FORMAT_ASTC_6x6x6_UNORM_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="28" name="VK_FORMAT_ASTC_6x6x6_SRGB_BLOCK_EXT"/>
                <enum extends="VkFormat" extnumber="289" offset="29" name="VK_FORMAT_ASTC_6x6x6_SFLOAT_BLOCK_EXT"/>
            </require>
        </extension>
        <extension name="VK_GOOGLE_user_type" number="290" type="device" author="GOOGLE" contact="Kaye Mason @chaleur" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_GOOGLE_USER_TYPE_SPEC_VERSION"/>
                <enum value="&quot;VK_GOOGLE_user_type&quot;"               name="VK_GOOGLE_USER_TYPE_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_pipeline_library" number="291" type="device" author="KHR" contact="Christoph Kubisch @pixeljetstream" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_pipeline_library&quot;"           name="VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME"/>
                <enum bitpos="11" extends="VkPipelineCreateFlagBits"        name="VK_PIPELINE_CREATE_LIBRARY_BIT_KHR"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR"/>
                <type name="VkPipelineLibraryCreateInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_292" number="292" author="NV" contact="Daniel Koch @dgkoch" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_NV_EXTENSION_292_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_292&quot;"               name="VK_NV_EXTENSION_292_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_present_barrier" number="293" type="device" author="NV" depends="(VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_surface+VK_KHR_get_surface_capabilities2+VK_KHR_swapchain" contact="Liya Li @liyli" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_NV_PRESENT_BARRIER_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_present_barrier&quot;"             name="VK_NV_PRESENT_BARRIER_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV"/>
                <type name="VkPhysicalDevicePresentBarrierFeaturesNV"/>
                <type name="VkSurfaceCapabilitiesPresentBarrierNV"/>
                <type name="VkSwapchainPresentBarrierCreateInfoNV"/>
                <feature name="presentBarrier" struct="VkPhysicalDevicePresentBarrierFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_KHR_shader_non_semantic_info" number="294" type="device" author="KHR" contact="Baldur Karlsson @baldurk" supported="vulkan" promotedto="VK_VERSION_1_3" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shader_non_semantic_info&quot;"   name="VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_present_id" number="295" type="device" depends="VK_KHR_swapchain+VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="KHR" contact="Keith Packard @keithp" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_KHR_PRESENT_ID_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_present_id&quot;"             name="VK_KHR_PRESENT_ID_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PRESENT_ID_KHR"/>
                <type name="VkPresentIdKHR"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR"/>
                <type name="VkPhysicalDevicePresentIdFeaturesKHR"/>
                <feature name="presentId" struct="VkPhysicalDevicePresentIdFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_private_data" number="296" type="device" author="NV" contact="Matthew Rusch @mattruschnv" supported="vulkan" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" promotedto="VK_VERSION_1_3">
            <require>
                <enum value="1"                                             name="VK_EXT_PRIVATE_DATA_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_private_data&quot;"               name="VK_EXT_PRIVATE_DATA_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT" alias="VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT" alias="VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO"/>
                <enum extends="VkObjectType"                                name="VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT" alias="VK_OBJECT_TYPE_PRIVATE_DATA_SLOT"/>
                <type name="VkPhysicalDevicePrivateDataFeaturesEXT"/>
                <type name="VkDevicePrivateDataCreateInfoEXT"/>
                <type name="VkPrivateDataSlotCreateInfoEXT"/>
                <type name="VkPrivateDataSlotEXT"/>
                <type name="VkPrivateDataSlotCreateFlagsEXT" comment="Will add VkPrivateDataSlotCreateFlagBits when bits are defined in the future"/>
                <command name="vkCreatePrivateDataSlotEXT"/>
                <command name="vkDestroyPrivateDataSlotEXT"/>
                <command name="vkSetPrivateDataEXT"/>
                <command name="vkGetPrivateDataEXT"/>
                <feature name="privateData" struct="VkPhysicalDevicePrivateDataFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_297" number="297" author="KHR" contact="Corentin Wallez @Kangz" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_297_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_297&quot;"              name="VK_KHR_EXTENSION_297_EXTENSION_NAME"/>
                <enum bitpos="3" extends="VkPipelineShaderStageCreateFlagBits"  name="VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_3_BIT_KHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_pipeline_creation_cache_control" number="298" type="device" author="AMD" contact="Gregory Grebe @grgrebe_amd" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan" promotedto="VK_VERSION_1_3">
            <require>
                <enum value="3"                                             name="VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_pipeline_creation_cache_control&quot;"    name="VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES"/>
                <type name="VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT"/>
                <enum extends="VkPipelineCreateFlagBits"                    name="VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT" alias="VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT"/>
                <enum extends="VkPipelineCreateFlagBits"                    name="VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT" alias="VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT"/>
                <enum extends="VkResult"                                    name="VK_PIPELINE_COMPILE_REQUIRED_EXT" alias="VK_PIPELINE_COMPILE_REQUIRED"/>
                <enum extends="VkResult"                                    name="VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT" alias="VK_PIPELINE_COMPILE_REQUIRED"/>
                <enum extends="VkPipelineCacheCreateFlagBits"               name="VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT" alias="VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT"/>
                <type name="VkPipelineCacheCreateFlagBits" comment="This is a temporary workaround for processors not recognizing that VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT above also requires this type"/>
                <feature name="pipelineCreationCacheControl" struct="VkPhysicalDevicePipelineCreationCacheControlFeatures"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_299" number="299" type="device" author="KHR" contact="Mark Bellamy @mark.bellamy_arm" supported="disabled">
            <require comment="used for Vulkan SC 1.0 namespace">
                <enum value="0"                                         name="VK_KHR_EXTENSION_299_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_299&quot;"          name="VK_KHR_EXTENSION_299_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_video_encode_queue" number="300"  type="device" depends="VK_KHR_video_queue+(VK_KHR_synchronization2,VK_VERSION_1_3)" author="KHR" contact="Ahmed Abdelkhalek @aabdelkh" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="12"                                        name="VK_KHR_VIDEO_ENCODE_QUEUE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_video_encode_queue&quot;"     name="VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME"/>
                <!-- VkPipelineStageFlagBits bitpos="27" is reserved by this extension, but not used -->
                <enum bitpos="27" extends="VkPipelineStageFlagBits2"    name="VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR"/>
                <enum bitpos="37" extends="VkAccessFlagBits2"           name="VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR"/>
                <enum bitpos="38" extends="VkAccessFlagBits2"           name="VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR"/>
                <enum offset="2" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR"/>
                <enum offset="3" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR"/>
                <enum offset="4" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR"/>
                <enum offset="5" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR"/>
                <enum offset="6" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR"/>
                <enum offset="7" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR"/>
                <enum offset="8" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR"/>
                <enum offset="9" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR"/>
                <enum offset="10" extends="VkStructureType"             name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR"/>
                <enum bitpos="6" extends="VkQueueFlagBits"              name="VK_QUEUE_VIDEO_ENCODE_BIT_KHR"/>
                <enum bitpos="1" extends="VkVideoCodingControlFlagBitsKHR" name="VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR"/>
                <enum bitpos="2" extends="VkVideoCodingControlFlagBitsKHR" name="VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR"/>
                <enum bitpos="15" extends="VkBufferUsageFlagBits"       name="VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR"/>
                <enum bitpos="16" extends="VkBufferUsageFlagBits"       name="VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR"/>
                <enum bitpos="13" extends="VkImageUsageFlagBits"        name="VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR"/>
                <enum bitpos="14" extends="VkImageUsageFlagBits"        name="VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR"/>
                <enum bitpos="15" extends="VkImageUsageFlagBits"        name="VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR"/>
                <enum bitpos="27" extends="VkFormatFeatureFlagBits"     name="VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR"/>
                <enum bitpos="28" extends="VkFormatFeatureFlagBits"     name="VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR"/>
                <enum bitpos="1" extends="VkVideoSessionCreateFlagBitsKHR" name="VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR"/>
                <enum offset="0" extends="VkImageLayout"                name="VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR"/>
                <enum offset="1" extends="VkImageLayout"                name="VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR"/>
                <enum offset="2" extends="VkImageLayout"                name="VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR"/>
                <enum offset="0" extends="VkQueryType"                  name="VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR"/>
                <enum offset="0" extends="VkQueryResultStatusKHR" dir="-" name="VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR"/>

                <enum offset="0" extends="VkResult" dir="-"             name="VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR"/>

                <type name="VkVideoEncodeFlagsKHR"/>
                <type name="VkVideoEncodeInfoKHR"/>

                <type name="VkVideoEncodeCapabilityFlagBitsKHR"/>
                <type name="VkVideoEncodeCapabilityFlagsKHR"/>
                <type name="VkVideoEncodeCapabilitiesKHR"/>

                <type name="VkQueryPoolVideoEncodeFeedbackCreateInfoKHR"/>
                <type name="VkVideoEncodeFeedbackFlagBitsKHR"/>
                <type name="VkVideoEncodeFeedbackFlagsKHR"/>

                <type name="VkVideoEncodeUsageFlagBitsKHR"/>
                <type name="VkVideoEncodeUsageFlagsKHR"/>
                <type name="VkVideoEncodeContentFlagBitsKHR"/>
                <type name="VkVideoEncodeContentFlagsKHR"/>
                <type name="VkVideoEncodeTuningModeKHR"/>
                <type name="VkVideoEncodeUsageInfoKHR"/>

                <type name="VkVideoEncodeRateControlFlagsKHR"/>
                <type name="VkVideoEncodeRateControlModeFlagBitsKHR"/>
                <type name="VkVideoEncodeRateControlModeFlagsKHR"/>
                <type name="VkVideoEncodeRateControlInfoKHR"/>
                <type name="VkVideoEncodeRateControlLayerInfoKHR"/>

                <type name="VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR"/>
                <type name="VkVideoEncodeQualityLevelPropertiesKHR"/>
                <type name="VkVideoEncodeQualityLevelInfoKHR"/>

                <type name="VkVideoEncodeSessionParametersGetInfoKHR"/>
                <type name="VkVideoEncodeSessionParametersFeedbackInfoKHR"/>

                <command name="vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"/>
                <command name="vkGetEncodedVideoSessionParametersKHR"/>
                <command name="vkCmdEncodeVideoKHR"/>
            </require>
            <require depends="VK_KHR_format_feature_flags2,VK_VERSION_1_3">
                <enum bitpos="27" extends="VkFormatFeatureFlagBits2"        name="VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR"/>
                <enum bitpos="28" extends="VkFormatFeatureFlagBits2"        name="VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR"/>
            </require>
        </extension>
        <extension name="VK_NV_device_diagnostics_config" number="301" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="NV" contact="Kedarnath Thangudu @kthangudu" supported="vulkan">
            <require>
                <enum value="2"                                             name="VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_device_diagnostics_config&quot;"   name="VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType" name="VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV"/>
                <type name="VkPhysicalDeviceDiagnosticsConfigFeaturesNV"/>
                <type name="VkDeviceDiagnosticsConfigCreateInfoNV"/>
                <type name="VkDeviceDiagnosticsConfigFlagsNV"/>
                <type name="VkDeviceDiagnosticsConfigFlagBitsNV"/>
                <feature name="diagnosticsConfig" struct="VkPhysicalDeviceDiagnosticsConfigFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_QCOM_render_pass_store_ops" number="302" type="device" author="QCOM" contact="Matthew Netsch @mnetsch" supported="vulkan" nofeatures="true">
            <require>
                <enum value="2"                                             name="VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_render_pass_store_ops&quot;"     name="VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME"/>
                <enum extends="VkAttachmentStoreOp"                         name="VK_ATTACHMENT_STORE_OP_NONE_QCOM" alias="VK_ATTACHMENT_STORE_OP_NONE"/>
            </require>
        </extension>
        <extension name="VK_QCOM_extension_303" number="303" author="QCOM" contact="Matthew Netsch @mnetsch" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_QCOM_EXTENSION_303_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_extension_303&quot;"             name="VK_QCOM_EXTENSION_303_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_QCOM_extension_304" number="304" author="QCOM" contact="Matthew Netsch @mnetsch" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_QCOM_EXTENSION_304_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_extension_304&quot;"             name="VK_QCOM_EXTENSION_304_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_QCOM_extension_305" number="305" author="QCOM" contact="Matthew Netsch @mnetsch" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_QCOM_EXTENSION_305_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_extension_305&quot;"             name="VK_QCOM_EXTENSION_305_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_QCOM_extension_306" number="306" author="QCOM" contact="Matthew Netsch @mnetsch" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_QCOM_EXTENSION_306_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_extension_306&quot;"             name="VK_QCOM_EXTENSION_306_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_QCOM_extension_307" number="307" author="QCOM" contact="Matthew Netsch @mnetsch" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_QCOM_EXTENSION_307_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_extension_307&quot;"             name="VK_QCOM_EXTENSION_307_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_cuda_kernel_launch" number="308" type="device" author="NV" contact="Tristan Lorach @tlorach" supported="vulkan" provisional="true">
            <require>
                <enum value="2"                                             name="VK_NV_CUDA_KERNEL_LAUNCH_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_cuda_kernel_launch&quot;"          name="VK_NV_CUDA_KERNEL_LAUNCH_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV"/>
                <enum offset="4" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV"/>
                <enum offset="0" extends="VkObjectType"                     name="VK_OBJECT_TYPE_CUDA_MODULE_NV"/>
                <enum offset="1" extends="VkObjectType"                     name="VK_OBJECT_TYPE_CUDA_FUNCTION_NV"/>
                <type name="VkCudaModuleNV"/>
                <type name="VkCudaFunctionNV"/>
                <type name="VkCudaModuleCreateInfoNV"/>
                <type name="VkCudaFunctionCreateInfoNV"/>
                <type name="VkCudaLaunchInfoNV"/>
                <type name="VkPhysicalDeviceCudaKernelLaunchFeaturesNV"/>
                <type name="VkPhysicalDeviceCudaKernelLaunchPropertiesNV"/>
                <command name="vkCreateCudaModuleNV"/>
                <command name="vkGetCudaModuleCacheNV"/>
                <command name="vkCreateCudaFunctionNV"/>
                <command name="vkDestroyCudaModuleNV"/>
                <command name="vkDestroyCudaFunctionNV"/>
                <command name="vkCmdCudaLaunchKernelNV"/>
                <feature name="cudaKernelLaunchFeatures" struct="VkPhysicalDeviceCudaKernelLaunchFeaturesNV"/>
            </require>
            <require depends="VK_EXT_debug_report">
                <enum offset="0" extends="VkDebugReportObjectTypeEXT"       name="VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT"/>
                <enum offset="1" extends="VkDebugReportObjectTypeEXT"       name="VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_object_refresh" number="309" type="device" author="KHR" contact="Aidan Fabius @afabius" supported="vulkansc" ratified="vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_OBJECT_REFRESH_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_object_refresh&quot;"             name="VK_KHR_OBJECT_REFRESH_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_REFRESH_OBJECT_LIST_KHR"/>
                <type name="VkRefreshObjectListKHR"/>
                <type name="VkRefreshObjectKHR"/>
                <type name="VkRefreshObjectFlagBitsKHR"/>
                <type name="VkRefreshObjectFlagsKHR"/>
                <command name="vkCmdRefreshObjectsKHR"/>
                <command name="vkGetPhysicalDeviceRefreshableObjectTypesKHR"/>
            </require>
        </extension>
        <extension name="VK_QCOM_extension_310" number="310" author="QCOM" contact="Matthew Netsch @mnetsch" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_QCOM_EXTENSION_310_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_extension_310&quot;"             name="VK_QCOM_EXTENSION_310_EXTENSION_NAME"/>
                <enum bitpos="51" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_RESERVED_51_BIT_QCOM"/>
                <enum bitpos="52" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_RESERVED_52_BIT_QCOM"/>
                <enum bitpos="53" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_RESERVED_53_BIT_QCOM"/>
                <enum bitpos="54" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_RESERVED_54_BIT_QCOM"/>
            </require>
        </extension>
        <extension name="VK_NV_low_latency" number="311" author="NV" type="device" supported="vulkan" contact="Charles Hansen @cshansen" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_NV_LOW_LATENCY_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_low_latency&quot;"                 name="VK_NV_LOW_LATENCY_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV"/>
                <type name="VkQueryLowLatencySupportNV"/>
            </require>
        </extension>
        <extension name="VK_EXT_metal_objects" number="312" type="device" platform="metal" supported="vulkan" ratified="vulkan" author="EXT" contact="Bill Hollings @billhollings" nofeatures="true">
            <require>
                <enum value="2"                                             name="VK_EXT_METAL_OBJECTS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_metal_objects&quot;"              name="VK_EXT_METAL_OBJECTS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT"/>
                <enum offset="4" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT"/>
                <enum offset="5" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT"/>
                <enum offset="6" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT"/>
                <enum offset="7" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT"/>
                <enum offset="8" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT"/>
                <enum offset="9" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT"/>
                <enum offset="10" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT"/>
                <enum offset="11" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT"/>
                <type name="VkExportMetalObjectTypeFlagBitsEXT"/>
                <type name="VkExportMetalObjectTypeFlagsEXT"/>
                <type name="VkExportMetalObjectCreateInfoEXT"/>
                <type name="VkExportMetalObjectsInfoEXT"/>
                <type name="VkExportMetalDeviceInfoEXT"/>
                <type name="VkExportMetalCommandQueueInfoEXT"/>
                <type name="VkExportMetalBufferInfoEXT"/>
                <type name="VkImportMetalBufferInfoEXT"/>
                <type name="VkExportMetalTextureInfoEXT"/>
                <type name="VkImportMetalTextureInfoEXT"/>
                <type name="VkExportMetalIOSurfaceInfoEXT"/>
                <type name="VkImportMetalIOSurfaceInfoEXT"/>
                <type name="VkExportMetalSharedEventInfoEXT"/>
                <type name="VkImportMetalSharedEventInfoEXT"/>
                <type name="MTLDevice_id"/>
                <type name="MTLCommandQueue_id"/>
                <type name="MTLBuffer_id"/>
                <type name="MTLTexture_id"/>
                <type name="MTLSharedEvent_id"/>
                <type name="IOSurfaceRef"/>
                <command name="vkExportMetalObjectsEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_313" number="313" author="MVK" contact="Bill Hollings @billhollings" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_313_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_313&quot;"              name="VK_EXT_EXTENSION_313_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_314" number="314" author="AMD" contact="Martin Dinkov @mdinkov" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_AMD_EXTENSION_314_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_314&quot;"              name="VK_AMD_EXTENSION_314_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_synchronization2" number="315" type="device" author="KHR" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Tobias Hector @tobski" supported="vulkan,vulkansc" promotedto="VK_VERSION_1_3" ratified="vulkan,vulkansc">
            <require>
                <enum value="1"                                             name="VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_synchronization2&quot;"           name="VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR" alias="VK_STRUCTURE_TYPE_MEMORY_BARRIER_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR" alias="VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR" alias="VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR" alias="VK_STRUCTURE_TYPE_DEPENDENCY_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR" alias="VK_STRUCTURE_TYPE_SUBMIT_INFO_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR" alias="VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR" alias="VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES"/>
                <enum extends="VkEventCreateFlagBits"                       name="VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR" alias="VK_EVENT_CREATE_DEVICE_ONLY_BIT"/>
                <enum extends="VkImageLayout"                               name="VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR" alias="VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL"/>
                <enum extends="VkImageLayout"                               name="VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR" alias="VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL"/>
                <enum extends="VkPipelineStageFlagBits"                     name="VK_PIPELINE_STAGE_NONE_KHR" alias="VK_PIPELINE_STAGE_NONE"/>
                <enum extends="VkAccessFlagBits"                            name="VK_ACCESS_NONE_KHR" alias="VK_ACCESS_NONE"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_NONE_KHR" alias="VK_ACCESS_2_NONE"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR" alias="VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_INDEX_READ_BIT_KHR" alias="VK_ACCESS_2_INDEX_READ_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR" alias="VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_UNIFORM_READ_BIT_KHR" alias="VK_ACCESS_2_UNIFORM_READ_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR" alias="VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_SHADER_READ_BIT_KHR" alias="VK_ACCESS_2_SHADER_READ_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_SHADER_WRITE_BIT_KHR" alias="VK_ACCESS_2_SHADER_WRITE_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR" alias="VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR" alias="VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR" alias="VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR" alias="VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_TRANSFER_READ_BIT_KHR" alias="VK_ACCESS_2_TRANSFER_READ_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR" alias="VK_ACCESS_2_TRANSFER_WRITE_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_HOST_READ_BIT_KHR" alias="VK_ACCESS_2_HOST_READ_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_HOST_WRITE_BIT_KHR" alias="VK_ACCESS_2_HOST_WRITE_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_MEMORY_READ_BIT_KHR" alias="VK_ACCESS_2_MEMORY_READ_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_MEMORY_WRITE_BIT_KHR" alias="VK_ACCESS_2_MEMORY_WRITE_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR" alias="VK_ACCESS_2_SHADER_SAMPLED_READ_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR" alias="VK_ACCESS_2_SHADER_STORAGE_READ_BIT"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR" alias="VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_NONE_KHR" alias="VK_PIPELINE_STAGE_2_NONE"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR" alias="VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR" alias="VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR" alias="VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR" alias="VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR" alias="VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR" alias="VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR" alias="VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR" alias="VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR" alias="VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR" alias="VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR" alias="VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR" alias="VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR" alias="VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR" alias="VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR" alias="VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_HOST_BIT_KHR" alias="VK_PIPELINE_STAGE_2_HOST_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR" alias="VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR" alias="VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_COPY_BIT_KHR" alias="VK_PIPELINE_STAGE_2_COPY_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR" alias="VK_PIPELINE_STAGE_2_RESOLVE_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_BLIT_BIT_KHR" alias="VK_PIPELINE_STAGE_2_BLIT_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR" alias="VK_PIPELINE_STAGE_2_CLEAR_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR" alias="VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR" alias="VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR" alias="VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT"/>
                <enum extends="VkSubmitFlagBits"                            name="VK_SUBMIT_PROTECTED_BIT_KHR" alias="VK_SUBMIT_PROTECTED_BIT"/>
                <type name="VkFlags64"/>
                <type name="VkPipelineStageFlags2KHR"/>
                <type name="VkPipelineStageFlagBits2KHR"/>
                <type name="VkAccessFlags2KHR"/>
                <type name="VkAccessFlagBits2KHR"/>
                <type name="VkMemoryBarrier2KHR"/>
                <type name="VkBufferMemoryBarrier2KHR"/>
                <type name="VkImageMemoryBarrier2KHR"/>
                <type name="VkDependencyInfoKHR"/>
                <type name="VkSubmitInfo2KHR"/>
                <type name="VkSemaphoreSubmitInfoKHR"/>
                <type name="VkCommandBufferSubmitInfoKHR"/>
                <type name="VkSubmitFlagBitsKHR"/>
                <type name="VkSubmitFlagsKHR"/>
                <type name="VkPhysicalDeviceSynchronization2FeaturesKHR"/>
                <command name="vkCmdSetEvent2KHR"/>
                <command name="vkCmdResetEvent2KHR"/>
                <command name="vkCmdWaitEvents2KHR"/>
                <command name="vkCmdPipelineBarrier2KHR"/>
                <command name="vkCmdWriteTimestamp2KHR"/>
                <command name="vkQueueSubmit2KHR"/>
                <feature name="synchronization2" struct="VkPhysicalDeviceSynchronization2FeaturesKHR"/>
            </require>
            <require depends="VK_EXT_transform_feedback">
                <enum bitpos="24" extends="VkPipelineStageFlagBits2"        name="VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT"/>
                <enum bitpos="25" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT"/>
                <enum bitpos="26" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT"/>
                <enum bitpos="27" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT"/>
            </require>
            <require depends="VK_EXT_conditional_rendering">
                <enum bitpos="18" extends="VkPipelineStageFlagBits2"        name="VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT" comment="A pipeline stage for conditional rendering predicate fetch"/>
                <enum bitpos="20" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT" comment="read access flag for reading conditional rendering predicate"/>
            </require>
            <require depends="VK_NV_device_generated_commands">
                <enum bitpos="17" extends="VkPipelineStageFlagBits2"        name="VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV"/>
                <enum bitpos="17" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV"/>
                <enum bitpos="18" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV"/>
            </require>
            <require depends="VK_EXT_device_generated_commands" api="vulkan" comment="Remove 'api' attribute once gitlab #4074 is fixed">
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT" alias="VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_EXT" alias="VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_EXT" alias="VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV"/>
            </require>
            <require depends="VK_KHR_fragment_shading_rate">
                <enum bitpos="22" extends="VkPipelineStageFlagBits2"        name="VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"/>
                <enum bitpos="23" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR"/>
            </require>
            <require depends="VK_NV_shading_rate_image">
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV" alias="VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV"    alias="VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR"/>
            </require>
            <require depends="VK_KHR_acceleration_structure">
                <enum bitpos="25" extends="VkPipelineStageFlagBits2"        name="VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR"/>
                <enum bitpos="21" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR"/>
                <enum bitpos="22" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR"/>
            </require>
            <require depends="VK_KHR_ray_tracing_pipeline">
                <enum bitpos="21" extends="VkPipelineStageFlagBits2"        name="VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR"/>
            </require>
            <require depends="VK_NV_ray_tracing">
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV" alias="VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV" alias="VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV" alias="VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR"/>
                <enum extends="VkAccessFlagBits2"                           name="VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV" alias="VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR"/>
            </require>
            <require depends="VK_EXT_fragment_density_map">
                <enum bitpos="23" extends="VkPipelineStageFlagBits2"        name="VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT"/>
                <enum bitpos="24" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT"/>
            </require>
            <require depends="VK_EXT_blend_operation_advanced">
                <enum bitpos="19" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT"/>
            </require>
            <require depends="VK_NV_mesh_shader">
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV" alias="VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT"/>
                <enum extends="VkPipelineStageFlagBits2"                    name="VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV" alias="VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT"/>
            </require>
            <require depends="VK_EXT_mesh_shader">
                <enum bitpos="19" extends="VkPipelineStageFlagBits2"        name="VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT"/>
                <enum bitpos="20" extends="VkPipelineStageFlagBits2"        name="VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_316" number="316" author="AMD" contact="Martin Dinkov @mdinkov" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_AMD_EXTENSION_316_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_316&quot;"              name="VK_AMD_EXTENSION_316_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_descriptor_buffer" number="317" type="device" author="EXT" depends="((((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing),VK_VERSION_1_2)+VK_KHR_synchronization2),VK_VERSION_1_3" contact="Tobias Hector @tobski" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                                 name="VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_descriptor_buffer&quot;"              name="VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT"/>
                <enum offset="2" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT"/>
                <enum offset="3" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT"/>
                <enum offset="4" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT"/>
                <enum offset="5" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"/>
                <enum offset="6" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"/>
                <enum offset="7" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"/>
                <enum offset="8" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"/>
                <enum offset="10" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT"/>
                <enum offset="11" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT"/>
                <enum offset="12" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT"/>
                <enum bitpos="4" extends="VkDescriptorSetLayoutCreateFlagBits"  name="VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT"/>
                <enum bitpos="5" extends="VkDescriptorSetLayoutCreateFlagBits"  name="VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT"/>
                <enum bitpos="21" extends="VkBufferUsageFlagBits"               name="VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT"/>
                <enum bitpos="22" extends="VkBufferUsageFlagBits"               name="VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT"/>
                <enum bitpos="26" extends="VkBufferUsageFlagBits"               name="VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT"/>
                <enum bitpos="5" extends="VkBufferCreateFlagBits"               name="VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT"/>
                <enum bitpos="16" extends="VkImageCreateFlagBits"               name="VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT"/>
                <enum bitpos="2" extends="VkImageViewCreateFlagBits"            name="VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT"/>
                <enum bitpos="3" extends="VkSamplerCreateFlagBits"              name="VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT"/>
                <enum bitpos="3" extends="VkAccelerationStructureCreateFlagBitsKHR" name="VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT"/>
                <enum bitpos="41" extends="VkAccessFlagBits2"                   name="VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT"/>
                <enum bitpos="29"  extends="VkPipelineCreateFlagBits"           name="VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT"/>
                <type name="VkPhysicalDeviceDescriptorBufferPropertiesEXT"/>
                <type name="VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT"/>
                <type name="VkPhysicalDeviceDescriptorBufferFeaturesEXT"/>
                <type name="VkDescriptorAddressInfoEXT"/>
                <type name="VkDescriptorBufferBindingInfoEXT"/>
                <type name="VkDescriptorBufferBindingPushDescriptorBufferHandleEXT"/>
                <type name="VkDescriptorDataEXT"/>
                <type name="VkDescriptorGetInfoEXT"/>
                <type name="VkBufferCaptureDescriptorDataInfoEXT"/>
                <type name="VkImageCaptureDescriptorDataInfoEXT"/>
                <type name="VkImageViewCaptureDescriptorDataInfoEXT"/>
                <type name="VkSamplerCaptureDescriptorDataInfoEXT"/>
                <type name="VkOpaqueCaptureDescriptorDataCreateInfoEXT"/>
                <command name="vkGetDescriptorSetLayoutSizeEXT"/>
                <command name="vkGetDescriptorSetLayoutBindingOffsetEXT"/>
                <command name="vkGetDescriptorEXT"/>
                <command name="vkCmdBindDescriptorBuffersEXT"/>
                <command name="vkCmdSetDescriptorBufferOffsetsEXT"/>
                <command name="vkCmdBindDescriptorBufferEmbeddedSamplersEXT"/>
                <command name="vkGetBufferOpaqueCaptureDescriptorDataEXT"/>
                <command name="vkGetImageOpaqueCaptureDescriptorDataEXT"/>
                <command name="vkGetImageViewOpaqueCaptureDescriptorDataEXT"/>
                <command name="vkGetSamplerOpaqueCaptureDescriptorDataEXT"/>
                <feature name="descriptorBuffer" struct="VkPhysicalDeviceDescriptorBufferFeaturesEXT"/>
            </require>
            <require depends="VK_KHR_acceleration_structure,VK_NV_ray_tracing">
                <enum offset="9" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"/>
                <type name="VkAccelerationStructureCaptureDescriptorDataInfoEXT"/>
                <command name="vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_318" number="318" author="AMD" contact="Martin Dinkov @mdinkov" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_AMD_EXTENSION_318_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_318&quot;"              name="VK_AMD_EXTENSION_318_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_319" number="319" author="AMD" contact="Martin Dinkov @mdinkov" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_AMD_EXTENSION_319_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_319&quot;"              name="VK_AMD_EXTENSION_319_EXTENSION_NAME"/>
                <enum bitpos="3" extends="VkDescriptorSetLayoutCreateFlagBits" name="VK_DESCRIPTOR_SET_LAYOUT_CREATE_RESERVED_3_BIT_AMD"/>
                <enum bitpos="0" extends="VkPipelineLayoutCreateFlagBits" name="VK_PIPELINE_LAYOUT_CREATE_RESERVED_0_BIT_AMD"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_320" number="320" author="AMD" contact="Martin Dinkov @mdinkov" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_AMD_EXTENSION_320_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_320&quot;"              name="VK_AMD_EXTENSION_320_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_graphics_pipeline_library" number="321" type="device" depends="(VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_pipeline_library" author="AMD" contact="Tobias Hector @tobski" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_graphics_pipeline_library&quot;"  name="VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME"/>
                <type name="VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT"/>
                <type name="VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT"/>
                <type name="VkGraphicsPipelineLibraryCreateInfoEXT"/>
                <type name="VkGraphicsPipelineLibraryFlagBitsEXT"/>
                <type name="VkGraphicsPipelineLibraryFlagsEXT"/>
                <type name="VkPipelineLayoutCreateFlagBits"/>
                <enum offset="0" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT"/>
                <enum offset="2" extends="VkStructureType" name="VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT"/>
                <enum bitpos="23" extends="VkPipelineCreateFlagBits" name="VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT"/>
                <enum bitpos="10" extends="VkPipelineCreateFlagBits" name="VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT"/>
                <enum bitpos="1" extends="VkPipelineLayoutCreateFlagBits" name="VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT"/>
                <feature name="graphicsPipelineLibrary" struct="VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_AMD_shader_early_and_late_fragment_tests" number="322" author="EXT" contact="Tobias Hector @tobski" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_shader_early_and_late_fragment_tests&quot;" name="VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME"/>
                <type name="VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD"/>
                <enum offset="0" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD"/>
                <feature name="shaderEarlyAndLateFragmentTests" struct="VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD"/>
            </require>
        </extension>
        <extension name="VK_KHR_fragment_shader_barycentric" number="323" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="KHR" contact="Stu Smith" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                              name="VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_fragment_shader_barycentric&quot;" name="VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType" extnumber="204"   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR"/>
                <enum offset="0" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR"/>
                <type name="VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR"/>
                <type name="VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR"/>
                <feature name="fragmentShaderBarycentric" struct="VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_shader_subgroup_uniform_control_flow" number="324" type="device" depends="VK_VERSION_1_1" author="KHR" contact="Alan Baker @alan-baker" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1" name="VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shader_subgroup_uniform_control_flow&quot;" name="VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR"/>
                <type name="VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR"/>
                <feature name="shaderSubgroupUniformControlFlow" struct="VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_325" number="325" author="KHR" contact="Ralph Potter gitlab:@r_potter" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_325_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_325&quot;"              name="VK_KHR_EXTENSION_325_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_zero_initialize_workgroup_memory" number="326" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="KHR" contact="Alan Baker @alan-baker" supported="vulkan" promotedto="VK_VERSION_1_3" ratified="vulkan">
            <require>
                <enum value="1"                                                   name="VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_zero_initialize_workgroup_memory&quot;" name="VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES"/>
                <type name="VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR"/>
                <feature name="shaderZeroInitializeWorkgroupMemory" struct="VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_NV_fragment_shading_rate_enums" number="327" type="device" depends="VK_KHR_fragment_shading_rate" author="NV" contact="Pat Brown @nvpbrown" supported="vulkan">
            <require>
                <enum value="1"                                                 name="VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_fragment_shading_rate_enums&quot;" name="VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV"/>
                <enum offset="1" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV"/>
                <enum offset="2" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV"/>
                <type name="VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV"/>
                <type name="VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV"/>
                <type name="VkPipelineFragmentShadingRateEnumStateCreateInfoNV"/>
                <type name="VkFragmentShadingRateNV"/>
                <type name="VkFragmentShadingRateTypeNV"/>
                <command name="vkCmdSetFragmentShadingRateEnumNV"/>
                <feature name="fragmentShadingRateEnums" struct="VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_ray_tracing_motion_blur" number="328" type="device" depends="VK_KHR_ray_tracing_pipeline" author="NV" contact="Eric Werness" supported="vulkan">
            <require>
                <enum value="1"                                                    name="VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_ray_tracing_motion_blur&quot;"            name="VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV"/>
                <enum offset="1" extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV"/>
                <enum offset="2" extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV"/>
                <enum bitpos="5" extends="VkBuildAccelerationStructureFlagBitsKHR" name="VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV"/>
                <enum bitpos="2" extends="VkAccelerationStructureCreateFlagBitsKHR" name="VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV"/>
                <enum bitpos="20" extends="VkPipelineCreateFlagBits"               name="VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV"/>
                <type name="VkAccelerationStructureGeometryMotionTrianglesDataNV"/>
                <type name="VkAccelerationStructureMotionInfoNV"/>
                <type name="VkAccelerationStructureMotionInstanceNV"/>
                <type name="VkAccelerationStructureMotionInstanceDataNV"/>
                <type name="VkAccelerationStructureMatrixMotionInstanceNV"/>
                <type name="VkAccelerationStructureSRTMotionInstanceNV"/>
                <type name="VkSRTDataNV"/>
                <type name="VkAccelerationStructureMotionInstanceTypeNV"/>
                <type name="VkPhysicalDeviceRayTracingMotionBlurFeaturesNV"/>
                <type name="VkAccelerationStructureMotionInfoFlagsNV"/>
                <type name="VkAccelerationStructureMotionInstanceFlagsNV"/>
                <feature name="rayTracingMotionBlur" struct="VkPhysicalDeviceRayTracingMotionBlurFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_EXT_mesh_shader" number="329" type="device" depends="VK_KHR_spirv_1_4" author="EXT" sortorder="1" contact="Christoph Kubisch @pixeljetstream" supported="vulkan">
            <require>
                <enum value="1"                                         name="VK_EXT_MESH_SHADER_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_mesh_shader&quot;"            name="VK_EXT_MESH_SHADER_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT"/>
                <enum bitpos="6" extends="VkShaderStageFlagBits"        name="VK_SHADER_STAGE_TASK_BIT_EXT"/>
                <enum bitpos="7" extends="VkShaderStageFlagBits"        name="VK_SHADER_STAGE_MESH_BIT_EXT"/>
                <enum bitpos="19" extends="VkPipelineStageFlagBits"     name="VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT"/>
                <enum bitpos="20" extends="VkPipelineStageFlagBits"     name="VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT"/>
                <enum offset="0" extends="VkQueryType"                  name="VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT"/>
                <enum bitpos="11" extends="VkQueryPipelineStatisticFlagBits" name="VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT"/>
                <enum bitpos="12" extends="VkQueryPipelineStatisticFlagBits" name="VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT"/>
                <command name="vkCmdDrawMeshTasksEXT"/>
                <command name="vkCmdDrawMeshTasksIndirectEXT"/>
                <type name="VkPhysicalDeviceMeshShaderFeaturesEXT"/>
                <type name="VkPhysicalDeviceMeshShaderPropertiesEXT"/>
                <type name="VkDrawMeshTasksIndirectCommandEXT"/>
                <feature name="taskShader" struct="VkPhysicalDeviceMeshShaderFeaturesEXT"/>
                <feature name="meshShader" struct="VkPhysicalDeviceMeshShaderFeaturesEXT"/>
            </require>
            <require depends="VK_KHR_draw_indirect_count,VK_VERSION_1_2">
                <command name="vkCmdDrawMeshTasksIndirectCountEXT"/>
            </require>
            <require depends="VK_NV_device_generated_commands">
                <enum offset="0" extends="VkIndirectCommandsTokenTypeNV" name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV"/>
            </require>
            <require depends="VK_EXT_device_generated_commands">
                <enum offset="0" extends="VkIndirectCommandsTokenTypeEXT" name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_EXT"/>
                <enum offset="1" extends="VkIndirectCommandsTokenTypeEXT" name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_EXT"/>
            </require>
            <require depends="VK_KHR_fragment_shading_rate+VkPhysicalDeviceMeshShaderFeaturesEXT::primitiveFragmentShadingRateMeshShader">
                <feature name="primitiveFragmentShadingRate" struct="VkPhysicalDeviceFragmentShadingRateFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_330" number="330" author="NV" contact="Liam Middlebrook @liam-middlebrook" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_NV_EXTENSION_330_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_330&quot;"               name="VK_NV_EXTENSION_330_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_ycbcr_2plane_444_formats" number="331" type="device" depends="VK_KHR_sampler_ycbcr_conversion,VK_VERSION_1_1" author="EXT" contact="Tony Zlatinski @tzlatinski" supported="vulkan,vulkansc" promotedto="VK_VERSION_1_3" ratified="vulkansc">
            <require>
                <comment>
                    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT and
                    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT
                    were not promoted to Vulkan 1.3.
                </comment>
                <enum value="1"                                           name="VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_ycbcr_2plane_444_formats&quot;" name="VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT"/>
                <enum extends="VkFormat"                                  name="VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT" alias="VK_FORMAT_G8_B8R8_2PLANE_444_UNORM"/>
                <enum extends="VkFormat"                                  name="VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT" alias="VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16"/>
                <enum extends="VkFormat"                                  name="VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT" alias="VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16"/>
                <enum extends="VkFormat"                                  name="VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT" alias="VK_FORMAT_G16_B16R16_2PLANE_444_UNORM"/>
                <type name="VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT"/>
                <feature name="ycbcr2plane444Formats" struct="VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_332" number="332" author="NV" contact="Tony Zlatinski @tzlatinski" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_NV_EXTENSION_332_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_332&quot;"               name="VK_NV_EXTENSION_332_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_fragment_density_map2" number="333" type="device" depends="VK_EXT_fragment_density_map" author="EXT" contact="Matthew Netsch @mnetsch" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_fragment_density_map2&quot;"      name="VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME"/>
                <enum offset="0"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT"/>
                <enum offset="1"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT"/>
                <enum bitpos="1"  extends="VkImageViewCreateFlagBits"       name="VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT"/>
                <type name="VkPhysicalDeviceFragmentDensityMap2FeaturesEXT"/>
                <type name="VkPhysicalDeviceFragmentDensityMap2PropertiesEXT"/>
                <feature name="fragmentDensityMapDeferred" struct="VkPhysicalDeviceFragmentDensityMap2FeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_QCOM_rotated_copy_commands" number="334" type="device" depends="VK_KHR_copy_commands2,VK_VERSION_1_3" author="QCOM" contact="Matthew Netsch @mnetsch" supported="vulkan" nofeatures="true">
            <require>
                <enum value="2"                                             name="VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_rotated_copy_commands&quot;"     name="VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM"/>
                <type name="VkCopyCommandTransformInfoQCOM"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_335" number="335" type="device" author="KHR" contact="Mark Bellamy @mark.bellamy_arm" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_335_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_335&quot;"              name="VK_KHR_EXTENSION_335_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_image_robustness" number="336" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Graeme Leese @gnl21" supported="vulkan,vulkansc" promotedto="VK_VERSION_1_3" ratified="vulkansc">
            <require>
                <enum value="1"                                             name="VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_image_robustness&quot;"           name="VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES"/>
                <type name="VkPhysicalDeviceImageRobustnessFeaturesEXT"/>
                <feature name="robustImageAccess" struct="VkPhysicalDeviceImageRobustnessFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_workgroup_memory_explicit_layout" number="337" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="KHR" contact="Caio Marcelo de Oliveira Filho @cmarcelo" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                                      name="VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_workgroup_memory_explicit_layout&quot;"    name="VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                           name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR"/>
                <type name="VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR"/>
                <feature name="workgroupMemoryExplicitLayout" struct="VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_copy_commands2" number="338" author="KHR" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Matthew Netsch @mnetsch" supported="vulkan,vulkansc" promotedto="VK_VERSION_1_3" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_COPY_COMMANDS_2_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_copy_commands2&quot;"             name="VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR" alias="VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR" alias="VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR" alias="VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR" alias="VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR" alias="VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR" alias="VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR" alias="VK_STRUCTURE_TYPE_BUFFER_COPY_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR" alias="VK_STRUCTURE_TYPE_IMAGE_COPY_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR" alias="VK_STRUCTURE_TYPE_IMAGE_BLIT_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR" alias="VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR" alias="VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2"/>
                <type name="VkCopyBufferInfo2KHR"/>
                <type name="VkCopyImageInfo2KHR"/>
                <type name="VkCopyBufferToImageInfo2KHR"/>
                <type name="VkCopyImageToBufferInfo2KHR"/>
                <type name="VkBlitImageInfo2KHR"/>
                <type name="VkResolveImageInfo2KHR"/>
                <type name="VkBufferCopy2KHR"/>
                <type name="VkImageCopy2KHR"/>
                <type name="VkImageBlit2KHR"/>
                <type name="VkBufferImageCopy2KHR"/>
                <type name="VkImageResolve2KHR"/>
                <command name="vkCmdCopyBuffer2KHR"/>
                <command name="vkCmdCopyImage2KHR"/>
                <command name="vkCmdCopyBufferToImage2KHR"/>
                <command name="vkCmdCopyImageToBuffer2KHR"/>
                <command name="vkCmdBlitImage2KHR"/>
                <command name="vkCmdResolveImage2KHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_image_compression_control" number="339" type="device" author="EXT" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_image_compression_control&quot;"  name="VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT"/>
                <type name="VkPhysicalDeviceImageCompressionControlFeaturesEXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT"/>
                <type name="VkImageCompressionControlEXT"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT" alias="VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2"/>
                <type name="VkSubresourceLayout2EXT"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT" alias="VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2"/>
                <type name="VkImageSubresource2EXT"/>
                <enum offset="4" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT"/>
                <type name="VkImageCompressionPropertiesEXT"/>
                <type                                                       name="VkImageCompressionFlagBitsEXT"/>
                <type                                                       name="VkImageCompressionFlagsEXT"/>
                <type                                                       name="VkImageCompressionFixedRateFlagBitsEXT"/>
                <type                                                       name="VkImageCompressionFixedRateFlagsEXT"/>
                <enum offset="0" dir="-" extends="VkResult" name="VK_ERROR_COMPRESSION_EXHAUSTED_EXT"/>
                <command name="vkGetImageSubresourceLayout2EXT"/>
                <feature name="imageCompressionControl" struct="VkPhysicalDeviceImageCompressionControlFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_attachment_feedback_loop_layout" number="340" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Joshua Ashton @Joshua-Ashton" supported="vulkan" ratified="vulkan" specialuse="glemulation,d3demulation">
            <require>
                <enum value="2"                                                    name="VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_attachment_feedback_loop_layout&quot;"   name="VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT"/>
                <enum offset="0" extends="VkImageLayout"                           name="VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT"/>
                <enum bitpos="19" extends="VkImageUsageFlagBits"                   name="VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT"/>
                <enum bitpos="25" extends="VkPipelineCreateFlagBits"               name="VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT"/>
                <enum bitpos="26" extends="VkPipelineCreateFlagBits"               name="VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT"/>
                <enum bitpos="3"  extends="VkDependencyFlagBits"                   name="VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT" comment="Dependency may be a feedback loop"/>
                <type name="VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT"/>
                <feature name="attachmentFeedbackLoopLayout" struct="VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_4444_formats" number="341" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Joshua Ashton @Joshua-Ashton" supported="vulkan,vulkansc" promotedto="VK_VERSION_1_3" ratified="vulkansc">
            <require>
                <comment>
                    VkPhysicalDevice4444FormatsFeaturesEXT and
                    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT
                    were not promoted to Vulkan 1.3.
                </comment>
                <enum value="1"                                             name="VK_EXT_4444_FORMATS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_4444_formats&quot;"               name="VK_EXT_4444_FORMATS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT" alias="VK_FORMAT_A4R4G4B4_UNORM_PACK16"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT" alias="VK_FORMAT_A4B4G4R4_UNORM_PACK16"/>
                <type name="VkPhysicalDevice4444FormatsFeaturesEXT"/>
                <feature name="formatA4R4G4B4" struct="VkPhysicalDevice4444FormatsFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_device_fault" number="342" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Ralph Potter gitlab:@r_potter" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="2"                                             name="VK_EXT_DEVICE_FAULT_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_device_fault&quot;"               name="VK_EXT_DEVICE_FAULT_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT"/>
                <type name="VkPhysicalDeviceFaultFeaturesEXT"/>
                <type name="VkDeviceFaultCountsEXT"/>
                <type name="VkDeviceFaultInfoEXT"/>
                <type name="VkDeviceFaultAddressInfoEXT"/>
                <type name="VkDeviceFaultAddressTypeEXT"/>
                <type name="VkDeviceFaultVendorInfoEXT"/>
                <type name="VkDeviceFaultVendorBinaryHeaderVersionEXT"/>
                <type name="VkDeviceFaultVendorBinaryHeaderVersionOneEXT"/>
                <command name="vkGetDeviceFaultInfoEXT"/>
                <feature name="deviceFault" struct="VkPhysicalDeviceFaultFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_ARM_rasterization_order_attachment_access" number="343" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="ARM" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="vulkan" promotedto="VK_EXT_rasterization_order_attachment_access" nofeatures="true">
            <require>
                <enum value="1"                                                        name="VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION"/>
                <enum value="&quot;VK_ARM_rasterization_order_attachment_access&quot;" name="VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT"/>
                <type name="VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM"/>
                <enum extends="VkPipelineColorBlendStateCreateFlagBits"     name="VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM" alias="VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT"/>
                <enum extends="VkPipelineDepthStencilStateCreateFlagBits"   name="VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM" alias="VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT"/>
                <enum extends="VkPipelineDepthStencilStateCreateFlagBits"   name="VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM" alias="VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT"/>
                <enum extends="VkSubpassDescriptionFlagBits"                name="VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM" alias="VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT"/>
                <enum extends="VkSubpassDescriptionFlagBits"                name="VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM" alias="VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT"/>
                <enum extends="VkSubpassDescriptionFlagBits"                name="VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM" alias="VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT"/>
            </require>
        </extension>
        <extension name="VK_ARM_extension_344" number="344" author="ARM" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_ARM_EXTENSION_344_SPEC_VERSION"/>
                <enum value="&quot;VK_ARM_extension_344&quot;"              name="VK_ARM_EXTENSION_344_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_rgba10x6_formats" number="345" type="device" depends="VK_KHR_sampler_ycbcr_conversion,VK_VERSION_1_1" author="EXT" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="vulkan" ratified="vulkan">
             <require>
                    <enum value="1"                                                name="VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION"/>
                    <enum value="&quot;VK_EXT_rgba10x6_formats&quot;"              name="VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME"/>
                    <enum offset="0" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT"/>
                    <type name="VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT"/>
                    <feature name="formatRgba10x6WithoutYCbCrSampler" struct="VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_NV_acquire_winrt_display" number="346" type="device" depends="VK_EXT_direct_mode_display" author="NV" contact="Jeff Juliano @jjuliano" platform="win32" supported="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_NV_ACQUIRE_WINRT_DISPLAY_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_acquire_winrt_display&quot;"       name="VK_NV_ACQUIRE_WINRT_DISPLAY_EXTENSION_NAME"/>
                <command name="vkAcquireWinrtDisplayNV"/>
                <command name="vkGetWinrtDisplayNV"/>
            </require>
        </extension>
        <extension name="VK_EXT_directfb_surface" number="347" type="instance" depends="VK_KHR_surface" platform="directfb" supported="vulkan" author="EXT" contact="Nicolas Caramelli @caramelli" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_DIRECTFB_SURFACE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_directfb_surface&quot;"           name="VK_EXT_DIRECTFB_SURFACE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT"/>
                <type name="VkDirectFBSurfaceCreateFlagsEXT"/>
                <type name="VkDirectFBSurfaceCreateInfoEXT"/>
                <command name="vkCreateDirectFBSurfaceEXT"/>
                <command name="vkGetPhysicalDeviceDirectFBPresentationSupportEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_350" number="350" type="device" author="KHR" contact="Mark Bellamy @mark.bellamy_arm" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_350_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_350&quot;"              name="VK_KHR_EXTENSION_350_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_351" number="351" author="NV" contact="Liam Middlebrook @liam-middlebrook" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_NV_EXTENSION_351_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_351&quot;"               name="VK_NV_EXTENSION_351_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_VALVE_mutable_descriptor_type" number="352" type="device" supported="vulkan" author="VALVE" contact="Joshua Ashton @Joshua-Ashton,Hans-Kristian Arntzen @HansKristian-Work" specialuse="d3demulation" depends="VK_KHR_maintenance3" promotedto="VK_EXT_mutable_descriptor_type">
            <require>
                <enum value="1"                                                name="VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION"/>
                <enum value="&quot;VK_VALVE_mutable_descriptor_type&quot;"     name="VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                                name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT"/>
                <enum extends="VkStructureType"                                name="VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE" alias="VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT"/>
                <enum extends="VkDescriptorType"                               name="VK_DESCRIPTOR_TYPE_MUTABLE_VALVE" alias="VK_DESCRIPTOR_TYPE_MUTABLE_EXT"/>
                <enum extends="VkDescriptorPoolCreateFlagBits"                 name="VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE" alias="VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT"/>
                <enum extends="VkDescriptorSetLayoutCreateFlagBits"            name="VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE" alias="VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT"/>
                <type name="VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE"/>
                <type name="VkMutableDescriptorTypeListVALVE"/>
                <type name="VkMutableDescriptorTypeCreateInfoVALVE"/>
                <feature name="mutableDescriptorType" struct="VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE"/>
            </require>
        </extension>
        <extension name="VK_EXT_vertex_input_dynamic_state" number="353" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Piers Daniell @pdaniell-nv" supported="vulkan,vulkansc" ratified="vulkan,vulkansc">
            <require>
                <enum value="2"                                             name="VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_vertex_input_dynamic_state&quot;" name="VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT"/>
                <enum offset="0" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_VERTEX_INPUT_EXT"/>
                <type name="VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT"/>
                <type name="VkVertexInputBindingDescription2EXT"/>
                <type name="VkVertexInputAttributeDescription2EXT"/>
                <command name="vkCmdSetVertexInputEXT"/>
                <feature name="vertexInputDynamicState" struct="VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_physical_device_drm" number="354" author="EXT" type="device" contact="Simon Ser @emersion" supported="vulkan" ratified="vulkan" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_physical_device_drm&quot;"        name="VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT"/>
                <type name="VkPhysicalDeviceDrmPropertiesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_device_address_binding_report" number="355" type="device" depends="(VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_EXT_debug_utils" author="EXT" contact="Ralph Potter gitlab:@r_potter" specialuse="debugging,devtools" supported="vulkan">
            <require>
                <enum value="1"                                                 name="VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_device_address_binding_report&quot;"  name="VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT"/>
                <enum bitpos="3" extends="VkDebugUtilsMessageTypeFlagBitsEXT"   name="VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT"/>
                <type name="VkPhysicalDeviceAddressBindingReportFeaturesEXT"/>
                <type name="VkDeviceAddressBindingCallbackDataEXT"/>
                <type name="VkDeviceAddressBindingFlagsEXT"/>
                <type name="VkDeviceAddressBindingFlagBitsEXT"/>
                <type name="VkDeviceAddressBindingTypeEXT"/>
                <feature name="reportAddressBinding" struct="VkPhysicalDeviceAddressBindingReportFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_depth_clip_control" number="356" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Shahbaz Youssefi @syoussefi" supported="vulkan" ratified="vulkan" specialuse="glemulation">
            <require>
                <enum value="1"                                             name="VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_depth_clip_control&quot;"         name="VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT"/>
                <type name="VkPhysicalDeviceDepthClipControlFeaturesEXT"/>
                <type name="VkPipelineViewportDepthClipControlCreateInfoEXT"/>
                <feature name="depthClipControl" struct="VkPhysicalDeviceDepthClipControlFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_primitive_topology_list_restart" number="357" type="device" author="EXT" contact="Shahbaz Youssefi @syoussefi" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan" ratified="vulkan" specialuse="glemulation">
            <require>
                <enum value="1"                                             name="VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_primitive_topology_list_restart&quot;"           name="VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT"/>
                <type name="VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT"/>
                <feature name="primitiveTopologyListRestart" struct="VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_358" number="358" author="KHR" contact="Jeff Bolz @jeffbolznv" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_358_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_358&quot;"              name="VK_KHR_EXTENSION_358_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_359" number="359" author="EXT" contact="Bill Hollings @billhollings" supported="disabled" specialuse="glemulation">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_359_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_359&quot;"              name="VK_EXT_EXTENSION_359_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_360" number="360" author="EXT" contact="Bill Hollings @billhollings" supported="disabled" specialuse="glemulation">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_360_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_360&quot;"              name="VK_EXT_EXTENSION_360_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_format_feature_flags2" number="361" author="KHR" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Lionel Landwerlin @llandwerlin" supported="vulkan" promotedto="VK_VERSION_1_3" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="2"                                             name="VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_format_feature_flags2&quot;"      name="VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR" alias="VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR" alias="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR" alias="VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR" alias="VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR" alias="VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR" alias="VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR" alias="VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR" alias="VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR" alias="VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR" alias="VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR" alias="VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR" alias="VK_FORMAT_FEATURE_2_BLIT_SRC_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR" alias="VK_FORMAT_FEATURE_2_BLIT_DST_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR" alias="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR" alias="VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR" alias="VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR" alias="VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR" alias="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR" alias="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR" alias="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR" alias="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR" alias="VK_FORMAT_FEATURE_2_DISJOINT_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR" alias="VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR" alias="VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR" alias="VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT"/>
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR" alias="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT"/>
                <type                                                       name="VkFormatFeatureFlags2KHR"/>
                <type                                                       name="VkFormatFeatureFlagBits2KHR"/>
                <type                                                       name="VkFormatProperties3KHR"/>
            </require>
            <require depends="VK_VERSION_1_2,VK_EXT_sampler_filter_minmax">
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR" alias="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT"/>
            </require>
            <require depends="VK_EXT_filter_cubic,VK_IMG_filter_cubic">
                <enum extends="VkFormatFeatureFlagBits2"                    name="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT" alias="VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT"/>
            </require>
        </extension>
        <extension name="VK_EXT_present_mode_fifo_latest_ready" number="362" author="EXT" type="device" depends="VK_KHR_swapchain" contact="Lionel Duc @nvlduc" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                                 name="VK_EXT_PRESENT_MODE_FIFO_LATEST_READY_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_present_mode_fifo_latest_ready&quot;" name="VK_EXT_PRESENT_MODE_FIFO_LATEST_READY_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_MODE_FIFO_LATEST_READY_FEATURES_EXT"/>
                <enum offset="0" extends="VkPresentModeKHR"                     name="VK_PRESENT_MODE_FIFO_LATEST_READY_EXT"/>
                <type name="VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT"/>
                <feature name="presentModeFifoLatestReady" struct="VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_363" number="363" author="EXT" contact="Kaye Mason @chaleur" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_363_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_363&quot;"              name="VK_EXT_EXTENSION_363_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_FUCHSIA_extension_364" number="364" author="FUCHSIA" contact="Craig Stout @cdotstout" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_FUCHSIA_EXTENSION_364_SPEC_VERSION"/>
                <enum value="&quot;VK_FUCHSIA_extension_364&quot;"          name="VK_FUCHSIA_EXTENSION_364_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_FUCHSIA_external_memory" number="365" type="device" depends="(VK_KHR_external_memory_capabilities+VK_KHR_external_memory),VK_VERSION_1_1" author="FUCHSIA" contact="John Rosasco @rosasco" platform="fuchsia" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                name="VK_FUCHSIA_EXTERNAL_MEMORY_SPEC_VERSION"/>
                <enum value="&quot;VK_FUCHSIA_external_memory&quot;"           name="VK_FUCHSIA_EXTERNAL_MEMORY_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA"/>
                <enum offset="1" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA"/>
                <enum offset="2" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA"/>
                <enum bitpos="11" extends="VkExternalMemoryHandleTypeFlagBits" name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA"/>
                <type name="VkImportMemoryZirconHandleInfoFUCHSIA"/>
                <type name="VkMemoryZirconHandlePropertiesFUCHSIA"/>
                <type name="VkMemoryGetZirconHandleInfoFUCHSIA"/>
                <command name="vkGetMemoryZirconHandleFUCHSIA"/>
                <command name="vkGetMemoryZirconHandlePropertiesFUCHSIA"/>
            </require>
        </extension>
        <extension name="VK_FUCHSIA_external_semaphore" number="366" type="device" depends="VK_KHR_external_semaphore_capabilities+VK_KHR_external_semaphore" author="FUCHSIA" contact="John Rosasco @rosasco" platform="fuchsia" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                name="VK_FUCHSIA_EXTERNAL_SEMAPHORE_SPEC_VERSION"/>
                <enum value="&quot;VK_FUCHSIA_external_semaphore&quot;"        name="VK_FUCHSIA_EXTERNAL_SEMAPHORE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA"/>
                <enum offset="1" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA"/>
                <enum bitpos="7" extends="VkExternalSemaphoreHandleTypeFlagBits" name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA"/>
                <type name="VkImportSemaphoreZirconHandleInfoFUCHSIA"/>
                <type name="VkSemaphoreGetZirconHandleInfoFUCHSIA"/>
                <command name="vkImportSemaphoreZirconHandleFUCHSIA"/>
                <command name="vkGetSemaphoreZirconHandleFUCHSIA"/>
            </require>
        </extension>
        <extension name="VK_FUCHSIA_buffer_collection" number="367" type="device" depends="VK_FUCHSIA_external_memory+(VK_KHR_sampler_ycbcr_conversion,VK_VERSION_1_1)" author="FUCHSIA" contact="John Rosasco @rosasco" supported="vulkan" platform="fuchsia" nofeatures="true">
            <require>
                <enum value="2"                                         name="VK_FUCHSIA_BUFFER_COLLECTION_SPEC_VERSION"/>
                <enum value="&quot;VK_FUCHSIA_buffer_collection&quot;"  name="VK_FUCHSIA_BUFFER_COLLECTION_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA"/>
                <enum offset="0" extends="VkObjectType"                 name="VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA" comment="VkBufferCollectionFUCHSIA"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA"/>
                <enum offset="2" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA"/>
                <enum offset="3" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA"/>
                <enum offset="4" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA"/>
                <enum offset="5" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA"/>
                <enum offset="6" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA"/>
                <enum offset="7" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA"/>
                <enum offset="8" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA"/>
                <enum offset="9" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA"/>
                <type name="VkBufferCollectionFUCHSIA"/>
                <type name="VkBufferCollectionCreateInfoFUCHSIA"/>
                <type name="VkImportMemoryBufferCollectionFUCHSIA"/>
                <type name="VkBufferCollectionImageCreateInfoFUCHSIA"/>
                <type name="VkBufferConstraintsInfoFUCHSIA"/>
                <type name="VkBufferCollectionBufferCreateInfoFUCHSIA"/>
                <type name="VkBufferCollectionPropertiesFUCHSIA"/>
                <type name="VkImageFormatConstraintsFlagsFUCHSIA" comment="Will add VkImageFormatConstraintsFlagBitsFUCHSIA when bits are defined in the future"/>
                <type name="VkSysmemColorSpaceFUCHSIA"/>
                <type name="VkImageConstraintsInfoFlagBitsFUCHSIA"/>
                <type name="VkImageConstraintsInfoFlagsFUCHSIA"/>
                <type name="VkImageConstraintsInfoFUCHSIA"/>
                <type name="VkImageFormatConstraintsInfoFUCHSIA"/>
                <type name="VkBufferCollectionConstraintsInfoFUCHSIA"/>
                <command name="vkCreateBufferCollectionFUCHSIA"/>
                <command name="vkSetBufferCollectionImageConstraintsFUCHSIA"/>
                <command name="vkSetBufferCollectionBufferConstraintsFUCHSIA"/>
                <command name="vkDestroyBufferCollectionFUCHSIA"/>
                <command name="vkGetBufferCollectionPropertiesFUCHSIA"/>
            </require>
            <require depends="VK_EXT_debug_report">
                <enum offset="0" extends="VkDebugReportObjectTypeEXT"   name="VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT"/>
            </require>
        </extension>
        <extension name="VK_FUCHSIA_extension_368" number="368" author="FUCHSIA" contact="Craig Stout @cdotstout" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_FUCHSIA_EXTENSION_368_SPEC_VERSION"/>
                <enum value="&quot;VK_FUCHSIA_extension_368&quot;"          name="VK_FUCHSIA_EXTENSION_368_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_QCOM_extension_369" number="369" author="QCOM" contact="Matthew Netsch @mnetsch" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_QCOM_EXTENSION_369_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_extension_369&quot;"         name="VK_QCOM_EXTENSION_369_EXTENSION_NAME"/>
                <enum bitpos="4" extends="VkDescriptorBindingFlagBits"  name="VK_DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM"/>
            </require>
        </extension>
        <extension name="VK_HUAWEI_subpass_shading" number="370" type="device" author="HUAWEI" contact="Pan Gao @PanGao-h" depends="((VK_KHR_create_renderpass2,VK_VERSION_1_2)+VK_KHR_synchronization2),VK_VERSION_1_3" supported="vulkan">
            <require>
                <enum value="3"                                         name="VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION"/>
                <enum value="&quot;VK_HUAWEI_subpass_shading&quot;"         name="VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI"/>
                <enum offset="3" extends="VkPipelineBindPoint" extnumber="370" name="VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI"/>
                <enum bitpos="39" extends="VkPipelineStageFlagBits2"        name="VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI"/>
                <enum             extends="VkPipelineStageFlagBits2"        name="VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI" alias="VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI" deprecated="aliased"/>
                <enum bitpos="14" extends="VkShaderStageFlagBits"           name="VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI"/>
                <type name="VkSubpassShadingPipelineCreateInfoHUAWEI"/>
                <type name="VkPhysicalDeviceSubpassShadingFeaturesHUAWEI"/>
                <type name="VkPhysicalDeviceSubpassShadingPropertiesHUAWEI"/>
                <command name="vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI"/>
                <command name="vkCmdSubpassShadingHUAWEI"/>
                <feature name="subpassShading" struct="VkPhysicalDeviceSubpassShadingFeaturesHUAWEI"/>
            </require>
        </extension>
        <extension name="VK_HUAWEI_invocation_mask" number="371" type="device" depends="VK_KHR_ray_tracing_pipeline+(VK_KHR_synchronization2,VK_VERSION_1_3)" author="Huawei" contact="Pan Gao @PanGao-h" supported="vulkan">
            <require>
                <enum value="1"                                              name="VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION"/>
                <enum value="&quot;VK_HUAWEI_invocation_mask&quot;"        name="VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI"/>
                <enum bitpos="39" extends="VkAccessFlagBits2"                name="VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI"/>
                <enum bitpos="18" extends="VkImageUsageFlagBits"             name="VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI"/>
                <enum bitpos="40" extends="VkPipelineStageFlagBits2"         name="VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI"/>
                <type name="VkPhysicalDeviceInvocationMaskFeaturesHUAWEI"/>
                <command name="vkCmdBindInvocationMaskHUAWEI"/>
                <feature name="invocationMask" struct="VkPhysicalDeviceInvocationMaskFeaturesHUAWEI"/>
            </require>
        </extension>
        <extension name="VK_NV_external_memory_rdma" number="372" type="device" depends="VK_KHR_external_memory,VK_VERSION_1_1" author="NV" contact="Carsten Rohde @crohde" supported="vulkan">
            <require>
                <enum value="1"                                                 name="VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_external_memory_rdma&quot;"            name="VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV"/>
                <enum bitpos="8" extends="VkMemoryPropertyFlagBits"             name="VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV"/>
                <enum bitpos="12" extends="VkExternalMemoryHandleTypeFlagBits"  name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV"/>
                <type name="VkRemoteAddressNV"/>
                <type name="VkMemoryGetRemoteAddressInfoNV"/>
                <type name="VkPhysicalDeviceExternalMemoryRDMAFeaturesNV"/>
                <command name="vkGetMemoryRemoteAddressNV"/>
                <feature name="externalMemoryRDMA" struct="VkPhysicalDeviceExternalMemoryRDMAFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_EXT_pipeline_properties" number="373" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Mukund Keshava @mkeshavanv" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_pipeline_properties&quot;"        name="VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT"/>
                <enum extends="VkStructureType" name="VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT" alias="VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR"/>
                <type name="VkPipelineInfoEXT"/>
                <type name="VkPipelinePropertiesIdentifierEXT"/>
                <type name="VkPhysicalDevicePipelinePropertiesFeaturesEXT"/>
                <command name="vkGetPipelinePropertiesEXT"/>
                <feature name="pipelinePropertiesIdentifier" struct="VkPhysicalDevicePipelinePropertiesFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_NV_external_sci_sync" number="374" depends="VK_VERSION_1_1" platform="sci" type="device" author="NV" contact="Kai Zhang @kazhang" supported="vulkansc" deprecatedby="VK_NV_external_sci_sync2">
            <require>
                <enum value="2"                                         name="VK_NV_EXTERNAL_SCI_SYNC_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_external_sci_sync&quot;"       name="VK_NV_EXTERNAL_SCI_SYNC_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_IMPORT_FENCE_SCI_SYNC_INFO_NV"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_EXPORT_FENCE_SCI_SYNC_INFO_NV"/>
                <enum offset="2" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_FENCE_GET_SCI_SYNC_INFO_NV"/>
                <enum offset="3" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_SCI_SYNC_ATTRIBUTES_INFO_NV"/>
                <enum offset="4" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_SCI_SYNC_INFO_NV"/>
                <enum offset="5" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_SCI_SYNC_INFO_NV"/>
                <enum offset="6" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_SEMAPHORE_GET_SCI_SYNC_INFO_NV"/>
                <enum offset="7" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SCI_SYNC_FEATURES_NV"/>
                <enum bitpos="4" extends="VkExternalFenceHandleTypeFlagBits" name="VK_EXTERNAL_FENCE_HANDLE_TYPE_SCI_SYNC_OBJ_BIT_NV"/>
                <enum bitpos="5" extends="VkExternalFenceHandleTypeFlagBits" name="VK_EXTERNAL_FENCE_HANDLE_TYPE_SCI_SYNC_FENCE_BIT_NV"/>
                <enum bitpos="5" extends="VkExternalSemaphoreHandleTypeFlagBits" name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SCI_SYNC_OBJ_BIT_NV"/>
                <type name="VkSciSyncClientTypeNV"/>
                <type name="VkSciSyncPrimitiveTypeNV"/>
                <type name="VkExportFenceSciSyncInfoNV"/>
                <type name="VkImportFenceSciSyncInfoNV"/>
                <type name="VkFenceGetSciSyncInfoNV"/>
                <type name="VkSciSyncAttributesInfoNV"/>
                <type name="VkExportSemaphoreSciSyncInfoNV"/>
                <type name="VkImportSemaphoreSciSyncInfoNV"/>
                <type name="VkSemaphoreGetSciSyncInfoNV"/>
                <type name="VkPhysicalDeviceExternalSciSyncFeaturesNV"/>
                <command name="vkGetFenceSciSyncFenceNV"/>
                <command name="vkGetFenceSciSyncObjNV"/>
                <command name="vkImportFenceSciSyncFenceNV"/>
                <command name="vkImportFenceSciSyncObjNV"/>
                <command name="vkGetPhysicalDeviceSciSyncAttributesNV"/>
                <command name="vkGetSemaphoreSciSyncObjNV"/>
                <command name="vkImportSemaphoreSciSyncObjNV"/>
                <feature name="sciSyncFence,sciSyncSemaphore" struct="VkPhysicalDeviceExternalSciSyncFeaturesNV"/>
                <feature name="sciSyncImport,sciSyncExport" struct="VkPhysicalDeviceExternalSciSyncFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_external_memory_sci_buf" number="375" depends="VK_VERSION_1_1" platform="sci" type="device" author="NV" contact="Kai Zhang @kazhang" supported="vulkansc">
            <require>
                <enum value="2"                                         name="VK_NV_EXTERNAL_MEMORY_SCI_BUF_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_external_memory_sci_buf&quot;" name="VK_NV_EXTERNAL_MEMORY_SCI_BUF_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_IMPORT_MEMORY_SCI_BUF_INFO_NV"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_EXPORT_MEMORY_SCI_BUF_INFO_NV"/>
                <enum offset="2" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_MEMORY_GET_SCI_BUF_INFO_NV"/>
                <enum offset="3" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_MEMORY_SCI_BUF_PROPERTIES_NV"/>
                <enum offset="4" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCI_BUF_FEATURES_NV"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SCI_BUF_FEATURES_NV" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCI_BUF_FEATURES_NV"/>
                <enum bitpos="13" extends="VkExternalMemoryHandleTypeFlagBits"  name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCI_BUF_BIT_NV"/>
                <type name="VkExportMemorySciBufInfoNV"/>
                <type name="VkImportMemorySciBufInfoNV"/>
                <type name="VkMemoryGetSciBufInfoNV"/>
                <type name="VkMemorySciBufPropertiesNV"/>
                <type name="VkPhysicalDeviceExternalMemorySciBufFeaturesNV"/>
                <type name="VkPhysicalDeviceExternalSciBufFeaturesNV"/>
                <command name="vkGetMemorySciBufNV"/>
                <command name="vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV"/>
                <command name="vkGetPhysicalDeviceSciBufAttributesNV"/>
                <feature name="sciBufImport,sciBufExport" struct="VkPhysicalDeviceExternalSciBufFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_EXT_frame_boundary" number="376" type="device" author="EXT" contact="James Fitzpatrick @jamesfitzpatrick" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_EXT_FRAME_BOUNDARY_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_frame_boundary&quot;"         name="VK_EXT_FRAME_BOUNDARY_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT"/>
                <type name="VkPhysicalDeviceFrameBoundaryFeaturesEXT"/>
                <type name="VkFrameBoundaryEXT"/>
                <type name="VkFrameBoundaryFlagBitsEXT"/>
                <type name="VkFrameBoundaryFlagsEXT"/>
                <feature name="frameBoundary" struct="VkPhysicalDeviceFrameBoundaryFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_multisampled_render_to_single_sampled" number="377" type="device" depends="(VK_KHR_create_renderpass2+VK_KHR_depth_stencil_resolve),VK_VERSION_1_2" author="EXT" contact="Shahbaz Youssefi @syoussefi" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                                 name="VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_multisampled_render_to_single_sampled&quot;"   name="VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT"/>
                <enum offset="2" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT"/>
                <enum bitpos="18" extends="VkImageCreateFlagBits"               name="VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT"/>
                <type name="VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT"/>
                <type name="VkSubpassResolvePerformanceQueryEXT"/>
                <type name="VkMultisampledRenderToSingleSampledInfoEXT"/>
                <feature name="multisampledRenderToSingleSampled" struct="VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extended_dynamic_state2" number="378" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Vikram Kushwaha @vkushwaha-nv" supported="vulkan,vulkansc" promotedto="VK_VERSION_1_3" ratified="vulkansc">
            <require>
                <enum value="1"                                             name="VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extended_dynamic_state2&quot;"    name="VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT" comment="Not promoted to 1.3"/>
                <enum offset="0" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT" comment="Not promoted to 1.3"/>
                <enum extends="VkDynamicState"                              name="VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT" alias="VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE"/>
                <enum extends="VkDynamicState"                              name="VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT" alias="VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE"/>
                <enum offset="3" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_LOGIC_OP_EXT" comment="Not promoted to 1.3"/>
                <enum extends="VkDynamicState"                              name="VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT" alias="VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE"/>
                <type name="VkPhysicalDeviceExtendedDynamicState2FeaturesEXT" comment="Not promoted to 1.3"/>
                <command name="vkCmdSetPatchControlPointsEXT" comment="Not promoted to 1.3"/>
                <command name="vkCmdSetRasterizerDiscardEnableEXT"/>
                <command name="vkCmdSetDepthBiasEnableEXT"/>
                <command name="vkCmdSetLogicOpEXT" comment="Not promoted to 1.3"/>
                <command name="vkCmdSetPrimitiveRestartEnableEXT"/>
                <feature name="extendedDynamicState2" struct="VkPhysicalDeviceExtendedDynamicState2FeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_QNX_screen_surface" number="379" type="instance" depends="VK_KHR_surface" platform="screen" author="QNX" contact="Mike Gorchak @mgorchak-blackberry" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                         name="VK_QNX_SCREEN_SURFACE_SPEC_VERSION"/>
                <enum value="&quot;VK_QNX_screen_surface&quot;"         name="VK_QNX_SCREEN_SURFACE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX"/>
                <type name="VkScreenSurfaceCreateFlagsQNX"/>
                <type name="VkScreenSurfaceCreateInfoQNX"/>
                <command name="vkCreateScreenSurfaceQNX"/>
                <command name="vkGetPhysicalDeviceScreenPresentationSupportQNX"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_380" number="380" author="KHR" contact="James Jones @cubanismo" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_KHR_EXTENSION_380_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_380&quot;"          name="VK_KHR_EXTENSION_380_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_381" number="381" author="KHR" contact="James Jones @cubanismo" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_KHR_EXTENSION_381_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_381&quot;"          name="VK_KHR_EXTENSION_381_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_color_write_enable" number="382" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Sharif Elcott @selcott" supported="vulkan,vulkansc" ratified="vulkan,vulkansc">
            <require>
                <enum value="1"                                         name="VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_color_write_enable&quot;"     name="VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT"/>
                <enum offset="0" extends="VkDynamicState"               name="VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT"/>
                <type name="VkPhysicalDeviceColorWriteEnableFeaturesEXT"/>
                <type name="VkPipelineColorWriteCreateInfoEXT"/>
                <command name="vkCmdSetColorWriteEnableEXT"/>
                <feature name="colorWriteEnable" struct="VkPhysicalDeviceColorWriteEnableFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_primitives_generated_query" number="383" type="device" depends="VK_EXT_transform_feedback" author="EXT" contact="Shahbaz Youssefi @syoussefi" supported="vulkan" specialuse="glemulation" ratified="vulkan">
            <require>
                <enum value="1"                                                 name="VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_primitives_generated_query&quot;"     name="VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT"/>
                <enum offset="0" extends="VkQueryType"                          name="VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT"/>
                <type name="VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT"/>
                <feature name="primitivesGeneratedQuery" struct="VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_384" number="384" type="instance" author="EXT" contact="Chia-I Wu @olvaffe1" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_384_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_384&quot;"          name="VK_EXT_EXTENSION_384_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_MESA_extension_385" number="385" type="instance" author="MESA" contact="Chia-I Wu @olvaffe1" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_MESA_EXTENSION_385_SPEC_VERSION"/>
                <enum value="&quot;VK_MESA_extension_385&quot;"         name="VK_MESA_EXTENSION_385_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_GOOGLE_extension_386" number="386" author="GOOGLE" contact="Chia-I Wu @olvaffe1" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_GOOGLE_EXTENSION_386_SPEC_VERSION"/>
                <enum value="&quot;VK_GOOGLE_extension_386&quot;"       name="VK_GOOGLE_EXTENSION_386_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_ray_tracing_maintenance1" number="387" type="device" depends="VK_KHR_acceleration_structure" author="KHR" contact="Daniel Koch @dgkoch" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_ray_tracing_maintenance1&quot;"   name="VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR"/>
                <enum offset="0" extends="VkQueryType"                      name="VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR"/>
                <enum offset="1" extends="VkQueryType"                      name="VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR"/>
                <type name="VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR"/>
                <feature name="rayTracingMaintenance1" struct="VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR"/>
            </require>
            <require depends="VK_KHR_synchronization2,VK_VERSION_1_3">
                <!-- VkPipelineStageFlagBits bitpos="28" is reserved by this extension, but not used -->
                <enum bitpos="28" extends="VkPipelineStageFlagBits2"        name="VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR"/>
            </require>
            <require depends="(VK_KHR_synchronization2,VK_VERSION_1_3)+VK_KHR_ray_tracing_pipeline">
                <enum bitpos="40" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR"/>
            </require>
            <require depends="VK_KHR_ray_tracing_pipeline">
                <type name="VkTraceRaysIndirectCommand2KHR"/>
                <command name="vkCmdTraceRaysIndirect2KHR"/>
            </require>
            <require depends="VK_EXT_device_generated_commands">
                <enum offset="4" extends="VkIndirectCommandsTokenTypeEXT" name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_TRACE_RAYS2_EXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_388" number="388" author="EXT" contact="Alan Baker @alan-baker" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_388_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_388&quot;"              name="VK_EXT_EXTENSION_388_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_global_priority_query" number="389" type="device" depends="VK_EXT_global_priority+(VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)" author="EXT" contact="Yiwei Zhang @zhangyiwei" supported="vulkan" promotedto="VK_KHR_global_priority">
            <require>
                <enum value="1"                                         name="VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_global_priority_query&quot;"  name="VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME"/>
                <enum extends="VkStructureType" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES"/>
                <enum extends="VkStructureType" name="VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT" alias="VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES"/>
                <enum                                                   name="VK_MAX_GLOBAL_PRIORITY_SIZE_EXT" alias="VK_MAX_GLOBAL_PRIORITY_SIZE"/>
                <type                                                   name="VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT"/>
                <type                                                   name="VkQueueFamilyGlobalPriorityPropertiesEXT"/>
                <feature name="globalPriorityQuery" struct="VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_390" number="390" author="EXT" contact="Joshua Ashton @Joshua-Ashton" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_390_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_390&quot;"              name="VK_EXT_EXTENSION_390_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_391" number="391" author="EXT" contact="Joshua Ashton @Joshua-Ashton" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_391_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_391&quot;"              name="VK_EXT_EXTENSION_391_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_image_view_min_lod" number="392" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Joshua Ashton @Joshua-Ashton" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_image_view_min_lod&quot;"         name="VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT"/>
                <type                                                       name="VkPhysicalDeviceImageViewMinLodFeaturesEXT"/>
                <type                                                       name="VkImageViewMinLodCreateInfoEXT"/>
                <feature name="minLod" struct="VkPhysicalDeviceImageViewMinLodFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_multi_draw" number="393" author="EXT" contact="Mike Blumenkrantz @zmike" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_EXT_MULTI_DRAW_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_multi_draw&quot;"             name="VK_EXT_MULTI_DRAW_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT"/>
                <type name="VkPhysicalDeviceMultiDrawFeaturesEXT"/>
                <type name="VkPhysicalDeviceMultiDrawPropertiesEXT"/>
                <command name="vkCmdDrawMultiEXT"/>
                <command name="vkCmdDrawMultiIndexedEXT"/>
                <type name="VkMultiDrawInfoEXT"/>
                <type name="VkMultiDrawIndexedInfoEXT"/>
                <feature name="multiDraw" struct="VkPhysicalDeviceMultiDrawFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_image_2d_view_of_3d" number="394" depends="(VK_KHR_maintenance1+VK_KHR_get_physical_device_properties2),VK_VERSION_1_1" author="EXT" contact="Mike Blumenkrantz @zmike" specialuse="glemulation" type="device" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_image_2d_view_of_3d&quot;"              name="VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT"/>
                <type name="VkPhysicalDeviceImage2DViewOf3DFeaturesEXT"/>
                <enum extends="VkImageCreateFlagBits" bitpos="17"  name="VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT" comment="Image is created with a layout where individual slices are capable of being used as 2D images"/>
                <feature name="image2DViewOf3D" struct="VkPhysicalDeviceImage2DViewOf3DFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_portability_enumeration" number="395" author="KHR" contact="Charles Giessen @charles-lunarg" type="instance" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_portability_enumeration&quot;"    name="VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME"/>
                <enum bitpos="0" extends="VkInstanceCreateFlagBits"         name="VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_shader_tile_image" number="396" type="device" author="EXT" depends="VK_VERSION_1_3" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_shader_tile_image&quot;"          name="VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT"/>
                <type name="VkPhysicalDeviceShaderTileImageFeaturesEXT"/>
                <type name="VkPhysicalDeviceShaderTileImagePropertiesEXT"/>
                <feature name="shaderTileImageColorReadAccess" struct="VkPhysicalDeviceShaderTileImageFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_opacity_micromap" number="397" type="device"  depends="VK_KHR_acceleration_structure+(VK_KHR_synchronization2,VK_VERSION_1_3)" author="EXT" contact="Christoph Kubisch @pixeljetstream, Eric Werness" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="2"                                             name="VK_EXT_OPACITY_MICROMAP_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_opacity_micromap&quot;"           name="VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME"/>
                <enum offset="0"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT"/>
                <enum offset="1"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT"/>
                <enum offset="2"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT"/>
                <enum offset="3"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT"/>
                <enum offset="4"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT"/>
                <enum offset="5"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT"/>
                <enum offset="6"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT"/>
                <enum offset="7"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT"/>
                <enum offset="8"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT"/>
                <enum offset="9"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT"/>
                <enum bitpos="30" extends="VkPipelineStageFlagBits2"        name="VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT"/>
                <enum bitpos="44" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_MICROMAP_READ_BIT_EXT"/>
                <enum bitpos="45" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT"/>
                <enum offset="0"  extends="VkQueryType"                     name="VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT"/>
                <enum offset="1"  extends="VkQueryType"                     name="VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT"/>
                <enum offset="0"  extends="VkObjectType"                    name="VK_OBJECT_TYPE_MICROMAP_EXT"/>
                <enum bitpos="23" extends="VkBufferUsageFlagBits"           name="VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT"/>
                <enum bitpos="24" extends="VkBufferUsageFlagBits"           name="VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT"/>
                <enum bitpos="24" extends="VkPipelineCreateFlagBits"        name="VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT"/>
                <enum bitpos="4"  extends="VkGeometryInstanceFlagBitsKHR"   name="VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT"/>
                <enum bitpos="5"  extends="VkGeometryInstanceFlagBitsKHR"   name="VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT"/>
                <enum bitpos="6"  extends="VkBuildAccelerationStructureFlagBitsKHR" name="VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT"/>
                <enum bitpos="7"  extends="VkBuildAccelerationStructureFlagBitsKHR" name="VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT"/>
                <enum bitpos="8"  extends="VkBuildAccelerationStructureFlagBitsKHR" name="VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT"/>
                <type name="VkMicromapTypeEXT"/>
                <type name="VkMicromapBuildInfoEXT"/>
                <type name="VkMicromapUsageEXT"/>
                <type name="VkMicromapCreateInfoEXT"/>
                <type name="VkMicromapEXT"/>
                <type name="VkBuildMicromapFlagBitsEXT"/>
                <type name="VkBuildMicromapFlagsEXT"/>
                <type name="VkCopyMicromapModeEXT"/>
                <type name="VkPhysicalDeviceOpacityMicromapFeaturesEXT"/>
                <type name="VkPhysicalDeviceOpacityMicromapPropertiesEXT"/>
                <type name="VkMicromapVersionInfoEXT"/>
                <type name="VkCopyMicromapToMemoryInfoEXT"/>
                <type name="VkCopyMemoryToMicromapInfoEXT"/>
                <type name="VkCopyMicromapInfoEXT"/>
                <type name="VkMicromapCreateFlagBitsEXT"/>
                <type name="VkMicromapCreateFlagsEXT"/>
                <type name="VkBuildMicromapModeEXT"/>
                <type name="VkMicromapBuildSizesInfoEXT"/>
                <type name="VkOpacityMicromapFormatEXT"/>
                <type name="VkAccelerationStructureTrianglesOpacityMicromapEXT"/>
                <type name="VkMicromapTriangleEXT"/>
                <type name="VkOpacityMicromapSpecialIndexEXT"/>
                <command name="vkCreateMicromapEXT"/>
                <command name="vkDestroyMicromapEXT"/>
                <command name="vkCmdBuildMicromapsEXT"/>
                <command name="vkBuildMicromapsEXT"/>
                <command name="vkCopyMicromapEXT"/>
                <command name="vkCopyMicromapToMemoryEXT"/>
                <command name="vkCopyMemoryToMicromapEXT"/>
                <command name="vkWriteMicromapsPropertiesEXT"/>
                <command name="vkCmdCopyMicromapEXT"/>
                <command name="vkCmdCopyMicromapToMemoryEXT"/>
                <command name="vkCmdCopyMemoryToMicromapEXT"/>
                <command name="vkCmdWriteMicromapsPropertiesEXT"/>
                <command name="vkGetDeviceMicromapCompatibilityEXT"/>
                <command name="vkGetMicromapBuildSizesEXT"/>
                <feature name="micromap" struct="VkPhysicalDeviceOpacityMicromapFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_NV_displacement_micromap" number="398" type="device" depends="VK_EXT_opacity_micromap" author="NV" contact="Christoph Kubisch @pixeljetstream, Eric Werness @ewerness-nv" supported="vulkan" provisional="true" platform="provisional">
            <require>
                <enum value="2"                                        name="VK_NV_DISPLACEMENT_MICROMAP_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_displacement_micromap&quot;"  name="VK_NV_DISPLACEMENT_MICROMAP_EXTENSION_NAME"/>
                <enum offset="0"  extends="VkStructureType"            name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV" protect="VK_ENABLE_BETA_EXTENSIONS"/>
                <enum offset="1"  extends="VkStructureType"            name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV" protect="VK_ENABLE_BETA_EXTENSIONS"/>
                <enum offset="2"  extends="VkStructureType"            name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_DISPLACEMENT_MICROMAP_NV" protect="VK_ENABLE_BETA_EXTENSIONS"/>
                <enum bitpos="28" extends="VkPipelineCreateFlagBits"   name="VK_PIPELINE_CREATE_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV" protect="VK_ENABLE_BETA_EXTENSIONS"/>
                <enum bitpos="9"  extends="VkBuildAccelerationStructureFlagBitsKHR" name="VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISPLACEMENT_MICROMAP_UPDATE_NV" protect="VK_ENABLE_BETA_EXTENSIONS"/>
                <enum offset="0"  extends="VkMicromapTypeEXT"          name="VK_MICROMAP_TYPE_DISPLACEMENT_MICROMAP_NV" protect="VK_ENABLE_BETA_EXTENSIONS"/>
                <type name="VkPhysicalDeviceDisplacementMicromapFeaturesNV"/>
                <type name="VkPhysicalDeviceDisplacementMicromapPropertiesNV"/>
                <type name="VkAccelerationStructureTrianglesDisplacementMicromapNV"/>
                <type name="VkDisplacementMicromapFormatNV"/>
                <feature name="displacementMicromap" struct="VkPhysicalDeviceDisplacementMicromapFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_JUICE_extension_399" number="399" author="JUICE" contact="Dean Beeler @canadacow" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_JUICE_EXTENSION_399_SPEC_VERSION"/>
                <enum value="&quot;VK_JUICE_extension_399&quot;"        name="VK_JUICE_EXTENSION_399_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_JUICE_extension_400" number="400" author="JUICE" contact="David McCloskey @damcclos" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_JUICE_EXTENSION_400_SPEC_VERSION"/>
                <enum value="&quot;VK_JUICE_extension_400&quot;"        name="VK_JUICE_EXTENSION_400_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_load_store_op_none" number="401" author="EXT" type="device" contact="Shahbaz Youssefi @syoussefi" supported="vulkan" promotedto="VK_KHR_load_store_op_none" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                         name="VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_load_store_op_none&quot;"     name="VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME"/>
                <enum extends="VkAttachmentLoadOp" name="VK_ATTACHMENT_LOAD_OP_NONE_EXT" alias="VK_ATTACHMENT_LOAD_OP_NONE"/>
                <enum extends="VkAttachmentStoreOp" name="VK_ATTACHMENT_STORE_OP_NONE_EXT" alias="VK_ATTACHMENT_STORE_OP_NONE"/>
            </require>
        </extension>
        <extension name="VK_FB_extension_402" number="402" author="FB" contact="Artem Bolgar @artyom17" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_FB_EXTENSION_402_SPEC_VERSION"/>
                <enum value="&quot;VK_FB_extension_402&quot;"           name="VK_FB_EXTENSION_402_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_FB_extension_403" number="403" author="FB" contact="Artem Bolgar @artyom17" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_FB_EXTENSION_403_SPEC_VERSION"/>
                <enum value="&quot;VK_FB_extension_403&quot;"           name="VK_FB_EXTENSION_403_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_FB_extension_404" number="404" author="FB" contact="Artem Bolgar @artyom17" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_FB_EXTENSION_404_SPEC_VERSION"/>
                <enum value="&quot;VK_FB_extension_404&quot;"           name="VK_FB_EXTENSION_404_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_HUAWEI_cluster_culling_shader" number="405" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="HUAWEI" contact="Yuchang Wang @richard_Wang2" supported="vulkan">
            <require>
                <enum value="3"                                              name="VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION"/>
                <enum value="&quot;VK_HUAWEI_cluster_culling_shader&quot;"   name="VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI"/>
                <enum offset="1" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI"/>
                <enum offset="2" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI"/>
                <enum bitpos="41" extends="VkPipelineStageFlagBits2"         name="VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI"/>
                <enum bitpos="19" extends="VkShaderStageFlagBits"            name="VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI"/>
                <enum bitpos="13" extends="VkQueryPipelineStatisticFlagBits" name="VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI"/>
                <command name="vkCmdDrawClusterHUAWEI"/>
                <command name="vkCmdDrawClusterIndirectHUAWEI"/>
                <type name="VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI"/>
                <type name="VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI"/>
                <type name="VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI"/>
                <feature name="clustercullingShader" struct="VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI"/>
            </require>
        </extension>
        <extension name="VK_HUAWEI_extension_406" number="406" author="HUAWEI" contact="Hueilong Wang @wyvernathuawei" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_HUAWEI_EXTENSION_406_SPEC_VERSION"/>
                <enum value="&quot;VK_HUAWEI_extension_406&quot;"           name="VK_HUAWEI_EXTENSION_406_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_GGP_extension_407" number="407" author="GGP" contact="J.D. Rouan @jdrouan" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_GGP_EXTENSION_407_SPEC_VERSION"/>
                <enum value="&quot;VK_GGP_extension_407&quot;"          name="VK_GGP_EXTENSION_407_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_GGP_extension_408" number="408" author="GGP" contact="J.D. Rouan @jdrouan" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_GGP_EXTENSION_408_SPEC_VERSION"/>
                <enum value="&quot;VK_GGP_extension_408&quot;"          name="VK_GGP_EXTENSION_408_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_GGP_extension_409" number="409" author="GGP" contact="J.D. Rouan @jdrouan" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_GGP_EXTENSION_409_SPEC_VERSION"/>
                <enum value="&quot;VK_GGP_extension_409&quot;"          name="VK_GGP_EXTENSION_409_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_GGP_extension_410" number="410" author="GGP" contact="J.D. Rouan @jdrouan" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_GGP_EXTENSION_410_SPEC_VERSION"/>
                <enum value="&quot;VK_GGP_extension_410&quot;"          name="VK_GGP_EXTENSION_410_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_GGP_extension_411" number="411" author="GGP" contact="J.D. Rouan @jdrouan" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_GGP_EXTENSION_411_SPEC_VERSION"/>
                <enum value="&quot;VK_GGP_extension_411&quot;"          name="VK_GGP_EXTENSION_411_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_border_color_swizzle" number="412" type="device" author="EXT" contact="Piers Daniell @pdaniell-nv" supported="vulkan" depends="VK_EXT_custom_border_color" specialuse="glemulation,d3demulation" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_border_color_swizzle&quot;"   name="VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT"/>
                <type name="VkPhysicalDeviceBorderColorSwizzleFeaturesEXT"/>
                <type name="VkSamplerBorderColorComponentMappingCreateInfoEXT"/>
                <feature name="borderColorSwizzle" struct="VkPhysicalDeviceBorderColorSwizzleFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_pageable_device_local_memory" number="413" author="EXT" contact="Piers Daniell @pdaniell-nv" type="device" depends="VK_EXT_memory_priority" supported="vulkan">
            <require>
                <enum value="1"                                                  name="VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_pageable_device_local_memory&quot;"    name="VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                       name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT"/>
                <type                                                            name="VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT"/>
                <command                                                         name="vkSetDeviceMemoryPriorityEXT"/>
                <feature name="pageableDeviceLocalMemory" struct="VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_maintenance4" number="414" type="device" depends="VK_VERSION_1_1" author="KHR" contact="Piers Daniell @pdaniell-nv" supported="vulkan" promotedto="VK_VERSION_1_3" ratified="vulkan">
            <require>
                <enum value="2"                                             name="VK_KHR_MAINTENANCE_4_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_maintenance4&quot;"               name="VK_KHR_MAINTENANCE_4_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR" alias="VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR" alias="VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS"/>
                <enum extends="VkImageAspectFlagBits"                       name="VK_IMAGE_ASPECT_NONE_KHR" alias="VK_IMAGE_ASPECT_NONE"/>
                <type name="VkPhysicalDeviceMaintenance4FeaturesKHR"/>
                <type name="VkPhysicalDeviceMaintenance4PropertiesKHR"/>
                <type name="VkDeviceBufferMemoryRequirementsKHR"/>
                <type name="VkDeviceImageMemoryRequirementsKHR"/>
                <command name="vkGetDeviceBufferMemoryRequirementsKHR"/>
                <command name="vkGetDeviceImageMemoryRequirementsKHR"/>
                <command name="vkGetDeviceImageSparseMemoryRequirementsKHR"/>
                <feature name="maintenance4" struct="VkPhysicalDeviceMaintenance4FeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_HUAWEI_extension_415" number="415" author="HUAWEI" contact="Hueilong Wang @wyvernathuawei" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_HUAWEI_EXTENSION_415_SPEC_VERSION"/>
                <enum value="&quot;VK_HUAWEI_extension_415&quot;"         name="VK_HUAWEI_EXTENSION_415_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_ARM_shader_core_properties" number="416" type="device" depends="VK_VERSION_1_1" author="ARM" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                         name="VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION"/>
                <enum value="&quot;VK_ARM_shader_core_properties&quot;" name="VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME"/>
                <enum offset="0"  extends="VkStructureType"             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM"/>
                <type name="VkPhysicalDeviceShaderCorePropertiesARM"/>
            </require>
        </extension>
        <extension name="VK_KHR_shader_subgroup_rotate" number="417" author="KHR" contact="Kevin Petit @kpet" type="device" supported="vulkan" promotedto="VK_VERSION_1_4" ratified="vulkan">
            <require>
                <enum value="2"                                         name="VK_KHR_SHADER_SUBGROUP_ROTATE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shader_subgroup_rotate&quot;" name="VK_KHR_SHADER_SUBGROUP_ROTATE_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES"/>
                <enum extends="VkSubgroupFeatureFlagBits"               name="VK_SUBGROUP_FEATURE_ROTATE_BIT_KHR" alias="VK_SUBGROUP_FEATURE_ROTATE_BIT"/>
                <enum extends="VkSubgroupFeatureFlagBits"               name="VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR" alias="VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT"/>
                <type name="VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR"/>
                <feature name="shaderSubgroupRotate" struct="VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_ARM_scheduling_controls" number="418" author="ARM" contact="Kevin Petit @kpet" type="device" depends="VK_ARM_shader_core_builtins" supported="vulkan">
            <require>
                <enum value="1"                                         name="VK_ARM_SCHEDULING_CONTROLS_SPEC_VERSION"/>
                <enum value="&quot;VK_ARM_scheduling_controls&quot;"    name="VK_ARM_SCHEDULING_CONTROLS_EXTENSION_NAME"/>
                <enum extends="VkStructureType" offset="0"              name="VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM"/>
                <enum extends="VkStructureType" offset="1"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM"/>
                <enum extends="VkStructureType" offset="2"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM"/>
                <type name="VkDeviceQueueShaderCoreControlCreateInfoARM"/>
                <type name="VkPhysicalDeviceSchedulingControlsFeaturesARM"/>
                <type name="VkPhysicalDeviceSchedulingControlsPropertiesARM"/>
                <type name="VkPhysicalDeviceSchedulingControlsFlagsARM"/>
                <type name="VkPhysicalDeviceSchedulingControlsFlagBitsARM"/>
                <feature name="schedulingControls" struct="VkPhysicalDeviceSchedulingControlsFeaturesARM"/>
            </require>
        </extension>
        <extension name="VK_EXT_image_sliced_view_of_3d" number="419" depends="(VK_KHR_maintenance1+VK_KHR_get_physical_device_properties2),VK_VERSION_1_1" author="EXT" contact="Mike Blumenkrantz @zmike" specialuse="d3demulation" type="device" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_image_sliced_view_of_3d&quot;"    name="VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT"/>
                <enum name="VK_REMAINING_3D_SLICES_EXT"/>
                <type name="VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT"/>
                <type name="VkImageViewSlicedCreateInfoEXT"/>
                <feature name="imageSlicedViewOf3D" struct="VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_420" number="420" author="EXT" contact="Mike Blumenkrantz @zmike" type="device" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_420_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_420&quot;"              name="VK_EXT_EXTENSION_420_EXTENSION_NAME"/>
                <enum bitpos="4" extends="VkSwapchainCreateFlagBitsKHR" name="VK_SWAPCHAIN_CREATE_RESERVED_4_BIT_EXT"/>
            </require>
        </extension>
        <extension name="VK_VALVE_descriptor_set_host_mapping" number="421" type="device" author="VALVE" contact="Hans-Kristian Arntzen @HansKristian-Work" specialuse="d3demulation" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan">
            <require>
                <enum value="1"                                                 name="VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION"/>
                <enum value="&quot;VK_VALVE_descriptor_set_host_mapping&quot;"  name="VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME"/>
                <enum offset="0"  extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE"/>
                <enum offset="1"  extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE"/>
                <enum offset="2"  extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE"/>
                <type name="VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE"/>
                <type name="VkDescriptorSetBindingReferenceVALVE"/>
                <type name="VkDescriptorSetLayoutHostMappingInfoVALVE"/>
                <command name="vkGetDescriptorSetLayoutHostMappingInfoVALVE"/>
                <command name="vkGetDescriptorSetHostMappingVALVE"/>
                <feature name="descriptorSetHostMapping" struct="VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE"/>
            </require>
        </extension>
        <extension name="VK_EXT_depth_clamp_zero_one" number="422" author="EXT" type="device" contact="Graeme Leese @gnl21" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" promotedto="VK_KHR_depth_clamp_zero_one" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_depth_clamp_zero_one&quot;"       name="VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_KHR"/>
                <type name="VkPhysicalDeviceDepthClampZeroOneFeaturesEXT" />
                <feature name="depthClampZeroOne" struct="VkPhysicalDeviceDepthClampZeroOneFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_non_seamless_cube_map" number="423" author="EXT" type="device" contact="Georg Lehmann @DadSchoorse" specialuse="d3demulation,glemulation" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_non_seamless_cube_map&quot;"      name="VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME"/>
                <enum bitpos="2" extends="VkSamplerCreateFlagBits"          name="VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT"/>
                <type name="VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT"/>
                <feature name="nonSeamlessCubeMap" struct="VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_ARM_extension_424" number="424" author="ARM" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_ARM_EXTENSION_424_SPEC_VERSION"/>
                <enum value="&quot;VK_ARM_extension_424&quot;"          name="VK_ARM_EXTENSION_424_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_ARM_render_pass_striped" number="425" type="device" depends="((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_synchronization2),VK_VERSION_1_3" author="ARM" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="vulkan">
            <require>
                <enum value="1"                                         name="VK_ARM_RENDER_PASS_STRIPED_SPEC_VERSION"/>
                <enum value="&quot;VK_ARM_render_pass_striped&quot;"    name="VK_ARM_RENDER_PASS_STRIPED_EXTENSION_NAME"/>
                <enum offset="0"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM"/>
                <enum offset="1"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM"/>
                <enum offset="2"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM"/>
                <enum offset="3"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM"/>
                <enum offset="4"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM"/>
                <type name="VkPhysicalDeviceRenderPassStripedFeaturesARM"/>
                <type name="VkPhysicalDeviceRenderPassStripedPropertiesARM"/>
                <type name="VkRenderPassStripeBeginInfoARM"/>
                <type name="VkRenderPassStripeInfoARM"/>
                <type name="VkRenderPassStripeSubmitInfoARM"/>
                <feature name="renderPassStriped" struct="VkPhysicalDeviceRenderPassStripedFeaturesARM"/>
            </require>
        </extension>
        <extension name="VK_QCOM_fragment_density_map_offset" number="426" type="device" depends="(VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_EXT_fragment_density_map" author="QCOM" contact="Matthew Netsch @mnetsch" supported="vulkan">
            <require>
                <enum value="2"                                               name="VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_fragment_density_map_offset&quot;" name="VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME"/>
                <enum offset="0"  extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM"/>
                <enum offset="1"  extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM"/>
                <enum offset="2"  extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM"/>
                <enum bitpos="15" extends="VkImageCreateFlagBits"             name="VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM"/>
                <type name="VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM"/>
                <type name="VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM"/>
                <type name="VkSubpassFragmentDensityMapOffsetEndInfoQCOM"/>
                <feature name="fragmentDensityMapOffset" struct="VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM"/>
            </require>
        </extension>
        <extension name="VK_NV_copy_memory_indirect" number="427" type="device" depends="((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_buffer_device_address),VK_VERSION_1_2" author="NV" contact="Vikram Kushwaha @vkushwaha-nv" supported="vulkan">
            <require>
                <enum value="1"                                         name="VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_copy_memory_indirect&quot;"    name="VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV"/>
                <type name="VkCopyMemoryIndirectCommandNV"/>
                <type name="VkCopyMemoryToImageIndirectCommandNV"/>
                <type name="VkPhysicalDeviceCopyMemoryIndirectFeaturesNV"/>
                <type name="VkPhysicalDeviceCopyMemoryIndirectPropertiesNV"/>
                <command name="vkCmdCopyMemoryIndirectNV"/>
                <command name="vkCmdCopyMemoryToImageIndirectNV"/>
                <feature name="indirectCopy" struct="VkPhysicalDeviceCopyMemoryIndirectFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_memory_decompression" number="428" type="device" depends="((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_buffer_device_address),VK_VERSION_1_2" author="NV" contact="Vikram Kushwaha @vkushwaha-nv" supported="vulkan">
            <require>
                <enum value="1"                                         name="VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_memory_decompression&quot;"       name="VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV"/>
                <type name="VkMemoryDecompressionMethodFlagBitsNV"/>
                <type name="VkMemoryDecompressionMethodFlagsNV"/>
                <type name="VkDecompressMemoryRegionNV"/>
                <type name="VkPhysicalDeviceMemoryDecompressionFeaturesNV"/>
                <type name="VkPhysicalDeviceMemoryDecompressionPropertiesNV"/>
                <command name="vkCmdDecompressMemoryNV"/>
                <command name="vkCmdDecompressMemoryIndirectCountNV"/>
                <feature name="memoryDecompression" struct="VkPhysicalDeviceMemoryDecompressionFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_device_generated_commands_compute" number="429" type="device" depends="VK_NV_device_generated_commands" author="NV" contact="Vikram Kushwaha @vkushwaha-nv" supported="vulkan">
            <require>
                <enum value="2"                                           name="VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_device_generated_commands_compute&quot;"  name="VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType"                name="VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV"/>
                <enum offset="2" extends="VkStructureType"                name="VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV"/>
                <enum offset="3" extends="VkIndirectCommandsTokenTypeNV"  name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV"/>
                <enum offset="4" extends="VkIndirectCommandsTokenTypeNV"  name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV"/>
                <enum bitpos="7" extends="VkDescriptorSetLayoutCreateFlagBits"  name="VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV"/>
                <type name="VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV"/>
                <type name="VkComputePipelineIndirectBufferInfoNV"/>
                <type name="VkPipelineIndirectDeviceAddressInfoNV"/>
                <type name="VkBindPipelineIndirectCommandNV"/>
                <command name="vkGetPipelineIndirectMemoryRequirementsNV"/>
                <command name="vkCmdUpdatePipelineIndirectBufferNV"/>
                <command name="vkGetPipelineIndirectDeviceAddressNV"/>
                <feature name="deviceGeneratedCompute" struct="VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_ray_tracing_linear_swept_spheres" number="430" type="device" depends="VK_KHR_ray_tracing_pipeline" author="NV" contact="Vikram Kushwaha @vkushwaha" supported="vulkan">
            <require>
                <enum value="1"                                                   name="VK_NV_RAY_TRACING_LINEAR_SWEPT_SPHERES_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_ray_tracing_linear_swept_spheres&quot;"  name="VK_NV_RAY_TRACING_LINEAR_SWEPT_SPHERES_EXTENSION_NAME"/>
                <enum offset="4" extends="VkGeometryTypeKHR"                      name="VK_GEOMETRY_TYPE_SPHERES_NV"/>
                <enum offset="5" extends="VkGeometryTypeKHR"                      name="VK_GEOMETRY_TYPE_LINEAR_SWEPT_SPHERES_NV"/>
                <enum offset="8" extends="VkStructureType"                        name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_LINEAR_SWEPT_SPHERES_FEATURES_NV"/>
                <enum offset="9" extends="VkStructureType"                        name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_LINEAR_SWEPT_SPHERES_DATA_NV"/>
                <enum offset="10" extends="VkStructureType"                       name="VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_SPHERES_DATA_NV"/>
                <enum bitpos="33" extends="VkPipelineCreateFlagBits2"             name="VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_SPHERES_AND_LINEAR_SWEPT_SPHERES_BIT_NV"/>
                <enum bitpos="51" extends="VkFormatFeatureFlagBits2"              name="VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_RADIUS_BUFFER_BIT_NV"/>
                <type name="VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV"/>
                <type name="VkAccelerationStructureGeometryLinearSweptSpheresDataNV"/>
                <type name="VkAccelerationStructureGeometrySpheresDataNV"/>
                <type name="VkRayTracingLssIndexingModeNV"/>
                <type name="VkRayTracingLssPrimitiveEndCapsModeNV"/>
                <feature name="spheres,linearSweptSpheres" struct="VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_linear_color_attachment" number="431" type="device" author="NVIDIA" contact="sourav parmar @souravpNV" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan">
            <require>
                <enum value="1"                                         name="VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_linear_color_attachment&quot;" name="VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV"/>
                <type                                                   name="VkPhysicalDeviceLinearColorAttachmentFeaturesNV"/>
                <feature name="linearColorAttachment" struct="VkPhysicalDeviceLinearColorAttachmentFeaturesNV"/>
            </require>
            <require depends="VK_KHR_format_feature_flags2,VK_VERSION_1_3">
                <enum bitpos="38" extends="VkFormatFeatureFlagBits2"    name="VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV" comment="Format support linear image as render target, it cannot be mixed with non linear attachment"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_432" number="432" author="NV" contact="Sourav Parmar @souravpNV" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_NV_EXTENSION_432_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_432&quot;"           name="VK_NV_EXTENSION_432_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_433" number="433" author="NV" contact="Sourav Parmar @souravpNV" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_NV_EXTENSION_433_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_433&quot;"           name="VK_NV_EXTENSION_433_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_GOOGLE_surfaceless_query" number="434" type="instance" depends="VK_KHR_surface" author="GOOGLE" contact="Shahbaz Youssefi @syoussefi" specialuse="glemulation" supported="vulkan" nofeatures="true">
            <require>
                <enum value="2"                                         name="VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION"/>
                <enum value="&quot;VK_GOOGLE_surfaceless_query&quot;"   name="VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_shader_maximal_reconvergence" number="435" type="device" author="KHR" depends="VK_VERSION_1_1" contact="Alan Baker @alan-baker" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shader_maximal_reconvergence&quot;"          name="VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR"/>
                <type name="VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR"/>
                <feature name="shaderMaximalReconvergence" struct="VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_application_parameters" number="436" type="instance" author="EXT" contact="Daniel Koch @dgkoch" supported="vulkansc" ratified="vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                         name="VK_EXT_APPLICATION_PARAMETERS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_application_parameters&quot;" name="VK_EXT_APPLICATION_PARAMETERS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_APPLICATION_PARAMETERS_EXT"/>
                <type name="VkApplicationParametersEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_437" number="437" author="EXT" contact="Jonathan Weinstein @Jonathan-Weinstein" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_437_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_437&quot;"          name="VK_EXT_EXTENSION_437_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_image_compression_control_swapchain" number="438" type="device" depends="VK_EXT_image_compression_control" author="EXT" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_image_compression_control_swapchain&quot;"  name="VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT"/>
                <type name="VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT"/>
                <feature name="imageCompressionControlSwapchain" struct="VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_SEC_extension_439" number="439" author="SEC" contact="Ralph Potter gitlab:@r_potter" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_SEC_EXTENSION_439_SPEC_VERSION"/>
                <enum value="&quot;VK_SEC_extension_439&quot;"          name="VK_SEC_EXTENSION_439_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_QCOM_extension_440" number="440" author="QCOM" contact="Matthew Netsch @mnetsch" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_QCOM_EXTENSION_440_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_extension_440&quot;"         name="VK_QCOM_EXTENSION_440_EXTENSION_NAME"/>
                <enum bitpos="7" extends="VkQueueFlagBits"              name="VK_QUEUE_RESERVED_7_BIT_QCOM"/>
                <enum bitpos="1" extends="VkDeviceQueueCreateFlagBits"  name="VK_DEVICE_QUEUE_CREATE_RESERVED_1_BIT_QCOM"/>
            </require>
        </extension>
        <extension name="VK_QCOM_image_processing" number="441" type="device" depends="VK_KHR_format_feature_flags2,VK_VERSION_1_3" author="QCOM" contact="Matthew Netsch @mnetsch" supported="vulkan">
            <require>
                <enum value="1"                                         name="VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_image_processing&quot;"      name="VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM"/>
                <enum offset="2" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM"/>
                <enum bitpos="4" extends="VkSamplerCreateFlagBits"      name="VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM"/>
                <enum bitpos="20" extends="VkImageUsageFlagBits"        name="VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM"/>
                <enum bitpos="21" extends="VkImageUsageFlagBits"        name="VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM"/>
                <enum offset="0" extends="VkDescriptorType"             name="VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM"/>
                <enum offset="1" extends="VkDescriptorType"             name="VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM"/>
                <type name="VkImageViewSampleWeightCreateInfoQCOM"/>
                <type name="VkPhysicalDeviceImageProcessingFeaturesQCOM"/>
                <type name="VkPhysicalDeviceImageProcessingPropertiesQCOM"/>
                <feature name="textureSampleWeighted" struct="VkPhysicalDeviceImageProcessingFeaturesQCOM"/>
                <feature name="textureBlockMatch" struct="VkPhysicalDeviceImageProcessingFeaturesQCOM"/>
                <feature name="textureBoxFilter" struct="VkPhysicalDeviceImageProcessingFeaturesQCOM"/>
            </require>
            <require depends="VK_KHR_format_feature_flags2,VK_VERSION_1_3">
                <enum bitpos="34" extends="VkFormatFeatureFlagBits2" name="VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM"/>
                <enum bitpos="35" extends="VkFormatFeatureFlagBits2" name="VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM"/>
                <enum bitpos="36" extends="VkFormatFeatureFlagBits2" name="VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM"/>
                <enum bitpos="37" extends="VkFormatFeatureFlagBits2" name="VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM"/>
            </require>
        </extension>
        <extension name="VK_COREAVI_extension_442" number="442" author="COREAVI" contact="Aidan Fabius @afabius" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_COREAVI_EXTENSION_442_SPEC_VERSION"/>
                <enum value="&quot;VK_COREAVI_extension_442&quot;"          name="VK_COREAVI_EXTENSION_442_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_COREAVI_extension_443" number="443" author="COREAVI" contact="Aidan Fabius @afabius" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_COREAVI_EXTENSION_443_SPEC_VERSION"/>
                <enum value="&quot;VK_COREAVI_extension_443&quot;"          name="VK_COREAVI_EXTENSION_443_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_COREAVI_extension_444" number="444" author="COREAVI" contact="Aidan Fabius @afabius" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_COREAVI_EXTENSION_444_SPEC_VERSION"/>
                <enum value="&quot;VK_COREAVI_extension_444&quot;"          name="VK_COREAVI_EXTENSION_444_EXTENSION_NAME"/>
                <enum extends="VkCommandPoolResetFlagBits" bitpos="1"       name="VK_COMMAND_POOL_RESET_RESERVED_1_BIT_COREAVI"/>
            </require>
        </extension>
        <extension name="VK_COREAVI_extension_445" number="445" author="COREAVI" contact="Aidan Fabius @afabius" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_COREAVI_EXTENSION_445_SPEC_VERSION"/>
                <enum value="&quot;VK_COREAVI_extension_445&quot;"          name="VK_COREAVI_EXTENSION_445_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_COREAVI_extension_446" number="446" author="COREAVI" contact="Aidan Fabius @afabius" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_COREAVI_EXTENSION_446_SPEC_VERSION"/>
                <enum value="&quot;VK_COREAVI_extension_446&quot;"          name="VK_COREAVI_EXTENSION_446_EXTENSION_NAME"/>
                <enum bitpos="24" extends="VkImageUsageFlagBits"            name="VK_IMAGE_USAGE_RESERVED_24_BIT_COREAVI"/>
            </require>
        </extension>
        <extension name="VK_COREAVI_extension_447" number="447" author="COREAVI" contact="Aidan Fabius @afabius" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_COREAVI_EXTENSION_447_SPEC_VERSION"/>
                <enum value="&quot;VK_COREAVI_extension_447&quot;"          name="VK_COREAVI_EXTENSION_447_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_SEC_extension_448" number="448" author="SEC" contact="Ralph Potter gitlab:@r_potter" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_SEC_EXTENSION_448_SPEC_VERSION"/>
                <enum value="&quot;VK_SEC_extension_448&quot;"          name="VK_SEC_EXTENSION_448_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_SEC_extension_449" number="449" author="SEC" contact="Ralph Potter gitlab:@r_potter" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_SEC_EXTENSION_449_SPEC_VERSION"/>
                <enum value="&quot;VK_SEC_extension_449&quot;"          name="VK_SEC_EXTENSION_449_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_SEC_extension_450" number="450" author="SEC" contact="Ralph Potter gitlab:@r_potter" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_SEC_EXTENSION_450_SPEC_VERSION"/>
                <enum value="&quot;VK_SEC_extension_450&quot;"          name="VK_SEC_EXTENSION_450_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_SEC_extension_451" number="451" author="SEC" contact="Ralph Potter gitlab:@r_potter" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_SEC_EXTENSION_451_SPEC_VERSION"/>
                <enum value="&quot;VK_SEC_extension_451&quot;"          name="VK_SEC_EXTENSION_451_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_nested_command_buffer" number="452" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Piers Daniell @pdaniell-nv" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_EXT_NESTED_COMMAND_BUFFER_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_nested_command_buffer&quot;"  name="VK_EXT_NESTED_COMMAND_BUFFER_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT"/>
                <enum extends="VkSubpassContents"    name="VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT" alias="VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR"/>
                <enum extends="VkRenderingFlagBits"  name="VK_RENDERING_CONTENTS_INLINE_BIT_EXT" alias="VK_RENDERING_CONTENTS_INLINE_BIT_KHR"/>
                <type                                                   name="VkPhysicalDeviceNestedCommandBufferFeaturesEXT"/>
                <type                                                   name="VkPhysicalDeviceNestedCommandBufferPropertiesEXT"/>
                <feature name="nestedCommandBuffer" struct="VkPhysicalDeviceNestedCommandBufferFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_ARM_extension_453" number="453" author="Arm" contact="Kevin Petit @kpet" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_ARM_EXTENSION_453_SPEC_VERSION"/>
                <enum value="&quot;VK_ARM_extension_453&quot;"          name="VK_ARM_EXTENSION_453_EXTENSION_NAME"/>
                <enum bitpos="11" extends="VkQueueFlagBits"             name="VK_QUEUE_RESERVED_11_BIT_ARM"/>
                <enum bitpos="43" extends="VkPipelineStageFlagBits2"    name="VK_PIPELINE_STAGE_2_RESERVED_43_BIT_ARM"/>
                <enum bitpos="49" extends="VkAccessFlagBits2"           name="VK_ACCESS_2_RESERVED_49_BIT_ARM"/>
                <enum bitpos="50" extends="VkAccessFlagBits2"           name="VK_ACCESS_2_RESERVED_50_BIT_ARM"/>
                <enum bitpos="47" extends="VkFormatFeatureFlagBits2"    name="VK_FORMAT_FEATURE_2_RESERVED_47_BIT_ARM"/>
            </require>
        </extension>
        <extension name="VK_EXT_external_memory_acquire_unmodified" number="454" type="device" depends="VK_KHR_external_memory,VK_VERSION_1_1" author="EXT" contact="Lina Versace @linyaa-kiwi" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                         name="VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_external_memory_acquire_unmodified&quot;"     name="VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                              name="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT"/>
                <type name="VkExternalMemoryAcquireUnmodifiedEXT"/>
            </require>
        </extension>
        <extension name="VK_GOOGLE_extension_455" number="455" author="GOOGLE" contact="Lina Versace @linyaa-kiwi" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_GOOGLE_EXTENSION_455_SPEC_VERSION"/>
                <enum value="&quot;VK_GOOGLE_extension_455&quot;"       name="VK_GOOGLE_EXTENSION_455_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extended_dynamic_state3" number="456" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="NV" contact="Piers Daniell @pdaniell-nv" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="2"                                              name="VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extended_dynamic_state3&quot;"     name="VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT"/>
                <enum offset="3" extends="VkDynamicState"                    name="VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT"/>
                <enum offset="4" extends="VkDynamicState"                    name="VK_DYNAMIC_STATE_POLYGON_MODE_EXT"/>
                <enum offset="5" extends="VkDynamicState"                    name="VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT"/>
                <enum offset="6" extends="VkDynamicState"                    name="VK_DYNAMIC_STATE_SAMPLE_MASK_EXT"/>
                <enum offset="7" extends="VkDynamicState"                    name="VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT"/>
                <enum offset="8" extends="VkDynamicState"                    name="VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT"/>
                <enum offset="9" extends="VkDynamicState"                    name="VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT"/>
                <enum offset="10" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT"/>
                <enum offset="11" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT"/>
                <enum offset="12" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT"/>
                <type name="VkPhysicalDeviceExtendedDynamicState3FeaturesEXT"/>
                <type name="VkPhysicalDeviceExtendedDynamicState3PropertiesEXT"/>
                <type name="VkColorBlendEquationEXT"/>
                <type name="VkColorBlendAdvancedEXT"/>
                <command name="vkCmdSetDepthClampEnableEXT"/>
                <command name="vkCmdSetPolygonModeEXT"/>
                <command name="vkCmdSetRasterizationSamplesEXT"/>
                <command name="vkCmdSetSampleMaskEXT"/>
                <command name="vkCmdSetAlphaToCoverageEnableEXT"/>
                <command name="vkCmdSetAlphaToOneEnableEXT"/>
                <command name="vkCmdSetLogicOpEnableEXT"/>
                <command name="vkCmdSetColorBlendEnableEXT"/>
                <command name="vkCmdSetColorBlendEquationEXT"/>
                <command name="vkCmdSetColorWriteMaskEXT"/>
            </require>
            <require depends="VK_KHR_maintenance2,VK_VERSION_1_1">
                <enum offset="2" extends="VkDynamicState"                    name="VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT"/>
                <command name="vkCmdSetTessellationDomainOriginEXT"/>
            </require>
            <require depends="VK_EXT_transform_feedback">
                <enum offset="13" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT"/>
                <command name="vkCmdSetRasterizationStreamEXT"/>
            </require>
            <require depends="VK_EXT_conservative_rasterization">
                <enum offset="14" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT"/>
                <enum offset="15" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT"/>
                <command name="vkCmdSetConservativeRasterizationModeEXT"/>
                <command name="vkCmdSetExtraPrimitiveOverestimationSizeEXT"/>
            </require>
            <require depends="VK_EXT_depth_clip_enable">
                <enum offset="16" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT"/>
                <command name="vkCmdSetDepthClipEnableEXT"/>
            </require>
            <require depends="VK_EXT_sample_locations">
                <enum offset="17" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT"/>
                <command name="vkCmdSetSampleLocationsEnableEXT"/>
            </require>
            <require depends="VK_EXT_blend_operation_advanced">
                <enum offset="18" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT"/>
                <command name="vkCmdSetColorBlendAdvancedEXT"/>
            </require>
            <require depends="VK_EXT_provoking_vertex">
                <enum offset="19" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT"/>
                <command name="vkCmdSetProvokingVertexModeEXT"/>
            </require>
            <require depends="VK_EXT_line_rasterization">
                <enum offset="20" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT"/>
                <enum offset="21" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT"/>
                <command name="vkCmdSetLineRasterizationModeEXT"/>
                <command name="vkCmdSetLineStippleEnableEXT"/>
            </require>
            <require depends="VK_EXT_depth_clip_control">
                <enum offset="22" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT"/>
                <command name="vkCmdSetDepthClipNegativeOneToOneEXT"/>
            </require>
            <require depends="VK_NV_clip_space_w_scaling">
                <enum offset="23" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV"/>
                <command name="vkCmdSetViewportWScalingEnableNV"/>
            </require>
            <require depends="VK_NV_viewport_swizzle">
                <enum offset="24" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV"/>
                <command name="vkCmdSetViewportSwizzleNV"/>
            </require>
            <require depends="VK_NV_fragment_coverage_to_color">
                <enum offset="25" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV"/>
                <enum offset="26" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV"/>
                <command name="vkCmdSetCoverageToColorEnableNV"/>
                <command name="vkCmdSetCoverageToColorLocationNV"/>
            </require>
            <require depends="VK_NV_framebuffer_mixed_samples">
                <enum offset="27" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV"/>
                <enum offset="28" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV"/>
                <enum offset="29" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV"/>
                <command name="vkCmdSetCoverageModulationModeNV"/>
                <command name="vkCmdSetCoverageModulationTableEnableNV"/>
                <command name="vkCmdSetCoverageModulationTableNV"/>
            </require>
            <require depends="VK_NV_shading_rate_image">
                <enum offset="30" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV"/>
                <command name="vkCmdSetShadingRateImageEnableNV"/>
            </require>
            <require depends="VK_NV_representative_fragment_test">
                <enum offset="31" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV"/>
                <command name="vkCmdSetRepresentativeFragmentTestEnableNV"/>
            </require>
            <require depends="VK_NV_coverage_reduction_mode">
                <enum offset="32" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV"/>
                <command name="vkCmdSetCoverageReductionModeNV"/>
            </require>
            <require depends="VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3TessellationDomainOrigin">
                <feature name="tessellationShader" struct="VkPhysicalDeviceFeatures"/>
            </require>
            <require depends="VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3DepthClampEnable">
                <feature name="depthClamp" struct="VkPhysicalDeviceFeatures"/>
            </require>
            <require depends="VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3PolygonMode">
                <feature name="fillModeNonSolid" struct="VkPhysicalDeviceFeatures"/>
            </require>
            <require depends="VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3AlphaToOneEnable">
                <feature name="alphaToOne" struct="VkPhysicalDeviceFeatures"/>
            </require>
            <require depends="VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3LogicOpEnable">
                <feature name="logicOp" struct="VkPhysicalDeviceFeatures"/>
            </require>
            <require depends="VK_EXT_transform_feedback+VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3RasterizationStream">
                <feature name="geometryStreams" struct="VkPhysicalDeviceTransformFeedbackFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_457" number="457" author="RASTERGRID" contact="Daniel Rakos @aqnuep" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_457_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_457&quot;"          name="VK_EXT_EXTENSION_457_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_458" number="458" author="RASTERGRID" contact="Daniel Rakos @aqnuep" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_458_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_458&quot;"          name="VK_EXT_EXTENSION_458_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_subpass_merge_feedback" number="459" type="device" author="EXT" contact="Ting Wei @catweiting" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="2"                                              name="VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_subpass_merge_feedback&quot;"      name="VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT"/>
                <enum offset="2" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT"/>
                <enum offset="3" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT"/>
                <type name="VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT"/>
                <type name="VkRenderPassCreationControlEXT"/>
                <type name="VkRenderPassCreationFeedbackInfoEXT"/>
                <type name="VkRenderPassCreationFeedbackCreateInfoEXT"/>
                <type name="VkRenderPassSubpassFeedbackInfoEXT"/>
                <type name="VkRenderPassSubpassFeedbackCreateInfoEXT"/>
                <type name="VkSubpassMergeStatusEXT"/>
                <feature name="subpassMergeFeedback" struct="VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_LUNARG_direct_driver_loading" number="460" type="instance" author="LUNARG" contact="Charles Giessen @charles-lunarg" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                           name="VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION"/>
                <enum value="&quot;VK_LUNARG_direct_driver_loading&quot;" name="VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                name="VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG"/>
                <enum offset="1" extends="VkStructureType"                name="VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG"/>
                <type name="VkDirectDriverLoadingFlagsLUNARG" comment="Will add VkDirectDriverLoadingFlagBitsLUNARG when bits are defined in the future"/>
                <type name="VkDirectDriverLoadingModeLUNARG"/>
                <type name="VkDirectDriverLoadingInfoLUNARG"/>
                <type name="VkDirectDriverLoadingListLUNARG"/>
                <type name="PFN_vkGetInstanceProcAddrLUNARG"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_461" number="461" author="EXT" contact="Kevin Petit @kpet" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_461_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_461&quot;"          name="VK_EXT_EXTENSION_461_EXTENSION_NAME"/>
                <enum bitpos="39" extends="VkFormatFeatureFlagBits2"    name="VK_FORMAT_FEATURE_2_RESERVED_39_BIT_EXT"/>
                <enum bitpos="23" extends="VkImageUsageFlagBits"        name="VK_IMAGE_USAGE_RESERVED_23_BIT_EXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_462" number="462" author="EXT" contact="Joshua Ashton @Joshua-Ashton,Liam Middlebrook @liam-middlebrook" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_462_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_462&quot;"          name="VK_EXT_EXTENSION_462_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_shader_module_identifier" number="463" type="device" depends="((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_EXT_pipeline_creation_cache_control),VK_VERSION_1_3" author="EXT" contact="Hans-Kristian Arntzen @HansKristian-Work" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_shader_module_identifier&quot;"   name="VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT"/>
                <enum name="VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT"/>
                <type name="VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT"/>
                <type name="VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT"/>
                <type name="VkPipelineShaderStageModuleIdentifierCreateInfoEXT"/>
                <type name="VkShaderModuleIdentifierEXT"/>
                <command name="vkGetShaderModuleIdentifierEXT"/>
                <command name="vkGetShaderModuleCreateInfoIdentifierEXT"/>
                <feature name="shaderModuleIdentifier" struct="VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_rasterization_order_attachment_access" number="464" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="ARM" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                        name="VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_rasterization_order_attachment_access&quot;" name="VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType" extnumber="343" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT"/>
                <type name="VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT"/>
                <type name="VkPipelineColorBlendStateCreateFlagBits"/>
                <type name="VkPipelineDepthStencilStateCreateFlagBits"/>
                <enum bitpos="0" extends="VkPipelineColorBlendStateCreateFlagBits"   name="VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT"/>
                <enum bitpos="0" extends="VkPipelineDepthStencilStateCreateFlagBits" name="VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT"/>
                <enum bitpos="1" extends="VkPipelineDepthStencilStateCreateFlagBits" name="VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT"/>
                <enum bitpos="4" extends="VkSubpassDescriptionFlagBits"              name="VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT"/>
                <enum bitpos="5" extends="VkSubpassDescriptionFlagBits"              name="VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT"/>
                <enum bitpos="6" extends="VkSubpassDescriptionFlagBits"              name="VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT"/>
            </require>
        </extension>
        <extension name="VK_NV_optical_flow" number="465" depends="((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_format_feature_flags2+VK_KHR_synchronization2),VK_VERSION_1_3" type="device" author="NV" contact="Carsten Rohde @crohde" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_NV_OPTICAL_FLOW_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_optical_flow&quot;"                name="VK_NV_OPTICAL_FLOW_EXTENSION_NAME"/>
                <enum offset="0"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV"/>
                <enum offset="1"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV"/>
                <enum offset="2"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV"/>
                <enum offset="3"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV"/>
                <enum offset="4"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV"/>
                <enum offset="5"  extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV"/>
                <enum offset="10"  extends="VkStructureType"                name="VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV"/><comment>NV internal use only</comment>
                <enum offset="0"  extends="VkFormat"                        name="VK_FORMAT_R16G16_SFIXED5_NV"/>
                <enum extends="VkFormat"                                    name="VK_FORMAT_R16G16_S10_5_NV" alias="VK_FORMAT_R16G16_SFIXED5_NV" deprecated="aliased"/>
                <enum offset="0"  extends="VkObjectType"                    name="VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV"/>
                <enum bitpos="8"  extends="VkQueueFlagBits"                 name="VK_QUEUE_OPTICAL_FLOW_BIT_NV"/>
                <enum bitpos="29" extends="VkPipelineStageFlagBits2"        name="VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV"/>
                <enum bitpos="42" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV"/>
                <enum bitpos="43" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV"/>
                <enum bitpos="40" extends="VkFormatFeatureFlagBits2"        name="VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV"/>
                <enum bitpos="41" extends="VkFormatFeatureFlagBits2"        name="VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV"/>
                <enum bitpos="42" extends="VkFormatFeatureFlagBits2"        name="VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV"/>
                <type name="VkPhysicalDeviceOpticalFlowFeaturesNV"/>
                <type name="VkPhysicalDeviceOpticalFlowPropertiesNV"/>
                <type name="VkOpticalFlowUsageFlagBitsNV"/>
                <type name="VkOpticalFlowUsageFlagsNV"/>
                <type name="VkOpticalFlowImageFormatInfoNV"/>
                <type name="VkOpticalFlowImageFormatPropertiesNV"/>
                <type name="VkOpticalFlowGridSizeFlagBitsNV"/>
                <type name="VkOpticalFlowGridSizeFlagsNV"/>
                <type name="VkOpticalFlowPerformanceLevelNV"/>
                <type name="VkOpticalFlowSessionBindingPointNV"/>
                <type name="VkOpticalFlowSessionCreateFlagBitsNV"/>
                <type name="VkOpticalFlowSessionCreateFlagsNV"/>
                <type name="VkOpticalFlowExecuteFlagBitsNV"/>
                <type name="VkOpticalFlowExecuteFlagsNV"/>
                <type name="VkOpticalFlowSessionNV"/>
                <type name="VkOpticalFlowSessionCreateInfoNV"/>
                <type name="VkOpticalFlowSessionCreatePrivateDataInfoNV"/><comment>NV internal use only</comment>
                <type name="VkOpticalFlowExecuteInfoNV"/>
                <command name="vkGetPhysicalDeviceOpticalFlowImageFormatsNV"/>
                <command name="vkCreateOpticalFlowSessionNV"/>
                <command name="vkDestroyOpticalFlowSessionNV"/>
                <command name="vkBindOpticalFlowSessionImageNV"/>
                <command name="vkCmdOpticalFlowExecuteNV"/>
                <feature name="opticalFlow" struct="VkPhysicalDeviceOpticalFlowFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_EXT_legacy_dithering" number="466" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Shahbaz Youssefi @syoussefi" supported="vulkan" specialuse="glemulation">
            <require>
                <enum value="2"                                         name="VK_EXT_LEGACY_DITHERING_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_legacy_dithering&quot;"       name="VK_EXT_LEGACY_DITHERING_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT"/>
                <enum bitpos="7" extends="VkSubpassDescriptionFlagBits" name="VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT"/>
                <type name="VkPhysicalDeviceLegacyDitheringFeaturesEXT"/>
                <feature name="legacyDithering" struct="VkPhysicalDeviceLegacyDitheringFeaturesEXT"/>
            </require>
            <require depends="(VK_KHR_dynamic_rendering,VK_VERSION_1_3)+(VK_KHR_maintenance5,VK_VERSION_1_4)">
                <enum bitpos="3" extends="VkRenderingFlagBits"           name="VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT"/>
                <enum bitpos="34" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_ENABLE_LEGACY_DITHERING_BIT_EXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_pipeline_protected_access" number="467" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Shahbaz Youssefi @syoussefi" supported="vulkan" promotedto="VK_VERSION_1_4">
            <require>
                <enum value="1"                                             name="VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_pipeline_protected_access&quot;"  name="VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES"/>
                <enum extends="VkPipelineCreateFlagBits"                    name="VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT" alias="VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT"/>
                <enum extends="VkPipelineCreateFlagBits"                    name="VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT" alias="VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT"/>
                <type name="VkPhysicalDevicePipelineProtectedAccessFeaturesEXT"/>
                <feature name="pipelineProtectedAccess" struct="VkPhysicalDevicePipelineProtectedAccessFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_468" number="468" author="EXT" contact="Shahbaz Youssefi @syoussefi" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_468_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_468&quot;"          name="VK_EXT_EXTENSION_468_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_ANDROID_external_format_resolve" number="469" type="device" depends="VK_ANDROID_external_memory_android_hardware_buffer" platform="android" author="ANDROID" contact="Chris Forbes @chrisforbes" specialuse="glemulation" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_ANDROID_EXTERNAL_FORMAT_RESOLVE_SPEC_VERSION"/>
                <enum value="&quot;VK_ANDROID_external_format_resolve&quot;"  name="VK_ANDROID_EXTERNAL_FORMAT_RESOLVE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID"/>
                <type name="VkPhysicalDeviceExternalFormatResolveFeaturesANDROID"/>
                <type name="VkPhysicalDeviceExternalFormatResolvePropertiesANDROID"/>
                <type name="VkAndroidHardwareBufferFormatResolvePropertiesANDROID"/>
                <feature name="externalFormatResolve" struct="VkPhysicalDeviceExternalFormatResolveFeaturesANDROID"/>
            </require>
            <require depends="VK_KHR_dynamic_rendering,VK_VERSION_1_3">
                <enum bitpos="4" extends="VkResolveModeFlagBits"            name="VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_470" number="470" author="AMD" contact="Stu Smith" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_AMD_EXTENSION_470_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_470&quot;"          name="VK_AMD_EXTENSION_470_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_maintenance5" number="471" type="device" depends="(VK_VERSION_1_1+VK_KHR_dynamic_rendering),VK_VERSION_1_3" author="KHR" contact="Stu Smith @stu-s" supported="vulkan" promotedto="VK_VERSION_1_4" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_KHR_MAINTENANCE_5_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_maintenance5&quot;"           name="VK_KHR_MAINTENANCE_5_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR" alias="VK_STRUCTURE_TYPE_RENDERING_AREA_INFO"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR" alias="VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO"/>
                <type name="VkPhysicalDeviceMaintenance5FeaturesKHR"/>
                <type name="VkPhysicalDeviceMaintenance5PropertiesKHR"/>
                <enum extends="VkFormat"                                name="VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR" alias="VK_FORMAT_A1B5G5R5_UNORM_PACK16"/>
                <enum extends="VkFormat"                                name="VK_FORMAT_A8_UNORM_KHR" alias="VK_FORMAT_A8_UNORM"/>
                <command name="vkCmdBindIndexBuffer2KHR"/>
                <command name="vkGetRenderingAreaGranularityKHR"/>
                <type name="VkRenderingAreaInfoKHR"/>
                <command name="vkGetDeviceImageSubresourceLayoutKHR"/>
                <command name="vkGetImageSubresourceLayout2KHR"/>
                <type name="VkDeviceImageSubresourceInfoKHR"/>
                <type name="VkImageSubresource2KHR"/>
                <type name="VkSubresourceLayout2KHR"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR" alias="VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR" alias="VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2"/>
                <feature name="maintenance5" struct="VkPhysicalDeviceMaintenance5FeaturesKHR"/>
            </require>
            <require comment="Split off new 64-bit flags separately, for the moment">
                <enum extends="VkPipelineCreateFlagBits2"               name="VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR" alias="VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT"/>
                <enum extends="VkPipelineCreateFlagBits2"               name="VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR" alias="VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT"/>
                <enum extends="VkPipelineCreateFlagBits2"               name="VK_PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR" alias="VK_PIPELINE_CREATE_2_DERIVATIVE_BIT"/>
                <enum extends="VkPipelineCreateFlagBits2"               name="VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR" alias="VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT"/>
                <enum extends="VkPipelineCreateFlagBits2"               name="VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR" alias="VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT"/>
                <enum extends="VkBufferUsageFlagBits2"                  name="VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR" alias="VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT"/>
                <enum extends="VkBufferUsageFlagBits2"                  name="VK_BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR" alias="VK_BUFFER_USAGE_2_TRANSFER_DST_BIT"/>
                <enum extends="VkBufferUsageFlagBits2"                  name="VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR" alias="VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT"/>
                <enum extends="VkBufferUsageFlagBits2"                  name="VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR" alias="VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT"/>
                <enum extends="VkBufferUsageFlagBits2"                  name="VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR" alias="VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT"/>
                <enum extends="VkBufferUsageFlagBits2"                  name="VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR" alias="VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT"/>
                <enum extends="VkBufferUsageFlagBits2"                  name="VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR" alias="VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT"/>
                <enum extends="VkBufferUsageFlagBits2"                  name="VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR" alias="VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT"/>
                <enum extends="VkBufferUsageFlagBits2"                  name="VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR" alias="VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT"/>
                <type name="VkPipelineCreateFlags2KHR"/>
                <type name="VkPipelineCreateFlagBits2KHR"/>
                <type name="VkPipelineCreateFlags2CreateInfoKHR"/>
                <type name="VkBufferUsageFlags2KHR"/>
                <type name="VkBufferUsageFlagBits2KHR"/>
                <type name="VkBufferUsageFlags2CreateInfoKHR"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO"/>
            </require>
            <require depends="VK_NV_ray_tracing">
                <enum bitpos="5"  extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV"/>
            </require>
            <require depends="VK_KHR_pipeline_executable_properties">
                <enum bitpos="6"  extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR"/>
                <enum bitpos="7"  extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR"/>
            </require>
            <require depends="VK_VERSION_1_3,VK_EXT_pipeline_creation_cache_control">
                <enum extends="VkPipelineCreateFlagBits2"                name="VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR" alias="VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT"/>
                <enum extends="VkPipelineCreateFlagBits2"                name="VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR" alias="VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT"/>
            </require>
            <require depends="VK_EXT_graphics_pipeline_library">
                <enum bitpos="10" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT"/>
                <enum bitpos="23" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT"/>
            </require>
            <require depends="VK_KHR_pipeline_library">
                <enum bitpos="11" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR"/>
            </require>
            <require depends="VK_KHR_ray_tracing_pipeline">
                <enum bitpos="12" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR"/>
                <enum bitpos="13" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR"/>
                <enum bitpos="14" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR"/>
                <enum bitpos="15" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR"/>
                <enum bitpos="16" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR"/>
                <enum bitpos="17" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR"/>
                <enum bitpos="19" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR"/>
            </require>
            <require depends="VK_NV_device_generated_commands">
                <enum bitpos="18" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV"/>
            </require>
            <require depends="VK_NV_ray_tracing_motion_blur">
                <enum bitpos="20" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV"/>
            </require>
            <require depends="(VK_KHR_dynamic_rendering,VK_VERSION_1_3)+VK_KHR_fragment_shading_rate">
                <enum bitpos="21" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"/>
            </require>
            <require depends="(VK_KHR_dynamic_rendering,VK_VERSION_1_3)+VK_EXT_fragment_density_map">
                <enum bitpos="22" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT"/>
            </require>
            <require depends="VK_EXT_opacity_micromap">
                <enum bitpos="24" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT"/>
            </require>
            <require depends="VK_EXT_attachment_feedback_loop_layout">
                <enum bitpos="25" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT"/>
                <enum bitpos="26" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT"/>
            </require>
            <require depends="VK_VERSION_1_4,VK_EXT_pipeline_protected_access">
                <enum extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT"   alias="VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT"/>
                <enum extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT" alias="VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT"/>
            </require>
            <require depends="VK_NV_displacement_micromap">
                <enum bitpos="28" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV"/>
            </require>
            <require depends="VK_EXT_descriptor_buffer">
                <enum bitpos="29" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT"/>
            </require>
            <require depends="VK_EXT_conditional_rendering">
                <enum bitpos="9"  extends="VkBufferUsageFlagBits2"       name="VK_BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT"/>
            </require>
            <require depends="VK_KHR_ray_tracing_pipeline">
                <enum bitpos="10" extends="VkBufferUsageFlagBits2"       name="VK_BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR"/>
            </require>
            <require depends="VK_NV_ray_tracing">
                <enum extends="VkBufferUsageFlagBits2"                   name="VK_BUFFER_USAGE_2_RAY_TRACING_BIT_NV" alias="VK_BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR"/>
            </require>
            <require depends="VK_EXT_transform_feedback">
                <enum bitpos="11" extends="VkBufferUsageFlagBits2"       name="VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT"/>
                <enum bitpos="12" extends="VkBufferUsageFlagBits2"       name="VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT"/>
            </require>
            <require depends="VK_KHR_video_decode_queue">
                <enum bitpos="13" extends="VkBufferUsageFlagBits2"       name="VK_BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR"/>
                <enum bitpos="14" extends="VkBufferUsageFlagBits2"       name="VK_BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR"/>
            </require>
            <require depends="VK_KHR_video_encode_queue">
                <enum bitpos="15" extends="VkBufferUsageFlagBits2"       name="VK_BUFFER_USAGE_2_VIDEO_ENCODE_DST_BIT_KHR"/>
                <enum bitpos="16" extends="VkBufferUsageFlagBits2"       name="VK_BUFFER_USAGE_2_VIDEO_ENCODE_SRC_BIT_KHR"/>
            </require>
            <require depends="VK_VERSION_1_2,VK_KHR_buffer_device_address,VK_EXT_buffer_device_address">
                <enum extends="VkBufferUsageFlagBits2"                   name="VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR" alias="VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT"/>
            </require>
            <require depends="VK_KHR_acceleration_structure">
                <enum bitpos="19" extends="VkBufferUsageFlagBits2"       name="VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR"/>
                <enum bitpos="20" extends="VkBufferUsageFlagBits2"       name="VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR"/>
            </require>
            <require depends="VK_EXT_descriptor_buffer">
                <enum bitpos="21" extends="VkBufferUsageFlagBits2"       name="VK_BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT"/>
                <enum bitpos="22" extends="VkBufferUsageFlagBits2"       name="VK_BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT"/>
                <enum bitpos="26" extends="VkBufferUsageFlagBits2"       name="VK_BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT"/>
            </require>
            <require depends="VK_EXT_opacity_micromap">
                <enum bitpos="23" extends="VkBufferUsageFlagBits2"       name="VK_BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT"/>
                <enum bitpos="24" extends="VkBufferUsageFlagBits2"       name="VK_BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT"/>
            </require>
            <require depends="VK_ARM_pipeline_opacity_micromap">
                <enum bitpos="37"  extends="VkPipelineCreateFlagBits2" name="VK_PIPELINE_CREATE_2_DISALLOW_OPACITY_MICROMAP_BIT_ARM"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_472" number="472" author="AMD" contact="Stu Smith" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_AMD_EXTENSION_472_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_472&quot;"          name="VK_AMD_EXTENSION_472_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_473" number="473" author="AMD" contact="Stu Smith" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_AMD_EXTENSION_473_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_473&quot;"          name="VK_AMD_EXTENSION_473_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_474" number="474" author="AMD" contact="Stu Smith" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_AMD_EXTENSION_474_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_474&quot;"          name="VK_AMD_EXTENSION_474_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_475" number="475" author="AMD" contact="Stu Smith" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_AMD_EXTENSION_475_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_475&quot;"          name="VK_AMD_EXTENSION_475_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_476" number="476" author="AMD" contact="Stu Smith" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_AMD_EXTENSION_476_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_476&quot;"          name="VK_AMD_EXTENSION_476_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_anti_lag" number="477" type="device" author="AMD" contact="Stu Smith" supported="vulkan">
            <require>
                <enum value="1"                                         name="VK_AMD_ANTI_LAG_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_anti_lag&quot;"               name="VK_AMD_ANTI_LAG_EXTENSION_NAME"/>
                <enum offset="0"  extends="VkStructureType"             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ANTI_LAG_FEATURES_AMD"/>
                <enum offset="1"  extends="VkStructureType"             name="VK_STRUCTURE_TYPE_ANTI_LAG_DATA_AMD"/>
                <enum offset="2"  extends="VkStructureType"             name="VK_STRUCTURE_TYPE_ANTI_LAG_PRESENTATION_INFO_AMD"/>
                <type name="VkPhysicalDeviceAntiLagFeaturesAMD"/>
                <type name="VkAntiLagDataAMD"/>
                <type name="VkAntiLagPresentationInfoAMD"/>
                <type name="VkAntiLagModeAMD"/>
                <type name="VkAntiLagStageAMD"/>
                <command name="vkAntiLagUpdateAMD"/>
                <feature name="antiLag"                                 struct="VkPhysicalDeviceAntiLagFeaturesAMD"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_478" number="478" author="AMD" contact="Stu Smith" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_AMD_EXTENSION_478_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_478&quot;"          name="VK_AMD_EXTENSION_478_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_AMD_extension_479" number="479" author="AMD" contact="Stu Smith" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_AMD_EXTENSION_479_SPEC_VERSION"/>
                <enum value="&quot;VK_AMD_extension_479&quot;"          name="VK_AMD_EXTENSION_479_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_480" number="480" author="EXT" contact="Daniel Stone" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_480_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_480&quot;"          name="VK_EXT_EXTENSION_480_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_481" number="481" author="EXT" contact="Daniel Stone" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_481_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_481&quot;"          name="VK_EXT_EXTENSION_481_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_ray_tracing_position_fetch" number="482" type="device" depends="VK_KHR_acceleration_structure" author="KHR" contact="Eric Werness" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                                     name="VK_KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_ray_tracing_position_fetch&quot;"         name="VK_KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                          name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR"/>
                <enum bitpos="11" extends="VkBuildAccelerationStructureFlagBitsKHR" name="VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR"/>
                <type name="VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR"/>
                <feature name="rayTracingPositionFetch" struct="VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_shader_object" number="483" depends="((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_dynamic_rendering),VK_VERSION_1_3" type="device" author="EXT" contact="Daniel Story @daniel-story" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                            name="VK_EXT_SHADER_OBJECT_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_shader_object&quot;"             name="VK_EXT_SHADER_OBJECT_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT"/>
                <enum offset="2" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT"/>
                <enum extnumber="353" offset="1" extends="VkStructureType" name="VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT"/>
                <enum extnumber="353" offset="2" extends="VkStructureType" name="VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT"/>
                <enum extends="VkStructureType"                            name="VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT" alias="VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO"/>
                <enum offset="0" extends="VkObjectType"                    name="VK_OBJECT_TYPE_SHADER_EXT"/>
                <enum offset="0" extends="VkResult"                        name="VK_INCOMPATIBLE_SHADER_BINARY_EXT"/>
                <enum            extends="VkResult"                        name="VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT" alias="VK_INCOMPATIBLE_SHADER_BINARY_EXT" deprecated="aliased"/>
                <type name="VkShaderEXT"/>
                <type name="VkShaderCreateFlagBitsEXT"/>
                <type name="VkShaderCreateFlagsEXT"/>
                <type name="VkShaderCodeTypeEXT"/>
                <type name="VkPhysicalDeviceShaderObjectFeaturesEXT"/>
                <type name="VkPhysicalDeviceShaderObjectPropertiesEXT"/>
                <type name="VkShaderCreateInfoEXT"/>
                <type name="VkShaderRequiredSubgroupSizeCreateInfoEXT"/>
                <type name="VkVertexInputBindingDescription2EXT"/>
                <type name="VkVertexInputAttributeDescription2EXT"/>
                <type name="VkColorBlendEquationEXT"/>
                <type name="VkColorBlendAdvancedEXT"/>
                <command name="vkCreateShadersEXT"/>
                <command name="vkDestroyShaderEXT"/>
                <command name="vkGetShaderBinaryDataEXT"/>
                <command name="vkCmdBindShadersEXT"/>
                <command name="vkCmdSetCullModeEXT"/>
                <command name="vkCmdSetFrontFaceEXT"/>
                <command name="vkCmdSetPrimitiveTopologyEXT"/>
                <command name="vkCmdSetViewportWithCountEXT"/>
                <command name="vkCmdSetScissorWithCountEXT"/>
                <command name="vkCmdBindVertexBuffers2EXT"/>
                <command name="vkCmdSetDepthTestEnableEXT"/>
                <command name="vkCmdSetDepthWriteEnableEXT"/>
                <command name="vkCmdSetDepthCompareOpEXT"/>
                <command name="vkCmdSetDepthBoundsTestEnableEXT"/>
                <command name="vkCmdSetStencilTestEnableEXT"/>
                <command name="vkCmdSetStencilOpEXT"/>
                <command name="vkCmdSetVertexInputEXT"/>
                <command name="vkCmdSetPatchControlPointsEXT"/>
                <command name="vkCmdSetRasterizerDiscardEnableEXT"/>
                <command name="vkCmdSetDepthBiasEnableEXT"/>
                <command name="vkCmdSetLogicOpEXT"/>
                <command name="vkCmdSetPrimitiveRestartEnableEXT"/>
                <command name="vkCmdSetTessellationDomainOriginEXT"/>
                <command name="vkCmdSetDepthClampEnableEXT"/>
                <command name="vkCmdSetPolygonModeEXT"/>
                <command name="vkCmdSetRasterizationSamplesEXT"/>
                <command name="vkCmdSetSampleMaskEXT"/>
                <command name="vkCmdSetAlphaToCoverageEnableEXT"/>
                <command name="vkCmdSetAlphaToOneEnableEXT"/>
                <command name="vkCmdSetLogicOpEnableEXT"/>
                <command name="vkCmdSetColorBlendEnableEXT"/>
                <command name="vkCmdSetColorBlendEquationEXT"/>
                <command name="vkCmdSetColorWriteMaskEXT"/>
                <feature name="shaderObject" struct="VkPhysicalDeviceShaderObjectFeaturesEXT"/>
            </require>
            <require depends="VK_EXT_transform_feedback">
                <command name="vkCmdSetRasterizationStreamEXT"/>
            </require>
            <require depends="VK_EXT_conservative_rasterization">
                <command name="vkCmdSetConservativeRasterizationModeEXT"/>
                <command name="vkCmdSetExtraPrimitiveOverestimationSizeEXT"/>
            </require>
            <require depends="VK_EXT_depth_clip_enable">
                <command name="vkCmdSetDepthClipEnableEXT"/>
            </require>
            <require depends="VK_EXT_sample_locations">
                <command name="vkCmdSetSampleLocationsEnableEXT"/>
            </require>
            <require depends="VK_EXT_blend_operation_advanced">
                <command name="vkCmdSetColorBlendAdvancedEXT"/>
            </require>
            <require depends="VK_EXT_provoking_vertex">
                <command name="vkCmdSetProvokingVertexModeEXT"/>
            </require>
            <require depends="VK_EXT_line_rasterization">
                <command name="vkCmdSetLineRasterizationModeEXT"/>
                <command name="vkCmdSetLineStippleEnableEXT"/>
            </require>
            <require depends="VK_EXT_depth_clip_control">
                <command name="vkCmdSetDepthClipNegativeOneToOneEXT"/>
            </require>
            <require depends="VK_EXT_subgroup_size_control,VK_VERSION_1_3">
                <enum bitpos="1" extends="VkShaderCreateFlagBitsEXT" name="VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT"/>
                <enum bitpos="2" extends="VkShaderCreateFlagBitsEXT" name="VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT"/>
            </require>
            <require depends="VK_EXT_mesh_shader,VK_NV_mesh_shader">
                <enum bitpos="3" extends="VkShaderCreateFlagBitsEXT" name="VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT"/>
            </require>
            <require depends="VK_KHR_device_group,VK_VERSION_1_1">
                <enum bitpos="4" extends="VkShaderCreateFlagBitsEXT" name="VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT"/>
            </require>
            <require depends="VK_KHR_fragment_shading_rate">
                <enum bitpos="5" extends="VkShaderCreateFlagBitsEXT" name="VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT"/>
            </require>
            <require depends="VK_EXT_fragment_density_map">
                <enum bitpos="6" extends="VkShaderCreateFlagBitsEXT" name="VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT"/>
            </require>
            <require depends="VK_NV_clip_space_w_scaling">
                <command name="vkCmdSetViewportWScalingEnableNV"/>
            </require>
            <require depends="VK_NV_viewport_swizzle">
                <command name="vkCmdSetViewportSwizzleNV"/>
            </require>
            <require depends="VK_NV_fragment_coverage_to_color">
                <command name="vkCmdSetCoverageToColorEnableNV"/>
                <command name="vkCmdSetCoverageToColorLocationNV"/>
            </require>
            <require depends="VK_NV_framebuffer_mixed_samples">
                <command name="vkCmdSetCoverageModulationModeNV"/>
                <command name="vkCmdSetCoverageModulationTableEnableNV"/>
                <command name="vkCmdSetCoverageModulationTableNV"/>
            </require>
            <require depends="VK_NV_shading_rate_image">
                <command name="vkCmdSetShadingRateImageEnableNV"/>
            </require>
            <require depends="VK_NV_representative_fragment_test">
                <command name="vkCmdSetRepresentativeFragmentTestEnableNV"/>
            </require>
            <require depends="VK_NV_coverage_reduction_mode">
                <command name="vkCmdSetCoverageReductionModeNV"/>
            </require>
            <require depends="VK_EXT_depth_clamp_control">
                <command name="vkCmdSetDepthClampRangeEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_pipeline_binary" number="484" author="KHR" contact="Stu Smith @stu-s" depends="VK_KHR_maintenance5" type="device" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_KHR_PIPELINE_BINARY_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_pipeline_binary&quot;"      name="VK_KHR_PIPELINE_BINARY_EXTENSION_NAME"/>
                <enum name="VK_MAX_PIPELINE_BINARY_KEY_SIZE_KHR"/>
                <type name="VkPhysicalDevicePipelineBinaryFeaturesKHR"/>
                <type name="VkPhysicalDevicePipelineBinaryPropertiesKHR"/>
                <type name="VkDevicePipelineBinaryInternalCacheControlKHR"/>
                <type name="VkPipelineBinaryKHR"/>
                <type name="VkPipelineBinaryKeyKHR"/>
                <type name="VkPipelineBinaryDataKHR"/>
                <type name="VkPipelineBinaryKeysAndDataKHR"/>
                <type name="VkPipelineBinaryCreateInfoKHR"/>
                <type name="VkPipelineBinaryInfoKHR"/>
                <type name="VkReleaseCapturedPipelineDataInfoKHR"/>
                <type name="VkPipelineBinaryDataInfoKHR"/>
                <type name="VkPipelineCreateInfoKHR"/>
                <type name="VkPipelineBinaryHandlesInfoKHR"/>
                <command name="vkCreatePipelineBinariesKHR"/>
                <command name="vkDestroyPipelineBinaryKHR"/>
                <command name="vkGetPipelineKeyKHR"/>
                <command name="vkGetPipelineBinaryDataKHR"/>
                <command name="vkReleaseCapturedPipelineDataKHR"/>
                <enum offset="0" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_FEATURES_KHR"/>
                <enum offset="1" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PIPELINE_BINARY_CREATE_INFO_KHR"/>
                <enum offset="2" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PIPELINE_BINARY_INFO_KHR"/>
                <enum offset="3" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PIPELINE_BINARY_KEY_KHR"/>
                <enum offset="4" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_PROPERTIES_KHR"/>
                <enum offset="5" extends="VkStructureType" name="VK_STRUCTURE_TYPE_RELEASE_CAPTURED_PIPELINE_DATA_INFO_KHR"/>
                <enum offset="6" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PIPELINE_BINARY_DATA_INFO_KHR"/>
                <enum offset="7" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PIPELINE_CREATE_INFO_KHR"/>
                <enum offset="8" extends="VkStructureType" name="VK_STRUCTURE_TYPE_DEVICE_PIPELINE_BINARY_INTERNAL_CACHE_CONTROL_KHR"/>
                <enum offset="9" extends="VkStructureType" name="VK_STRUCTURE_TYPE_PIPELINE_BINARY_HANDLES_INFO_KHR"/>
                <enum offset="0" extends="VkObjectType" name="VK_OBJECT_TYPE_PIPELINE_BINARY_KHR"/>
                <enum offset="0" extends="VkResult" name="VK_PIPELINE_BINARY_MISSING_KHR"/>
                <enum offset="0" extends="VkResult" dir="-" name="VK_ERROR_NOT_ENOUGH_SPACE_KHR"/>
                <enum bitpos="31" extends="VkPipelineCreateFlagBits2" name="VK_PIPELINE_CREATE_2_CAPTURE_DATA_BIT_KHR"/>
                <feature name="pipelineBinaries" struct="VkPhysicalDevicePipelineBinaryFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_QCOM_tile_properties" number="485" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="QCOM" contact="Matthew Netsch @mnetsch" supported="vulkan">
            <require>
                <enum value="1"                                               name="VK_QCOM_TILE_PROPERTIES_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_tile_properties&quot;"             name="VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME"/>
                <command name="vkGetFramebufferTilePropertiesQCOM"/>
                <command name="vkGetDynamicRenderingTilePropertiesQCOM"/>
                <enum offset="0" extends="VkStructureType"                    name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM"/>
                <enum offset="1" extends="VkStructureType"                    name="VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM"/>
                <type name="VkPhysicalDeviceTilePropertiesFeaturesQCOM"/>
                <type name="VkTilePropertiesQCOM"/>
                <feature name="tileProperties" struct="VkPhysicalDeviceTilePropertiesFeaturesQCOM"/>
            </require>
            <require depends="VK_KHR_dynamic_rendering,VK_VERSION_1_3">
                <type name="VkRenderingInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_SEC_amigo_profiling" number="486" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="SEC" contact="Ralph Potter gitlab:@r_potter" supported="vulkan">
            <require>
                <enum value="1"                                               name="VK_SEC_AMIGO_PROFILING_SPEC_VERSION"/>
                <enum value="&quot;VK_SEC_amigo_profiling&quot;"              name="VK_SEC_AMIGO_PROFILING_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                    name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC"/>
                <enum offset="1" extends="VkStructureType"                    name="VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC"/>
                <type name="VkPhysicalDeviceAmigoProfilingFeaturesSEC"/>
                <type name="VkAmigoProfilingSubmitInfoSEC"/>
                <feature name="amigoProfiling" struct="VkPhysicalDeviceAmigoProfilingFeaturesSEC"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_487" number="487" author="EXT" contact="Shahbaz Youssefi @syoussefi" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_487_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_487&quot;"          name="VK_EXT_EXTENSION_487_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_488" number="488" author="EXT" contact="Shahbaz Youssefi @syoussefi" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_488_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_488&quot;"          name="VK_EXT_EXTENSION_488_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_QCOM_multiview_per_view_viewports" number="489" type="device" author="QCOM" contact="Matthew Netsch @mnetsch" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan">
            <require>
                <enum value="1"                                                name="VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_multiview_per_view_viewports&quot;" name="VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM"/>
                <type name="VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM"/>
                <feature name="multiviewPerViewViewports" struct="VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM"/>
            </require>
        </extension>
        <extension name="VK_NV_external_sci_sync2" number="490" author="NV" depends="VK_VERSION_1_1" platform="sci" type="device" contact="Kai Zhang @kazhang" supported="vulkansc">
            <require>
                <enum value="1"                                         name="VK_NV_EXTERNAL_SCI_SYNC_2_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_external_sci_sync2&quot;"      name="VK_NV_EXTERNAL_SCI_SYNC_2_EXTENSION_NAME"/>
                <enum offset="0"  extends="VkObjectType"                name="VK_OBJECT_TYPE_SEMAPHORE_SCI_SYNC_POOL_NV" comment="VkSemaphoreSciSyncPoolNV"/>
                <enum offset="0"  extends="VkStructureType"             name="VK_STRUCTURE_TYPE_SEMAPHORE_SCI_SYNC_POOL_CREATE_INFO_NV"/>
                <enum offset="1"  extends="VkStructureType"             name="VK_STRUCTURE_TYPE_SEMAPHORE_SCI_SYNC_CREATE_INFO_NV"/>
                <enum offset="2"  extends="VkStructureType"             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SCI_SYNC_2_FEATURES_NV"/>
                <type name="VkSemaphoreSciSyncPoolNV"/>
                <type name="VkPhysicalDeviceExternalSciSync2FeaturesNV"/>
                <type name="VkSemaphoreSciSyncPoolCreateInfoNV"/>
                <type name="VkSemaphoreSciSyncCreateInfoNV"/>
                <command name="vkCreateSemaphoreSciSyncPoolNV"/>
                <command name="vkDestroySemaphoreSciSyncPoolNV"/>
                <feature name="sciSyncFence,sciSyncSemaphore2" struct="VkPhysicalDeviceExternalSciSync2FeaturesNV"/>
                <feature name="sciSyncImport,sciSyncExport" struct="VkPhysicalDeviceExternalSciSync2FeaturesNV"/>
            </require>
            <require comment="functionality re-used unmodified from VK_NV_external_sci_sync">
                <enum extnumber="374" offset="0" extends="VkStructureType"   name="VK_STRUCTURE_TYPE_IMPORT_FENCE_SCI_SYNC_INFO_NV"/>
                <enum extnumber="374" offset="1" extends="VkStructureType"   name="VK_STRUCTURE_TYPE_EXPORT_FENCE_SCI_SYNC_INFO_NV"/>
                <enum extnumber="374" offset="2" extends="VkStructureType"   name="VK_STRUCTURE_TYPE_FENCE_GET_SCI_SYNC_INFO_NV"/>
                <enum extnumber="374" offset="3" extends="VkStructureType"   name="VK_STRUCTURE_TYPE_SCI_SYNC_ATTRIBUTES_INFO_NV"/>
                <enum bitpos="4" extends="VkExternalFenceHandleTypeFlagBits" name="VK_EXTERNAL_FENCE_HANDLE_TYPE_SCI_SYNC_OBJ_BIT_NV"/>
                <enum bitpos="5" extends="VkExternalFenceHandleTypeFlagBits" name="VK_EXTERNAL_FENCE_HANDLE_TYPE_SCI_SYNC_FENCE_BIT_NV"/>
                <type name="VkSciSyncClientTypeNV"/>
                <type name="VkSciSyncPrimitiveTypeNV"/>
                <type name="VkExportFenceSciSyncInfoNV"/>
                <type name="VkImportFenceSciSyncInfoNV"/>
                <type name="VkFenceGetSciSyncInfoNV"/>
                <type name="VkSciSyncAttributesInfoNV"/>
                <command name="vkGetFenceSciSyncFenceNV"/>
                <command name="vkGetFenceSciSyncObjNV"/>
                <command name="vkImportFenceSciSyncFenceNV"/>
                <command name="vkImportFenceSciSyncObjNV"/>
                <command name="vkGetPhysicalDeviceSciSyncAttributesNV"/>
            </require>
            <require depends="VKSC_VERSION_1_0" api="vulkansc">
                <enum offset="3" extends="VkStructureType"         name="VK_STRUCTURE_TYPE_DEVICE_SEMAPHORE_SCI_SYNC_POOL_RESERVATION_CREATE_INFO_NV"/>
                <type name="VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV"/>
            </require>
        </extension>
        <extension name="VK_NV_ray_tracing_invocation_reorder" number="491" type="device" depends="VK_KHR_ray_tracing_pipeline" author="NV" contact="Eric Werness @ewerness-nv" supported="vulkan">
            <require>
                <enum value="1"                                                 name="VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_ray_tracing_invocation_reorder&quot;"  name="VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV"/>
                <type name="VkRayTracingInvocationReorderModeNV"/>
                <type name="VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV"/>
                <type name="VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV"/>
                <feature name="rayTracingInvocationReorder" struct="VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_cooperative_vector" number="492" author="NV" type="device" contact="Jeff Bolz @jeffbolznv" supported="vulkan">
            <require>
                <enum value="4"                                                 name="VK_NV_COOPERATIVE_VECTOR_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_cooperative_vector&quot;"              name="VK_NV_COOPERATIVE_VECTOR_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_PROPERTIES_NV"/>
                <enum offset="2" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_COOPERATIVE_VECTOR_PROPERTIES_NV"/>
                <enum offset="4" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_CONVERT_COOPERATIVE_VECTOR_MATRIX_INFO_NV"/>
                <enum offset="0" extends="VkComponentTypeKHR"                   name="VK_COMPONENT_TYPE_SINT8_PACKED_NV"/>
                <enum offset="1" extends="VkComponentTypeKHR"                   name="VK_COMPONENT_TYPE_UINT8_PACKED_NV"/>
                <enum offset="2" extends="VkComponentTypeKHR"                   name="VK_COMPONENT_TYPE_FLOAT_E4M3_NV"/>
                <enum offset="3" extends="VkComponentTypeKHR"                   name="VK_COMPONENT_TYPE_FLOAT_E5M2_NV"/>
                <enum bitpos="44" extends="VkPipelineStageFlagBits2"            name="VK_PIPELINE_STAGE_2_CONVERT_COOPERATIVE_VECTOR_MATRIX_BIT_NV"/>
                <type name="VkPhysicalDeviceCooperativeVectorPropertiesNV"/>
                <type name="VkPhysicalDeviceCooperativeVectorFeaturesNV"/>
                <type name="VkCooperativeVectorPropertiesNV"/>
                <type name="VkConvertCooperativeVectorMatrixInfoNV"/>
                <type name="VkCooperativeVectorMatrixLayoutNV"/>
                <type name="VkComponentTypeKHR"/>
                <type name="VkDeviceOrHostAddressKHR"/>
                <type name="VkDeviceOrHostAddressConstKHR"/>
                <command name="vkGetPhysicalDeviceCooperativeVectorPropertiesNV"/>
                <command name="vkConvertCooperativeVectorMatrixNV"/>
                <command name="vkCmdConvertCooperativeVectorMatrixNV"/>
                <feature name="cooperativeVector" struct="VkPhysicalDeviceCooperativeVectorFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_extended_sparse_address_space" number="493" type="device" author="NV" contact="Russell Chou @russellcnv" supported="vulkan">
            <require>
                <enum value="1"                                               name="VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extended_sparse_address_space&quot;" name="VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                    name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType"                    name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV"/>
                <type name="VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV"/>
                <type name="VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV"/>
                <feature name="extendedSparseAddressSpace" struct="VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_494" number="494" author="NV" contact="Daniel Koch @dgkoch" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_NV_EXTENSION_494_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_494&quot;"           name="VK_NV_EXTENSION_494_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_mutable_descriptor_type" number="495" type="device" supported="vulkan" ratified="vulkan" author="EXT" contact="Joshua Ashton @Joshua-Ashton,Hans-Kristian Arntzen @HansKristian-Work" specialuse="d3demulation" depends="VK_KHR_maintenance3">
            <require>
                <enum value="1"                                                name="VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_mutable_descriptor_type&quot;"       name="VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType" extnumber="352"     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT"/>
                <enum offset="2" extends="VkStructureType" extnumber="352"     name="VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT"/>
                <enum offset="0" extends="VkDescriptorType" extnumber="352"    name="VK_DESCRIPTOR_TYPE_MUTABLE_EXT"/>
                <enum bitpos="2" extends="VkDescriptorPoolCreateFlagBits"      name="VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT"/>
                <enum bitpos="2" extends="VkDescriptorSetLayoutCreateFlagBits" name="VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT"/>
                <type name="VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT"/>
                <type name="VkMutableDescriptorTypeListEXT"/>
                <type name="VkMutableDescriptorTypeCreateInfoEXT"/>
                <feature name="mutableDescriptorType" struct="VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_legacy_vertex_attributes" number="496" author="EXT" contact="Mike Blumenkrantz @zmike" type="device" supported="vulkan" ratified="vulkan" depends="VK_EXT_vertex_input_dynamic_state" specialuse="glemulation">
            <require>
                <enum value="1"                                                   name="VK_EXT_LEGACY_VERTEX_ATTRIBUTES_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_legacy_vertex_attributes&quot;"   name="VK_EXT_LEGACY_VERTEX_ATTRIBUTES_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                        name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                        name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT"/>
                <type name="VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT"/>
                <type name="VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT"/>
                <feature name="legacyVertexAttributes" struct="VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_layer_settings" number="497" author="EXT" contact="Christophe Riccio @christophe" type="instance" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="2"                                             name="VK_EXT_LAYER_SETTINGS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_layer_settings&quot;"              name="VK_EXT_LAYER_SETTINGS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT"/>
                <type name="VkLayerSettingsCreateInfoEXT"/>
                <type name="VkLayerSettingEXT"/>
                <type name="VkLayerSettingTypeEXT"/>
            </require>
        </extension>
        <extension name="VK_ARM_shader_core_builtins" number="498" author="ARM" contact="Kevin Petit @kpet" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan">
            <require>
                <enum value="2"                                         name="VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION"/>
                <enum value="&quot;VK_ARM_shader_core_builtins&quot;"   name="VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME"/>
                <enum offset="0"  extends="VkStructureType"             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM"/>
                <enum offset="1"  extends="VkStructureType"             name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM"/>
                <type name="VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM"/>
                <type name="VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM"/>
                <feature name="shaderCoreBuiltins" struct="VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM"/>
            </require>
        </extension>
        <extension name="VK_EXT_pipeline_library_group_handles" number="499" type="device" depends="VK_KHR_ray_tracing_pipeline+VK_KHR_pipeline_library" author="EXT" contact="Hans-Kristian Arntzen @HansKristian-Work" supported="vulkan">
            <require>
                <enum value="1"                                                  name="VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_pipeline_library_group_handles&quot;"  name="VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                       name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT"/>
                <type name="VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT"/>
                <feature name="pipelineLibraryGroupHandles" struct="VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_dynamic_rendering_unused_attachments" number="500" author="EXT" contact="Piers Daniell @pdaniell-nv" type="device" depends="((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_dynamic_rendering),VK_VERSION_1_3" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                                        name="VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_dynamic_rendering_unused_attachments&quot;"  name="VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_EXTENSION_NAME"/>
                <enum offset="0"  extends="VkStructureType"                            name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT"/>
                <type name="VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT"/>
                <feature name="dynamicRenderingUnusedAttachments" struct="VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_501" number="501" author="SEC" contact="Chris Hambacher @chambacher" type="device" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_501_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_501&quot;"              name="VK_EXT_EXTENSION_501_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_502" number="502" author="HUAWEI" contact="Pan Gao @PanGao-h" type="device" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_502_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_502&quot;"              name="VK_EXT_EXTENSION_502_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_503" number="503" author="HUAWEI" contact="Pan Gao @PanGao-h" type="device" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_503_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_503&quot;"              name="VK_EXT_EXTENSION_503_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_504" number="504" author="NV" contact="Piers Daniell @pdaniell-nv" type="instance" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_NV_EXTENSION_504_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_504&quot;"               name="VK_NV_EXTENSION_504_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_505" number="505" author="EXT" contact="Jamie Madill @jmadill" type="device" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_505_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_505&quot;"              name="VK_EXT_EXTENSION_505_EXTENSION_NAME"/>
                <enum bitpos="5"  extends="VkRenderingFlagBits"             name="VK_RENDERING_EXTENSION_505_BIT_EXT"/>
            </require>
        </extension>
        <extension name="VK_NV_low_latency2" number="506" author="NV" depends="VK_VERSION_1_2,VK_KHR_timeline_semaphore" contact="Charles Hansen @cshansen" type="device" supported="vulkan" nofeatures="true">
            <require>
                <enum value="2"                                             name="VK_NV_LOW_LATENCY_2_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_low_latency2&quot;"                name="VK_NV_LOW_LATENCY_2_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV"/>
                <enum offset="4" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV"/>
                <enum offset="5" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV"/>
                <enum offset="6" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV"/>
                <enum offset="7" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV"/>
                <enum offset="8" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV"/>
                <type name="VkLatencySleepModeInfoNV"/>
                <type name="VkLatencySleepInfoNV"/>
                <type name="VkSetLatencyMarkerInfoNV"/>
                <type name="VkGetLatencyMarkerInfoNV"/>
                <type name="VkLatencyTimingsFrameReportNV"/>
                <type name="VkLatencyMarkerNV"/>
                <type name="VkLatencySubmissionPresentIdNV"/>
                <type name="VkSwapchainLatencyCreateInfoNV"/>
                <type name="VkOutOfBandQueueTypeInfoNV"/>
                <type name="VkOutOfBandQueueTypeNV"/>
                <type name="VkLatencySurfaceCapabilitiesNV"/>
                <command name="vkSetLatencySleepModeNV"/>
                <command name="vkLatencySleepNV"/>
                <command name="vkSetLatencyMarkerNV"/>
                <command name="vkGetLatencyTimingsNV"/>
                <command name="vkQueueNotifyOutOfBandNV"/>
            </require>
        </extension>
        <extension name="VK_KHR_cooperative_matrix" number="507" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="KHR" contact="Kevin Petit @kpet" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="2"                                              name="VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_cooperative_matrix&quot;"          name="VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR"/>
                <enum offset="1" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR"/>
                <enum offset="2" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR"/>
                <type name="VkCooperativeMatrixPropertiesKHR"/>
                <type name="VkScopeKHR"/>
                <type name="VkComponentTypeKHR"/>
                <type name="VkPhysicalDeviceCooperativeMatrixFeaturesKHR"/>
                <type name="VkPhysicalDeviceCooperativeMatrixPropertiesKHR"/>
                <command name="vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR"/>
                <feature name="cooperativeMatrix" struct="VkPhysicalDeviceCooperativeMatrixFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_508" number="508" author="EXT" contact="Kevin Petit @kpet" type="device" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_508_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_508&quot;"              name="VK_EXT_EXTENSION_508_EXTENSION_NAME"/>
                <enum bitpos="10" extends="VkQueueFlagBits"                 name="VK_QUEUE_RESERVED_10_BIT_EXT"/>
                <enum bitpos="42" extends="VkPipelineStageFlagBits2"        name="VK_PIPELINE_STAGE_2_RESERVED_42_BIT_EXT"/>
                <enum bitpos="47" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_RESERVED_47_BIT_EXT"/>
                <enum bitpos="48" extends="VkAccessFlagBits2"               name="VK_ACCESS_2_RESERVED_48_BIT_EXT"/>
                <enum bitpos="48" extends="VkFormatFeatureFlagBits2"        name="VK_FORMAT_FEATURE_2_RESERVED_48_BIT_EXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_509" number="509" author="EXT" contact="Kevin Petit @kpet" type="device" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_509_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_509&quot;"              name="VK_EXT_EXTENSION_509_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_MESA_extension_510" number="510" author="MESA" contact="Dave Airlie @airlied" type="device" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_MESA_EXTENSION_510_SPEC_VERSION"/>
                <enum value="&quot;VK_MESA_extension_510&quot;"             name="VK_MESA_EXTENSION_510_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_QCOM_multiview_per_view_render_areas" number="511" type="device" author="QCOM" contact="Matthew Netsch @mnetsch" supported="vulkan">
            <require>
                <enum value="1"                                                   name="VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_multiview_per_view_render_areas&quot;" name="VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                        name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM"/>
                <enum offset="1" extends="VkStructureType"                        name="VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM"/>
                <type name="VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM"/>
                <type name="VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM"/>
                <feature name="multiviewPerViewRenderAreas" struct="VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM"/>
            </require>
        </extension>
        <extension name="VK_KHR_compute_shader_derivatives" number="512" type="device" depends="VK_KHR_get_physical_device_properties2" author="KHR" contact="Jean-Noe Morissette @MagicPoncho" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_KHR_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_compute_shader_derivatives&quot;" name="VK_KHR_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType" extnumber="202"  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_PROPERTIES_KHR"/>
                <type name="VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR"/>
                <type name="VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR"/>
                <feature name="computeDerivativeGroupLinear" struct="VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_video_decode_av1" number="513" author="KHR" depends="VK_KHR_video_decode_queue" contact="Daniel Rakos @aqnuep" type="device" supported="vulkan" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                             name="VK_KHR_VIDEO_DECODE_AV1_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_video_decode_av1&quot;"           name="VK_KHR_VIDEO_DECODE_AV1_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR"/>
                <enum offset="4" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR"/>
                <enum offset="5" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR"/>
                <enum bitpos="2" extends="VkVideoCodecOperationFlagBitsKHR" name="VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR"/>
                <enum name="VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR"/>
                <type name="VkVideoDecodeAV1ProfileInfoKHR"/>
                <type name="VkVideoDecodeAV1CapabilitiesKHR"/>
                <type name="VkVideoDecodeAV1SessionParametersCreateInfoKHR"/>
                <type name="VkVideoDecodeAV1PictureInfoKHR"/>
                <type name="VkVideoDecodeAV1DpbSlotInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_video_encode_av1" number="514" author="KHR" depends="VK_KHR_video_encode_queue" contact="Daniel Rakos @aqnuep" type="device" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_VIDEO_ENCODE_AV1_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_video_encode_av1&quot;"           name="VK_KHR_VIDEO_ENCODE_AV1_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_CAPABILITIES_KHR"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PICTURE_INFO_KHR"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_DPB_SLOT_INFO_KHR"/>
                <enum offset="4" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_AV1_FEATURES_KHR"/>
                <enum offset="5" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PROFILE_INFO_KHR"/>
                <enum offset="6" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_INFO_KHR"/>
                <enum offset="7" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_LAYER_INFO_KHR"/>
                <enum offset="8" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUALITY_LEVEL_PROPERTIES_KHR"/>
                <enum offset="9" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_CREATE_INFO_KHR"/>
                <enum offset="10" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_GOP_REMAINING_FRAME_INFO_KHR"/>
                <enum bitpos="18" extends="VkVideoCodecOperationFlagBitsKHR" name="VK_VIDEO_CODEC_OPERATION_ENCODE_AV1_BIT_KHR"/>
                <enum name="VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR"/>
                <type name="VkPhysicalDeviceVideoEncodeAV1FeaturesKHR"/>
                <type name="VkVideoEncodeAV1PredictionModeKHR"/>
                <type name="VkVideoEncodeAV1RateControlGroupKHR"/>
                <type name="VkVideoEncodeAV1CapabilityFlagBitsKHR"/>
                <type name="VkVideoEncodeAV1CapabilityFlagsKHR"/>
                <type name="VkVideoEncodeAV1StdFlagBitsKHR"/>
                <type name="VkVideoEncodeAV1StdFlagsKHR"/>
                <type name="VkVideoEncodeAV1SuperblockSizeFlagBitsKHR"/>
                <type name="VkVideoEncodeAV1SuperblockSizeFlagsKHR"/>
                <type name="VkVideoEncodeAV1CapabilitiesKHR"/>
                <type name="VkVideoEncodeAV1QualityLevelPropertiesKHR"/>
                <type name="VkVideoEncodeAV1SessionCreateInfoKHR"/>
                <type name="VkVideoEncodeAV1SessionParametersCreateInfoKHR"/>
                <type name="VkVideoEncodeAV1PictureInfoKHR"/>
                <type name="VkVideoEncodeAV1DpbSlotInfoKHR"/>
                <type name="VkVideoEncodeAV1ProfileInfoKHR"/>
                <type name="VkVideoEncodeAV1QIndexKHR"/>
                <type name="VkVideoEncodeAV1FrameSizeKHR"/>
                <type name="VkVideoEncodeAV1GopRemainingFrameInfoKHR"/>
                <type name="VkVideoEncodeAV1RateControlInfoKHR"/>
                <type name="VkVideoEncodeAV1RateControlFlagBitsKHR"/>
                <type name="VkVideoEncodeAV1RateControlFlagsKHR"/>
                <type name="VkVideoEncodeAV1RateControlLayerInfoKHR"/>
                <feature name="videoEncodeAV1" struct="VkPhysicalDeviceVideoEncodeAV1FeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_515" number="515" author="KHR" contact="Ahmed Abdelkhalek @aabdelkh" type="device" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_515_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_515&quot;"              name="VK_KHR_EXTENSION_515_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_video_maintenance1" number="516" author="KHR" contact="Daniel Rakos @aqnuep" type="device" depends="VK_KHR_video_queue" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_VIDEO_MAINTENANCE_1_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_video_maintenance1&quot;"         name="VK_KHR_VIDEO_MAINTENANCE_1_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR"/>
                <enum bitpos="20" extends="VkImageCreateFlagBits"           name="VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR"/>
                <enum bitpos="6" extends="VkBufferCreateFlagBits"           name="VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR"/>
                <enum bitpos="2" extends="VkVideoSessionCreateFlagBitsKHR"  name="VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR"/>
                <type name="VkPhysicalDeviceVideoMaintenance1FeaturesKHR"/>
                <type name="VkVideoInlineQueryInfoKHR"/>
                <feature name="videoMaintenance1" struct="VkPhysicalDeviceVideoMaintenance1FeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_NV_per_stage_descriptor_set" number="517" depends="VK_KHR_maintenance6,VK_VERSION_1_4" type="device" author="NV" contact="Piers Daniell @pdaniell-nv" supported="vulkan">
            <require>
                <enum value="1"                                                name="VK_NV_PER_STAGE_DESCRIPTOR_SET_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_per_stage_descriptor_set&quot;"       name="VK_NV_PER_STAGE_DESCRIPTOR_SET_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV"/>
                <enum bitpos="6" extends="VkDescriptorSetLayoutCreateFlagBits" name="VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV"/>
                <type name="VkPhysicalDevicePerStageDescriptorSetFeaturesNV"/>
                <feature name="perStageDescriptorSet" struct="VkPhysicalDevicePerStageDescriptorSetFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_MESA_extension_518" number="518" author="MESA" contact="Dave Airlie @airlied" type="device" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_MESA_EXTENSION_518_SPEC_VERSION"/>
                <enum value="&quot;VK_MESA_extension_518&quot;"             name="VK_MESA_EXTENSION_518_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_QCOM_image_processing2" number="519" type="device" author="QCOM" contact="Matthew Netsch @mnetsch" supported="vulkan" depends="VK_QCOM_image_processing">
            <require>
                <enum value="1"                                                   name="VK_QCOM_IMAGE_PROCESSING_2_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_image_processing2&quot;"               name="VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                        name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM"/>
                <enum offset="1" extends="VkStructureType"                        name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM"/>
                <enum offset="2" extends="VkStructureType"                        name="VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM"/>
                <type name="VkPhysicalDeviceImageProcessing2FeaturesQCOM"/>
                <type name="VkPhysicalDeviceImageProcessing2PropertiesQCOM"/>
                <type name="VkSamplerBlockMatchWindowCreateInfoQCOM"/>
                <type name="VkBlockMatchWindowCompareModeQCOM"/>
                <feature name="textureBlockMatch2" struct="VkPhysicalDeviceImageProcessing2FeaturesQCOM"/>
            </require>
        </extension>
        <extension name="VK_QCOM_filter_cubic_weights" number="520" type="device" author="QCOM" contact="Matthew Netsch @mnetsch" supported="vulkan" depends="VK_EXT_filter_cubic">
            <require>
                <enum value="1"                                             name="VK_QCOM_FILTER_CUBIC_WEIGHTS_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_filter_cubic_weights&quot;"      name="VK_QCOM_FILTER_CUBIC_WEIGHTS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM"/>
                <type name="VkPhysicalDeviceCubicWeightsFeaturesQCOM"/>
                <type name="VkSamplerCubicWeightsCreateInfoQCOM"/>
                <type name="VkBlitImageCubicWeightsInfoQCOM"/>
                <type name="VkCubicFilterWeightsQCOM"/>
                <feature name="selectableCubicWeights" struct="VkPhysicalDeviceCubicWeightsFeaturesQCOM"/>
            </require>
        </extension>
        <extension name="VK_QCOM_ycbcr_degamma" number="521" type="device" author="QCOM" contact="Matthew Netsch @mnetsch" supported="vulkan">
            <require>
                <enum value="1"                                                   name="VK_QCOM_YCBCR_DEGAMMA_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_ycbcr_degamma&quot;"                   name="VK_QCOM_YCBCR_DEGAMMA_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                        name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM"/>
                <enum offset="1" extends="VkStructureType"                        name="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM"/>
                <type name="VkPhysicalDeviceYcbcrDegammaFeaturesQCOM"/>
                <type name="VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM"/>
                <feature name="ycbcrDegamma" struct="VkPhysicalDeviceYcbcrDegammaFeaturesQCOM"/>
            </require>
        </extension>
        <extension name="VK_QCOM_filter_cubic_clamp" number="522" type="device" author="QCOM" depends="(VK_EXT_filter_cubic)+(VK_VERSION_1_2,VK_EXT_sampler_filter_minmax)" contact="Matthew Netsch @mnetsch" supported="vulkan">
            <require>
                <enum value="1"                                                   name="VK_QCOM_FILTER_CUBIC_CLAMP_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_filter_cubic_clamp&quot;"              name="VK_QCOM_FILTER_CUBIC_CLAMP_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                        name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM"/>
                <enum offset="0" extends="VkSamplerReductionMode"                 name="VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM"/>
                <type name="VkPhysicalDeviceCubicClampFeaturesQCOM"/>
                <feature name="cubicRangeClamp" struct="VkPhysicalDeviceCubicClampFeaturesQCOM"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_523" number="523" author="EXT" contact="Kevin Petit @kpet" supported="disabled">
            <require>
                <enum value="0"                                                name="VK_EXT_EXTENSION_523_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_523&quot;"                 name="VK_EXT_EXTENSION_523_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_524" number="524" author="EXT" contact="Tony Zlatinski @tzlatinski" supported="disabled">
            <require>
                <enum value="0"                                                name="VK_EXT_EXTENSION_524_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_524&quot;"                 name="VK_EXT_EXTENSION_524_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_attachment_feedback_loop_dynamic_state" number="525" type="device" author="EXT" depends="(VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_EXT_attachment_feedback_loop_layout" contact="Mike Blumenkrantz @zmike" supported="vulkan" ratified="vulkan" specialuse="glemulation,d3demulation">
            <require>
                <enum value="1"                                                                name="VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_attachment_feedback_loop_dynamic_state&quot;" name="VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                                     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT"/>
                <enum offset="0" extends="VkDynamicState"                                      name="VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT"/>
                <type name="VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT"/>
                <command name="vkCmdSetAttachmentFeedbackLoopEnableEXT"/>
                <feature name="attachmentFeedbackLoopDynamicState" struct="VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_vertex_attribute_divisor" number="526" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="KHR" contact="Shahbaz Youssefi @syoussefi" supported="vulkan,vulkansc" promotedto="VK_VERSION_1_4" ratified="vulkan,vulkansc">
            <require>
                <enum value="1"                                            name="VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_vertex_attribute_divisor&quot;"  name="VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                            name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES"/>
                <enum extends="VkStructureType"                            name="VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO"/>
                <enum extends="VkStructureType"                            name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES"/>
                <type name="VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR"/>
                <type name="VkVertexInputBindingDivisorDescriptionKHR"/>
                <type name="VkPipelineVertexInputDivisorStateCreateInfoKHR"/>
                <type name="VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR"/>
                <feature name="vertexAttributeInstanceRateDivisor" struct="VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_load_store_op_none" number="527" author="KHR" type="device" contact="Shahbaz Youssefi @syoussefi" supported="vulkan" promotedto="VK_VERSION_1_4" ratified="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                         name="VK_KHR_LOAD_STORE_OP_NONE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_load_store_op_none&quot;"     name="VK_KHR_LOAD_STORE_OP_NONE_EXTENSION_NAME"/>
                <enum extends="VkAttachmentLoadOp"                      name="VK_ATTACHMENT_LOAD_OP_NONE_KHR" alias="VK_ATTACHMENT_LOAD_OP_NONE"/>
                <enum extends="VkAttachmentStoreOp" name="VK_ATTACHMENT_STORE_OP_NONE_KHR" alias="VK_ATTACHMENT_STORE_OP_NONE"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_528" number="528" author="EXT" contact="Shahbaz Youssefi @syoussefi" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_528_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_528&quot;"          name="VK_EXT_EXTENSION_528_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_shader_float_controls2" number="529" type="device" depends="VK_VERSION_1_1+VK_KHR_shader_float_controls" author="KHR" contact="Graeme Leese @gnl21" supported="vulkan" promotedto="VK_VERSION_1_4" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_KHR_SHADER_FLOAT_CONTROLS_2_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shader_float_controls2&quot;" name="VK_KHR_SHADER_FLOAT_CONTROLS_2_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES"/>
                <type name="VkPhysicalDeviceShaderFloatControls2FeaturesKHR"/>
                <feature name="shaderFloatControls2" struct="VkPhysicalDeviceShaderFloatControls2FeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_QNX_external_memory_screen_buffer" number="530" type="device" author="QNX" depends="((VK_KHR_sampler_ycbcr_conversion+VK_KHR_external_memory+VK_KHR_dedicated_allocation),VK_VERSION_1_1)+VK_EXT_queue_family_foreign" platform="screen" contact="Mike Gorchak @mgorchak-blackberry, Aaron Ruby @aruby-blackberry" supported="vulkan,vulkansc">
            <require>
                <enum value="1"                                         name="VK_QNX_EXTERNAL_MEMORY_SCREEN_BUFFER_SPEC_VERSION"/>
                <enum value="&quot;VK_QNX_external_memory_screen_buffer&quot;" name="VK_QNX_EXTERNAL_MEMORY_SCREEN_BUFFER_EXTENSION_NAME"/>
                <enum bitpos="14" extends="VkExternalMemoryHandleTypeFlagBits" name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX"/>
                <enum offset="0" extends="VkStructureType"                name="VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX"/>
                <enum offset="1" extends="VkStructureType"                name="VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX"/>
                <enum offset="2" extends="VkStructureType"                name="VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX"/>
                <enum offset="3" extends="VkStructureType"                name="VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX"/>
                <enum offset="4" extends="VkStructureType"                name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX"/>
                <type name="VkScreenBufferPropertiesQNX"/>
                <type name="VkScreenBufferFormatPropertiesQNX"/>
                <type name="VkImportScreenBufferInfoQNX"/>
                <type name="VkExternalFormatQNX"/>
                <type name="VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX"/>
                <command name="vkGetScreenBufferPropertiesQNX"/>
                <feature name="screenBufferImport" struct="VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX"/>
            </require>
        </extension>
        <extension name="VK_MSFT_layered_driver" number="531" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="MSFT" contact="Jesse Natalie @jenatali" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                         name="VK_MSFT_LAYERED_DRIVER_SPEC_VERSION"/>
                <enum value="&quot;VK_MSFT_layered_driver&quot;"        name="VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT"/>
                <type name="VkLayeredDriverUnderlyingApiMSFT"/>
                <type name="VkPhysicalDeviceLayeredDriverPropertiesMSFT"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_532" number="532" author="KHR" contact="Tobias Hector @tobias" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_KHR_EXTENSION_532_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_532&quot;"          name="VK_KHR_EXTENSION_532_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_533" number="533" author="EXT" contact="Daniel Koch @dgkoch" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_533_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_533&quot;"          name="VK_EXT_EXTENSION_533_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_index_type_uint8" number="534" type="device" author="KHR" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Piers Daniell @pdaniell-nv" supported="vulkan,vulkansc" promotedto="VK_VERSION_1_4" ratified="vulkan,vulkansc">
            <require>
                <enum value="1"                                         name="VK_KHR_INDEX_TYPE_UINT8_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_index_type_uint8&quot;"       name="VK_KHR_INDEX_TYPE_UINT8_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES"/>
                <enum extends="VkIndexType"                             name="VK_INDEX_TYPE_UINT8_KHR" alias="VK_INDEX_TYPE_UINT8"/>
                <type name="VkPhysicalDeviceIndexTypeUint8FeaturesKHR"/>
                <feature name="indexTypeUint8" struct="VkPhysicalDeviceIndexTypeUint8FeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_line_rasterization" number="535" type="device" author="KHR" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Piers Daniell @pdaniell-nv" supported="vulkan,vulkansc" promotedto="VK_VERSION_1_4" ratified="vulkan,vulkansc">
            <require>
                <enum value="1"                                         name="VK_KHR_LINE_RASTERIZATION_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_line_rasterization&quot;"     name="VK_KHR_LINE_RASTERIZATION_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES"/>
                <enum extends="VkDynamicState"                          name="VK_DYNAMIC_STATE_LINE_STIPPLE_KHR" alias="VK_DYNAMIC_STATE_LINE_STIPPLE"/>
                <enum extends="VkLineRasterizationMode"                 name="VK_LINE_RASTERIZATION_MODE_DEFAULT_KHR" alias="VK_LINE_RASTERIZATION_MODE_DEFAULT"/>
                <enum extends="VkLineRasterizationMode"                 name="VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR" alias="VK_LINE_RASTERIZATION_MODE_RECTANGULAR"/>
                <enum extends="VkLineRasterizationMode"                 name="VK_LINE_RASTERIZATION_MODE_BRESENHAM_KHR" alias="VK_LINE_RASTERIZATION_MODE_BRESENHAM"/>
                <enum extends="VkLineRasterizationMode"                 name="VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR" alias="VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH"/>
                <type name="VkPhysicalDeviceLineRasterizationFeaturesKHR"/>
                <type name="VkPhysicalDeviceLineRasterizationPropertiesKHR"/>
                <type name="VkPipelineRasterizationLineStateCreateInfoKHR"/>
                <type name="VkLineRasterizationModeKHR"/>
                <command name="vkCmdSetLineStippleKHR"/>
                <feature name="rectangularLines,bresenhamLines,smoothLines,stippledRectangularLines,stippledBresenhamLines,stippledSmoothLines" struct="VkPhysicalDeviceLineRasterizationFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_QCOM_extension_536" number="536" type="device" author="QCOM" contact="Matthew Netsch @mnetsch" supported="disabled">
            <require>
                <enum value="0"                                                   name="VK_QCOM_EXTENSION_536_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_extension_536&quot;"                   name="VK_QCOM_EXTENSION_536_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_537" number="537" author="EXT" contact="Daniel Koch @dgkoch" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_537_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_537&quot;"          name="VK_EXT_EXTENSION_537_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_538" number="538" author="EXT" contact="Daniel Koch @dgkoch" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_538_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_538&quot;"          name="VK_EXT_EXTENSION_538_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_539" number="539" author="EXT" contact="Daniel Koch @dgkoch" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_539_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_539&quot;"          name="VK_EXT_EXTENSION_539_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_540" number="540" author="EXT" contact="Daniel Koch @dgkoch" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_540_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_540&quot;"          name="VK_EXT_EXTENSION_540_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_541" number="541" author="EXT" contact="Daniel Koch @dgkoch" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_541_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_541&quot;"          name="VK_EXT_EXTENSION_541_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_542" number="542" author="EXT" contact="Daniel Koch @dgkoch" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_542_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_542&quot;"          name="VK_EXT_EXTENSION_542_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_543" number="543" author="EXT" contact="Daniel Koch @dgkoch" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_543_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_543&quot;"          name="VK_EXT_EXTENSION_543_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_calibrated_timestamps" number="544" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="KHR" contact="Daniel Rakos @aqnuep" supported="vulkan,vulkansc" ratified="vulkan,vulkansc" nofeatures="true">
            <require>
                <enum value="1"                                         name="VK_KHR_CALIBRATED_TIMESTAMPS_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_calibrated_timestamps&quot;"  name="VK_KHR_CALIBRATED_TIMESTAMPS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType" extnumber="185" name="VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR"/>
                <type name="VkTimeDomainKHR"/>
                <type name="VkCalibratedTimestampInfoKHR"/>
                <command name="vkGetPhysicalDeviceCalibrateableTimeDomainsKHR"/>
                <command name="vkGetCalibratedTimestampsKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_shader_expect_assume" number="545" type="device" author="KHR" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" contact="Kevin Petit @kpet" supported="vulkan" promotedto="VK_VERSION_1_4" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_KHR_SHADER_EXPECT_ASSUME_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shader_expect_assume&quot;"   name="VK_KHR_SHADER_EXPECT_ASSUME_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES"/>
                <type name="VkPhysicalDeviceShaderExpectAssumeFeaturesKHR"/>
                <feature name="shaderExpectAssume" struct="VkPhysicalDeviceShaderExpectAssumeFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_maintenance6" number="546" type="device" depends="VK_VERSION_1_1" author="KHR" contact="Jon Leech @oddhack" supported="vulkan" promotedto="VK_VERSION_1_4" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_KHR_MAINTENANCE_6_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_maintenance6&quot;"           name="VK_KHR_MAINTENANCE_6_EXTENSION_NAME"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR" alias="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR" alias="VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR" alias="VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR" alias="VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO"/>
                <type name="VkPhysicalDeviceMaintenance6FeaturesKHR"/>
                <type name="VkPhysicalDeviceMaintenance6PropertiesKHR"/>
                <type name="VkBindMemoryStatusKHR"/>
                <type name="VkBindDescriptorSetsInfoKHR"/>
                <type name="VkPushConstantsInfoKHR"/>
                <command name="vkCmdBindDescriptorSets2KHR"/>
                <command name="vkCmdPushConstants2KHR"/>
                <feature name="maintenance6" struct="VkPhysicalDeviceMaintenance6FeaturesKHR"/>
            </require>
            <require depends="VK_KHR_push_descriptor">
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR" alias="VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO"/>
                <enum extends="VkStructureType"                         name="VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR" alias="VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO"/>
                <type name="VkPushDescriptorSetInfoKHR"/>
                <type name="VkPushDescriptorSetWithTemplateInfoKHR"/>
                <command name="vkCmdPushDescriptorSet2KHR"/>
                <command name="vkCmdPushDescriptorSetWithTemplate2KHR"/>
            </require>
            <require depends="VK_EXT_descriptor_buffer">
                <enum offset="7" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT"/>
                <enum offset="8" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT"/>
                <type name="VkSetDescriptorBufferOffsetsInfoEXT"/>
                <type name="VkBindDescriptorBufferEmbeddedSamplersInfoEXT"/>
                <command name="vkCmdSetDescriptorBufferOffsets2EXT"/>
                <command name="vkCmdBindDescriptorBufferEmbeddedSamplers2EXT"/>
            </require>
            <require comment="Individual APIs with dependencies on specific versions/extensions should get their own require blocks with depends= attribute set appropriately">
            </require>
        </extension>
        <extension name="VK_NV_descriptor_pool_overallocation" number="547" type="device" author="NV" depends="VK_VERSION_1_1" contact="Piers Daniell @pdaniell-nv" supported="vulkan">
            <require>
                <enum value="1"                                                 name="VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_descriptor_pool_overallocation&quot;"  name="VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV"/>
                <enum bitpos="3" extends="VkDescriptorPoolCreateFlagBits"       name="VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV"/>
                <enum bitpos="4" extends="VkDescriptorPoolCreateFlagBits"       name="VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV"/>
                <type name="VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV"/>
                <feature name="descriptorPoolOverallocation" struct="VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_QCOM_extension_548" number="548" type="device" author="QCOM" contact="Patrick Boyle @pboyleQCOM" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_QCOM_EXTENSION_548_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_extension_548&quot;"         name="VK_QCOM_EXTENSION_548_EXTENSION_NAME"/>
                <enum bitpos="3"  extends="VkMemoryHeapFlagBits"        name="VK_MEMORY_HEAP_RESERVED_3_QCOM"/>
                <enum bitpos="27" extends="VkBufferUsageFlagBits"       name="VK_BUFFER_USAGE_RESERVED_27_BIT_QCOM"/>
                <enum bitpos="27" extends="VkBufferUsageFlagBits2"      name="VK_BUFFER_USAGE_2_RESERVED_27_BIT_QCOM"/>
                <enum bitpos="27" extends="VkImageUsageFlagBits"        name="VK_IMAGE_USAGE_RESERVED_27_QCOM"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_549" number="549" author="NV" contact="Piers Daniell @pdaniell-nv" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_NV_EXTENSION_549_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_549&quot;"           name="VK_NV_EXTENSION_549_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_550" number="550" author="NV" contact="Daniel Koch @dgkoch" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_NV_EXTENSION_550_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_550&quot;"           name="VK_NV_EXTENSION_550_EXTENSION_NAME"/>
                <enum bitpos="46" extends="VkPipelineStageFlagBits2"    name="VK_PIPELINE_STAGE_2_RESERVED_46_BIT_NV"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_551" number="551" author="NV" contact="Daniel Koch @dgkoch" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_NV_EXTENSION_551_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_551&quot;"           name="VK_NV_EXTENSION_551_EXTENSION_NAME"/>
                <enum bitpos="45" extends="VkPipelineStageFlagBits2"   name="VK_PIPELINE_STAGE_2_RESERVED_45_BIT_NV"/>
                <enum bitpos="55" extends="VkAccessFlagBits2"          name="VK_ACCESS_2_RESERVED_55_BIT_NV"/>
                <enum bitpos="56" extends="VkAccessFlagBits2"          name="VK_ACCESS_2_RESERVED_56_BIT_NV"/>
                <enum bitpos="32" extends="VkBufferUsageFlagBits2"     name="VK_BUFFER_USAGE_2_RESERVED_32_BIT_NV"/>
            </require>
        </extension>
        <extension name="VK_NV_display_stereo" number="552" type="instance" depends="VK_KHR_display+VK_KHR_get_display_properties2" author="NV" contact="Russell Chou @russellcnv" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                name="VK_NV_DISPLAY_STEREO_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_display_stereo&quot;" name="VK_NV_DISPLAY_STEREO_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"     name="VK_STRUCTURE_TYPE_DISPLAY_SURFACE_STEREO_CREATE_INFO_NV"/>
                <enum offset="1" extends="VkStructureType"     name="VK_STRUCTURE_TYPE_DISPLAY_MODE_STEREO_PROPERTIES_NV"/>
                <type name="VkDisplaySurfaceStereoCreateInfoNV"/>
                <type name="VkDisplaySurfaceStereoTypeNV"/>
                <type name="VkDisplayModeStereoPropertiesNV"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_553" number="553" author="KHR" contact="Ahmed Abdelkhalek @aabdelkh" type="device" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_553_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_553&quot;"              name="VK_KHR_EXTENSION_553_EXTENSION_NAME"/>
                <enum bitpos="2"  extends="VkVideoEncodeFlagBitsKHR"        name="VK_VIDEO_ENCODE_RESERVED_2_BIT_KHR"/>
                <enum bitpos="10" extends="VkVideoEncodeH264CapabilityFlagBitsKHR" name="VK_VIDEO_ENCODE_H264_CAPABILITY_RESERVED_10_BIT_KHR"/>
                <enum bitpos="11" extends="VkVideoEncodeH265CapabilityFlagBitsKHR" name="VK_VIDEO_ENCODE_H265_CAPABILITY_RESERVED_11_BIT_KHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_video_encode_quantization_map" number="554" type="device" depends="VK_KHR_video_encode_queue+VK_KHR_format_feature_flags2" author="KHR" contact="Ahmed Abdelkhalek @aabdelkh" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="2"                                                 name="VK_KHR_VIDEO_ENCODE_QUANTIZATION_MAP_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_video_encode_quantization_map&quot;"  name="VK_KHR_VIDEO_ENCODE_QUANTIZATION_MAP_EXTENSION_NAME"/>
                <enum offset="0"  extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_CAPABILITIES_KHR"/>
                <enum offset="1"  extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_VIDEO_FORMAT_QUANTIZATION_MAP_PROPERTIES_KHR"/>
                <enum offset="2"  extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_INFO_KHR"/>
                <enum offset="5"  extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_SESSION_PARAMETERS_CREATE_INFO_KHR"/>
                <enum offset="9"  extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUANTIZATION_MAP_FEATURES_KHR"/>
                <enum bitpos="2"  extends="VkVideoEncodeCapabilityFlagBitsKHR"  name="VK_VIDEO_ENCODE_CAPABILITY_QUANTIZATION_DELTA_MAP_BIT_KHR"/>
                <enum bitpos="3"  extends="VkVideoEncodeCapabilityFlagBitsKHR"  name="VK_VIDEO_ENCODE_CAPABILITY_EMPHASIS_MAP_BIT_KHR"/>
                <enum bitpos="3"  extends="VkVideoSessionCreateFlagBitsKHR"     name="VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR"/>
                <enum bitpos="4"  extends="VkVideoSessionCreateFlagBitsKHR"     name="VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_EMPHASIS_MAP_BIT_KHR"/>
                <enum bitpos="0"  extends="VkVideoSessionParametersCreateFlagBitsKHR" name="VK_VIDEO_SESSION_PARAMETERS_CREATE_QUANTIZATION_MAP_COMPATIBLE_BIT_KHR"/>
                <enum bitpos="0"  extends="VkVideoEncodeFlagBitsKHR"            name="VK_VIDEO_ENCODE_WITH_QUANTIZATION_DELTA_MAP_BIT_KHR"/>
                <enum bitpos="1"  extends="VkVideoEncodeFlagBitsKHR"            name="VK_VIDEO_ENCODE_WITH_EMPHASIS_MAP_BIT_KHR"/>
                <enum bitpos="25" extends="VkImageUsageFlagBits"                name="VK_IMAGE_USAGE_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR"/>
                <enum bitpos="26" extends="VkImageUsageFlagBits"                name="VK_IMAGE_USAGE_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR"/>
                <enum bitpos="49" extends="VkFormatFeatureFlagBits2"            name="VK_FORMAT_FEATURE_2_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR"/>
                <enum bitpos="50" extends="VkFormatFeatureFlagBits2"            name="VK_FORMAT_FEATURE_2_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR"/>
                <enum offset="0"  extends="VkImageLayout"                       name="VK_IMAGE_LAYOUT_VIDEO_ENCODE_QUANTIZATION_MAP_KHR"/>
                <type name="VkVideoEncodeFlagBitsKHR" comment="This is a temporary workaround for processors not recognizing that VK_VIDEO_ENCODE_WITH_*_MAP_BIT_KHR above also requires this type"/>
                <type name="VkVideoSessionParametersCreateFlagBitsKHR" comment="This is a temporary workaround for processors not recognizing that VK_VIDEO_ENCODE_WITH_*_MAP_BIT_KHR above also requires this type"/>
                <type name="VkVideoEncodeQuantizationMapCapabilitiesKHR"/>
                <type name="VkVideoFormatQuantizationMapPropertiesKHR"/>
                <type name="VkVideoEncodeQuantizationMapInfoKHR"/>
                <type name="VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR"/>
                <type name="VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR"/>
                <feature name="videoEncodeQuantizationMap" struct="VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR"/>
            </require>
            <require depends="VK_KHR_video_encode_h264">
                <enum offset="3"  extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUANTIZATION_MAP_CAPABILITIES_KHR"/>
                <enum bitpos="9"  extends="VkVideoEncodeH264CapabilityFlagBitsKHR" name="VK_VIDEO_ENCODE_H264_CAPABILITY_MB_QP_DIFF_WRAPAROUND_BIT_KHR"/>
                <type name="VkVideoEncodeH264QuantizationMapCapabilitiesKHR"/>
            </require>
            <require depends="VK_KHR_video_encode_h265">
                <enum offset="4"  extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUANTIZATION_MAP_CAPABILITIES_KHR"/>
                <enum offset="6"  extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_VIDEO_FORMAT_H265_QUANTIZATION_MAP_PROPERTIES_KHR"/>
                <enum bitpos="10" extends="VkVideoEncodeH265CapabilityFlagBitsKHR" name="VK_VIDEO_ENCODE_H265_CAPABILITY_CU_QP_DIFF_WRAPAROUND_BIT_KHR"/>
                <type name="VkVideoEncodeH265QuantizationMapCapabilitiesKHR"/>
                <type name="VkVideoFormatH265QuantizationMapPropertiesKHR"/>
            </require>
            <require depends="VK_KHR_video_encode_av1">
                <enum offset="7"  extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUANTIZATION_MAP_CAPABILITIES_KHR"/>
                <enum offset="8"  extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_VIDEO_FORMAT_AV1_QUANTIZATION_MAP_PROPERTIES_KHR"/>
                <type name="VkVideoEncodeAV1QuantizationMapCapabilitiesKHR"/>
                <type name="VkVideoFormatAV1QuantizationMapPropertiesKHR"/>
            </require>
        </extension>
        <extension name="VK_IMG_extension_555" number="555" author="IMG" contact="Jarred Davies" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_IMG_EXTENSION_555_SPEC_VERSION"/>
                <enum value="&quot;VK_IMG_extension_555&quot;"              name="VK_IMG_EXTENSION_555_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_raw_access_chains" number="556" type="device" author="NV" contact="Rodrigo Locatti @rlocatti" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_NV_RAW_ACCESS_CHAINS_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_raw_access_chains&quot;"           name="VK_NV_RAW_ACCESS_CHAINS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV"/>
                <type name="VkPhysicalDeviceRawAccessChainsFeaturesNV"/>
                <feature name="shaderRawAccessChains" struct="VkPhysicalDeviceRawAccessChainsFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_557" number="557" type="device" author="NV" contact="Chris Lentini @clentini" supported="disabled">
            <require>
                <enum value="1"                                             name="VK_NV_EXTENSION_557_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_557&quot;"               name="VK_NV_EXTENSION_557_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_558" number="558" type="device" author="KHR" contact="Ahmed Abdelkhalek @aabdelkh" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_558_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_558&quot;"              name="VK_KHR_EXTENSION_558_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_shader_relaxed_extended_instruction" number="559" type="device" author="KHR" contact="Nathan Gauër @Keenuts" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                                       name="VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_shader_relaxed_extended_instruction&quot;"  name="VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                            name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR"/>
                <type name="VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR"/>
                <feature name="shaderRelaxedExtendedInstruction" struct="VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_NV_command_buffer_inheritance" number="560" type="device" author="NV" contact="Lujin Wang @lujinwangnv" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_NV_COMMAND_BUFFER_INHERITANCE_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_command_buffer_inheritance&quot;"  name="VK_NV_COMMAND_BUFFER_INHERITANCE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMMAND_BUFFER_INHERITANCE_FEATURES_NV"/>
                <type name="VkPhysicalDeviceCommandBufferInheritanceFeaturesNV"/>
                <feature name="commandBufferInheritance" struct="VkPhysicalDeviceCommandBufferInheritanceFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_561" number="561" author="EXT" contact="Piers Daniell @pdaniell-nv" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_561_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_561&quot;"              name="VK_EXT_EXTENSION_561_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_562" number="562" author="KHR" contact="Piers Daniell @pdaniell-nv" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_562_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_562&quot;"              name="VK_KHR_EXTENSION_562_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_maintenance7" number="563" type="device" depends="VK_VERSION_1_1" author="KHR" contact="Mike Blumenkrantz @zmike" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                         name="VK_KHR_MAINTENANCE_7_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_maintenance7&quot;"           name="VK_KHR_MAINTENANCE_7_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR"/>
                <enum offset="1" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR"/>
                <enum offset="2" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR"/>
                <enum offset="3" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR"/>
                <enum offset="4" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR"/>
                <enum offset="0" extends="VkSubpassContents" extnumber="452" name="VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR"/>
                <enum bitpos="4" extends="VkRenderingFlagBits"          name="VK_RENDERING_CONTENTS_INLINE_BIT_KHR" comment="Promoted from extension 452"/>
                <type name="VkPhysicalDeviceMaintenance7FeaturesKHR"/>
                <type name="VkPhysicalDeviceMaintenance7PropertiesKHR"/>
                <type name="VkPhysicalDeviceLayeredApiPropertiesListKHR"/>
                <type name="VkPhysicalDeviceLayeredApiPropertiesKHR"/>
                <type name="VkPhysicalDeviceLayeredApiKHR"/>
                <type name="VkPhysicalDeviceLayeredApiVulkanPropertiesKHR"/>
                <feature name="maintenance7" struct="VkPhysicalDeviceMaintenance7FeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_NV_shader_atomic_float16_vector" number="564" type="device" author="NV" contact="Jeff Bolz @jeffbolznv" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_shader_atomic_float16_vector&quot;" name="VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV"/>
                <type name="VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV"/>
                <feature name="shaderFloat16VectorAtomics" struct="VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_EXT_shader_replicated_composites" number="565" type="device" author="EXT" contact="Kevin Petit @kpet" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                               name="VK_EXT_SHADER_REPLICATED_COMPOSITES_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_shader_replicated_composites&quot;" name="VK_EXT_SHADER_REPLICATED_COMPOSITES_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                    name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT"/>
                <type name="VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT"/>
                <feature name="shaderReplicatedComposites" struct="VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_ARM_extension_566" number="566" author="ARM" contact="Kevin Petit @kpet" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_ARM_EXTENSION_566_SPEC_VERSION"/>
                <enum value="&quot;VK_ARM_extension_566&quot;"              name="VK_ARM_EXTENSION_566_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_ARM_extension_567" number="567" author="ARM" contact="Kevin Petit @kpet" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_ARM_EXTENSION_567_SPEC_VERSION"/>
                <enum value="&quot;VK_ARM_extension_567&quot;"              name="VK_ARM_EXTENSION_567_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_ARM_extension_568" number="568" author="ARM" contact="Kevin Petit @kpet" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_ARM_EXTENSION_568_SPEC_VERSION"/>
                <enum value="&quot;VK_ARM_extension_568&quot;"              name="VK_ARM_EXTENSION_568_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_ray_tracing_validation" number="569" type="device" author="NV" contact="Vikram Kushwaha @vkushwaha-nv" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_NV_RAY_TRACING_VALIDATION_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_ray_tracing_validation&quot;"      name="VK_NV_RAY_TRACING_VALIDATION_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV"/>
                <type name="VkPhysicalDeviceRayTracingValidationFeaturesNV"/>
                <feature name="rayTracingValidation" struct="VkPhysicalDeviceRayTracingValidationFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_cluster_acceleration_structure" number="570" type="device" depends="VK_KHR_acceleration_structure" author="NV" contact="Vikram Kushwaha @vkushwaha" supported="vulkan">
            <require>
                <enum value="2"                                                 name="VK_NV_CLUSTER_ACCELERATION_STRUCTURE_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_cluster_acceleration_structure&quot;"  name="VK_NV_CLUSTER_ACCELERATION_STRUCTURE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_PROPERTIES_NV"/>
                <enum offset="2" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_CLUSTERS_BOTTOM_LEVEL_INPUT_NV"/>
                <enum offset="3" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_TRIANGLE_CLUSTER_INPUT_NV"/>
                <enum offset="4" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_MOVE_OBJECTS_INPUT_NV"/>
                <enum offset="5" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_INPUT_INFO_NV"/>
                <enum offset="6" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_COMMANDS_INFO_NV"/>
                <enum offset="7" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CLUSTER_ACCELERATION_STRUCTURE_CREATE_INFO_NV"/>
                <type name="VkPhysicalDeviceClusterAccelerationStructureFeaturesNV"/>
                <type name="VkPhysicalDeviceClusterAccelerationStructurePropertiesNV"/>
                <type name="VkClusterAccelerationStructureClustersBottomLevelInputNV"/>
                <type name="VkClusterAccelerationStructureTriangleClusterInputNV"/>
                <type name="VkClusterAccelerationStructureMoveObjectsInputNV"/>
                <type name="VkClusterAccelerationStructureOpInputNV"/>
                <type name="VkClusterAccelerationStructureInputInfoNV"/>
                <type name="VkClusterAccelerationStructureCommandsInfoNV"/>
                <type name="VkStridedDeviceAddressNV"/>
                <type name="VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV"/>
                <type name="VkClusterAccelerationStructureClusterFlagsNV"/>
                <type name="VkClusterAccelerationStructureClusterFlagBitsNV"/>
                <type name="VkClusterAccelerationStructureGeometryFlagsNV"/>
                <type name="VkClusterAccelerationStructureGeometryFlagBitsNV"/>
                <type name="VkClusterAccelerationStructureAddressResolutionFlagsNV"/>
                <type name="VkClusterAccelerationStructureAddressResolutionFlagBitsNV"/>
                <type name="VkClusterAccelerationStructureMoveObjectsInfoNV"/>
                <type name="VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV"/>
                <type name="VkClusterAccelerationStructureBuildTriangleClusterInfoNV"/>
                <type name="VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV"/>
                <type name="VkClusterAccelerationStructureInstantiateClusterInfoNV"/>
                <type name="VkClusterAccelerationStructureIndexFormatFlagBitsNV"/>
                <type name="VkClusterAccelerationStructureIndexFormatFlagsNV"/>
                <type name="VkClusterAccelerationStructureTypeNV"/>
                <type name="VkClusterAccelerationStructureOpTypeNV"/>
                <type name="VkClusterAccelerationStructureOpModeNV"/>
                <command name="vkGetClusterAccelerationStructureBuildSizesNV"/>
                <command name="vkCmdBuildClusterAccelerationStructureIndirectNV"/>
                <feature name="clusterAccelerationStructure" struct="VkPhysicalDeviceClusterAccelerationStructureFeaturesNV"/>
            </require>
            <require depends="VK_EXT_opacity_micromap">
                <enum value="-5" extends="VkOpacityMicromapSpecialIndexEXT" name="VK_OPACITY_MICROMAP_SPECIAL_INDEX_CLUSTER_GEOMETRY_DISABLE_OPACITY_MICROMAP_NV"/>
            </require>
            <require depends="VK_KHR_ray_tracing_pipeline">
                <type name="VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV"/>
            </require>
        </extension>
        <extension name="VK_NV_partitioned_acceleration_structure" number="571" type="device" depends="VK_KHR_acceleration_structure" author="NV" contact="Vikram Kushwaha @vkushwaha" supported="vulkan">
            <require>
                <enum value="1"                                                     name="VK_NV_PARTITIONED_ACCELERATION_STRUCTURE_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_partitioned_acceleration_structure&quot;"  name="VK_NV_PARTITIONED_ACCELERATION_STRUCTURE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_PROPERTIES_NV"/>
                <enum offset="2" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_PARTITIONED_ACCELERATION_STRUCTURE_NV"/>
                <enum offset="3" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCES_INPUT_NV"/>
                <enum offset="4" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_BUILD_PARTITIONED_ACCELERATION_STRUCTURE_INFO_NV"/>
                <enum offset="5" extends="VkStructureType"                      name="VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_FLAGS_NV"/>
                <enum offset="0" extends="VkDescriptorType"                     name="VK_DESCRIPTOR_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_NV"/>
                <enum name="VK_PARTITIONED_ACCELERATION_STRUCTURE_PARTITION_INDEX_GLOBAL_NV"/>
                <type name="VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV"/>
                <type name="VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV"/>
                <type name="VkPartitionedAccelerationStructureFlagsNV"/>
                <type name="VkPartitionedAccelerationStructureOpTypeNV"/>
                <type name="VkBuildPartitionedAccelerationStructureIndirectCommandNV"/>
                <type name="VkPartitionedAccelerationStructureInstanceFlagsNV"/>
                <type name="VkPartitionedAccelerationStructureInstanceFlagBitsNV"/>
                <type name="VkPartitionedAccelerationStructureWriteInstanceDataNV"/>
                <type name="VkPartitionedAccelerationStructureUpdateInstanceDataNV"/>
                <type name="VkPartitionedAccelerationStructureWritePartitionTranslationDataNV"/>
                <type name="VkWriteDescriptorSetPartitionedAccelerationStructureNV"/>
                <type name="VkPartitionedAccelerationStructureInstancesInputNV"/>
                <type name="VkBuildPartitionedAccelerationStructureInfoNV"/>
                <command name="vkGetPartitionedAccelerationStructuresBuildSizesNV"/>
                <command name="vkCmdBuildPartitionedAccelerationStructuresNV"/>
                <feature name="partitionedAccelerationStructure" struct="VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_572" number="572" author="NV" contact="Jeff Juliano @jjuliano" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_NV_EXTENSION_572_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_572&quot;"               name="VK_NV_EXTENSION_572_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_device_generated_commands" number="573" author="EXT" type="device" depends="VK_KHR_buffer_device_address+VK_KHR_maintenance5" contact="Mike Blumenkrantz @zmike" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                                     name="VK_EXT_DEVICE_GENERATED_COMMANDS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_device_generated_commands&quot;"          name="VK_EXT_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME"/>
                <enum bitpos="7" extends="VkShaderCreateFlagBitsEXT"        name="VK_SHADER_CREATE_INDIRECT_BINDABLE_BIT_EXT"/>
                <enum bitpos="31" extends="VkBufferUsageFlagBits2"          name="VK_BUFFER_USAGE_2_PREPROCESS_BUFFER_BIT_EXT"/>

                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_EXT"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_EXT"/>
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_CREATE_INFO_EXT"/>
                <enum offset="4" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_EXT"/>
                <enum offset="6" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_EXT"/>
                <enum offset="7" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_EXT"/>
                <enum offset="8" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_PIPELINE_EXT"/>
                <enum offset="9" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_SHADER_EXT"/>
                <enum offset="10" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_PIPELINE_INFO_EXT"/>
                <enum offset="11" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_INFO_EXT"/>
                <enum offset="12" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_LAYOUT_INFO_EXT"/>
                <enum offset="13" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_GENERATED_COMMANDS_PIPELINE_INFO_EXT"/>
                <enum offset="14" extends="VkStructureType"                 name="VK_STRUCTURE_TYPE_GENERATED_COMMANDS_SHADER_INFO_EXT"/>

                <enum offset="0" extends="VkObjectType"                     name="VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_EXT"/>
                <enum offset="1" extends="VkObjectType"                     name="VK_OBJECT_TYPE_INDIRECT_EXECUTION_SET_EXT"/>

                <enum bitpos="38" extends="VkPipelineCreateFlagBits2"       name="VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_EXT"/>

                <enum extends="VkPipelineStageFlagBits"         name="VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_EXT"  alias="VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV"/>
                <enum extends="VkAccessFlagBits"                name="VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_EXT"     alias="VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV"/>
                <enum extends="VkAccessFlagBits"                name="VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_EXT"    alias="VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV"/>

                <type name="VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT"/>
                <type name="VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT"/>
                <type name="VkGeneratedCommandsMemoryRequirementsInfoEXT"/>
                <type name="VkIndirectExecutionSetCreateInfoEXT"/>
                <type name="VkIndirectExecutionSetInfoEXT"/>
                <type name="VkIndirectExecutionSetPipelineInfoEXT"/>
                <type name="VkIndirectExecutionSetShaderInfoEXT"/>
                <type name="VkGeneratedCommandsInfoEXT"/>
                <type name="VkWriteIndirectExecutionSetPipelineEXT"/>
                <type name="VkIndirectCommandsLayoutCreateInfoEXT"/>
                <type name="VkIndirectCommandsLayoutTokenEXT"/>
                <type name="VkDrawIndirectCountIndirectCommandEXT"/>
                <type name="VkIndirectCommandsVertexBufferTokenEXT"/>
                <type name="VkBindVertexBufferIndirectCommandEXT"/>
                <type name="VkIndirectCommandsIndexBufferTokenEXT"/>
                <type name="VkBindIndexBufferIndirectCommandEXT"/>
                <type name="VkIndirectCommandsPushConstantTokenEXT"/>
                <type name="VkIndirectCommandsExecutionSetTokenEXT"/>
                <type name="VkIndirectCommandsTokenDataEXT"/>
                <type name="VkIndirectCommandsLayoutEXT"/>
                <type name="VkIndirectExecutionSetEXT"/>
                <type name="VkIndirectCommandsTokenTypeEXT"/>
                <type name="VkIndirectExecutionSetInfoTypeEXT"/>
                <type name="VkIndirectCommandsLayoutUsageFlagsEXT"/>
                <type name="VkIndirectCommandsLayoutUsageFlagBitsEXT"/>
                <type name="VkIndirectCommandsInputModeFlagsEXT"/>
                <type name="VkIndirectCommandsInputModeFlagBitsEXT"/>
                <type name="VkIndirectExecutionSetShaderLayoutInfoEXT"/>
                <type name="VkGeneratedCommandsPipelineInfoEXT"/>
                <type name="VkGeneratedCommandsShaderInfoEXT"/>

                <command name="vkGetGeneratedCommandsMemoryRequirementsEXT"/>
                <command name="vkCmdPreprocessGeneratedCommandsEXT"/>
                <command name="vkCmdExecuteGeneratedCommandsEXT"/>
                <command name="vkCreateIndirectCommandsLayoutEXT"/>
                <command name="vkDestroyIndirectCommandsLayoutEXT"/>
                <command name="vkCreateIndirectExecutionSetEXT"/>
                <command name="vkDestroyIndirectExecutionSetEXT"/>
                <command name="vkUpdateIndirectExecutionSetPipelineEXT"/>
                <command name="vkUpdateIndirectExecutionSetShaderEXT"/>

                <feature name="deviceGeneratedCommands" struct="VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT"/>
            </require>
            <require depends="VK_EXT_shader_object">
                <type name="VkWriteIndirectExecutionSetShaderEXT"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_574" number="574" author="KHR" contact="Ralph Potter gitlab:@r_potter" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_574_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_574&quot;"              name="VK_KHR_EXTENSION_574_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_maintenance8" number="575" type="device" depends="VK_VERSION_1_1" author="KHR" contact="Mike Blumenkrantz @zmike" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_MAINTENANCE_8_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_maintenance8&quot;"               name="VK_KHR_MAINTENANCE_8_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_8_FEATURES_KHR"/>
		<enum bitpos="3" extends="VkPipelineCacheCreateFlagBits"    name="VK_PIPELINE_CACHE_CREATE_INTERNALLY_SYNCHRONIZED_MERGE_BIT_KHR"/>
                <enum offset="2" extends="VkStructureType"              name="VK_STRUCTURE_TYPE_MEMORY_BARRIER_ACCESS_FLAGS_3_KHR"/>
                <type name="VkPhysicalDeviceMaintenance8FeaturesKHR"/>
                <enum bitpos="5" extends="VkDependencyFlagBits" name="VK_DEPENDENCY_QUEUE_FAMILY_OWNERSHIP_TRANSFER_USE_ALL_STAGES_BIT_KHR"/>
                <type name="VkMemoryBarrierAccessFlags3KHR"/>
                <type name="VkAccessFlagBits3KHR"/>
                <type name="VkAccessFlags3KHR"/>
                <feature name="maintenance8" struct="VkPhysicalDeviceMaintenance8FeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_MESA_image_alignment_control" number="576" type="device" author="MESA" contact="Hans-Kristian Arntzen @HansKristian-Work" specialuse="d3demulation" supported="vulkan" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1">
            <require>
                <enum value="1"                                             name="VK_MESA_IMAGE_ALIGNMENT_CONTROL_SPEC_VERSION"/>
                <enum value="&quot;VK_MESA_image_alignment_control&quot;"   name="VK_MESA_IMAGE_ALIGNMENT_CONTROL_EXTENSION_NAME"/>
                <type name="VkPhysicalDeviceImageAlignmentControlFeaturesMESA"/>
                <type name="VkPhysicalDeviceImageAlignmentControlPropertiesMESA"/>
                <type name="VkImageAlignmentControlCreateInfoMESA"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA"/>
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA"/>
                <feature name="imageAlignmentControl" struct="VkPhysicalDeviceImageAlignmentControlFeaturesMESA"/>
            </require>
        </extension>
        <extension name="VK_HUAWEI_extension_577" number="577" author="HUAWEI" contact="Ye Wang @wangye" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_HUAWEI_EXTENSION_577_SPEC_VERSION"/>
                <enum value="&quot;VK_HUAWEI_extension_577&quot;"              name="VK_HUAWEI_EXTENSION_577_EXTENSION_NAME"/>
                <enum bitpos="35" extends="VkPipelineCreateFlagBits2"    name="VK_PIPELINE_CREATE_2_RESERVED_35_BIT_KHR"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_578" number="578" author="EXT" contact="Daniel Story @daniel-story" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_578_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_578&quot;"              name="VK_EXT_EXTENSION_578_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_579" number="579" author="EXT" contact="Daniel Story @daniel-story" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_579_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_579&quot;"              name="VK_EXT_EXTENSION_579_EXTENSION_NAME"/>
                <enum bitpos="8" extends="VkShaderCreateFlagBitsEXT"        name="VK_SHADER_CREATE_RESERVED_8_BIT_EXT"/>
                <enum bitpos="9" extends="VkShaderCreateFlagBitsEXT"        name="VK_SHADER_CREATE_RESERVED_9_BIT_EXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_580" number="580" author="EXT" contact="Graeme Leese @gnl21" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_580_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_580&quot;"              name="VK_EXT_EXTENSION_580_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_581" number="581" author="NV" contact="Piers Daniell @pdaniell-nv" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_NV_EXTENSION_581_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_581&quot;"               name="VK_NV_EXTENSION_581_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_582" number="582" author="EXT" contact="Eric Werness @ewerness-nv" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_582_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_582&quot;"               name="VK_EXT_EXTENSION_582_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_depth_clamp_control" number="583" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" type="device" author="EXT" contact="Jules Blok @jules" comment="codespell:ignore blok" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_EXT_DEPTH_CLAMP_CONTROL_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_depth_clamp_control&quot;"        name="VK_EXT_DEPTH_CLAMP_CONTROL_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_CONTROL_FEATURES_EXT"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLAMP_CONTROL_CREATE_INFO_EXT"/>
                <enum offset="0" extends="VkDynamicState"                   name="VK_DYNAMIC_STATE_DEPTH_CLAMP_RANGE_EXT"/>
                <type name="VkPhysicalDeviceDepthClampControlFeaturesEXT"/>
                <type name="VkPipelineViewportDepthClampControlCreateInfoEXT"/>
                <type name="VkDepthClampModeEXT"/>
                <type name="VkDepthClampRangeEXT"/>
                <command name="vkCmdSetDepthClampRangeEXT"/>
                <feature name="depthClampControl" struct="VkPhysicalDeviceDepthClampControlFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_584" number="584" author="EXT" contact="James Jones @cubanismo" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_584_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_584&quot;"              name="VK_EXT_EXTENSION_584_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_585" number="585" author="EXT" contact="Shahbaz Youssefi @syoussefi" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_585_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_585&quot;"          name="VK_EXT_EXTENSION_585_EXTENSION_NAME"/>
                <enum bitpos="6" extends="VkDependencyFlagBits"         name="VK_DEPENDENCY_EXTENSION_585_BIT_EXT"/>
            </require>
        </extension>
        <extension name="VK_IMG_extension_586" number="586" author="IMG" contact="James Fitzpatrick @jfitzpatrick-img" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_IMG_EXTENSION_586_SPEC_VERSION"/>
                <enum value="&quot;VK_IMG_extension_586&quot;"              name="VK_IMG_EXTENSION_586_EXTENSION_NAME"/>
                <enum bitpos="4" extends="VkDependencyFlagBits"             name="VK_DEPENDENCY_EXTENSION_586_BIT_IMG"/>
            </require>
        </extension>
        <extension name="VK_KHR_video_maintenance2" number="587" author="KHR" contact="Daniel Rakos @aqnuep" type="device" depends="VK_KHR_video_decode_queue,VK_KHR_video_encode_queue" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_VIDEO_MAINTENANCE_2_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_video_maintenance2&quot;"         name="VK_KHR_VIDEO_MAINTENANCE_2_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_2_FEATURES_KHR"/>
                <type name="VkPhysicalDeviceVideoMaintenance2FeaturesKHR"/>
                <feature name="videoMaintenance2" struct="VkPhysicalDeviceVideoMaintenance2FeaturesKHR"/>
            </require>
            <require depends="VK_KHR_video_decode_queue">
                <enum bitpos="5" extends="VkVideoSessionCreateFlagBitsKHR"  name="VK_VIDEO_SESSION_CREATE_INLINE_SESSION_PARAMETERS_BIT_KHR"/>
            </require>
            <require depends="VK_KHR_video_decode_h264">
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_INLINE_SESSION_PARAMETERS_INFO_KHR"/>
                <type name="VkVideoDecodeH264InlineSessionParametersInfoKHR"/>
            </require>
            <require depends="VK_KHR_video_decode_h265">
                <enum offset="2" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_INLINE_SESSION_PARAMETERS_INFO_KHR"/>
                <type name="VkVideoDecodeH265InlineSessionParametersInfoKHR"/>
            </require>
            <require depends="VK_KHR_video_decode_av1">
                <enum offset="3" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_INLINE_SESSION_PARAMETERS_INFO_KHR"/>
                <type name="VkVideoDecodeAV1InlineSessionParametersInfoKHR"/>
            </require>
        </extension>
        <extension name="VK_HUAWEI_extension_588" number="588" author="HUAWEI" contact="Pan Gao @pangao-h" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_HUAWEI_EXTENSION_588_SPEC_VERSION"/>
                <enum value="&quot;VK_HUAWEI_extension_588&quot;"           name="VK_HUAWEI_EXTENSION_588_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_HUAWEI_extension_589" number="589" author="HUAWEI" contact="Pan Gao @pangao-h" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_HUAWEI_EXTENSION_589_SPEC_VERSION"/>
                <enum value="&quot;VK_HUAWEI_extension_589&quot;"           name="VK_HUAWEI_EXTENSION_589_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_HUAWEI_extension_590" number="590" author="HUAWEI" contact="Pan Gao @pangao-h" supported="disabled">
            <require>
                <enum value="0"                                                name="VK_HUAWEI_EXTENSION_590_SPEC_VERSION"/>
                <enum value="&quot;VK_HUAWEI_extension_590&quot;"              name="VK_HUAWEI_EXTENSION_590_EXTENSION_NAME"/>
                <enum bitpos="15" extends="VkExternalMemoryHandleTypeFlagBits" name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_590_BIT_HUAWEI"/>
            </require>
        </extension>
        <extension name="VK_HUAWEI_hdr_vivid" number="591" author="HUAWEI" contact="Zehui Lin @bactlink" type="device" depends="(VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_swapchain+VK_EXT_hdr_metadata" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_HUAWEI_HDR_VIVID_SPEC_VERSION"/>
                <enum value="&quot;VK_HUAWEI_hdr_vivid&quot;"               name="VK_HUAWEI_HDR_VIVID_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HDR_VIVID_FEATURES_HUAWEI"/>
                <enum offset="1" extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_HDR_VIVID_DYNAMIC_METADATA_HUAWEI"/>
                <type name="VkPhysicalDeviceHdrVividFeaturesHUAWEI"/>
                <type name="VkHdrVividDynamicMetadataHUAWEI"/>
                <feature name="hdrVivid" struct="VkPhysicalDeviceHdrVividFeaturesHUAWEI"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_592" number="592" author="NV" contact="Jeff Juliano @jjuliano" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_NV_EXTENSION_592_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_592&quot;"               name="VK_NV_EXTENSION_592_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_593" number="593" author="NV" contact="Jeff Juliano @jjuliano" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_NV_EXTENSION_593_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_593&quot;"               name="VK_NV_EXTENSION_593_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_cooperative_matrix2" number="594" type="device" author="NV" depends="VK_KHR_cooperative_matrix" contact="Jeff Bolz @jeffbolznv" supported="vulkan">
            <require>
                <enum value="1"                                             name="VK_NV_COOPERATIVE_MATRIX_2_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_cooperative_matrix2&quot;"         name="VK_NV_COOPERATIVE_MATRIX_2_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV"/>
                <enum offset="1" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_PROPERTIES_NV"/>
                <enum offset="2" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_PROPERTIES_NV"/>
                <type name="VkCooperativeMatrixFlexibleDimensionsPropertiesNV"/>
                <type name="VkPhysicalDeviceCooperativeMatrix2FeaturesNV"/>
                <type name="VkPhysicalDeviceCooperativeMatrix2PropertiesNV"/>
                <command name="vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV"/>
                <feature name="cooperativeMatrixWorkgroupScope,cooperativeMatrixFlexibleDimensions,cooperativeMatrixReductions,cooperativeMatrixConversions,cooperativeMatrixPerElementOperations,cooperativeMatrixTensorAddressing,cooperativeMatrixBlockLoads" struct="VkPhysicalDeviceCooperativeMatrix2FeaturesNV"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_595" number="595" author="NV" contact="Jeff Bolz @jeffbolznv" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_NV_EXTENSION_595_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_595&quot;"               name="VK_NV_EXTENSION_595_EXTENSION_NAME"/>
                <enum bitpos="15" extends="VkShaderStageFlagBits"           name="VK_SHADER_STAGE_RESERVED_15_BIT_NV"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_596" number="596" author="KHR" contact="Simon Zeni @simonz" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_596_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_596&quot;"              name="VK_KHR_EXTENSION_596_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_ARM_pipeline_opacity_micromap" number="597" type="device" depends="VK_EXT_opacity_micromap" author="ARM" contact="Mathieu Robart @mathieurobart-arm" supported="vulkan">
            <require>
                <enum value="1"                                              name="VK_ARM_PIPELINE_OPACITY_MICROMAP_SPEC_VERSION"/>
                <enum value="&quot;VK_ARM_pipeline_opacity_micromap&quot;"   name="VK_ARM_PIPELINE_OPACITY_MICROMAP_EXTENSION_NAME"/>
                <enum offset="0"  extends="VkStructureType"                  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_OPACITY_MICROMAP_FEATURES_ARM"/>
                <type name="VkPhysicalDevicePipelineOpacityMicromapFeaturesARM"/>
                <feature name="pipelineOpacityMicromap" struct="VkPhysicalDevicePipelineOpacityMicromapFeaturesARM"/>
                <enum bitpos="37" extends="VkPipelineCreateFlagBits2"        name="VK_PIPELINE_CREATE_2_DISALLOW_OPACITY_MICROMAP_BIT_ARM"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_598" number="598" type="device" author="KHR" contact="Ahmed Abdelkhalek @aabdelkh" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_598_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_598&quot;"              name="VK_KHR_EXTENSION_598_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_599" number="599" type="device" author="KHR" contact="Ahmed Abdelkhalek @aabdelkh" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_599_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_599&quot;"              name="VK_KHR_EXTENSION_599_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_IMG_extension_600" number="600" author="IMG" contact="James Fitzpatrick @jfitzpatrick-img" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_IMG_EXTENSION_600_SPEC_VERSION"/>
                <enum value="&quot;VK_IMG_extension_600&quot;"              name="VK_IMG_EXTENSION_600_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_IMG_extension_601" number="601" author="IMG" contact="James Fitzpatrick @jfitzpatrick-img" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_IMG_EXTENSION_601_SPEC_VERSION"/>
                <enum value="&quot;VK_IMG_extension_601&quot;"              name="VK_IMG_EXTENSION_601_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_602" number="602" author="KHR" contact="Shahbaz Youssefi @syoussefi" supported="disabled">
            <require>
                <enum value="0"                                         name="VK_EXT_EXTENSION_602_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_602&quot;"          name="VK_EXT_EXTENSION_602_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_external_memory_metal" number="603" type="device" depends="VK_KHR_external_memory,VK_VERSION_1_1" author="EXT" contact="Aitor Camacho Larrondo @aitor-lunarg" platform="metal" supported="vulkan" nofeatures="true">
            <require>
                <enum value="1"                                                name="VK_EXT_EXTERNAL_MEMORY_METAL_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_external_memory_metal&quot;"         name="VK_EXT_EXTERNAL_MEMORY_METAL_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_IMPORT_MEMORY_METAL_HANDLE_INFO_EXT"/>
                <enum offset="1" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_MEMORY_METAL_HANDLE_PROPERTIES_EXT"/>
                <enum offset="2" extends="VkStructureType"                     name="VK_STRUCTURE_TYPE_MEMORY_GET_METAL_HANDLE_INFO_EXT"/>
                <enum bitpos="16" extends="VkExternalMemoryHandleTypeFlagBits" name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLBUFFER_BIT_EXT"/>
                <enum bitpos="17" extends="VkExternalMemoryHandleTypeFlagBits" name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLTEXTURE_BIT_EXT"/>
                <enum bitpos="18" extends="VkExternalMemoryHandleTypeFlagBits" name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLHEAP_BIT_EXT"/>
                <type name="VkImportMemoryMetalHandleInfoEXT"/>
                <type name="VkMemoryMetalHandlePropertiesEXT"/>
                <type name="VkMemoryGetMetalHandleInfoEXT"/>
                <command name="vkGetMemoryMetalHandleEXT"/>
                <command name="vkGetMemoryMetalHandlePropertiesEXT"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_604" number="604" author="EXT" contact="Colin Marc @colinmarc" supported="disabled">
            <require>
                <enum value="0"                                              name="VK_EXT_EXTENSION_604_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_604&quot;"               name="VK_EXT_EXTENSION_604_EXTENSION_NAME"/>
                <enum bitpos="0" extends="VkWaylandSurfaceCreateFlagBitsKHR" name="VK_WAYLAND_SURFACE_CREATE_DISABLE_COLOR_MANAGEMENT"/>
            </require>
        </extension>
        <extension name="VK_KHR_depth_clamp_zero_one" number="605" author="KHR" type="device" contact="Graeme Leese @gnl21" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" supported="vulkan" ratified="vulkan">
            <require>
                <enum value="1"                                             name="VK_KHR_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_depth_clamp_zero_one&quot;"       name="VK_KHR_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType" extnumber="422"  name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_KHR"/>
                <type name="VkPhysicalDeviceDepthClampZeroOneFeaturesKHR" />
                <feature name="depthClampZeroOne" struct="VkPhysicalDeviceDepthClampZeroOneFeaturesKHR"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_606" number="606" author="ARM" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_606_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_606&quot;"              name="VK_KHR_EXTENSION_606_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_607" number="607" author="ARM" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_607_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_607&quot;"              name="VK_KHR_EXTENSION_607_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_608" number="608" author="ARM" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_608_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_608&quot;"              name="VK_KHR_EXTENSION_608_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_vertex_attribute_robustness" number="609" type="device" depends="VK_KHR_get_physical_device_properties2,VK_VERSION_1_1" author="EXT" contact="Piers Daniell @pdaniell-nv" supported="vulkan">
            <require>
                <enum value="1"                                              name="VK_EXT_VERTEX_ATTRIBUTE_ROBUSTNESS_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_vertex_attribute_robustness&quot;" name="VK_EXT_VERTEX_ATTRIBUTE_ROBUSTNESS_EXTENSION_NAME"/>
                <enum offset="0" extends="VkStructureType"                   name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_ROBUSTNESS_FEATURES_EXT"/>
                <type name="VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT"/>
                <feature name="vertexAttributeRobustness" struct="VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT"/>
            </require>
        </extension>
        <extension name="VK_ARM_extension_610" number="610" type="device" author="ARM" contact="Jan-Harald Fredriksen @janharaldfredriksen-arm" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_ARM_EXTENSION_610_SPEC_VERSION"/>
                <enum value="&quot;VK_ARM_extension_610&quot;"              name="VK_ARM_EXTENSION_610_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_611" number="611" author="NV" contact="David Kvasnica @DaKvasNV" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_NV_EXTENSION_611_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_611&quot;"               name="VK_NV_EXTENSION_611_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_EXT_extension_612" number="612" author="EXT" contact="Hans-Kristian Arntzen @HansKristian-Work" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_EXT_EXTENSION_612_SPEC_VERSION"/>
                <enum value="&quot;VK_EXT_extension_612&quot;"              name="VK_EXT_EXTENSION_612_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_KHR_extension_613" number="613" author="KHR" contact="Piers Daniell @pdaniell-nv" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_KHR_EXTENSION_613_SPEC_VERSION"/>
                <enum value="&quot;VK_KHR_extension_613&quot;"              name="VK_KHR_EXTENSION_613_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_NV_extension_614" number="614" author="NV" contact="Charles Hansen @cshansen" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_NV_EXTENSION_614_SPEC_VERSION"/>
                <enum value="&quot;VK_NV_extension_614&quot;"               name="VK_NV_EXTENSION_614_EXTENSION_NAME"/>
            </require>
        </extension>
        <extension name="VK_QCOM_extension_615" number="615" author="QCOM" contact="Matthew Netsch @mnetsch" supported="disabled">
            <require>
                <enum value="0"                                             name="VK_QCOM_EXTENSION_615_SPEC_VERSION"/>
                <enum value="&quot;VK_QCOM_extension_615&quot;"             name="VK_QCOM_EXTENSION_615_EXTENSION_NAME"/>
            </require>
        </extension>
    </extensions>
    <formats>
        <format name="VK_FORMAT_R4G4_UNORM_PACK8" class="8-bit" blockSize="1" texelsPerBlock="1" packed="8">
            <component name="R" bits="4" numericFormat="UNORM"/>
            <component name="G" bits="4" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_R4G4B4A4_UNORM_PACK16" class="16-bit" blockSize="2" texelsPerBlock="1" packed="16">
            <component name="R" bits="4" numericFormat="UNORM"/>
            <component name="G" bits="4" numericFormat="UNORM"/>
            <component name="B" bits="4" numericFormat="UNORM"/>
            <component name="A" bits="4" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_B4G4R4A4_UNORM_PACK16" class="16-bit" blockSize="2" texelsPerBlock="1" packed="16">
            <component name="B" bits="4" numericFormat="UNORM"/>
            <component name="G" bits="4" numericFormat="UNORM"/>
            <component name="R" bits="4" numericFormat="UNORM"/>
            <component name="A" bits="4" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_R5G6B5_UNORM_PACK16" class="16-bit" blockSize="2" texelsPerBlock="1" packed="16">
            <component name="R" bits="5" numericFormat="UNORM"/>
            <component name="G" bits="6" numericFormat="UNORM"/>
            <component name="B" bits="5" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_B5G6R5_UNORM_PACK16" class="16-bit" blockSize="2" texelsPerBlock="1" packed="16">
            <component name="B" bits="5" numericFormat="UNORM"/>
            <component name="G" bits="6" numericFormat="UNORM"/>
            <component name="R" bits="5" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_R5G5B5A1_UNORM_PACK16" class="16-bit" blockSize="2" texelsPerBlock="1" packed="16">
            <component name="R" bits="5" numericFormat="UNORM"/>
            <component name="G" bits="5" numericFormat="UNORM"/>
            <component name="B" bits="5" numericFormat="UNORM"/>
            <component name="A" bits="1" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_B5G5R5A1_UNORM_PACK16" class="16-bit" blockSize="2" texelsPerBlock="1" packed="16">
            <component name="B" bits="5" numericFormat="UNORM"/>
            <component name="G" bits="5" numericFormat="UNORM"/>
            <component name="R" bits="5" numericFormat="UNORM"/>
            <component name="A" bits="1" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_A1R5G5B5_UNORM_PACK16" class="16-bit" blockSize="2" texelsPerBlock="1" packed="16">
            <component name="A" bits="1" numericFormat="UNORM"/>
            <component name="R" bits="5" numericFormat="UNORM"/>
            <component name="G" bits="5" numericFormat="UNORM"/>
            <component name="B" bits="5" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_A1B5G5R5_UNORM_PACK16" class="16-bit" blockSize="2" texelsPerBlock="1" packed="16">
            <component name="A" bits="1" numericFormat="UNORM"/>
            <component name="B" bits="5" numericFormat="UNORM"/>
            <component name="G" bits="5" numericFormat="UNORM"/>
            <component name="R" bits="5" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_A8_UNORM" class="8-bit alpha" blockSize="1" texelsPerBlock="1">
            <component name="A" bits="8" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_R8_UNORM" class="8-bit" blockSize="1" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="UNORM"/>
            <spirvimageformat name="R8"/>
        </format>
        <format name="VK_FORMAT_R8_SNORM" class="8-bit" blockSize="1" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="SNORM"/>
            <spirvimageformat name="R8Snorm"/>
        </format>
        <format name="VK_FORMAT_R8_USCALED" class="8-bit" blockSize="1" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="USCALED"/>
        </format>
        <format name="VK_FORMAT_R8_SSCALED" class="8-bit" blockSize="1" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="SSCALED"/>
        </format>
        <format name="VK_FORMAT_R8_UINT" class="8-bit" blockSize="1" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="UINT"/>
            <spirvimageformat name="R8ui"/>
        </format>
        <format name="VK_FORMAT_R8_SINT" class="8-bit" blockSize="1" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="SINT"/>
            <spirvimageformat name="R8i"/>
        </format>
        <format name="VK_FORMAT_R8_SRGB" class="8-bit" blockSize="1" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_R8G8_UNORM" class="16-bit" blockSize="2" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="UNORM"/>
            <component name="G" bits="8" numericFormat="UNORM"/>
            <spirvimageformat name="Rg8"/>
        </format>
        <format name="VK_FORMAT_R8G8_SNORM" class="16-bit" blockSize="2" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="SNORM"/>
            <component name="G" bits="8" numericFormat="SNORM"/>
            <spirvimageformat name="Rg8Snorm"/>
        </format>
        <format name="VK_FORMAT_R8G8_USCALED" class="16-bit" blockSize="2" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="USCALED"/>
            <component name="G" bits="8" numericFormat="USCALED"/>
        </format>
        <format name="VK_FORMAT_R8G8_SSCALED" class="16-bit" blockSize="2" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="SSCALED"/>
            <component name="G" bits="8" numericFormat="SSCALED"/>
        </format>
        <format name="VK_FORMAT_R8G8_UINT" class="16-bit" blockSize="2" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="UINT"/>
            <component name="G" bits="8" numericFormat="UINT"/>
            <spirvimageformat name="Rg8ui"/>
        </format>
        <format name="VK_FORMAT_R8G8_SINT" class="16-bit" blockSize="2" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="SINT"/>
            <component name="G" bits="8" numericFormat="SINT"/>
            <spirvimageformat name="Rg8i"/>
        </format>
        <format name="VK_FORMAT_R8G8_SRGB" class="16-bit" blockSize="2" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="SRGB"/>
            <component name="G" bits="8" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_R8G8B8_UNORM" class="24-bit" blockSize="3" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="UNORM"/>
            <component name="G" bits="8" numericFormat="UNORM"/>
            <component name="B" bits="8" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_R8G8B8_SNORM" class="24-bit" blockSize="3" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="SNORM"/>
            <component name="G" bits="8" numericFormat="SNORM"/>
            <component name="B" bits="8" numericFormat="SNORM"/>
        </format>
        <format name="VK_FORMAT_R8G8B8_USCALED" class="24-bit" blockSize="3" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="USCALED"/>
            <component name="G" bits="8" numericFormat="USCALED"/>
            <component name="B" bits="8" numericFormat="USCALED"/>
        </format>
        <format name="VK_FORMAT_R8G8B8_SSCALED" class="24-bit" blockSize="3" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="SSCALED"/>
            <component name="G" bits="8" numericFormat="SSCALED"/>
            <component name="B" bits="8" numericFormat="SSCALED"/>
        </format>
        <format name="VK_FORMAT_R8G8B8_UINT" class="24-bit" blockSize="3" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="UINT"/>
            <component name="G" bits="8" numericFormat="UINT"/>
            <component name="B" bits="8" numericFormat="UINT"/>
        </format>
        <format name="VK_FORMAT_R8G8B8_SINT" class="24-bit" blockSize="3" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="SINT"/>
            <component name="G" bits="8" numericFormat="SINT"/>
            <component name="B" bits="8" numericFormat="SINT"/>
        </format>
        <format name="VK_FORMAT_R8G8B8_SRGB" class="24-bit" blockSize="3" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="SRGB"/>
            <component name="G" bits="8" numericFormat="SRGB"/>
            <component name="B" bits="8" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_B8G8R8_UNORM" class="24-bit" blockSize="3" texelsPerBlock="1">
            <component name="B" bits="8" numericFormat="UNORM"/>
            <component name="G" bits="8" numericFormat="UNORM"/>
            <component name="R" bits="8" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_B8G8R8_SNORM" class="24-bit" blockSize="3" texelsPerBlock="1">
            <component name="B" bits="8" numericFormat="SNORM"/>
            <component name="G" bits="8" numericFormat="SNORM"/>
            <component name="R" bits="8" numericFormat="SNORM"/>
        </format>
        <format name="VK_FORMAT_B8G8R8_USCALED" class="24-bit" blockSize="3" texelsPerBlock="1">
            <component name="B" bits="8" numericFormat="USCALED"/>
            <component name="G" bits="8" numericFormat="USCALED"/>
            <component name="R" bits="8" numericFormat="USCALED"/>
        </format>
        <format name="VK_FORMAT_B8G8R8_SSCALED" class="24-bit" blockSize="3" texelsPerBlock="1">
            <component name="B" bits="8" numericFormat="SSCALED"/>
            <component name="G" bits="8" numericFormat="SSCALED"/>
            <component name="R" bits="8" numericFormat="SSCALED"/>
        </format>
        <format name="VK_FORMAT_B8G8R8_UINT" class="24-bit" blockSize="3" texelsPerBlock="1">
            <component name="B" bits="8" numericFormat="UINT"/>
            <component name="G" bits="8" numericFormat="UINT"/>
            <component name="R" bits="8" numericFormat="UINT"/>
        </format>
        <format name="VK_FORMAT_B8G8R8_SINT" class="24-bit" blockSize="3" texelsPerBlock="1">
            <component name="B" bits="8" numericFormat="SINT"/>
            <component name="G" bits="8" numericFormat="SINT"/>
            <component name="R" bits="8" numericFormat="SINT"/>
        </format>
        <format name="VK_FORMAT_B8G8R8_SRGB" class="24-bit" blockSize="3" texelsPerBlock="1">
            <component name="B" bits="8" numericFormat="SRGB"/>
            <component name="G" bits="8" numericFormat="SRGB"/>
            <component name="R" bits="8" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_R8G8B8A8_UNORM" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="UNORM"/>
            <component name="G" bits="8" numericFormat="UNORM"/>
            <component name="B" bits="8" numericFormat="UNORM"/>
            <component name="A" bits="8" numericFormat="UNORM"/>
            <spirvimageformat name="Rgba8"/>
        </format>
        <format name="VK_FORMAT_R8G8B8A8_SNORM" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="SNORM"/>
            <component name="G" bits="8" numericFormat="SNORM"/>
            <component name="B" bits="8" numericFormat="SNORM"/>
            <component name="A" bits="8" numericFormat="SNORM"/>
            <spirvimageformat name="Rgba8Snorm"/>
        </format>
        <format name="VK_FORMAT_R8G8B8A8_USCALED" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="USCALED"/>
            <component name="G" bits="8" numericFormat="USCALED"/>
            <component name="B" bits="8" numericFormat="USCALED"/>
            <component name="A" bits="8" numericFormat="USCALED"/>
        </format>
        <format name="VK_FORMAT_R8G8B8A8_SSCALED" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="SSCALED"/>
            <component name="G" bits="8" numericFormat="SSCALED"/>
            <component name="B" bits="8" numericFormat="SSCALED"/>
            <component name="A" bits="8" numericFormat="SSCALED"/>
        </format>
        <format name="VK_FORMAT_R8G8B8A8_UINT" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="UINT"/>
            <component name="G" bits="8" numericFormat="UINT"/>
            <component name="B" bits="8" numericFormat="UINT"/>
            <component name="A" bits="8" numericFormat="UINT"/>
            <spirvimageformat name="Rgba8ui"/>
        </format>
        <format name="VK_FORMAT_R8G8B8A8_SINT" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="SINT"/>
            <component name="G" bits="8" numericFormat="SINT"/>
            <component name="B" bits="8" numericFormat="SINT"/>
            <component name="A" bits="8" numericFormat="SINT"/>
            <spirvimageformat name="Rgba8i"/>
        </format>
        <format name="VK_FORMAT_R8G8B8A8_SRGB" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="8" numericFormat="SRGB"/>
            <component name="G" bits="8" numericFormat="SRGB"/>
            <component name="B" bits="8" numericFormat="SRGB"/>
            <component name="A" bits="8" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_B8G8R8A8_UNORM" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="B" bits="8" numericFormat="UNORM"/>
            <component name="G" bits="8" numericFormat="UNORM"/>
            <component name="R" bits="8" numericFormat="UNORM"/>
            <component name="A" bits="8" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_B8G8R8A8_SNORM" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="B" bits="8" numericFormat="SNORM"/>
            <component name="G" bits="8" numericFormat="SNORM"/>
            <component name="R" bits="8" numericFormat="SNORM"/>
            <component name="A" bits="8" numericFormat="SNORM"/>
        </format>
        <format name="VK_FORMAT_B8G8R8A8_USCALED" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="B" bits="8" numericFormat="USCALED"/>
            <component name="G" bits="8" numericFormat="USCALED"/>
            <component name="R" bits="8" numericFormat="USCALED"/>
            <component name="A" bits="8" numericFormat="USCALED"/>
        </format>
        <format name="VK_FORMAT_B8G8R8A8_SSCALED" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="B" bits="8" numericFormat="SSCALED"/>
            <component name="G" bits="8" numericFormat="SSCALED"/>
            <component name="R" bits="8" numericFormat="SSCALED"/>
            <component name="A" bits="8" numericFormat="SSCALED"/>
        </format>
        <format name="VK_FORMAT_B8G8R8A8_UINT" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="B" bits="8" numericFormat="UINT"/>
            <component name="G" bits="8" numericFormat="UINT"/>
            <component name="R" bits="8" numericFormat="UINT"/>
            <component name="A" bits="8" numericFormat="UINT"/>
        </format>
        <format name="VK_FORMAT_B8G8R8A8_SINT" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="B" bits="8" numericFormat="SINT"/>
            <component name="G" bits="8" numericFormat="SINT"/>
            <component name="R" bits="8" numericFormat="SINT"/>
            <component name="A" bits="8" numericFormat="SINT"/>
        </format>
        <format name="VK_FORMAT_B8G8R8A8_SRGB" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="B" bits="8" numericFormat="SRGB"/>
            <component name="G" bits="8" numericFormat="SRGB"/>
            <component name="R" bits="8" numericFormat="SRGB"/>
            <component name="A" bits="8" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_A8B8G8R8_UNORM_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="8" numericFormat="UNORM"/>
            <component name="B" bits="8" numericFormat="UNORM"/>
            <component name="G" bits="8" numericFormat="UNORM"/>
            <component name="R" bits="8" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_A8B8G8R8_SNORM_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="8" numericFormat="SNORM"/>
            <component name="B" bits="8" numericFormat="SNORM"/>
            <component name="G" bits="8" numericFormat="SNORM"/>
            <component name="R" bits="8" numericFormat="SNORM"/>
        </format>
        <format name="VK_FORMAT_A8B8G8R8_USCALED_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="8" numericFormat="USCALED"/>
            <component name="B" bits="8" numericFormat="USCALED"/>
            <component name="G" bits="8" numericFormat="USCALED"/>
            <component name="R" bits="8" numericFormat="USCALED"/>
        </format>
        <format name="VK_FORMAT_A8B8G8R8_SSCALED_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="8" numericFormat="SSCALED"/>
            <component name="B" bits="8" numericFormat="SSCALED"/>
            <component name="G" bits="8" numericFormat="SSCALED"/>
            <component name="R" bits="8" numericFormat="SSCALED"/>
        </format>
        <format name="VK_FORMAT_A8B8G8R8_UINT_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="8" numericFormat="UINT"/>
            <component name="B" bits="8" numericFormat="UINT"/>
            <component name="G" bits="8" numericFormat="UINT"/>
            <component name="R" bits="8" numericFormat="UINT"/>
        </format>
        <format name="VK_FORMAT_A8B8G8R8_SINT_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="8" numericFormat="SINT"/>
            <component name="B" bits="8" numericFormat="SINT"/>
            <component name="G" bits="8" numericFormat="SINT"/>
            <component name="R" bits="8" numericFormat="SINT"/>
        </format>
        <format name="VK_FORMAT_A8B8G8R8_SRGB_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="8" numericFormat="SRGB"/>
            <component name="B" bits="8" numericFormat="SRGB"/>
            <component name="G" bits="8" numericFormat="SRGB"/>
            <component name="R" bits="8" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_A2R10G10B10_UNORM_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="2" numericFormat="UNORM"/>
            <component name="R" bits="10" numericFormat="UNORM"/>
            <component name="G" bits="10" numericFormat="UNORM"/>
            <component name="B" bits="10" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_A2R10G10B10_SNORM_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="2" numericFormat="SNORM"/>
            <component name="R" bits="10" numericFormat="SNORM"/>
            <component name="G" bits="10" numericFormat="SNORM"/>
            <component name="B" bits="10" numericFormat="SNORM"/>
        </format>
        <format name="VK_FORMAT_A2R10G10B10_USCALED_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="2" numericFormat="USCALED"/>
            <component name="R" bits="10" numericFormat="USCALED"/>
            <component name="G" bits="10" numericFormat="USCALED"/>
            <component name="B" bits="10" numericFormat="USCALED"/>
        </format>
        <format name="VK_FORMAT_A2R10G10B10_SSCALED_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="2" numericFormat="SSCALED"/>
            <component name="R" bits="10" numericFormat="SSCALED"/>
            <component name="G" bits="10" numericFormat="SSCALED"/>
            <component name="B" bits="10" numericFormat="SSCALED"/>
        </format>
        <format name="VK_FORMAT_A2R10G10B10_UINT_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="2" numericFormat="UINT"/>
            <component name="R" bits="10" numericFormat="UINT"/>
            <component name="G" bits="10" numericFormat="UINT"/>
            <component name="B" bits="10" numericFormat="UINT"/>
        </format>
        <format name="VK_FORMAT_A2R10G10B10_SINT_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="2" numericFormat="SINT"/>
            <component name="R" bits="10" numericFormat="SINT"/>
            <component name="G" bits="10" numericFormat="SINT"/>
            <component name="B" bits="10" numericFormat="SINT"/>
        </format>
        <format name="VK_FORMAT_A2B10G10R10_UNORM_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="2" numericFormat="UNORM"/>
            <component name="B" bits="10" numericFormat="UNORM"/>
            <component name="G" bits="10" numericFormat="UNORM"/>
            <component name="R" bits="10" numericFormat="UNORM"/>
            <spirvimageformat name="Rgb10A2"/>
        </format>
        <format name="VK_FORMAT_A2B10G10R10_SNORM_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="2" numericFormat="SNORM"/>
            <component name="B" bits="10" numericFormat="SNORM"/>
            <component name="G" bits="10" numericFormat="SNORM"/>
            <component name="R" bits="10" numericFormat="SNORM"/>
        </format>
        <format name="VK_FORMAT_A2B10G10R10_USCALED_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="2" numericFormat="USCALED"/>
            <component name="B" bits="10" numericFormat="USCALED"/>
            <component name="G" bits="10" numericFormat="USCALED"/>
            <component name="R" bits="10" numericFormat="USCALED"/>
        </format>
        <format name="VK_FORMAT_A2B10G10R10_SSCALED_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="2" numericFormat="SSCALED"/>
            <component name="B" bits="10" numericFormat="SSCALED"/>
            <component name="G" bits="10" numericFormat="SSCALED"/>
            <component name="R" bits="10" numericFormat="SSCALED"/>
        </format>
        <format name="VK_FORMAT_A2B10G10R10_UINT_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="2" numericFormat="UINT"/>
            <component name="B" bits="10" numericFormat="UINT"/>
            <component name="G" bits="10" numericFormat="UINT"/>
            <component name="R" bits="10" numericFormat="UINT"/>
            <spirvimageformat name="Rgb10a2ui"/>
        </format>
        <format name="VK_FORMAT_A2B10G10R10_SINT_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="A" bits="2" numericFormat="SINT"/>
            <component name="B" bits="10" numericFormat="SINT"/>
            <component name="G" bits="10" numericFormat="SINT"/>
            <component name="R" bits="10" numericFormat="SINT"/>
        </format>
        <format name="VK_FORMAT_R16_UNORM" class="16-bit" blockSize="2" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="UNORM"/>
            <spirvimageformat name="R16"/>
        </format>
        <format name="VK_FORMAT_R16_SNORM" class="16-bit" blockSize="2" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SNORM"/>
            <spirvimageformat name="R16Snorm"/>
        </format>
        <format name="VK_FORMAT_R16_USCALED" class="16-bit" blockSize="2" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="USCALED"/>
        </format>
        <format name="VK_FORMAT_R16_SSCALED" class="16-bit" blockSize="2" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SSCALED"/>
        </format>
        <format name="VK_FORMAT_R16_UINT" class="16-bit" blockSize="2" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="UINT"/>
            <spirvimageformat name="R16ui"/>
        </format>
        <format name="VK_FORMAT_R16_SINT" class="16-bit" blockSize="2" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SINT"/>
            <spirvimageformat name="R16i"/>
        </format>
        <format name="VK_FORMAT_R16_SFLOAT" class="16-bit" blockSize="2" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SFLOAT"/>
            <spirvimageformat name="R16f"/>
        </format>
        <format name="VK_FORMAT_R16G16_UNORM" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="UNORM"/>
            <component name="G" bits="16" numericFormat="UNORM"/>
            <spirvimageformat name="Rg16"/>
        </format>
        <format name="VK_FORMAT_R16G16_SNORM" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SNORM"/>
            <component name="G" bits="16" numericFormat="SNORM"/>
            <spirvimageformat name="Rg16Snorm"/>
        </format>
        <format name="VK_FORMAT_R16G16_USCALED" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="USCALED"/>
            <component name="G" bits="16" numericFormat="USCALED"/>
        </format>
        <format name="VK_FORMAT_R16G16_SSCALED" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SSCALED"/>
            <component name="G" bits="16" numericFormat="SSCALED"/>
        </format>
        <format name="VK_FORMAT_R16G16_UINT" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="UINT"/>
            <component name="G" bits="16" numericFormat="UINT"/>
            <spirvimageformat name="Rg16ui"/>
        </format>
        <format name="VK_FORMAT_R16G16_SINT" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SINT"/>
            <component name="G" bits="16" numericFormat="SINT"/>
            <spirvimageformat name="Rg16i"/>
        </format>
        <format name="VK_FORMAT_R16G16_SFLOAT" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SFLOAT"/>
            <component name="G" bits="16" numericFormat="SFLOAT"/>
            <spirvimageformat name="Rg16f"/>
        </format>
        <format name="VK_FORMAT_R16G16B16_UNORM" class="48-bit" blockSize="6" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="UNORM"/>
            <component name="G" bits="16" numericFormat="UNORM"/>
            <component name="B" bits="16" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_R16G16B16_SNORM" class="48-bit" blockSize="6" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SNORM"/>
            <component name="G" bits="16" numericFormat="SNORM"/>
            <component name="B" bits="16" numericFormat="SNORM"/>
        </format>
        <format name="VK_FORMAT_R16G16B16_USCALED" class="48-bit" blockSize="6" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="USCALED"/>
            <component name="G" bits="16" numericFormat="USCALED"/>
            <component name="B" bits="16" numericFormat="USCALED"/>
        </format>
        <format name="VK_FORMAT_R16G16B16_SSCALED" class="48-bit" blockSize="6" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SSCALED"/>
            <component name="G" bits="16" numericFormat="SSCALED"/>
            <component name="B" bits="16" numericFormat="SSCALED"/>
        </format>
        <format name="VK_FORMAT_R16G16B16_UINT" class="48-bit" blockSize="6" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="UINT"/>
            <component name="G" bits="16" numericFormat="UINT"/>
            <component name="B" bits="16" numericFormat="UINT"/>
        </format>
        <format name="VK_FORMAT_R16G16B16_SINT" class="48-bit" blockSize="6" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SINT"/>
            <component name="G" bits="16" numericFormat="SINT"/>
            <component name="B" bits="16" numericFormat="SINT"/>
        </format>
        <format name="VK_FORMAT_R16G16B16_SFLOAT" class="48-bit" blockSize="6" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SFLOAT"/>
            <component name="G" bits="16" numericFormat="SFLOAT"/>
            <component name="B" bits="16" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_R16G16B16A16_UNORM" class="64-bit" blockSize="8" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="UNORM"/>
            <component name="G" bits="16" numericFormat="UNORM"/>
            <component name="B" bits="16" numericFormat="UNORM"/>
            <component name="A" bits="16" numericFormat="UNORM"/>
            <spirvimageformat name="Rgba16"/>
        </format>
        <format name="VK_FORMAT_R16G16B16A16_SNORM" class="64-bit" blockSize="8" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SNORM"/>
            <component name="G" bits="16" numericFormat="SNORM"/>
            <component name="B" bits="16" numericFormat="SNORM"/>
            <component name="A" bits="16" numericFormat="SNORM"/>
            <spirvimageformat name="Rgba16Snorm"/>
        </format>
        <format name="VK_FORMAT_R16G16B16A16_USCALED" class="64-bit" blockSize="8" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="USCALED"/>
            <component name="G" bits="16" numericFormat="USCALED"/>
            <component name="B" bits="16" numericFormat="USCALED"/>
            <component name="A" bits="16" numericFormat="USCALED"/>
        </format>
        <format name="VK_FORMAT_R16G16B16A16_SSCALED" class="64-bit" blockSize="8" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SSCALED"/>
            <component name="G" bits="16" numericFormat="SSCALED"/>
            <component name="B" bits="16" numericFormat="SSCALED"/>
            <component name="A" bits="16" numericFormat="SSCALED"/>
        </format>
        <format name="VK_FORMAT_R16G16B16A16_UINT" class="64-bit" blockSize="8" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="UINT"/>
            <component name="G" bits="16" numericFormat="UINT"/>
            <component name="B" bits="16" numericFormat="UINT"/>
            <component name="A" bits="16" numericFormat="UINT"/>
            <spirvimageformat name="Rgba16ui"/>
        </format>
        <format name="VK_FORMAT_R16G16B16A16_SINT" class="64-bit" blockSize="8" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SINT"/>
            <component name="G" bits="16" numericFormat="SINT"/>
            <component name="B" bits="16" numericFormat="SINT"/>
            <component name="A" bits="16" numericFormat="SINT"/>
            <spirvimageformat name="Rgba16i"/>
        </format>
        <format name="VK_FORMAT_R16G16B16A16_SFLOAT" class="64-bit" blockSize="8" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SFLOAT"/>
            <component name="G" bits="16" numericFormat="SFLOAT"/>
            <component name="B" bits="16" numericFormat="SFLOAT"/>
            <component name="A" bits="16" numericFormat="SFLOAT"/>
            <spirvimageformat name="Rgba16f"/>
        </format>
        <format name="VK_FORMAT_R32_UINT" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="32" numericFormat="UINT"/>
            <spirvimageformat name="R32ui"/>
        </format>
        <format name="VK_FORMAT_R32_SINT" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="32" numericFormat="SINT"/>
            <spirvimageformat name="R32i"/>
        </format>
        <format name="VK_FORMAT_R32_SFLOAT" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="32" numericFormat="SFLOAT"/>
            <spirvimageformat name="R32f"/>
        </format>
        <format name="VK_FORMAT_R32G32_UINT" class="64-bit" blockSize="8" texelsPerBlock="1">
            <component name="R" bits="32" numericFormat="UINT"/>
            <component name="G" bits="32" numericFormat="UINT"/>
            <spirvimageformat name="Rg32ui"/>
        </format>
        <format name="VK_FORMAT_R32G32_SINT" class="64-bit" blockSize="8" texelsPerBlock="1">
            <component name="R" bits="32" numericFormat="SINT"/>
            <component name="G" bits="32" numericFormat="SINT"/>
            <spirvimageformat name="Rg32i"/>
        </format>
        <format name="VK_FORMAT_R32G32_SFLOAT" class="64-bit" blockSize="8" texelsPerBlock="1">
            <component name="R" bits="32" numericFormat="SFLOAT"/>
            <component name="G" bits="32" numericFormat="SFLOAT"/>
            <spirvimageformat name="Rg32f"/>
        </format>
        <format name="VK_FORMAT_R32G32B32_UINT" class="96-bit" blockSize="12" texelsPerBlock="1">
            <component name="R" bits="32" numericFormat="UINT"/>
            <component name="G" bits="32" numericFormat="UINT"/>
            <component name="B" bits="32" numericFormat="UINT"/>
        </format>
        <format name="VK_FORMAT_R32G32B32_SINT" class="96-bit" blockSize="12" texelsPerBlock="1">
            <component name="R" bits="32" numericFormat="SINT"/>
            <component name="G" bits="32" numericFormat="SINT"/>
            <component name="B" bits="32" numericFormat="SINT"/>
        </format>
        <format name="VK_FORMAT_R32G32B32_SFLOAT" class="96-bit" blockSize="12" texelsPerBlock="1">
            <component name="R" bits="32" numericFormat="SFLOAT"/>
            <component name="G" bits="32" numericFormat="SFLOAT"/>
            <component name="B" bits="32" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_R32G32B32A32_UINT" class="128-bit" blockSize="16" texelsPerBlock="1">
            <component name="R" bits="32" numericFormat="UINT"/>
            <component name="G" bits="32" numericFormat="UINT"/>
            <component name="B" bits="32" numericFormat="UINT"/>
            <component name="A" bits="32" numericFormat="UINT"/>
            <spirvimageformat name="Rgba32ui"/>
        </format>
        <format name="VK_FORMAT_R32G32B32A32_SINT" class="128-bit" blockSize="16" texelsPerBlock="1">
            <component name="R" bits="32" numericFormat="SINT"/>
            <component name="G" bits="32" numericFormat="SINT"/>
            <component name="B" bits="32" numericFormat="SINT"/>
            <component name="A" bits="32" numericFormat="SINT"/>
            <spirvimageformat name="Rgba32i"/>
        </format>
        <format name="VK_FORMAT_R32G32B32A32_SFLOAT" class="128-bit" blockSize="16" texelsPerBlock="1">
            <component name="R" bits="32" numericFormat="SFLOAT"/>
            <component name="G" bits="32" numericFormat="SFLOAT"/>
            <component name="B" bits="32" numericFormat="SFLOAT"/>
            <component name="A" bits="32" numericFormat="SFLOAT"/>
            <spirvimageformat name="Rgba32f"/>
        </format>
        <format name="VK_FORMAT_R64_UINT" class="64-bit" blockSize="8" texelsPerBlock="1">
            <component name="R" bits="64" numericFormat="UINT"/>
            <spirvimageformat name="R64ui"/>
        </format>
        <format name="VK_FORMAT_R64_SINT" class="64-bit" blockSize="8" texelsPerBlock="1">
            <component name="R" bits="64" numericFormat="SINT"/>
            <spirvimageformat name="R64i"/>
        </format>
        <format name="VK_FORMAT_R64_SFLOAT" class="64-bit" blockSize="8" texelsPerBlock="1">
            <component name="R" bits="64" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_R64G64_UINT" class="128-bit" blockSize="16" texelsPerBlock="1">
            <component name="R" bits="64" numericFormat="UINT"/>
            <component name="G" bits="64" numericFormat="UINT"/>
        </format>
        <format name="VK_FORMAT_R64G64_SINT" class="128-bit" blockSize="16" texelsPerBlock="1">
            <component name="R" bits="64" numericFormat="SINT"/>
            <component name="G" bits="64" numericFormat="SINT"/>
        </format>
        <format name="VK_FORMAT_R64G64_SFLOAT" class="128-bit" blockSize="16" texelsPerBlock="1">
            <component name="R" bits="64" numericFormat="SFLOAT"/>
            <component name="G" bits="64" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_R64G64B64_UINT" class="192-bit" blockSize="24" texelsPerBlock="1">
            <component name="R" bits="64" numericFormat="UINT"/>
            <component name="G" bits="64" numericFormat="UINT"/>
            <component name="B" bits="64" numericFormat="UINT"/>
        </format>
        <format name="VK_FORMAT_R64G64B64_SINT" class="192-bit" blockSize="24" texelsPerBlock="1">
            <component name="R" bits="64" numericFormat="SINT"/>
            <component name="G" bits="64" numericFormat="SINT"/>
            <component name="B" bits="64" numericFormat="SINT"/>
        </format>
        <format name="VK_FORMAT_R64G64B64_SFLOAT" class="192-bit" blockSize="24" texelsPerBlock="1">
            <component name="R" bits="64" numericFormat="SFLOAT"/>
            <component name="G" bits="64" numericFormat="SFLOAT"/>
            <component name="B" bits="64" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_R64G64B64A64_UINT" class="256-bit" blockSize="32" texelsPerBlock="1">
            <component name="R" bits="64" numericFormat="UINT"/>
            <component name="G" bits="64" numericFormat="UINT"/>
            <component name="B" bits="64" numericFormat="UINT"/>
            <component name="A" bits="64" numericFormat="UINT"/>
        </format>
        <format name="VK_FORMAT_R64G64B64A64_SINT" class="256-bit" blockSize="32" texelsPerBlock="1">
            <component name="R" bits="64" numericFormat="SINT"/>
            <component name="G" bits="64" numericFormat="SINT"/>
            <component name="B" bits="64" numericFormat="SINT"/>
            <component name="A" bits="64" numericFormat="SINT"/>
        </format>
        <format name="VK_FORMAT_R64G64B64A64_SFLOAT" class="256-bit" blockSize="32" texelsPerBlock="1">
            <component name="R" bits="64" numericFormat="SFLOAT"/>
            <component name="G" bits="64" numericFormat="SFLOAT"/>
            <component name="B" bits="64" numericFormat="SFLOAT"/>
            <component name="A" bits="64" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_B10G11R11_UFLOAT_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="B" bits="10" numericFormat="UFLOAT"/>
            <component name="G" bits="11" numericFormat="UFLOAT"/>
            <component name="R" bits="11" numericFormat="UFLOAT"/>
            <spirvimageformat name="R11fG11fB10f"/>
        </format>
        <format name="VK_FORMAT_E5B9G9R9_UFLOAT_PACK32" class="32-bit" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="B" bits="9" numericFormat="UFLOAT"/>
            <component name="G" bits="9" numericFormat="UFLOAT"/>
            <component name="R" bits="9" numericFormat="UFLOAT"/>
        </format>
        <format name="VK_FORMAT_D16_UNORM" class="D16" blockSize="2" texelsPerBlock="1">
            <component name="D" bits="16" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_X8_D24_UNORM_PACK32" class="D24" blockSize="4" texelsPerBlock="1" packed="32">
            <component name="D" bits="24" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_D32_SFLOAT" class="D32" blockSize="4" texelsPerBlock="1">
            <component name="D" bits="32" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_S8_UINT" class="S8" blockSize="1" texelsPerBlock="1">
            <component name="S" bits="8" numericFormat="UINT"/>
        </format>
        <format name="VK_FORMAT_D16_UNORM_S8_UINT" class="D16S8" blockSize="3" texelsPerBlock="1">
            <component name="D" bits="16" numericFormat="UNORM"/>
            <component name="S" bits="8" numericFormat="UINT"/>
        </format>
        <format name="VK_FORMAT_D24_UNORM_S8_UINT" class="D24S8" blockSize="4" texelsPerBlock="1">
            <component name="D" bits="24" numericFormat="UNORM"/>
            <component name="S" bits="8" numericFormat="UINT"/>
        </format>
        <format name="VK_FORMAT_D32_SFLOAT_S8_UINT" class="D32S8" blockSize="5" texelsPerBlock="1">
            <component name="D" bits="32" numericFormat="SFLOAT"/>
            <component name="S" bits="8" numericFormat="UINT"/>
        </format>
        <format name="VK_FORMAT_BC1_RGB_UNORM_BLOCK" class="BC1_RGB" blockSize="8" texelsPerBlock="16" blockExtent="4,4,1" compressed="BC">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_BC1_RGB_SRGB_BLOCK" class="BC1_RGB" blockSize="8" texelsPerBlock="16" blockExtent="4,4,1" compressed="BC">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_BC1_RGBA_UNORM_BLOCK" class="BC1_RGBA" blockSize="8" texelsPerBlock="16" blockExtent="4,4,1" compressed="BC">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_BC1_RGBA_SRGB_BLOCK" class="BC1_RGBA" blockSize="8" texelsPerBlock="16" blockExtent="4,4,1" compressed="BC">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_BC2_UNORM_BLOCK" class="BC2" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="BC">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_BC2_SRGB_BLOCK" class="BC2" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="BC">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_BC3_UNORM_BLOCK" class="BC3" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="BC">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_BC3_SRGB_BLOCK" class="BC3" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="BC">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_BC4_UNORM_BLOCK" class="BC4" blockSize="8" texelsPerBlock="16" blockExtent="4,4,1" compressed="BC">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_BC4_SNORM_BLOCK" class="BC4" blockSize="8" texelsPerBlock="16" blockExtent="4,4,1" compressed="BC">
            <component name="R" bits="compressed" numericFormat="SNORM"/>
        </format>
        <format name="VK_FORMAT_BC5_UNORM_BLOCK" class="BC5" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="BC">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_BC5_SNORM_BLOCK" class="BC5" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="BC">
            <component name="R" bits="compressed" numericFormat="SNORM"/>
            <component name="G" bits="compressed" numericFormat="SNORM"/>
        </format>
        <format name="VK_FORMAT_BC6H_UFLOAT_BLOCK" class="BC6H" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="BC">
            <component name="R" bits="compressed" numericFormat="UFLOAT"/>
            <component name="G" bits="compressed" numericFormat="UFLOAT"/>
            <component name="B" bits="compressed" numericFormat="UFLOAT"/>
        </format>
        <format name="VK_FORMAT_BC6H_SFLOAT_BLOCK" class="BC6H" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="BC">
            <component name="R" bits="compressed" numericFormat="SFLOAT"/>
            <component name="G" bits="compressed" numericFormat="SFLOAT"/>
            <component name="B" bits="compressed" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_BC7_UNORM_BLOCK" class="BC7" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="BC">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_BC7_SRGB_BLOCK" class="BC7" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="BC">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK" class="ETC2_RGB" blockSize="8" texelsPerBlock="16" blockExtent="4,4,1" compressed="ETC2">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK" class="ETC2_RGB" blockSize="8" texelsPerBlock="16" blockExtent="4,4,1" compressed="ETC2">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK" class="ETC2_RGBA" blockSize="8" texelsPerBlock="16" blockExtent="4,4,1" compressed="ETC2">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK" class="ETC2_RGBA" blockSize="8" texelsPerBlock="16" blockExtent="4,4,1" compressed="ETC2">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK" class="ETC2_EAC_RGBA" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="ETC2">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK" class="ETC2_EAC_RGBA" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="ETC2">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_EAC_R11_UNORM_BLOCK" class="EAC_R" blockSize="8" texelsPerBlock="16" blockExtent="4,4,1" compressed="EAC">
            <component name="R" bits="11" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_EAC_R11_SNORM_BLOCK" class="EAC_R" blockSize="8" texelsPerBlock="16" blockExtent="4,4,1" compressed="EAC">
            <component name="R" bits="11" numericFormat="SNORM"/>
        </format>
        <format name="VK_FORMAT_EAC_R11G11_UNORM_BLOCK" class="EAC_RG" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="EAC">
            <component name="R" bits="11" numericFormat="UNORM"/>
            <component name="G" bits="11" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_EAC_R11G11_SNORM_BLOCK" class="EAC_RG" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="EAC">
            <component name="R" bits="11" numericFormat="SNORM"/>
            <component name="G" bits="11" numericFormat="SNORM"/>
        </format>
        <format name="VK_FORMAT_ASTC_4x4_UNORM_BLOCK" class="ASTC_4x4" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ASTC_4x4_SRGB_BLOCK" class="ASTC_4x4" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ASTC_5x4_UNORM_BLOCK" class="ASTC_5x4" blockSize="16" texelsPerBlock="20" blockExtent="5,4,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ASTC_5x4_SRGB_BLOCK" class="ASTC_5x4" blockSize="16" texelsPerBlock="20" blockExtent="5,4,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ASTC_5x5_UNORM_BLOCK" class="ASTC_5x5" blockSize="16" texelsPerBlock="25" blockExtent="5,5,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ASTC_5x5_SRGB_BLOCK" class="ASTC_5x5" blockSize="16" texelsPerBlock="25" blockExtent="5,5,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ASTC_6x5_UNORM_BLOCK" class="ASTC_6x5" blockSize="16" texelsPerBlock="30" blockExtent="6,5,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ASTC_6x5_SRGB_BLOCK" class="ASTC_6x5" blockSize="16" texelsPerBlock="30" blockExtent="6,5,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ASTC_6x6_UNORM_BLOCK" class="ASTC_6x6" blockSize="16" texelsPerBlock="36" blockExtent="6,6,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ASTC_6x6_SRGB_BLOCK" class="ASTC_6x6" blockSize="16" texelsPerBlock="36" blockExtent="6,6,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ASTC_8x5_UNORM_BLOCK" class="ASTC_8x5" blockSize="16" texelsPerBlock="40" blockExtent="8,5,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ASTC_8x5_SRGB_BLOCK" class="ASTC_8x5" blockSize="16" texelsPerBlock="40" blockExtent="8,5,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ASTC_8x6_UNORM_BLOCK" class="ASTC_8x6" blockSize="16" texelsPerBlock="48" blockExtent="8,6,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ASTC_8x6_SRGB_BLOCK" class="ASTC_8x6" blockSize="16" texelsPerBlock="48" blockExtent="8,6,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ASTC_8x8_UNORM_BLOCK" class="ASTC_8x8" blockSize="16" texelsPerBlock="64" blockExtent="8,8,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ASTC_8x8_SRGB_BLOCK" class="ASTC_8x8" blockSize="16" texelsPerBlock="64" blockExtent="8,8,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ASTC_10x5_UNORM_BLOCK" class="ASTC_10x5" blockSize="16" texelsPerBlock="50" blockExtent="10,5,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ASTC_10x5_SRGB_BLOCK" class="ASTC_10x5" blockSize="16" texelsPerBlock="50" blockExtent="10,5,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ASTC_10x6_UNORM_BLOCK" class="ASTC_10x6" blockSize="16" texelsPerBlock="60" blockExtent="10,6,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ASTC_10x6_SRGB_BLOCK" class="ASTC_10x6" blockSize="16" texelsPerBlock="60" blockExtent="10,6,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ASTC_10x8_UNORM_BLOCK" class="ASTC_10x8" blockSize="16" texelsPerBlock="80" blockExtent="10,8,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ASTC_10x8_SRGB_BLOCK" class="ASTC_10x8" blockSize="16" texelsPerBlock="80" blockExtent="10,8,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ASTC_10x10_UNORM_BLOCK" class="ASTC_10x10" blockSize="16" texelsPerBlock="100" blockExtent="10,10,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ASTC_10x10_SRGB_BLOCK" class="ASTC_10x10" blockSize="16" texelsPerBlock="100" blockExtent="10,10,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ASTC_12x10_UNORM_BLOCK" class="ASTC_12x10" blockSize="16" texelsPerBlock="120" blockExtent="12,10,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ASTC_12x10_SRGB_BLOCK" class="ASTC_12x10" blockSize="16" texelsPerBlock="120" blockExtent="12,10,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ASTC_12x12_UNORM_BLOCK" class="ASTC_12x12" blockSize="16" texelsPerBlock="144" blockExtent="12,12,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_ASTC_12x12_SRGB_BLOCK" class="ASTC_12x12" blockSize="16" texelsPerBlock="144" blockExtent="12,12,1" compressed="ASTC LDR">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_G8B8G8R8_422_UNORM" class="32-bit G8B8G8R8" blockSize="4" texelsPerBlock="1" blockExtent="2,1,1" chroma="422">
            <component name="G" bits="8" numericFormat="UNORM"/>
            <component name="B" bits="8" numericFormat="UNORM"/>
            <component name="G" bits="8" numericFormat="UNORM"/>
            <component name="R" bits="8" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_B8G8R8G8_422_UNORM" class="32-bit B8G8R8G8" blockSize="4" texelsPerBlock="1" blockExtent="2,1,1" chroma="422">
            <component name="B" bits="8" numericFormat="UNORM"/>
            <component name="G" bits="8" numericFormat="UNORM"/>
            <component name="R" bits="8" numericFormat="UNORM"/>
            <component name="G" bits="8" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM" class="8-bit 3-plane 420" blockSize="3" texelsPerBlock="1" chroma="420">
            <component name="G" bits="8" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="8" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="8" numericFormat="UNORM" planeIndex="2"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R8_UNORM"/>
            <plane index="1" widthDivisor="2" heightDivisor="2" compatible="VK_FORMAT_R8_UNORM"/>
            <plane index="2" widthDivisor="2" heightDivisor="2" compatible="VK_FORMAT_R8_UNORM"/>
        </format>
        <format name="VK_FORMAT_G8_B8R8_2PLANE_420_UNORM" class="8-bit 2-plane 420" blockSize="3" texelsPerBlock="1" chroma="420">
            <component name="G" bits="8" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="8" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="8" numericFormat="UNORM" planeIndex="1"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R8_UNORM"/>
            <plane index="1" widthDivisor="2" heightDivisor="2" compatible="VK_FORMAT_R8G8_UNORM"/>
        </format>
        <format name="VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM" class="8-bit 3-plane 422" blockSize="3" texelsPerBlock="1" chroma="422">
            <component name="G" bits="8" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="8" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="8" numericFormat="UNORM" planeIndex="2"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R8_UNORM"/>
            <plane index="1" widthDivisor="2" heightDivisor="1" compatible="VK_FORMAT_R8_UNORM"/>
            <plane index="2" widthDivisor="2" heightDivisor="1" compatible="VK_FORMAT_R8_UNORM"/>
        </format>
        <format name="VK_FORMAT_G8_B8R8_2PLANE_422_UNORM" class="8-bit 2-plane 422" blockSize="3" texelsPerBlock="1" chroma="422">
            <component name="G" bits="8" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="8" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="8" numericFormat="UNORM" planeIndex="1"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R8_UNORM"/>
            <plane index="1" widthDivisor="2" heightDivisor="1" compatible="VK_FORMAT_R8G8_UNORM"/>
        </format>
        <format name="VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM" class="8-bit 3-plane 444" blockSize="3" texelsPerBlock="1" chroma="444">
            <component name="G" bits="8" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="8" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="8" numericFormat="UNORM" planeIndex="2"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R8_UNORM"/>
            <plane index="1" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R8_UNORM"/>
            <plane index="2" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R8_UNORM"/>
        </format>
        <format name="VK_FORMAT_R10X6_UNORM_PACK16" class="16-bit" blockSize="2" texelsPerBlock="1" packed="16">
            <component name="R" bits="10" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_R10X6G10X6_UNORM_2PACK16" class="32-bit" blockSize="4" texelsPerBlock="1" packed="16">
            <component name="R" bits="10" numericFormat="UNORM"/>
            <component name="G" bits="10" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16" class="64-bit R10G10B10A10" blockSize="8" texelsPerBlock="1" packed="16" chroma="444">
            <component name="R" bits="10" numericFormat="UNORM"/>
            <component name="G" bits="10" numericFormat="UNORM"/>
            <component name="B" bits="10" numericFormat="UNORM"/>
            <component name="A" bits="10" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16" class="64-bit G10B10G10R10" blockSize="8" texelsPerBlock="1" blockExtent="2,1,1" packed="16" chroma="422">
            <component name="G" bits="10" numericFormat="UNORM"/>
            <component name="B" bits="10" numericFormat="UNORM"/>
            <component name="G" bits="10" numericFormat="UNORM"/>
            <component name="R" bits="10" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16" class="64-bit B10G10R10G10" blockSize="8" texelsPerBlock="1" blockExtent="2,1,1" packed="16" chroma="422">
            <component name="B" bits="10" numericFormat="UNORM"/>
            <component name="G" bits="10" numericFormat="UNORM"/>
            <component name="R" bits="10" numericFormat="UNORM"/>
            <component name="G" bits="10" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16" class="10-bit 3-plane 420" blockSize="6" texelsPerBlock="1" packed="16" chroma="420">
            <component name="G" bits="10" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="10" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="10" numericFormat="UNORM" planeIndex="2"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R10X6_UNORM_PACK16"/>
            <plane index="1" widthDivisor="2" heightDivisor="2" compatible="VK_FORMAT_R10X6_UNORM_PACK16"/>
            <plane index="2" widthDivisor="2" heightDivisor="2" compatible="VK_FORMAT_R10X6_UNORM_PACK16"/>
        </format>
        <format name="VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16" class="10-bit 2-plane 420" blockSize="6" texelsPerBlock="1" packed="16" chroma="420">
            <component name="G" bits="10" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="10" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="10" numericFormat="UNORM" planeIndex="1"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R10X6_UNORM_PACK16"/>
            <plane index="1" widthDivisor="2" heightDivisor="2" compatible="VK_FORMAT_R10X6G10X6_UNORM_2PACK16"/>
        </format>
        <format name="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16" class="10-bit 3-plane 422" blockSize="6" texelsPerBlock="1" packed="16" chroma="422">
            <component name="G" bits="10" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="10" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="10" numericFormat="UNORM" planeIndex="2"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R10X6_UNORM_PACK16"/>
            <plane index="1" widthDivisor="2" heightDivisor="1" compatible="VK_FORMAT_R10X6_UNORM_PACK16"/>
            <plane index="2" widthDivisor="2" heightDivisor="1" compatible="VK_FORMAT_R10X6_UNORM_PACK16"/>
        </format>
        <format name="VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16" class="10-bit 2-plane 422" blockSize="6" texelsPerBlock="1" packed="16" chroma="422">
            <component name="G" bits="10" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="10" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="10" numericFormat="UNORM" planeIndex="1"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R10X6_UNORM_PACK16"/>
            <plane index="1" widthDivisor="2" heightDivisor="1" compatible="VK_FORMAT_R10X6G10X6_UNORM_2PACK16"/>
        </format>
        <format name="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16" class="10-bit 3-plane 444" blockSize="6" texelsPerBlock="1" packed="16" chroma="444">
            <component name="G" bits="10" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="10" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="10" numericFormat="UNORM" planeIndex="2"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R10X6_UNORM_PACK16"/>
            <plane index="1" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R10X6_UNORM_PACK16"/>
            <plane index="2" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R10X6_UNORM_PACK16"/>
        </format>
        <format name="VK_FORMAT_R12X4_UNORM_PACK16" class="16-bit" blockSize="2" texelsPerBlock="1" packed="16">
            <component name="R" bits="12" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_R12X4G12X4_UNORM_2PACK16" class="32-bit" blockSize="4" texelsPerBlock="1" packed="16">
            <component name="R" bits="12" numericFormat="UNORM"/>
            <component name="G" bits="12" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16" class="64-bit R12G12B12A12" blockSize="8" texelsPerBlock="1" packed="16" chroma="444">
            <component name="R" bits="12" numericFormat="UNORM"/>
            <component name="G" bits="12" numericFormat="UNORM"/>
            <component name="B" bits="12" numericFormat="UNORM"/>
            <component name="A" bits="12" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16" class="64-bit G12B12G12R12" blockSize="8" texelsPerBlock="1" blockExtent="2,1,1" packed="16" chroma="422">
            <component name="G" bits="12" numericFormat="UNORM"/>
            <component name="B" bits="12" numericFormat="UNORM"/>
            <component name="G" bits="12" numericFormat="UNORM"/>
            <component name="R" bits="12" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16" class="64-bit B12G12R12G12" blockSize="8" texelsPerBlock="1" blockExtent="2,1,1" packed="16" chroma="422">
            <component name="B" bits="12" numericFormat="UNORM"/>
            <component name="G" bits="12" numericFormat="UNORM"/>
            <component name="R" bits="12" numericFormat="UNORM"/>
            <component name="G" bits="12" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16" class="12-bit 3-plane 420" blockSize="6" texelsPerBlock="1" packed="16" chroma="420">
            <component name="G" bits="12" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="12" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="12" numericFormat="UNORM" planeIndex="2"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R12X4_UNORM_PACK16"/>
            <plane index="1" widthDivisor="2" heightDivisor="2" compatible="VK_FORMAT_R12X4_UNORM_PACK16"/>
            <plane index="2" widthDivisor="2" heightDivisor="2" compatible="VK_FORMAT_R12X4_UNORM_PACK16"/>
        </format>
        <format name="VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16" class="12-bit 2-plane 420" blockSize="6" texelsPerBlock="1" packed="16" chroma="420">
            <component name="G" bits="12" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="12" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="12" numericFormat="UNORM" planeIndex="1"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R12X4_UNORM_PACK16"/>
            <plane index="1" widthDivisor="2" heightDivisor="2" compatible="VK_FORMAT_R12X4G12X4_UNORM_2PACK16"/>
        </format>
        <format name="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16" class="12-bit 3-plane 422" blockSize="6" texelsPerBlock="1" packed="16" chroma="422">
            <component name="G" bits="12" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="12" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="12" numericFormat="UNORM" planeIndex="2"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R12X4_UNORM_PACK16"/>
            <plane index="1" widthDivisor="2" heightDivisor="1" compatible="VK_FORMAT_R12X4_UNORM_PACK16"/>
            <plane index="2" widthDivisor="2" heightDivisor="1" compatible="VK_FORMAT_R12X4_UNORM_PACK16"/>
        </format>
        <format name="VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16" class="12-bit 2-plane 422" blockSize="6" texelsPerBlock="1" packed="16" chroma="422">
            <component name="G" bits="12" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="12" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="12" numericFormat="UNORM" planeIndex="1"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R12X4_UNORM_PACK16"/>
            <plane index="1" widthDivisor="2" heightDivisor="1" compatible="VK_FORMAT_R12X4G12X4_UNORM_2PACK16"/>
        </format>
        <format name="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16" class="12-bit 3-plane 444" blockSize="6" texelsPerBlock="1" packed="16" chroma="444">
            <component name="G" bits="12" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="12" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="12" numericFormat="UNORM" planeIndex="2"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R12X4_UNORM_PACK16"/>
            <plane index="1" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R12X4_UNORM_PACK16"/>
            <plane index="2" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R12X4_UNORM_PACK16"/>
        </format>
        <format name="VK_FORMAT_G16B16G16R16_422_UNORM" class="64-bit G16B16G16R16" blockSize="8" texelsPerBlock="1" blockExtent="2,1,1" chroma="422">
            <component name="G" bits="16" numericFormat="UNORM"/>
            <component name="B" bits="16" numericFormat="UNORM"/>
            <component name="G" bits="16" numericFormat="UNORM"/>
            <component name="R" bits="16" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_B16G16R16G16_422_UNORM" class="64-bit B16G16R16G16" blockSize="8" texelsPerBlock="1" blockExtent="2,1,1" chroma="422">
            <component name="B" bits="16" numericFormat="UNORM"/>
            <component name="G" bits="16" numericFormat="UNORM"/>
            <component name="R" bits="16" numericFormat="UNORM"/>
            <component name="G" bits="16" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM" class="16-bit 3-plane 420" blockSize="6" texelsPerBlock="1" chroma="420">
            <component name="G" bits="16" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="16" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="16" numericFormat="UNORM" planeIndex="2"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R16_UNORM"/>
            <plane index="1" widthDivisor="2" heightDivisor="2" compatible="VK_FORMAT_R16_UNORM"/>
            <plane index="2" widthDivisor="2" heightDivisor="2" compatible="VK_FORMAT_R16_UNORM"/>
        </format>
        <format name="VK_FORMAT_G16_B16R16_2PLANE_420_UNORM" class="16-bit 2-plane 420" blockSize="6" texelsPerBlock="1" chroma="420">
            <component name="G" bits="16" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="16" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="16" numericFormat="UNORM" planeIndex="1"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R16_UNORM"/>
            <plane index="1" widthDivisor="2" heightDivisor="2" compatible="VK_FORMAT_R16G16_UNORM"/>
        </format>
        <format name="VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM" class="16-bit 3-plane 422" blockSize="6" texelsPerBlock="1" chroma="422">
            <component name="G" bits="16" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="16" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="16" numericFormat="UNORM" planeIndex="2"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R16_UNORM"/>
            <plane index="1" widthDivisor="2" heightDivisor="1" compatible="VK_FORMAT_R16_UNORM"/>
            <plane index="2" widthDivisor="2" heightDivisor="1" compatible="VK_FORMAT_R16_UNORM"/>
        </format>
        <format name="VK_FORMAT_G16_B16R16_2PLANE_422_UNORM" class="16-bit 2-plane 422" blockSize="6" texelsPerBlock="1" chroma="422">
            <component name="G" bits="16" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="16" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="16" numericFormat="UNORM" planeIndex="1"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R16_UNORM"/>
            <plane index="1" widthDivisor="2" heightDivisor="1" compatible="VK_FORMAT_R16G16_UNORM"/>
        </format>
        <format name="VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM" class="16-bit 3-plane 444" blockSize="6" texelsPerBlock="1" chroma="444">
            <component name="G" bits="16" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="16" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="16" numericFormat="UNORM" planeIndex="2"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R16_UNORM"/>
            <plane index="1" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R16_UNORM"/>
            <plane index="2" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R16_UNORM"/>
        </format>
        <format name="VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG" class="PVRTC1_2BPP" blockSize="8" texelsPerBlock="1" blockExtent="8,4,1" compressed="PVRTC">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG" class="PVRTC1_4BPP" blockSize="8" texelsPerBlock="1" blockExtent="4,4,1" compressed="PVRTC">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG" class="PVRTC2_2BPP" blockSize="8" texelsPerBlock="1" blockExtent="8,4,1" compressed="PVRTC">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG" class="PVRTC2_4BPP" blockSize="8" texelsPerBlock="1" blockExtent="4,4,1" compressed="PVRTC">
            <component name="R" bits="compressed" numericFormat="UNORM"/>
            <component name="G" bits="compressed" numericFormat="UNORM"/>
            <component name="B" bits="compressed" numericFormat="UNORM"/>
            <component name="A" bits="compressed" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG" class="PVRTC1_2BPP" blockSize="8" texelsPerBlock="1" blockExtent="8,4,1" compressed="PVRTC">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG" class="PVRTC1_4BPP" blockSize="8" texelsPerBlock="1" blockExtent="4,4,1" compressed="PVRTC">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG" class="PVRTC2_2BPP" blockSize="8" texelsPerBlock="1" blockExtent="8,4,1" compressed="PVRTC">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG" class="PVRTC2_4BPP" blockSize="8" texelsPerBlock="1" blockExtent="4,4,1" compressed="PVRTC">
            <component name="R" bits="compressed" numericFormat="SRGB"/>
            <component name="G" bits="compressed" numericFormat="SRGB"/>
            <component name="B" bits="compressed" numericFormat="SRGB"/>
            <component name="A" bits="compressed" numericFormat="SRGB"/>
        </format>
        <format name="VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK" class="ASTC_4x4" blockSize="16" texelsPerBlock="16" blockExtent="4,4,1" compressed="ASTC HDR">
            <component name="R" bits="compressed" numericFormat="SFLOAT"/>
            <component name="G" bits="compressed" numericFormat="SFLOAT"/>
            <component name="B" bits="compressed" numericFormat="SFLOAT"/>
            <component name="A" bits="compressed" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK" class="ASTC_5x4" blockSize="16" texelsPerBlock="20" blockExtent="5,4,1" compressed="ASTC HDR">
            <component name="R" bits="compressed" numericFormat="SFLOAT"/>
            <component name="G" bits="compressed" numericFormat="SFLOAT"/>
            <component name="B" bits="compressed" numericFormat="SFLOAT"/>
            <component name="A" bits="compressed" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK" class="ASTC_5x5" blockSize="16" texelsPerBlock="25" blockExtent="5,5,1" compressed="ASTC HDR">
            <component name="R" bits="compressed" numericFormat="SFLOAT"/>
            <component name="G" bits="compressed" numericFormat="SFLOAT"/>
            <component name="B" bits="compressed" numericFormat="SFLOAT"/>
            <component name="A" bits="compressed" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK" class="ASTC_6x5" blockSize="16" texelsPerBlock="30" blockExtent="6,5,1" compressed="ASTC HDR">
            <component name="R" bits="compressed" numericFormat="SFLOAT"/>
            <component name="G" bits="compressed" numericFormat="SFLOAT"/>
            <component name="B" bits="compressed" numericFormat="SFLOAT"/>
            <component name="A" bits="compressed" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK" class="ASTC_6x6" blockSize="16" texelsPerBlock="36" blockExtent="6,6,1" compressed="ASTC HDR">
            <component name="R" bits="compressed" numericFormat="SFLOAT"/>
            <component name="G" bits="compressed" numericFormat="SFLOAT"/>
            <component name="B" bits="compressed" numericFormat="SFLOAT"/>
            <component name="A" bits="compressed" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK" class="ASTC_8x5" blockSize="16" texelsPerBlock="40" blockExtent="8,5,1" compressed="ASTC HDR">
            <component name="R" bits="compressed" numericFormat="SFLOAT"/>
            <component name="G" bits="compressed" numericFormat="SFLOAT"/>
            <component name="B" bits="compressed" numericFormat="SFLOAT"/>
            <component name="A" bits="compressed" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK" class="ASTC_8x6" blockSize="16" texelsPerBlock="48" blockExtent="8,6,1" compressed="ASTC HDR">
            <component name="R" bits="compressed" numericFormat="SFLOAT"/>
            <component name="G" bits="compressed" numericFormat="SFLOAT"/>
            <component name="B" bits="compressed" numericFormat="SFLOAT"/>
            <component name="A" bits="compressed" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK" class="ASTC_8x8" blockSize="16" texelsPerBlock="64" blockExtent="8,8,1" compressed="ASTC HDR">
            <component name="R" bits="compressed" numericFormat="SFLOAT"/>
            <component name="G" bits="compressed" numericFormat="SFLOAT"/>
            <component name="B" bits="compressed" numericFormat="SFLOAT"/>
            <component name="A" bits="compressed" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK" class="ASTC_10x5" blockSize="16" texelsPerBlock="50" blockExtent="10,5,1" compressed="ASTC HDR">
            <component name="R" bits="compressed" numericFormat="SFLOAT"/>
            <component name="G" bits="compressed" numericFormat="SFLOAT"/>
            <component name="B" bits="compressed" numericFormat="SFLOAT"/>
            <component name="A" bits="compressed" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK" class="ASTC_10x6" blockSize="16" texelsPerBlock="60" blockExtent="10,6,1" compressed="ASTC HDR">
            <component name="R" bits="compressed" numericFormat="SFLOAT"/>
            <component name="G" bits="compressed" numericFormat="SFLOAT"/>
            <component name="B" bits="compressed" numericFormat="SFLOAT"/>
            <component name="A" bits="compressed" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK" class="ASTC_10x8" blockSize="16" texelsPerBlock="80" blockExtent="10,8,1" compressed="ASTC HDR">
            <component name="R" bits="compressed" numericFormat="SFLOAT"/>
            <component name="G" bits="compressed" numericFormat="SFLOAT"/>
            <component name="B" bits="compressed" numericFormat="SFLOAT"/>
            <component name="A" bits="compressed" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK" class="ASTC_10x10" blockSize="16" texelsPerBlock="100" blockExtent="10,10,1" compressed="ASTC HDR">
            <component name="R" bits="compressed" numericFormat="SFLOAT"/>
            <component name="G" bits="compressed" numericFormat="SFLOAT"/>
            <component name="B" bits="compressed" numericFormat="SFLOAT"/>
            <component name="A" bits="compressed" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK" class="ASTC_12x10" blockSize="16" texelsPerBlock="120" blockExtent="12,10,1" compressed="ASTC HDR">
            <component name="R" bits="compressed" numericFormat="SFLOAT"/>
            <component name="G" bits="compressed" numericFormat="SFLOAT"/>
            <component name="B" bits="compressed" numericFormat="SFLOAT"/>
            <component name="A" bits="compressed" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK" class="ASTC_12x12" blockSize="16" texelsPerBlock="144" blockExtent="12,12,1" compressed="ASTC HDR">
            <component name="R" bits="compressed" numericFormat="SFLOAT"/>
            <component name="G" bits="compressed" numericFormat="SFLOAT"/>
            <component name="B" bits="compressed" numericFormat="SFLOAT"/>
            <component name="A" bits="compressed" numericFormat="SFLOAT"/>
        </format>
        <format name="VK_FORMAT_G8_B8R8_2PLANE_444_UNORM" class="8-bit 2-plane 444" blockSize="3" texelsPerBlock="1" chroma="444">
            <component name="G" bits="8" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="8" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="8" numericFormat="UNORM" planeIndex="1"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R8_UNORM"/>
            <plane index="1" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R8G8_UNORM"/>
        </format>
        <format name="VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16" class="10-bit 2-plane 444" blockSize="6" texelsPerBlock="1" packed="16" chroma="444">
            <component name="G" bits="10" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="10" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="10" numericFormat="UNORM" planeIndex="1"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R10X6_UNORM_PACK16"/>
            <plane index="1" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R10X6G10X6_UNORM_2PACK16"/>
        </format>
        <format name="VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16" class="12-bit 2-plane 444" blockSize="6" texelsPerBlock="1" packed="16" chroma="444">
            <component name="G" bits="12" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="12" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="12" numericFormat="UNORM" planeIndex="1"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R12X4_UNORM_PACK16"/>
            <plane index="1" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R12X4G12X4_UNORM_2PACK16"/>
        </format>
        <format name="VK_FORMAT_G16_B16R16_2PLANE_444_UNORM" class="16-bit 2-plane 444" blockSize="6" texelsPerBlock="1" chroma="444">
            <component name="G" bits="16" numericFormat="UNORM" planeIndex="0"/>
            <component name="B" bits="16" numericFormat="UNORM" planeIndex="1"/>
            <component name="R" bits="16" numericFormat="UNORM" planeIndex="1"/>
            <plane index="0" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R16_UNORM"/>
            <plane index="1" widthDivisor="1" heightDivisor="1" compatible="VK_FORMAT_R16G16_UNORM"/>
        </format>
        <format name="VK_FORMAT_A4R4G4B4_UNORM_PACK16" class="16-bit" blockSize="2" texelsPerBlock="1" packed="16">
            <component name="A" bits="4" numericFormat="UNORM"/>
            <component name="R" bits="4" numericFormat="UNORM"/>
            <component name="G" bits="4" numericFormat="UNORM"/>
            <component name="B" bits="4" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_A4B4G4R4_UNORM_PACK16" class="16-bit" blockSize="2" texelsPerBlock="1" packed="16">
            <component name="A" bits="4" numericFormat="UNORM"/>
            <component name="B" bits="4" numericFormat="UNORM"/>
            <component name="G" bits="4" numericFormat="UNORM"/>
            <component name="R" bits="4" numericFormat="UNORM"/>
        </format>
        <format name="VK_FORMAT_R16G16_SFIXED5_NV" class="32-bit" blockSize="4" texelsPerBlock="1">
            <component name="R" bits="16" numericFormat="SFIXED5"/>
            <component name="G" bits="16" numericFormat="SFIXED5"/>
        </format>
    </formats>
    <spirvextensions comment="SPIR-V Extensions allowed in Vulkan and what is required to use it">
        <spirvextension name="SPV_KHR_variable_pointers">
            <enable version="VK_VERSION_1_1"/>
            <enable extension="VK_KHR_variable_pointers"/>
        </spirvextension>
        <spirvextension name="SPV_AMD_shader_explicit_vertex_parameter">
            <enable extension="VK_AMD_shader_explicit_vertex_parameter"/>
        </spirvextension>
        <spirvextension name="SPV_AMD_gcn_shader">
            <enable extension="VK_AMD_gcn_shader"/>
        </spirvextension>
        <spirvextension name="SPV_AMD_gpu_shader_half_float">
            <enable extension="VK_AMD_gpu_shader_half_float"/>
        </spirvextension>
        <spirvextension name="SPV_AMD_gpu_shader_int16">
            <enable extension="VK_AMD_gpu_shader_int16"/>
        </spirvextension>
        <spirvextension name="SPV_AMD_shader_ballot">
            <enable extension="VK_AMD_shader_ballot"/>
        </spirvextension>
        <spirvextension name="SPV_AMD_shader_fragment_mask">
            <enable extension="VK_AMD_shader_fragment_mask"/>
        </spirvextension>
        <spirvextension name="SPV_AMD_shader_image_load_store_lod">
            <enable extension="VK_AMD_shader_image_load_store_lod"/>
        </spirvextension>
        <spirvextension name="SPV_AMD_shader_trinary_minmax">
            <enable extension="VK_AMD_shader_trinary_minmax"/>
        </spirvextension>
        <spirvextension name="SPV_AMD_texture_gather_bias_lod">
            <enable extension="VK_AMD_texture_gather_bias_lod"/>
        </spirvextension>
        <spirvextension name="SPV_AMD_shader_early_and_late_fragment_tests">
            <enable extension="VK_AMD_shader_early_and_late_fragment_tests"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_shader_draw_parameters">
            <enable version="VK_VERSION_1_1"/>
            <enable extension="VK_KHR_shader_draw_parameters"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_8bit_storage">
            <enable version="VK_VERSION_1_2"/>
            <enable extension="VK_KHR_8bit_storage"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_16bit_storage">
            <enable version="VK_VERSION_1_1"/>
            <enable extension="VK_KHR_16bit_storage"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_shader_clock">
            <enable extension="VK_KHR_shader_clock"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_float_controls">
            <enable version="VK_VERSION_1_2"/>
            <enable extension="VK_KHR_shader_float_controls"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_storage_buffer_storage_class">
            <enable version="VK_VERSION_1_1"/>
            <enable extension="VK_KHR_storage_buffer_storage_class"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_post_depth_coverage">
            <enable extension="VK_EXT_post_depth_coverage"/>
        </spirvextension>
        <spirvextension name="SPV_EXT_shader_stencil_export">
            <enable extension="VK_EXT_shader_stencil_export"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_shader_ballot">
            <enable extension="VK_EXT_shader_subgroup_ballot"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_subgroup_vote">
            <enable extension="VK_EXT_shader_subgroup_vote"/>
        </spirvextension>
        <spirvextension name="SPV_NV_sample_mask_override_coverage">
            <enable extension="VK_NV_sample_mask_override_coverage"/>
        </spirvextension>
        <spirvextension name="SPV_NV_geometry_shader_passthrough">
            <enable extension="VK_NV_geometry_shader_passthrough"/>
        </spirvextension>
        <spirvextension name="SPV_NV_mesh_shader">
            <enable extension="VK_NV_mesh_shader"/>
        </spirvextension>
        <spirvextension name="SPV_NV_viewport_array2">
            <enable extension="VK_NV_viewport_array2"/>
        </spirvextension>
        <spirvextension name="SPV_NV_shader_subgroup_partitioned">
            <enable extension="VK_NV_shader_subgroup_partitioned"/>
        </spirvextension>
        <spirvextension name="SPV_NV_shader_invocation_reorder">
            <enable extension="VK_NV_ray_tracing_invocation_reorder"/>
        </spirvextension>
        <spirvextension name="SPV_EXT_shader_viewport_index_layer">
            <enable version="VK_VERSION_1_2"/>
            <enable extension="VK_EXT_shader_viewport_index_layer"/>
        </spirvextension>
        <spirvextension name="SPV_NVX_multiview_per_view_attributes">
            <enable extension="VK_NVX_multiview_per_view_attributes"/>
        </spirvextension>
        <spirvextension name="SPV_EXT_descriptor_indexing">
            <enable version="VK_VERSION_1_2"/>
            <enable extension="VK_EXT_descriptor_indexing"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_vulkan_memory_model">
            <enable version="VK_VERSION_1_2"/>
            <enable extension="VK_KHR_vulkan_memory_model"/>
        </spirvextension>
        <spirvextension name="SPV_NV_compute_shader_derivatives">
            <enable extension="VK_NV_compute_shader_derivatives"/>
        </spirvextension>
        <spirvextension name="SPV_NV_fragment_shader_barycentric">
            <enable extension="VK_NV_fragment_shader_barycentric"/>
        </spirvextension>
        <spirvextension name="SPV_NV_shader_image_footprint">
            <enable extension="VK_NV_shader_image_footprint"/>
        </spirvextension>
        <spirvextension name="SPV_NV_shading_rate">
            <enable extension="VK_NV_shading_rate_image"/>
        </spirvextension>
        <spirvextension name="SPV_NV_ray_tracing">
            <enable extension="VK_NV_ray_tracing"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_ray_tracing">
            <enable extension="VK_KHR_ray_tracing_pipeline"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_ray_query">
            <enable extension="VK_KHR_ray_query"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_ray_cull_mask">
            <enable extension="VK_KHR_ray_tracing_maintenance1"/>
        </spirvextension>
        <spirvextension name="SPV_GOOGLE_hlsl_functionality1">
            <enable extension="VK_GOOGLE_hlsl_functionality1"/>
        </spirvextension>
        <spirvextension name="SPV_GOOGLE_user_type">
            <enable extension="VK_GOOGLE_user_type"/>
        </spirvextension>
        <spirvextension name="SPV_GOOGLE_decorate_string">
            <enable extension="VK_GOOGLE_decorate_string"/>
        </spirvextension>
        <spirvextension name="SPV_EXT_fragment_invocation_density">
            <enable extension="VK_EXT_fragment_density_map"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_physical_storage_buffer">
            <enable version="VK_VERSION_1_2"/>
            <enable extension="VK_KHR_buffer_device_address"/>
        </spirvextension>
        <spirvextension name="SPV_EXT_physical_storage_buffer">
            <enable extension="VK_EXT_buffer_device_address"/>
        </spirvextension>
        <spirvextension name="SPV_NV_cooperative_matrix">
            <enable extension="VK_NV_cooperative_matrix"/>
        </spirvextension>
        <spirvextension name="SPV_NV_shader_sm_builtins">
            <enable extension="VK_NV_shader_sm_builtins"/>
        </spirvextension>
        <spirvextension name="SPV_EXT_fragment_shader_interlock">
            <enable extension="VK_EXT_fragment_shader_interlock"/>
        </spirvextension>
        <spirvextension name="SPV_EXT_demote_to_helper_invocation">
            <enable version="VK_VERSION_1_3"/>
            <enable extension="VK_EXT_shader_demote_to_helper_invocation"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_fragment_shading_rate">
            <enable extension="VK_KHR_fragment_shading_rate"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_non_semantic_info">
            <enable version="VK_VERSION_1_3"/>
            <enable extension="VK_KHR_shader_non_semantic_info"/>
        </spirvextension>
        <spirvextension name="SPV_EXT_shader_image_int64">
            <enable extension="VK_EXT_shader_image_atomic_int64"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_terminate_invocation">
            <enable version="VK_VERSION_1_3"/>
            <enable extension="VK_KHR_shader_terminate_invocation"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_multiview">
            <enable version="VK_VERSION_1_1"/>
            <enable extension="VK_KHR_multiview"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_workgroup_memory_explicit_layout">
            <enable extension="VK_KHR_workgroup_memory_explicit_layout"/>
        </spirvextension>
        <spirvextension name="SPV_EXT_shader_atomic_float_add">
            <enable extension="VK_EXT_shader_atomic_float"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_fragment_shader_barycentric">
            <enable extension="VK_KHR_fragment_shader_barycentric"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_subgroup_uniform_control_flow">
            <enable version="VK_VERSION_1_3"/>
            <enable extension="VK_KHR_shader_subgroup_uniform_control_flow"/>
        </spirvextension>
        <spirvextension name="SPV_EXT_shader_atomic_float_min_max">
            <enable extension="VK_EXT_shader_atomic_float2"/>
        </spirvextension>
        <spirvextension name="SPV_EXT_shader_atomic_float16_add">
            <enable extension="VK_EXT_shader_atomic_float2"/>
        </spirvextension>
        <spirvextension name="SPV_NV_shader_atomic_fp16_vector">
            <enable extension="VK_NV_shader_atomic_float16_vector"/>
        </spirvextension>
        <spirvextension name="SPV_EXT_fragment_fully_covered">
            <enable extension="VK_EXT_conservative_rasterization"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_integer_dot_product">
            <enable version="VK_VERSION_1_3"/>
            <enable extension="VK_KHR_shader_integer_dot_product"/>
        </spirvextension>
        <spirvextension name="SPV_INTEL_shader_integer_functions2">
            <enable extension="VK_INTEL_shader_integer_functions2"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_device_group">
            <enable version="VK_VERSION_1_1"/>
            <enable extension="VK_KHR_device_group"/>
        </spirvextension>
        <spirvextension name="SPV_QCOM_image_processing">
            <enable extension="VK_QCOM_image_processing"/>
        </spirvextension>
        <spirvextension name="SPV_QCOM_image_processing2">
            <enable extension="VK_QCOM_image_processing2"/>
        </spirvextension>
        <spirvextension name="SPV_EXT_mesh_shader">
            <enable extension="VK_EXT_mesh_shader"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_ray_tracing_position_fetch">
            <enable extension="VK_KHR_ray_tracing_position_fetch"/>
        </spirvextension>
        <spirvextension name="SPV_EXT_shader_tile_image">
            <enable extension="VK_EXT_shader_tile_image"/>
        </spirvextension>
        <spirvextension name="SPV_EXT_opacity_micromap">
            <enable extension="VK_EXT_opacity_micromap"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_cooperative_matrix">
            <enable extension="VK_KHR_cooperative_matrix"/>
        </spirvextension>
        <spirvextension name="SPV_ARM_core_builtins">
            <enable extension="VK_ARM_shader_core_builtins"/>
        </spirvextension>
        <spirvextension name="SPV_AMDX_shader_enqueue">
            <enable extension="VK_AMDX_shader_enqueue"/>
        </spirvextension>
        <spirvextension name="SPV_HUAWEI_cluster_culling_shader">
            <enable extension="VK_HUAWEI_cluster_culling_shader"/>
        </spirvextension>
        <spirvextension name="SPV_HUAWEI_subpass_shading">
            <enable extension="VK_HUAWEI_subpass_shading"/>
        </spirvextension>
        <spirvextension name="SPV_NV_ray_tracing_motion_blur">
            <enable extension="VK_NV_ray_tracing_motion_blur"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_maximal_reconvergence">
            <enable extension="VK_KHR_shader_maximal_reconvergence"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_subgroup_rotate">
            <enable version="VK_VERSION_1_4"/>
            <enable extension="VK_KHR_shader_subgroup_rotate"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_expect_assume">
            <enable version="VK_VERSION_1_4"/>
            <enable extension="VK_KHR_shader_expect_assume"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_float_controls2">
            <enable version="VK_VERSION_1_4"/>
            <enable extension="VK_KHR_shader_float_controls2"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_quad_control">
            <enable extension="VK_KHR_shader_quad_control"/>
        </spirvextension>
        <spirvextension name="SPV_NV_raw_access_chains">
            <enable extension="VK_NV_raw_access_chains"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_compute_shader_derivatives">
            <enable extension="VK_KHR_compute_shader_derivatives"/>
        </spirvextension>
        <spirvextension name="SPV_EXT_replicated_composites">
            <enable extension="VK_EXT_shader_replicated_composites"/>
        </spirvextension>
        <spirvextension name="SPV_KHR_relaxed_extended_instruction">
            <enable extension="VK_KHR_shader_relaxed_extended_instruction"/>
        </spirvextension>
        <spirvextension name="SPV_NV_cooperative_matrix2">
            <enable extension="VK_NV_cooperative_matrix2"/>
        </spirvextension>
        <spirvextension name="SPV_NV_tensor_addressing">
            <enable extension="VK_NV_cooperative_matrix2"/>
        </spirvextension>
        <spirvextension name="SPV_NV_cluster_acceleration_structure">
            <enable extension="VK_NV_cluster_acceleration_structure"/>
        </spirvextension>
	<spirvextension name="SPV_NV_cooperative_vector">
            <enable extension="VK_NV_cooperative_vector"/>
        </spirvextension>
    </spirvextensions>
    <spirvcapabilities comment="SPIR-V Capabilities allowed in Vulkan and what is required to use it">
        <spirvcapability name="Matrix">
            <enable version="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="Shader">
            <enable version="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="InputAttachment">
            <enable version="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="Sampled1D">
            <enable version="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="Image1D">
            <enable version="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="SampledBuffer">
            <enable version="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="ImageBuffer">
            <enable version="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="ImageQuery">
            <enable version="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="DerivativeControl">
            <enable version="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="Geometry">
            <enable struct="VkPhysicalDeviceFeatures" feature="geometryShader" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="Tessellation">
            <enable struct="VkPhysicalDeviceFeatures" feature="tessellationShader" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="Float64">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderFloat64" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="Int64">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderInt64" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="Int64Atomics">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="shaderBufferInt64Atomics" requires="VK_VERSION_1_2,VK_KHR_shader_atomic_int64"/>
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="shaderSharedInt64Atomics" requires="VK_VERSION_1_2,VK_KHR_shader_atomic_int64"/>
            <enable struct="VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT" feature="shaderImageInt64Atomics" requires="VK_EXT_shader_image_atomic_int64"/>
        </spirvcapability>
        <spirvcapability name="AtomicFloat16AddEXT">
            <enable struct="VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT" feature="shaderBufferFloat16AtomicAdd" requires="VK_EXT_shader_atomic_float2"/>
            <enable struct="VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT" feature="shaderSharedFloat16AtomicAdd" requires="VK_EXT_shader_atomic_float2"/>
        </spirvcapability>
        <spirvcapability name="AtomicFloat32AddEXT">
            <enable struct="VkPhysicalDeviceShaderAtomicFloatFeaturesEXT" feature="shaderBufferFloat32AtomicAdd" requires="VK_EXT_shader_atomic_float"/>
            <enable struct="VkPhysicalDeviceShaderAtomicFloatFeaturesEXT" feature="shaderSharedFloat32AtomicAdd" requires="VK_EXT_shader_atomic_float"/>
            <enable struct="VkPhysicalDeviceShaderAtomicFloatFeaturesEXT" feature="shaderImageFloat32AtomicAdd" requires="VK_EXT_shader_atomic_float"/>
        </spirvcapability>
        <spirvcapability name="AtomicFloat64AddEXT">
            <enable struct="VkPhysicalDeviceShaderAtomicFloatFeaturesEXT" feature="shaderBufferFloat64AtomicAdd" requires="VK_EXT_shader_atomic_float"/>
            <enable struct="VkPhysicalDeviceShaderAtomicFloatFeaturesEXT" feature="shaderSharedFloat64AtomicAdd" requires="VK_EXT_shader_atomic_float"/>
        </spirvcapability>
        <spirvcapability name="AtomicFloat16MinMaxEXT">
            <enable struct="VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT" feature="shaderBufferFloat16AtomicMinMax" requires="VK_EXT_shader_atomic_float2"/>
            <enable struct="VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT" feature="shaderSharedFloat16AtomicMinMax" requires="VK_EXT_shader_atomic_float2"/>
        </spirvcapability>
        <spirvcapability name="AtomicFloat32MinMaxEXT">
            <enable struct="VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT" feature="shaderBufferFloat32AtomicMinMax" requires="VK_EXT_shader_atomic_float2"/>
            <enable struct="VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT" feature="shaderSharedFloat32AtomicMinMax" requires="VK_EXT_shader_atomic_float2"/>
            <enable struct="VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT" feature="shaderImageFloat32AtomicMinMax" requires="VK_EXT_shader_atomic_float2"/>
        </spirvcapability>
        <spirvcapability name="AtomicFloat64MinMaxEXT">
            <enable struct="VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT" feature="shaderBufferFloat64AtomicMinMax" requires="VK_EXT_shader_atomic_float2"/>
            <enable struct="VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT" feature="shaderSharedFloat64AtomicMinMax" requires="VK_EXT_shader_atomic_float2"/>
        </spirvcapability>
        <spirvcapability name="AtomicFloat16VectorNV">
            <enable struct="VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV" feature="shaderFloat16VectorAtomics" requires="VK_NV_shader_atomic_float16_vector"/>
        </spirvcapability>
        <spirvcapability name="Int64ImageEXT">
            <enable struct="VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT" feature="shaderImageInt64Atomics" requires="VK_EXT_shader_image_atomic_int64"/>
        </spirvcapability>
        <spirvcapability name="Int16">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderInt16" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="TessellationPointSize">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderTessellationAndGeometryPointSize" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="GeometryPointSize">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderTessellationAndGeometryPointSize" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="ImageGatherExtended">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderImageGatherExtended" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="StorageImageMultisample">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderStorageImageMultisample" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="UniformBufferArrayDynamicIndexing">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderUniformBufferArrayDynamicIndexing" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="SampledImageArrayDynamicIndexing">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderSampledImageArrayDynamicIndexing" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="StorageBufferArrayDynamicIndexing">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderStorageBufferArrayDynamicIndexing" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="StorageImageArrayDynamicIndexing">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderStorageImageArrayDynamicIndexing" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="ClipDistance">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderClipDistance" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="CullDistance">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderCullDistance" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="ImageCubeArray">
            <enable struct="VkPhysicalDeviceFeatures" feature="imageCubeArray" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="SampleRateShading">
            <enable struct="VkPhysicalDeviceFeatures" feature="sampleRateShading" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="SparseResidency">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderResourceResidency" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="MinLod">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderResourceMinLod" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="SampledCubeArray">
            <enable struct="VkPhysicalDeviceFeatures" feature="imageCubeArray" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="ImageMSArray">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderStorageImageMultisample" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="StorageImageExtendedFormats">
            <enable version="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="InterpolationFunction">
            <enable struct="VkPhysicalDeviceFeatures" feature="sampleRateShading" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="StorageImageReadWithoutFormat">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderStorageImageReadWithoutFormat" requires="VK_VERSION_1_0"/>
            <enable version="VK_VERSION_1_3"/>
            <enable extension="VK_KHR_format_feature_flags2"/>
        </spirvcapability>
        <spirvcapability name="StorageImageWriteWithoutFormat">
            <enable struct="VkPhysicalDeviceFeatures" feature="shaderStorageImageWriteWithoutFormat" requires="VK_VERSION_1_0"/>
            <enable version="VK_VERSION_1_3"/>
            <enable extension="VK_KHR_format_feature_flags2"/>
        </spirvcapability>
        <spirvcapability name="MultiViewport">
            <enable struct="VkPhysicalDeviceFeatures" feature="multiViewport" requires="VK_VERSION_1_0"/>
        </spirvcapability>
        <spirvcapability name="DrawParameters">
            <enable struct="VkPhysicalDeviceVulkan11Features" feature="shaderDrawParameters" requires="VK_VERSION_1_2"/>
            <enable struct="VkPhysicalDeviceShaderDrawParametersFeatures" feature="shaderDrawParameters" requires="VK_VERSION_1_1"/>
            <enable extension="VK_KHR_shader_draw_parameters"/>
        </spirvcapability>
        <spirvcapability name="MultiView">
            <enable struct="VkPhysicalDeviceVulkan11Features" feature="multiview" requires="VK_VERSION_1_2"/>
            <enable struct="VkPhysicalDeviceMultiviewFeatures" feature="multiview" requires="VK_KHR_multiview"/>
        </spirvcapability>
        <spirvcapability name="DeviceGroup">
            <enable version="VK_VERSION_1_1"/>
            <enable extension="VK_KHR_device_group"/>
        </spirvcapability>
        <spirvcapability name="VariablePointersStorageBuffer">
            <enable struct="VkPhysicalDeviceVulkan11Features" feature="variablePointersStorageBuffer" requires="VK_VERSION_1_2"/>
            <enable struct="VkPhysicalDeviceVariablePointersFeatures" feature="variablePointersStorageBuffer" requires="VK_KHR_variable_pointers"/>
        </spirvcapability>
        <spirvcapability name="VariablePointers">
            <enable struct="VkPhysicalDeviceVulkan11Features" feature="variablePointers" requires="VK_VERSION_1_2"/>
            <enable struct="VkPhysicalDeviceVariablePointersFeatures" feature="variablePointers" requires="VK_KHR_variable_pointers"/>
        </spirvcapability>
        <spirvcapability name="ShaderClockKHR">
            <enable extension="VK_KHR_shader_clock"/>
        </spirvcapability>
        <spirvcapability name="StencilExportEXT">
            <enable extension="VK_EXT_shader_stencil_export"/>
        </spirvcapability>
        <spirvcapability name="SubgroupBallotKHR">
            <enable extension="VK_EXT_shader_subgroup_ballot"/>
        </spirvcapability>
        <spirvcapability name="SubgroupVoteKHR">
            <enable extension="VK_EXT_shader_subgroup_vote"/>
        </spirvcapability>
        <spirvcapability name="ImageReadWriteLodAMD">
            <enable extension="VK_AMD_shader_image_load_store_lod"/>
        </spirvcapability>
        <spirvcapability name="ImageGatherBiasLodAMD">
            <enable extension="VK_AMD_texture_gather_bias_lod"/>
        </spirvcapability>
        <spirvcapability name="FragmentMaskAMD">
            <enable extension="VK_AMD_shader_fragment_mask"/>
        </spirvcapability>
        <spirvcapability name="SampleMaskOverrideCoverageNV">
            <enable extension="VK_NV_sample_mask_override_coverage"/>
        </spirvcapability>
        <spirvcapability name="GeometryShaderPassthroughNV">
            <enable extension="VK_NV_geometry_shader_passthrough"/>
        </spirvcapability>
        <spirvcapability name="ShaderViewportIndex">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="shaderOutputViewportIndex" requires="VK_VERSION_1_2"/>
        </spirvcapability>
        <spirvcapability name="ShaderLayer">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="shaderOutputLayer" requires="VK_VERSION_1_2"/>
        </spirvcapability>
        <spirvcapability name="ShaderViewportIndexLayerEXT">
            <enable extension="VK_EXT_shader_viewport_index_layer"/>
            <enable extension="VK_NV_viewport_array2"/>
        </spirvcapability>
        <spirvcapability name="ShaderViewportMaskNV">
            <enable extension="VK_NV_viewport_array2"/>
        </spirvcapability>
        <spirvcapability name="PerViewAttributesNV">
            <enable extension="VK_NVX_multiview_per_view_attributes"/>
        </spirvcapability>
        <spirvcapability name="StorageBuffer16BitAccess">
            <enable struct="VkPhysicalDeviceVulkan11Features" feature="storageBuffer16BitAccess" requires="VK_VERSION_1_2"/>
            <enable struct="VkPhysicalDevice16BitStorageFeatures" feature="storageBuffer16BitAccess" requires="VK_KHR_16bit_storage"/>
        </spirvcapability>
        <spirvcapability name="UniformAndStorageBuffer16BitAccess">
            <enable struct="VkPhysicalDeviceVulkan11Features" feature="uniformAndStorageBuffer16BitAccess" requires="VK_VERSION_1_2"/>
            <enable struct="VkPhysicalDevice16BitStorageFeatures" feature="uniformAndStorageBuffer16BitAccess" requires="VK_KHR_16bit_storage"/>
        </spirvcapability>
        <spirvcapability name="StoragePushConstant16">
            <enable struct="VkPhysicalDeviceVulkan11Features" feature="storagePushConstant16" requires="VK_VERSION_1_2"/>
            <enable struct="VkPhysicalDevice16BitStorageFeatures" feature="storagePushConstant16" requires="VK_KHR_16bit_storage"/>
        </spirvcapability>
        <spirvcapability name="StorageInputOutput16">
            <enable struct="VkPhysicalDeviceVulkan11Features" feature="storageInputOutput16" requires="VK_VERSION_1_2"/>
            <enable struct="VkPhysicalDevice16BitStorageFeatures" feature="storageInputOutput16" requires="VK_KHR_16bit_storage"/>
        </spirvcapability>
        <spirvcapability name="GroupNonUniform">
            <enable property="VkPhysicalDeviceVulkan11Properties" member="subgroupSupportedOperations" value="VK_SUBGROUP_FEATURE_BASIC_BIT" requires="VK_VERSION_1_1"/>
        </spirvcapability>
        <spirvcapability name="GroupNonUniformVote">
            <enable property="VkPhysicalDeviceVulkan11Properties" member="subgroupSupportedOperations" value="VK_SUBGROUP_FEATURE_VOTE_BIT" requires="VK_VERSION_1_1"/>
        </spirvcapability>
        <spirvcapability name="GroupNonUniformArithmetic">
            <enable property="VkPhysicalDeviceVulkan11Properties" member="subgroupSupportedOperations" value="VK_SUBGROUP_FEATURE_ARITHMETIC_BIT" requires="VK_VERSION_1_1"/>
        </spirvcapability>
        <spirvcapability name="GroupNonUniformBallot">
            <enable property="VkPhysicalDeviceVulkan11Properties" member="subgroupSupportedOperations" value="VK_SUBGROUP_FEATURE_BALLOT_BIT" requires="VK_VERSION_1_1"/>
        </spirvcapability>
        <spirvcapability name="GroupNonUniformShuffle">
            <enable property="VkPhysicalDeviceVulkan11Properties" member="subgroupSupportedOperations" value="VK_SUBGROUP_FEATURE_SHUFFLE_BIT" requires="VK_VERSION_1_1"/>
        </spirvcapability>
        <spirvcapability name="GroupNonUniformShuffleRelative">
            <enable property="VkPhysicalDeviceVulkan11Properties" member="subgroupSupportedOperations" value="VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT" requires="VK_VERSION_1_1"/>
        </spirvcapability>
        <spirvcapability name="GroupNonUniformClustered">
            <enable property="VkPhysicalDeviceVulkan11Properties" member="subgroupSupportedOperations" value="VK_SUBGROUP_FEATURE_CLUSTERED_BIT" requires="VK_VERSION_1_1"/>
        </spirvcapability>
        <spirvcapability name="GroupNonUniformQuad">
            <enable property="VkPhysicalDeviceVulkan11Properties" member="subgroupSupportedOperations" value="VK_SUBGROUP_FEATURE_QUAD_BIT" requires="VK_VERSION_1_1"/>
        </spirvcapability>
        <spirvcapability name="GroupNonUniformPartitionedNV">
            <enable property="VkPhysicalDeviceVulkan11Properties" member="subgroupSupportedOperations" value="VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV" requires="VK_NV_shader_subgroup_partitioned"/>
        </spirvcapability>
        <spirvcapability name="SampleMaskPostDepthCoverage">
            <enable extension="VK_EXT_post_depth_coverage"/>
        </spirvcapability>
        <spirvcapability name="ShaderNonUniform">
            <enable version="VK_VERSION_1_2"/>
            <enable extension="VK_EXT_descriptor_indexing"/>
        </spirvcapability>
        <spirvcapability name="RuntimeDescriptorArray">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="runtimeDescriptorArray" requires="VK_VERSION_1_2,VK_EXT_descriptor_indexing"/>
        </spirvcapability>
        <spirvcapability name="InputAttachmentArrayDynamicIndexing">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="shaderInputAttachmentArrayDynamicIndexing" requires="VK_VERSION_1_2,VK_EXT_descriptor_indexing"/>
        </spirvcapability>
        <spirvcapability name="UniformTexelBufferArrayDynamicIndexing">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="shaderUniformTexelBufferArrayDynamicIndexing" requires="VK_VERSION_1_2,VK_EXT_descriptor_indexing"/>
        </spirvcapability>
        <spirvcapability name="StorageTexelBufferArrayDynamicIndexing">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="shaderStorageTexelBufferArrayDynamicIndexing" requires="VK_VERSION_1_2,VK_EXT_descriptor_indexing"/>
        </spirvcapability>
        <spirvcapability name="UniformBufferArrayNonUniformIndexing">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="shaderUniformBufferArrayNonUniformIndexing" requires="VK_VERSION_1_2,VK_EXT_descriptor_indexing"/>
        </spirvcapability>
        <spirvcapability name="SampledImageArrayNonUniformIndexing">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="shaderSampledImageArrayNonUniformIndexing" requires="VK_VERSION_1_2,VK_EXT_descriptor_indexing"/>
        </spirvcapability>
        <spirvcapability name="StorageBufferArrayNonUniformIndexing">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="shaderStorageBufferArrayNonUniformIndexing" requires="VK_VERSION_1_2,VK_EXT_descriptor_indexing"/>
        </spirvcapability>
        <spirvcapability name="StorageImageArrayNonUniformIndexing">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="shaderStorageImageArrayNonUniformIndexing" requires="VK_VERSION_1_2,VK_EXT_descriptor_indexing"/>
        </spirvcapability>
        <spirvcapability name="InputAttachmentArrayNonUniformIndexing">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="shaderInputAttachmentArrayNonUniformIndexing" requires="VK_VERSION_1_2,VK_EXT_descriptor_indexing"/>
        </spirvcapability>
        <spirvcapability name="UniformTexelBufferArrayNonUniformIndexing">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="shaderUniformTexelBufferArrayNonUniformIndexing" requires="VK_VERSION_1_2,VK_EXT_descriptor_indexing"/>
        </spirvcapability>
        <spirvcapability name="StorageTexelBufferArrayNonUniformIndexing">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="shaderStorageTexelBufferArrayNonUniformIndexing" requires="VK_VERSION_1_2,VK_EXT_descriptor_indexing"/>
        </spirvcapability>
        <spirvcapability name="FragmentFullyCoveredEXT">
            <enable extension="VK_EXT_conservative_rasterization"/>
        </spirvcapability>
        <spirvcapability name="Float16">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="shaderFloat16" requires="VK_VERSION_1_2,VK_KHR_shader_float16_int8"/>
            <enable extension="VK_AMD_gpu_shader_half_float"/>
        </spirvcapability>
        <spirvcapability name="Int8">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="shaderInt8" requires="VK_VERSION_1_2,VK_KHR_shader_float16_int8"/>
        </spirvcapability>
        <spirvcapability name="StorageBuffer8BitAccess">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="storageBuffer8BitAccess" requires="VK_VERSION_1_2,VK_KHR_8bit_storage"/>
        </spirvcapability>
        <spirvcapability name="UniformAndStorageBuffer8BitAccess">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="uniformAndStorageBuffer8BitAccess" requires="VK_VERSION_1_2,VK_KHR_8bit_storage"/>
        </spirvcapability>
        <spirvcapability name="StoragePushConstant8">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="storagePushConstant8" requires="VK_VERSION_1_2,VK_KHR_8bit_storage"/>
        </spirvcapability>
        <spirvcapability name="VulkanMemoryModel">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="vulkanMemoryModel" requires="VK_VERSION_1_2,VK_KHR_vulkan_memory_model"/>
        </spirvcapability>
        <spirvcapability name="VulkanMemoryModelDeviceScope">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="vulkanMemoryModelDeviceScope" requires="VK_VERSION_1_2,VK_KHR_vulkan_memory_model"/>
        </spirvcapability>
        <spirvcapability name="DenormPreserve">
            <enable property="VkPhysicalDeviceVulkan12Properties" member="shaderDenormPreserveFloat16" value="VK_TRUE" requires="VK_VERSION_1_2,VK_KHR_shader_float_controls"/>
            <enable property="VkPhysicalDeviceVulkan12Properties" member="shaderDenormPreserveFloat32" value="VK_TRUE" requires="VK_VERSION_1_2,VK_KHR_shader_float_controls"/>
            <enable property="VkPhysicalDeviceVulkan12Properties" member="shaderDenormPreserveFloat64" value="VK_TRUE" requires="VK_VERSION_1_2,VK_KHR_shader_float_controls"/>
        </spirvcapability>
        <spirvcapability name="DenormFlushToZero">
            <enable property="VkPhysicalDeviceVulkan12Properties" member="shaderDenormFlushToZeroFloat16" value="VK_TRUE" requires="VK_VERSION_1_2,VK_KHR_shader_float_controls"/>
            <enable property="VkPhysicalDeviceVulkan12Properties" member="shaderDenormFlushToZeroFloat32" value="VK_TRUE" requires="VK_VERSION_1_2,VK_KHR_shader_float_controls"/>
            <enable property="VkPhysicalDeviceVulkan12Properties" member="shaderDenormFlushToZeroFloat64" value="VK_TRUE" requires="VK_VERSION_1_2,VK_KHR_shader_float_controls"/>
        </spirvcapability>
        <spirvcapability name="SignedZeroInfNanPreserve">
            <enable property="VkPhysicalDeviceVulkan12Properties" member="shaderSignedZeroInfNanPreserveFloat16" value="VK_TRUE" requires="VK_VERSION_1_2,VK_KHR_shader_float_controls"/>
            <enable property="VkPhysicalDeviceVulkan12Properties" member="shaderSignedZeroInfNanPreserveFloat32" value="VK_TRUE" requires="VK_VERSION_1_2,VK_KHR_shader_float_controls"/>
            <enable property="VkPhysicalDeviceVulkan12Properties" member="shaderSignedZeroInfNanPreserveFloat64" value="VK_TRUE" requires="VK_VERSION_1_2,VK_KHR_shader_float_controls"/>
        </spirvcapability>
        <spirvcapability name="RoundingModeRTE">
            <enable property="VkPhysicalDeviceVulkan12Properties" member="shaderRoundingModeRTEFloat16" value="VK_TRUE" requires="VK_VERSION_1_2,VK_KHR_shader_float_controls"/>
            <enable property="VkPhysicalDeviceVulkan12Properties" member="shaderRoundingModeRTEFloat32" value="VK_TRUE" requires="VK_VERSION_1_2,VK_KHR_shader_float_controls"/>
            <enable property="VkPhysicalDeviceVulkan12Properties" member="shaderRoundingModeRTEFloat64" value="VK_TRUE" requires="VK_VERSION_1_2,VK_KHR_shader_float_controls"/>
        </spirvcapability>
        <spirvcapability name="RoundingModeRTZ">
            <enable property="VkPhysicalDeviceVulkan12Properties" member="shaderRoundingModeRTZFloat16" value="VK_TRUE" requires="VK_VERSION_1_2,VK_KHR_shader_float_controls"/>
            <enable property="VkPhysicalDeviceVulkan12Properties" member="shaderRoundingModeRTZFloat32" value="VK_TRUE" requires="VK_VERSION_1_2,VK_KHR_shader_float_controls"/>
            <enable property="VkPhysicalDeviceVulkan12Properties" member="shaderRoundingModeRTZFloat64" value="VK_TRUE" requires="VK_VERSION_1_2,VK_KHR_shader_float_controls"/>
        </spirvcapability>
        <spirvcapability name="ComputeDerivativeGroupQuadsKHR">
            <enable struct="VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR" feature="computeDerivativeGroupQuads" requires="VK_KHR_compute_shader_derivatives"/>
            <enable struct="VkPhysicalDeviceComputeShaderDerivativesFeaturesNV" feature="computeDerivativeGroupQuads" requires="VK_NV_compute_shader_derivatives"/>
        </spirvcapability>
        <spirvcapability name="ComputeDerivativeGroupLinearKHR">
            <enable struct="VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR" feature="computeDerivativeGroupLinear" requires="VK_KHR_compute_shader_derivatives"/>
            <enable struct="VkPhysicalDeviceComputeShaderDerivativesFeaturesNV" feature="computeDerivativeGroupLinear" requires="VK_NV_compute_shader_derivatives"/>
        </spirvcapability>
        <spirvcapability name="ImageFootprintNV">
            <enable struct="VkPhysicalDeviceShaderImageFootprintFeaturesNV" feature="imageFootprint" requires="VK_NV_shader_image_footprint"/>
        </spirvcapability>
        <spirvcapability name="MeshShadingNV">
            <enable extension="VK_NV_mesh_shader"/>
        </spirvcapability>
        <spirvcapability name="RayTracingKHR">
            <enable struct="VkPhysicalDeviceRayTracingPipelineFeaturesKHR" feature="rayTracingPipeline" requires="VK_KHR_ray_tracing_pipeline"/>
        </spirvcapability>
        <spirvcapability name="RayQueryKHR">
            <enable struct="VkPhysicalDeviceRayQueryFeaturesKHR" feature="rayQuery" requires="VK_KHR_ray_query"/>
        </spirvcapability>
        <spirvcapability name="RayTraversalPrimitiveCullingKHR">
            <enable struct="VkPhysicalDeviceRayTracingPipelineFeaturesKHR" feature="rayTraversalPrimitiveCulling" requires="VK_KHR_ray_tracing_pipeline"/>
            <enable struct="VkPhysicalDeviceRayQueryFeaturesKHR" feature="rayQuery" requires="VK_KHR_ray_query"/>
        </spirvcapability>
        <spirvcapability name="RayCullMaskKHR">
            <enable struct="VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR" feature="rayTracingMaintenance1" requires="VK_KHR_ray_tracing_maintenance1"/>
        </spirvcapability>
        <spirvcapability name="RayTracingNV">
            <enable extension="VK_NV_ray_tracing"/>
        </spirvcapability>
        <spirvcapability name="RayTracingMotionBlurNV">
            <enable struct="VkPhysicalDeviceRayTracingMotionBlurFeaturesNV" feature="rayTracingMotionBlur" requires="VK_NV_ray_tracing_motion_blur"/>
        </spirvcapability>
        <spirvcapability name="TransformFeedback">
            <enable struct="VkPhysicalDeviceTransformFeedbackFeaturesEXT" feature="transformFeedback" requires="VK_EXT_transform_feedback"/>
        </spirvcapability>
        <spirvcapability name="GeometryStreams">
            <enable struct="VkPhysicalDeviceTransformFeedbackFeaturesEXT" feature="geometryStreams" requires="VK_EXT_transform_feedback"/>
        </spirvcapability>
        <spirvcapability name="FragmentDensityEXT">
            <enable struct="VkPhysicalDeviceFragmentDensityMapFeaturesEXT" feature="fragmentDensityMap" requires="VK_EXT_fragment_density_map"/>
            <enable struct="VkPhysicalDeviceShadingRateImageFeaturesNV" feature="shadingRateImage" requires="VK_NV_shading_rate_image"/>
        </spirvcapability>
        <spirvcapability name="PhysicalStorageBufferAddresses">
            <enable struct="VkPhysicalDeviceVulkan12Features" feature="bufferDeviceAddress" requires="VK_VERSION_1_2,VK_KHR_buffer_device_address"/>
            <enable struct="VkPhysicalDeviceBufferDeviceAddressFeaturesEXT" feature="bufferDeviceAddress" requires="VK_EXT_buffer_device_address" alias="bufferDeviceAddressEXT"/>
        </spirvcapability>
        <spirvcapability name="CooperativeMatrixNV">
            <enable struct="VkPhysicalDeviceCooperativeMatrixFeaturesNV" feature="cooperativeMatrix" requires="VK_NV_cooperative_matrix" alias="cooperativeMatrixNV"/>
        </spirvcapability>
        <spirvcapability name="IntegerFunctions2INTEL">
            <enable struct="VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL" feature="shaderIntegerFunctions2" requires="VK_INTEL_shader_integer_functions2"/>
        </spirvcapability>
        <spirvcapability name="ShaderSMBuiltinsNV">
            <enable struct="VkPhysicalDeviceShaderSMBuiltinsFeaturesNV" feature="shaderSMBuiltins" requires="VK_NV_shader_sm_builtins"/>
        </spirvcapability>
        <spirvcapability name="FragmentShaderSampleInterlockEXT">
            <enable struct="VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT" feature="fragmentShaderSampleInterlock" requires="VK_EXT_fragment_shader_interlock"/>
        </spirvcapability>
        <spirvcapability name="FragmentShaderPixelInterlockEXT">
            <enable struct="VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT" feature="fragmentShaderPixelInterlock" requires="VK_EXT_fragment_shader_interlock"/>
        </spirvcapability>
        <spirvcapability name="FragmentShaderShadingRateInterlockEXT">
            <enable struct="VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT" feature="fragmentShaderShadingRateInterlock" requires="VK_EXT_fragment_shader_interlock"/>
            <enable struct="VkPhysicalDeviceShadingRateImageFeaturesNV" feature="shadingRateImage" requires="VK_NV_shading_rate_image"/>
        </spirvcapability>
        <spirvcapability name="DemoteToHelperInvocation">
            <enable struct="VkPhysicalDeviceVulkan13Features" feature="shaderDemoteToHelperInvocation" requires="VK_VERSION_1_3,VK_EXT_shader_demote_to_helper_invocation"/>
            <enable struct="VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT" feature="shaderDemoteToHelperInvocation" requires="VK_EXT_shader_demote_to_helper_invocation"/>
        </spirvcapability>
        <spirvcapability name="FragmentShadingRateKHR">
            <enable struct="VkPhysicalDeviceFragmentShadingRateFeaturesKHR" feature="pipelineFragmentShadingRate" requires="VK_KHR_fragment_shading_rate"/>
            <enable struct="VkPhysicalDeviceFragmentShadingRateFeaturesKHR" feature="primitiveFragmentShadingRate" requires="VK_KHR_fragment_shading_rate"/>
            <enable struct="VkPhysicalDeviceFragmentShadingRateFeaturesKHR" feature="attachmentFragmentShadingRate" requires="VK_KHR_fragment_shading_rate"/>
        </spirvcapability>
        <spirvcapability name="WorkgroupMemoryExplicitLayoutKHR">
            <enable struct="VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR" feature="workgroupMemoryExplicitLayout" requires="VK_KHR_workgroup_memory_explicit_layout"/>
        </spirvcapability>
        <spirvcapability name="WorkgroupMemoryExplicitLayout8BitAccessKHR">
            <enable struct="VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR" feature="workgroupMemoryExplicitLayout8BitAccess" requires="VK_KHR_workgroup_memory_explicit_layout"/>
        </spirvcapability>
        <spirvcapability name="WorkgroupMemoryExplicitLayout16BitAccessKHR">
            <enable struct="VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR" feature="workgroupMemoryExplicitLayout16BitAccess" requires="VK_KHR_workgroup_memory_explicit_layout"/>
        </spirvcapability>
        <spirvcapability name="DotProductInputAll">
            <enable struct="VkPhysicalDeviceVulkan13Features" feature="shaderIntegerDotProduct" requires="VK_VERSION_1_3,VK_KHR_shader_integer_dot_product"/>
            <enable struct="VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR" feature="shaderIntegerDotProduct" requires="VK_KHR_shader_integer_dot_product"/>
        </spirvcapability>
        <spirvcapability name="DotProductInput4x8Bit">
            <enable struct="VkPhysicalDeviceVulkan13Features" feature="shaderIntegerDotProduct" requires="VK_VERSION_1_3,VK_KHR_shader_integer_dot_product"/>
            <enable struct="VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR" feature="shaderIntegerDotProduct" requires="VK_KHR_shader_integer_dot_product"/>
        </spirvcapability>
        <spirvcapability name="DotProductInput4x8BitPacked">
            <enable struct="VkPhysicalDeviceVulkan13Features" feature="shaderIntegerDotProduct" requires="VK_VERSION_1_3,VK_KHR_shader_integer_dot_product"/>
            <enable struct="VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR" feature="shaderIntegerDotProduct" requires="VK_KHR_shader_integer_dot_product"/>
        </spirvcapability>
        <spirvcapability name="DotProduct">
            <enable struct="VkPhysicalDeviceVulkan13Features" feature="shaderIntegerDotProduct" requires="VK_VERSION_1_3,VK_KHR_shader_integer_dot_product"/>
            <enable struct="VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR" feature="shaderIntegerDotProduct" requires="VK_KHR_shader_integer_dot_product"/>
        </spirvcapability>
        <spirvcapability name="FragmentBarycentricKHR">
            <enable struct="VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR" feature="fragmentShaderBarycentric" requires="VK_KHR_fragment_shader_barycentric"/>
            <enable struct="VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV" feature="fragmentShaderBarycentric" requires="VK_NV_fragment_shader_barycentric"/>
        </spirvcapability>
        <spirvcapability name="TextureSampleWeightedQCOM">
            <enable struct="VkPhysicalDeviceImageProcessingFeaturesQCOM" feature="textureSampleWeighted" requires="VK_QCOM_image_processing"/>
        </spirvcapability>
        <spirvcapability name="TextureBoxFilterQCOM">
            <enable struct="VkPhysicalDeviceImageProcessingFeaturesQCOM" feature="textureBoxFilter" requires="VK_QCOM_image_processing"/>
        </spirvcapability>
        <spirvcapability name="TextureBlockMatchQCOM">
            <enable struct="VkPhysicalDeviceImageProcessingFeaturesQCOM" feature="textureBlockMatch" requires="VK_QCOM_image_processing"/>
        </spirvcapability>
        <spirvcapability name="TextureBlockMatch2QCOM">
            <enable struct="VkPhysicalDeviceImageProcessing2FeaturesQCOM" feature="textureBlockMatch2" requires="VK_QCOM_image_processing2"/>
        </spirvcapability>
        <spirvcapability name="MeshShadingEXT">
            <enable extension="VK_EXT_mesh_shader"/>
        </spirvcapability>
        <spirvcapability name="RayTracingOpacityMicromapEXT">
            <enable extension="VK_EXT_opacity_micromap"/>
        </spirvcapability>
        <spirvcapability name="CoreBuiltinsARM">
            <enable struct="VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM" feature="shaderCoreBuiltins" requires="VK_ARM_shader_core_builtins"/>
        </spirvcapability>
        <spirvcapability name="ShaderInvocationReorderNV">
            <enable extension="VK_NV_ray_tracing_invocation_reorder"/>
        </spirvcapability>
        <spirvcapability name="ClusterCullingShadingHUAWEI">
            <enable struct="VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI" feature="clustercullingShader" requires="VK_HUAWEI_cluster_culling_shader"/>
        </spirvcapability>
        <spirvcapability name="RayTracingPositionFetchKHR">
            <enable struct="VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR" feature="rayTracingPositionFetch" requires="VK_KHR_ray_tracing_position_fetch"/>
        </spirvcapability>
        <spirvcapability name="RayQueryPositionFetchKHR">
            <enable struct="VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR" feature="rayTracingPositionFetch" requires="VK_KHR_ray_tracing_position_fetch"/>
        </spirvcapability>
        <spirvcapability name="TileImageColorReadAccessEXT">
            <enable struct="VkPhysicalDeviceShaderTileImageFeaturesEXT" feature="shaderTileImageColorReadAccess" requires="VK_EXT_shader_tile_image"/>
        </spirvcapability>
        <spirvcapability name="TileImageDepthReadAccessEXT">
            <enable struct="VkPhysicalDeviceShaderTileImageFeaturesEXT" feature="shaderTileImageDepthReadAccess" requires="VK_EXT_shader_tile_image"/>
        </spirvcapability>
        <spirvcapability name="TileImageStencilReadAccessEXT">
            <enable struct="VkPhysicalDeviceShaderTileImageFeaturesEXT" feature="shaderTileImageStencilReadAccess" requires="VK_EXT_shader_tile_image"/>
        </spirvcapability>
        <spirvcapability name="CooperativeMatrixKHR">
            <enable struct="VkPhysicalDeviceCooperativeMatrixFeaturesKHR" feature="cooperativeMatrix" requires="VK_KHR_cooperative_matrix"/>
        </spirvcapability>
        <spirvcapability name="ShaderEnqueueAMDX">
            <enable struct="VkPhysicalDeviceShaderEnqueueFeaturesAMDX" feature="shaderEnqueue" requires="VK_AMDX_shader_enqueue"/>
        </spirvcapability>
        <spirvcapability name="GroupNonUniformRotateKHR">
            <enable struct="VkPhysicalDeviceVulkan14Features" feature="shaderSubgroupRotate" requires="VK_VERSION_1_4,VK_KHR_shader_subgroup_rotate"/>
            <enable struct="VkPhysicalDeviceShaderSubgroupRotateFeatures" feature="shaderSubgroupRotate" requires="VK_KHR_shader_subgroup_rotate"/>
        </spirvcapability>
        <spirvcapability name="ExpectAssumeKHR">
            <enable struct="VkPhysicalDeviceVulkan14Features" feature="shaderExpectAssume" requires="VK_VERSION_1_4,VK_KHR_shader_expect_assume"/>
            <enable struct="VkPhysicalDeviceShaderExpectAssumeFeatures" feature="shaderExpectAssume" requires="VK_KHR_shader_expect_assume"/>
        </spirvcapability>
        <spirvcapability name="FloatControls2">
            <enable struct="VkPhysicalDeviceVulkan14Features" feature="shaderFloatControls2" requires="VK_VERSION_1_4,VK_KHR_shader_float_controls2"/>
            <enable struct="VkPhysicalDeviceShaderFloatControls2Features" feature="shaderFloatControls2" requires="VK_KHR_shader_float_controls2"/>
        </spirvcapability>
        <spirvcapability name="QuadControlKHR">
            <enable struct="VkPhysicalDeviceShaderQuadControlFeaturesKHR" feature="shaderQuadControl" requires="VK_KHR_shader_quad_control"/>
        </spirvcapability>
        <spirvcapability name="RawAccessChainsNV">
            <enable struct="VkPhysicalDeviceRawAccessChainsFeaturesNV" feature="shaderRawAccessChains" requires="VK_NV_raw_access_chains"/>
        </spirvcapability>
        <spirvcapability name="ReplicatedCompositesEXT">
            <enable struct="VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT" feature="shaderReplicatedComposites" requires="VK_EXT_shader_replicated_composites"/>
        </spirvcapability>
        <spirvcapability name="TensorAddressingNV">
            <enable struct="VkPhysicalDeviceCooperativeMatrix2FeaturesNV" feature="cooperativeMatrixTensorAddressing" requires="VK_NV_cooperative_matrix2"/>
        </spirvcapability>
        <spirvcapability name="CooperativeMatrixReductionsNV">
            <enable struct="VkPhysicalDeviceCooperativeMatrix2FeaturesNV" feature="cooperativeMatrixReductions" requires="VK_NV_cooperative_matrix2"/>
        </spirvcapability>
        <spirvcapability name="CooperativeMatrixConversionsNV">
            <enable struct="VkPhysicalDeviceCooperativeMatrix2FeaturesNV" feature="cooperativeMatrixConversions" requires="VK_NV_cooperative_matrix2"/>
        </spirvcapability>
        <spirvcapability name="CooperativeMatrixPerElementOperationsNV">
            <enable struct="VkPhysicalDeviceCooperativeMatrix2FeaturesNV" feature="cooperativeMatrixPerElementOperations" requires="VK_NV_cooperative_matrix2"/>
        </spirvcapability>
        <spirvcapability name="CooperativeMatrixTensorAddressingNV">
            <enable struct="VkPhysicalDeviceCooperativeMatrix2FeaturesNV" feature="cooperativeMatrixTensorAddressing" requires="VK_NV_cooperative_matrix2"/>
        </spirvcapability>
        <spirvcapability name="CooperativeMatrixBlockLoadsNV">
            <enable struct="VkPhysicalDeviceCooperativeMatrix2FeaturesNV" feature="cooperativeMatrixBlockLoads" requires="VK_NV_cooperative_matrix2"/>
        </spirvcapability>
        <spirvcapability name="RayTracingSpheresGeometryNV">
            <enable struct="VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV" feature="spheres" requires="VK_NV_ray_tracing_linear_swept_spheres"/>
        </spirvcapability>
        <spirvcapability name="RayTracingLinearSweptSpheresGeometryNV">
            <enable struct="VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV" feature="linearSweptSpheres" requires="VK_NV_ray_tracing_linear_swept_spheres"/>
        </spirvcapability>
        <spirvcapability name="RayTracingClusterAccelerationStructureNV">
            <enable struct="VkPhysicalDeviceClusterAccelerationStructureFeaturesNV" feature="clusterAccelerationStructure" requires="VK_NV_cluster_acceleration_structure"/>
        </spirvcapability>
	<spirvcapability name="CooperativeVectorNV">
            <enable struct="VkPhysicalDeviceCooperativeVectorFeaturesNV" feature="cooperativeVector" requires="VK_NV_cooperative_vector"/>
        </spirvcapability>
        <spirvcapability name="CooperativeVectorTrainingNV">
            <enable struct="VkPhysicalDeviceCooperativeVectorFeaturesNV" feature="cooperativeVectorTraining" requires="VK_NV_cooperative_vector"/>
        </spirvcapability>
    </spirvcapabilities>
    <sync comment="Machine readable representation of the synchronization objects and their mappings">
        <syncstage name="VK_PIPELINE_STAGE_2_NONE" alias="VK_PIPELINE_STAGE_NONE">
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT" alias="VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT">
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT" alias="VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT">
            <syncsupport queues="graphics,compute"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT" alias="VK_PIPELINE_STAGE_VERTEX_INPUT_BIT">
            <syncsupport queues="graphics"/>
            <syncequivalent stage="VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT,VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT" alias="VK_PIPELINE_STAGE_VERTEX_SHADER_BIT">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT" alias="VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT" alias="VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT" alias="VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT" alias="VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT" alias="VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT" alias="VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT" alias="VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT" alias="VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT">
            <syncsupport queues="compute"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT" alias="VK_PIPELINE_STAGE_TRANSFER_BIT">
            <syncsupport queues="graphics,compute,transfer"/>
            <syncequivalent stage="VK_PIPELINE_STAGE_2_COPY_BIT,VK_PIPELINE_STAGE_2_BLIT_BIT,VK_PIPELINE_STAGE_2_RESOLVE_BIT,VK_PIPELINE_STAGE_2_CLEAR_BIT,VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT" alias="VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT">
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_HOST_BIT" alias="VK_PIPELINE_STAGE_HOST_BIT">
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT" alias="VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT">
            <syncsupport queues="graphics"/>
            <syncequivalent stage="VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT,VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT,VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT,VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT,VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT,VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT,VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT,VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT,VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT,VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT,VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT,VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI,VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI,VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT" alias="VK_PIPELINE_STAGE_ALL_COMMANDS_BIT">
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_COPY_BIT">
            <syncsupport queues="graphics,compute,transfer"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_RESOLVE_BIT">
            <syncsupport queues="graphics,compute,transfer"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_BLIT_BIT">
            <syncsupport queues="graphics,compute,transfer"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_CLEAR_BIT">
            <syncsupport queues="graphics,compute,transfer"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT">
            <syncsupport queues="graphics"/>
            <syncequivalent stage="VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT,VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT,VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR">
            <syncsupport queues="decode"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR">
            <syncsupport queues="encode"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT" alias="VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT" alias="VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT">
            <syncsupport queues="graphics,compute"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV" alias="VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV">
            <syncsupport queues="graphics,compute"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT" alias="VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV">
            <syncsupport queues="graphics,compute"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR" alias="VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR" alias="VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR">
            <syncsupport queues="compute"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR" alias="VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR">
            <syncsupport queues="compute"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT" alias="VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT" alias="VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT" alias="VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR">
            <syncsupport queues="graphics,compute,transfer"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT">
            <syncsupport queues="compute"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI">
            <syncsupport queues="graphics"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV">
            <syncsupport queues="opticalflow"/>
        </syncstage>
        <syncstage name="VK_PIPELINE_STAGE_2_CONVERT_COOPERATIVE_VECTOR_MATRIX_BIT_NV">
            <syncsupport queues="graphics,compute,transfer"/>
        </syncstage>
        <syncaccess name="VK_ACCESS_2_NONE" alias="VK_ACCESS_NONE">
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT" alias="VK_ACCESS_INDIRECT_COMMAND_READ_BIT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT,VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_INDEX_READ_BIT" alias="VK_ACCESS_INDEX_READ_BIT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT,VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT" alias="VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT,VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_UNIFORM_READ_BIT" alias="VK_ACCESS_UNIFORM_READ_BIT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT,VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT,VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT,VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT,VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR,VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI,VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT" alias="VK_ACCESS_INPUT_ATTACHMENT_READ_BIT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT,VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_SHADER_READ_BIT" alias="VK_ACCESS_SHADER_READ_BIT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT,VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT,VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT,VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT,VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT,VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR,VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI,VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI"/>
            <syncequivalent access="VK_ACCESS_2_SHADER_SAMPLED_READ_BIT,VK_ACCESS_2_SHADER_STORAGE_READ_BIT,VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_SHADER_WRITE_BIT" alias="VK_ACCESS_SHADER_WRITE_BIT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT,VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT,VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT,VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT,VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR,VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI,VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI"/>
            <syncequivalent access="VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT" alias="VK_ACCESS_COLOR_ATTACHMENT_READ_BIT">
            <comment>Fragment shader stage is added by the VK_EXT_shader_tile_image extension</comment>
            <syncsupport stage="VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT,VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT" alias="VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT" alias="VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT">
            <comment>Fragment shader stage is added by the VK_EXT_shader_tile_image extension</comment>
            <syncsupport stage="VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT,VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT,VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT" alias="VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT,VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_TRANSFER_READ_BIT" alias="VK_ACCESS_TRANSFER_READ_BIT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT,VK_PIPELINE_STAGE_2_COPY_BIT,VK_PIPELINE_STAGE_2_RESOLVE_BIT,VK_PIPELINE_STAGE_2_BLIT_BIT,VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR,VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT,VK_PIPELINE_STAGE_2_CONVERT_COOPERATIVE_VECTOR_MATRIX_BIT_NV"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_TRANSFER_WRITE_BIT" alias="VK_ACCESS_TRANSFER_WRITE_BIT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT,VK_PIPELINE_STAGE_2_COPY_BIT,VK_PIPELINE_STAGE_2_RESOLVE_BIT,VK_PIPELINE_STAGE_2_BLIT_BIT,VK_PIPELINE_STAGE_2_CLEAR_BIT,VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR,VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT,VK_PIPELINE_STAGE_2_CONVERT_COOPERATIVE_VECTOR_MATRIX_BIT_NV"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_HOST_READ_BIT" alias="VK_ACCESS_HOST_READ_BIT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_HOST_BIT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_HOST_WRITE_BIT" alias="VK_ACCESS_HOST_WRITE_BIT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_HOST_BIT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_MEMORY_READ_BIT" alias="VK_ACCESS_MEMORY_READ_BIT">
            <comment>TODO/Suggestion. Introduce 'synclist' (could be a different name) element
            that specifies the list of stages, accesses, etc. This list can be used by
            'syncaccess' or 'syncstage' elements. For example, 'syncsupport' in addition to the
            'stage' attribute can support 'list' attribute to reference 'synclist'.
            We can have the lists defined for ALL stages and it can be shared between MEMORY_READ
            and MEMORY_WRITE accesses. Similarly, ALL shader stages list is often used. This proposal
            is a way to fix duplication problem. When new stage is added multiple places needs to be
            updated. It is potential source of bugs. The expectation such setup will produce more
            robust system and also more simple structure to review and validate.
            </comment>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_MEMORY_WRITE_BIT" alias="VK_ACCESS_MEMORY_WRITE_BIT">
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_SHADER_SAMPLED_READ_BIT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT,VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT,VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT,VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT,VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR,VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI,VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_SHADER_STORAGE_READ_BIT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT,VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT,VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT,VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT,VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR,VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI,VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT,VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT,VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT,VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT,VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR,VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI,VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR">
            <syncsupport stage="VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR">
            <syncsupport stage="VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR">
            <syncsupport stage="VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR">
            <syncsupport stage="VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT" alias="VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT" alias="VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT,VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT" alias="VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT" alias="VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV" alias="VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV">
            <syncsupport stage="VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV" alias="VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV">
            <syncsupport stage="VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_EXT" alias="VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV">
            <syncsupport stage="VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_EXT" alias="VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV">
            <syncsupport stage="VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR" alias="VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR">
            <syncsupport stage="VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR" alias="VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR">
            <syncsupport stage="VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT,VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT,VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT,VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT,VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR,VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI,VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR,VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR" alias="VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR">
            <syncsupport stage="VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT" alias="VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT" alias="VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT,VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT,VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT,VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT,VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR,VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI,VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI">
            <syncsupport stage="VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR">
            <syncsupport stage="VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT,VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT,VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT,VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT,VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT,VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR,VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT,VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI,VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_MICROMAP_READ_BIT_EXT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT,VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT">
            <syncsupport stage="VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV">
            <syncsupport stage="VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV"/>
        </syncaccess>
        <syncaccess name="VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV">
            <syncsupport stage="VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV"/>
        </syncaccess>
        <syncpipeline name="graphics primitive">
            <syncpipelinestage>VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR</syncpipelinestage>
            <syncpipelinestage order="None" before="VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT">VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT</syncpipelinestage>
            <syncpipelinestage order="None">VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT</syncpipelinestage>
        </syncpipeline>
        <syncpipeline name="graphics mesh" depends="VK_NV_mesh_shader,VK_EXT_mesh_shader">
            <syncpipelinestage>VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR</syncpipelinestage>
            <syncpipelinestage order="None" before="VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT">VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT</syncpipelinestage>
            <syncpipelinestage order="None">VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT</syncpipelinestage>
        </syncpipeline>
        <syncpipeline name="compute">
            <syncpipelinestage>VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT</syncpipelinestage>
            <syncpipelinestage order="None">VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT</syncpipelinestage>
        </syncpipeline>
        <syncpipeline name="transfer">
            <syncpipelinestage>VK_PIPELINE_STAGE_2_TRANSFER_BIT</syncpipelinestage>
        </syncpipeline>
        <syncpipeline name="host">
            <syncpipelinestage>VK_PIPELINE_STAGE_2_HOST_BIT</syncpipelinestage>
        </syncpipeline>
        <syncpipeline name="subpass shading" depends="VK_HUAWEI_subpass_shading">
            <syncpipelinestage>VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI</syncpipelinestage>
        </syncpipeline>
        <syncpipeline name="command preprocessing" depends="VK_EXT_device_generated_commands,VK_NV_device_generated_commands">
            <syncpipelinestage>VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT</syncpipelinestage>
        </syncpipeline>
        <syncpipeline name="acceleration structure build" depends="VK_KHR_acceleration_structure,VK_NV_ray_tracing">
            <syncpipelinestage>VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR</syncpipelinestage>
        </syncpipeline>
        <syncpipeline name="acceleration structure copy" depends="VK_KHR_acceleration_structure,VK_NV_ray_tracing">
            <syncpipelinestage>VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR</syncpipelinestage>
        </syncpipeline>
        <syncpipeline name="opacity micromap" depends="VK_EXT_opacity_micromap">
            <syncpipelinestage>VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT</syncpipelinestage>
        </syncpipeline>
        <syncpipeline name="ray tracing" depends="VK_KHR_ray_tracing_pipeline,VK_NV_ray_tracing">
            <syncpipelinestage>VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT</syncpipelinestage>
            <syncpipelinestage>VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR</syncpipelinestage>
        </syncpipeline>
        <syncpipeline name="video decode" depends="VK_KHR_video_decode_queue">
            <syncpipelinestage>VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR</syncpipelinestage>
        </syncpipeline>
        <syncpipeline name="video encode" depends="VK_KHR_video_encode_queue">
            <syncpipelinestage>VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR</syncpipelinestage>
        </syncpipeline>
        <syncpipeline name="optical flow" depends="VK_NV_optical_flow">
            <syncpipelinestage>VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV</syncpipelinestage>
        </syncpipeline>
        <syncpipeline name="convert cooperative vector matrix layout" depends="VK_NV_cooperative_vector">
            <syncpipelinestage>VK_PIPELINE_STAGE_2_CONVERT_COOPERATIVE_VECTOR_MATRIX_BIT_NV</syncpipelinestage>
        </syncpipeline>
    </sync>
    <videocodecs>
        <videocodec name="Decode">
            <videocapabilities struct="VkVideoDecodeCapabilitiesKHR"/>
            <videoformat name="Decode Output" usage="VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR"/>
            <videoformat name="DPB" usage="VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR"/>
        </videocodec>
        <videocodec name="Encode">
            <videocapabilities struct="VkVideoEncodeCapabilitiesKHR"/>
            <videocapabilities struct="VkVideoEncodeQuantizationMapCapabilitiesKHR"/>
            <videoformat name="Encode Input" usage="VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR"/>
            <videoformat name="DPB" usage="VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR"/>
            <videoformat name="Quantization Delta Map" usage="VK_IMAGE_USAGE_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR">
                <videorequirecapabilities struct="VkVideoEncodeCapabilitiesKHR" member="flags" value="VK_VIDEO_ENCODE_CAPABILITY_QUANTIZATION_DELTA_MAP_BIT_KHR"/>
                <videoformatproperties struct="VkVideoFormatQuantizationMapPropertiesKHR"/>
            </videoformat>
            <videoformat name="Emphasis Map" usage="VK_IMAGE_USAGE_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR">
                <videorequirecapabilities struct="VkVideoEncodeCapabilitiesKHR" member="flags" value="VK_VIDEO_ENCODE_CAPABILITY_EMPHASIS_MAP_BIT_KHR"/>
                <videoformatproperties struct="VkVideoFormatQuantizationMapPropertiesKHR"/>
            </videoformat>
        </videocodec>
        <videocodec name="H.264 Decode" extend="Decode" value="VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR">
            <videoprofiles struct="VkVideoDecodeH264ProfileInfoKHR">
                <videoprofilemember name="stdProfileIdc">
                    <videoprofile name="Baseline" value="STD_VIDEO_H264_PROFILE_IDC_BASELINE"/>
                    <videoprofile name="Main" value="STD_VIDEO_H264_PROFILE_IDC_MAIN"/>
                    <videoprofile name="High" value="STD_VIDEO_H264_PROFILE_IDC_HIGH"/>
                    <videoprofile name="High 4:4:4 Predictive" value="STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE"/>
                </videoprofilemember>
                <videoprofilemember name="pictureLayout">
                    <videoprofile name="progressive" value="VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR"/>
                    <videoprofile name="interlaced (interleaved lines)" value="VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR"/>
                    <videoprofile name="interlaced (separate planes)" value="VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR"/>
                </videoprofilemember>
            </videoprofiles>
            <videocapabilities struct="VkVideoDecodeH264CapabilitiesKHR"/>
        </videocodec>
        <videocodec name="H.265 Decode" extend="Decode" value="VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR">
            <videoprofiles struct="VkVideoDecodeH265ProfileInfoKHR">
                <videoprofilemember name="stdProfileIdc">
                    <videoprofile name="Main" value="STD_VIDEO_H265_PROFILE_IDC_MAIN"/>
                    <videoprofile name="Main 10" value="STD_VIDEO_H265_PROFILE_IDC_MAIN_10"/>
                    <videoprofile name="Main Still Picture" value="STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE"/>
                    <videoprofile name="Format range extensions" value="STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS"/>
                    <videoprofile name="Screen content coding extensions" value="STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS"/>
                </videoprofilemember>
            </videoprofiles>
            <videocapabilities struct="VkVideoDecodeH265CapabilitiesKHR"/>
        </videocodec>
        <videocodec name="AV1 Decode" extend="Decode" value="VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR">
            <videoprofiles struct="VkVideoDecodeAV1ProfileInfoKHR">
                <videoprofilemember name="stdProfile">
                    <videoprofile name="Main" value="STD_VIDEO_AV1_PROFILE_MAIN"/>
                    <videoprofile name="High" value="STD_VIDEO_AV1_PROFILE_HIGH"/>
                    <videoprofile name="Professional" value="STD_VIDEO_AV1_PROFILE_PROFESSIONAL"/>
                </videoprofilemember>
                <videoprofilemember name="filmGrainSupport">
                    <videoprofile name="with film grain support" value="VK_TRUE"/>
                    <videoprofile name="without film grain support" value="VK_FALSE"/>
                </videoprofilemember>
            </videoprofiles>
            <videocapabilities struct="VkVideoDecodeAV1CapabilitiesKHR"/>
        </videocodec>
        <videocodec name="H.264 Encode" extend="Encode" value="VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR">
            <videoprofiles struct="VkVideoEncodeH264ProfileInfoKHR">
                <videoprofilemember name="stdProfileIdc">
                    <videoprofile name="Baseline" value="STD_VIDEO_H264_PROFILE_IDC_BASELINE"/>
                    <videoprofile name="Main" value="STD_VIDEO_H264_PROFILE_IDC_MAIN"/>
                    <videoprofile name="High" value="STD_VIDEO_H264_PROFILE_IDC_HIGH"/>
                    <videoprofile name="High 4:4:4 Predictive" value="STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE"/>
                </videoprofilemember>
            </videoprofiles>
            <videocapabilities struct="VkVideoEncodeH264CapabilitiesKHR"/>
            <videocapabilities struct="VkVideoEncodeH264QuantizationMapCapabilitiesKHR"/>
        </videocodec>
        <videocodec name="H.265 Encode" extend="Encode" value="VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR">
            <videoprofiles struct="VkVideoEncodeH265ProfileInfoKHR">
                <videoprofilemember name="stdProfileIdc">
                    <videoprofile name="Main" value="STD_VIDEO_H265_PROFILE_IDC_MAIN"/>
                    <videoprofile name="Main 10" value="STD_VIDEO_H265_PROFILE_IDC_MAIN_10"/>
                    <videoprofile name="Main Still Picture" value="STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE"/>
                    <videoprofile name="Format range extensions" value="STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS"/>
                    <videoprofile name="Screen content coding extensions" value="STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS"/>
                </videoprofilemember>
            </videoprofiles>
            <videocapabilities struct="VkVideoEncodeH265CapabilitiesKHR"/>
            <videocapabilities struct="VkVideoEncodeH265QuantizationMapCapabilitiesKHR"/>
            <videoformat extend="Quantization Delta Map">
                <videoformatproperties struct="VkVideoFormatH265QuantizationMapPropertiesKHR"/>
            </videoformat>
            <videoformat extend="Emphasis Map">
                <videoformatproperties struct="VkVideoFormatH265QuantizationMapPropertiesKHR"/>
            </videoformat>
        </videocodec>
        <videocodec name="AV1 Encode" extend="Encode" value="VK_VIDEO_CODEC_OPERATION_ENCODE_AV1_BIT_KHR">
            <videoprofiles struct="VkVideoEncodeAV1ProfileInfoKHR">
                <videoprofilemember name="stdProfile">
                    <videoprofile name="Main" value="STD_VIDEO_AV1_PROFILE_MAIN"/>
                    <videoprofile name="High" value="STD_VIDEO_AV1_PROFILE_HIGH"/>
                    <videoprofile name="Professional" value="STD_VIDEO_AV1_PROFILE_PROFESSIONAL"/>
                </videoprofilemember>
            </videoprofiles>
            <videocapabilities struct="VkVideoEncodeAV1CapabilitiesKHR"/>
            <videoformat extend="Quantization Delta Map">
                <videoformatproperties struct="VkVideoFormatAV1QuantizationMapPropertiesKHR"/>
            </videoformat>
            <videoformat extend="Emphasis Map">
                <videoformatproperties struct="VkVideoFormatAV1QuantizationMapPropertiesKHR"/>
            </videoformat>
        </videocodec>
    </videocodecs>
</registry>
