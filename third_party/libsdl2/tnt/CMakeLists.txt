if(TARGET sdl2)
   return()
endif()

set(THIRD_PARTY_STAGING_DIR ${CMAKE_BINARY_DIR}/staging${CMAKE_INSTALL_PREFIX})

include(ExternalProject)
ExternalProject_Add(_sdl2
        SOURCE_DIR ${CMAKE_SOURCE_DIR}/third_party/libsdl2
        DOWNLOAD_COMMAND ""
        CMAKE_ARGS
        -D CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -D CMAKE_C_COMPILER=${CMAKE_C_COMPILER}
        -D CMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
        -D CMAKE_C_FLAGS=${CMAKE_C_FLAGS}
        -D CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
        -D BUILD_SHARED_LIBS=OFF
        -D CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -D CMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
        -D CMAKE_STAGING_PREFIX=${THIRD_PARTY_STAGING_DIR}
        -D CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
        -D VIDEO_METAL=${FILAMENT_SUPPORTS_METAL}
        -D VIDEO_OPENGL=${FILAMENT_SUPPORTS_OPENGL}
        -D VIDEO_OPENGLES=$<OR:$<BOOL:FILAMENT_USE_EXTERNAL_GLES3>,$<BOOL:FILAMENT_SUPPORTS_WAYLAND>>
        -D VIDEO_VULKAN=${FILAMENT_SUPPORTS_VULKAN}
        -D VIDEO_WAYLAND=${FILAMENT_SUPPORTS_WAYLAND}
        -D VIDEO_WAYLAND_QT_TOUCH=${FILAMENT_SUPPORTS_WAYLAND}
        -D VIDEO_X11=${FILAMENT_SUPPORTS_X11}
        -D VIDEO_X11_XCURSOR=${FILAMENT_SUPPORTS_X11}
        -D VIDEO_X11_XINERAMA=${FILAMENT_SUPPORTS_X11}
        -D VIDEO_X11_XINPUT=${FILAMENT_SUPPORTS_X11}
        -D VIDEO_X11_XRANDR=${FILAMENT_SUPPORTS_X11}
        -D VIDEO_X11_XSCRNSAVER=${FILAMENT_SUPPORTS_X11}
        -D VIDEO_X11_XSHAPE=${FILAMENT_SUPPORTS_X11}
        -D VIDEO_X11_XVM=${FILAMENT_SUPPORTS_X11}
        -D VIDEO_DUMMY=FALSE
        -D WAYLAND_LIBDECOR=${FILAMENT_SUPPORTS_WAYLAND}
        -D WAYLAND_SHARED=${FILAMENT_SUPPORTS_WAYLAND}
        -D X11_SHARED=${FILAMENT_SUPPORTS_X11}
        -D XINPUT=$<OR:$<BOOL:FILAMENT_SUPPORTS_X11>,$<BOOL:FILAMENT_SUPPORTS_WAYLAND>>
        -D SDL_STATIC_PIC=$<BOOL:CMAKE_POSITION_INDEPENDENT_CODE>
        -D SDL_AUDIO=FALSE
        -D SDL_JOYSTICK=TRUE
        -D SDL_RENDER=FALSE
        -D SDL_HAPTIC=FALSE
        -D SDL_POWER=FALSE
        -D SDL_FILE=$<BOOL:APPLE>
        -D SDL_CPUINFO=FALSE
        -D SDL_FILESYSTEM=FALSE
        -D SDL_SENSOR=FALSE
        -D SDL_LOCALE=FALSE
        -D SDL_SHARED=FALSE
        )

ExternalProject_Get_property(_sdl2 CFLAGS EXTRA_CFLAGS EXTRA_LDFLAGS EXTRA_LIBS)

# path of generated headers
set(_SDL2_BUILD_DIR ${CMAKE_BINARY_DIR}/third_party/libsdl2/tnt/_sdl2-prefix/src/_sdl2-build)


add_library(sdl2 INTERFACE)

add_dependencies(sdl2 _sdl2)

target_include_directories(sdl2 INTERFACE
    ${_SDL2_BUILD_DIR}/include
    ${THIRD_PARTY_STAGING_DIR}/include
    ${THIRD_PARTY_STAGING_DIR}/include/SDL2
)

target_compile_features(sdl2 INTERFACE ${CFLAGS} ${EXTRA_CFLAGS})

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(DEBUG_SUFFIX "d")
endif ()

target_link_libraries(sdl2 INTERFACE
    ${EXTRA_LDFLAGS}
    -L${THIRD_PARTY_STAGING_DIR}/lib${LIBSUFFIX}
    -lSDL2${DEBUG_SUFFIX}
    ${EXTRA_LIBS}
)

set_target_properties(
    sdl2
    PROPERTIES
    INTERFACE_SDL2_NAME "SDL2 Library"
    INTERFACE_SDL2_URL "https://www.libsdl.org"
    INTERFACE_SDL2_AUTHOR "SDL authors"
    INTERFACE_SDL2_LICENSE ${CMAKE_CURRENT_LIST_DIR}/../LICENSE.txt
)

set(CFLAGS)
set(EXTRA_CFLAGS)
set(EXTRA_LDFLAGS)
set(EXTRA_LIBS)
