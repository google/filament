#version 460 core

#extension GL_ARM_tensors : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

layout(binding = 0) uniform tensorARM<int32_t, 4> t;
layout(set = 0, binding = 1) uniform tensorARM<bool, 2> tb;
layout(set = 0, binding = 2) uniform tensorARM<float, 3> tf[4];

void main()
{
  bool b;
  bool barr[4];
  int32_t i32;
  int32_t vec[2];
  int32_t vecthree[3];
  int32_t vecfour[4];
  float f32;
  tensorReadARM(tb, uint[](0, 0), b);
  tensorReadARM(tb, uint[](0, 0), barr);
  const uint operands = gl_TensorOperandsNonTemporalARM | gl_TensorOperandsOutOfBoundsValueARM;
  tensorReadARM(t, uint[](0,0,0,0), i32, operands, 33);
  tensorReadARM(t, uint[](1,2,3,4), vec);
  tensorReadARM(t, uint[](3,2,1,0), vecthree);
  tensorReadARM(t, uint[](99,99,99,99), vecfour);
  tensorReadARM(tf[0], uint[](0,0,0), f32);

  tensorWriteARM(tb, uint[](0, 0), b);
  tensorWriteARM(tb, uint[](0, 0), barr);
  tensorWriteARM(t, uint[](4,3,2,1), i32);
  tensorWriteARM(t, uint[](0,0,0,0), vec, gl_TensorOperandsNonTemporalARM);
  tensorWriteARM(tf[3], uint[](0,0,0), f32);
}
