#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#extension GL_KHR_memory_scope_semantics : require
#extension GL_KHR_cooperative_matrix : require
#extension GL_EXT_float_e5m2 : require
#extension GL_EXT_float_e4m3 : require

layout(local_size_x = 1) in;

layout(set = 0, binding = 0) buffer SSBO
{
	floate5m2_t e5m2[4];
	floate4m3_t e4m3[4];

	fe5m2vec4 e5m2x4;
	fe5m2vec3 e5m2x3;
	fe5m2vec2 e5m2x2;

	fe4m3vec4 e4m3x4;
	fe4m3vec3 e4m3x3;
	fe4m3vec2 e4m3x2;
} ssbo;

layout(constant_id = 0) const floate5m2_t SPEC0 = floate5m2_t(5.0);
layout(constant_id = 1) const floate4m3_t SPEC1 = floate4m3_t(2.5);
layout(constant_id = 2) const floate4m3_t SPEC2 = floate4m3_t(-448.0);
layout(constant_id = 3) const floate4m3_t SPEC3 = floate4m3_t(+448.0);
layout(constant_id = 4) const floate5m2_t SPEC4 = floate5m2_t(-60000.0);
layout(constant_id = 5) const floate5m2_t SPEC5 = floate5m2_t(+60000.0);

void bitcasts()
{
	int8_t i8;
	uint8_t u8;
	floate5m2_t e5m2;
	floate4m3_t e4m3;

	i8 = floate5m2BitsToIntEXT(ssbo.e5m2[0]);
	u8 = floate5m2BitsToUintEXT(ssbo.e5m2[1]);
	i8 = floate4m3BitsToIntEXT(ssbo.e4m3[2]);
	u8 = floate4m3BitsToUintEXT(ssbo.e4m3[3]);

	e5m2 = intBitsToFloate5m2EXT(i8);
	e5m2 = uintBitsToFloate5m2EXT(u8);
	e4m3 = intBitsToFloate4m3EXT(i8);
	e4m3 = uintBitsToFloate4m3EXT(u8);
}

void conversions()
{
	int8_t i8;
	uint8_t u8;
	float16_t f16;
	float f32;

	i8 = int8_t(ssbo.e5m2[0]);
	u8 = uint8_t(ssbo.e4m3[0]);
	f16 = float16_t(ssbo.e5m2x4.x);
	f32 = float(ssbo.e4m3x4.y);
}

void saturated_conversions()
{
	floate5m2_t e5m2;
	floate4m3_t e4m3;
	saturatedConvertEXT(e5m2, float16_t(500.0));
	saturatedConvertEXT(e4m3, float(500.0));

	coopmat<floate4m3_t, gl_ScopeSubgroup, 16, 16, 0> m0;
	coopmat<float16_t, gl_ScopeSubgroup, 16, 16, 0> m1;
	saturatedConvertEXT(m0, m1);
}

void main()
{
	bitcasts();
	conversions();
	saturated_conversions();
}
