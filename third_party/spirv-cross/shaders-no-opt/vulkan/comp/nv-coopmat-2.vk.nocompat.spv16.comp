#version 450
#extension GL_KHR_memory_scope_semantics : require
#extension GL_KHR_cooperative_matrix : require
#extension GL_NV_cooperative_matrix2 : require
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#extension GL_EXT_float_e5m2 : require
#extension GL_EXT_float_e4m3 : require

layout(local_size_x = 1) in;

void accum_to_a_cast()
{
	coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseAccumulator> Accum =
		coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseAccumulator>(0.0);
	coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseA> A;
	A = coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseA>(Accum);
}

void accum_to_b_cast()
{
	coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseAccumulator> Accum =
		coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseAccumulator>(0.0);
	coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseB> B;
	B = coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseB>(Accum);
}

void value_cast()
{
	// This should use normal OpFConvert.
	coopmat<float, gl_ScopeSubgroup, 16, 16, gl_MatrixUseAccumulator> Accum =
		coopmat<float, gl_ScopeSubgroup, 16, 16, gl_MatrixUseAccumulator>(0.0);
	coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseAccumulator> A;
	A = coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseAccumulator>(Accum);
}

void saturated_cast()
{
	coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseAccumulator> Accum =
		coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseAccumulator>(0.0);
	coopmat<floate4m3_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseB> B;
	saturatedConvertEXT(B, Accum);
}

void main()
{
	accum_to_a_cast();
	accum_to_b_cast();
	value_cast();
	saturated_cast();
}
