#version 460
#extension GL_ARM_tensors : require
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 1) uniform tensorARM<bool, 2u> tb;
layout(set = 0, binding = 0) uniform tensorARM<int, 4u> t;
layout(set = 0, binding = 2) uniform tensorARM<float, 3u> tf[4];

void main()
{
    bool _18;
    tensorReadARM(tb, uint[](0u, 0u), _18);
    bool b = _18;
    bool _24[4];
    tensorReadARM(tb, uint[](0u, 0u), _24);
    bool barr[4] = _24;
    int _36;
    tensorReadARM(t, uint[](0u, 0u, 0u, 0u), _36, gl_TensorOperandsNonTemporalARM | gl_TensorOperandsOutOfBoundsValueARM, 33);
    int i32 = _36;
    int _43[2];
    tensorReadARM(t, uint[](1u, 2u, 3u, 4u), _43);
    int vec[2] = _43;
    int _49[3];
    tensorReadARM(t, uint[](3u, 2u, 1u, 0u), _49);
    int vecthree[3] = _49;
    int _56[4];
    tensorReadARM(t, uint[](99u, 99u, 99u, 99u), _56);
    int vecfour[4] = _56;
    float _70;
    tensorReadARM(tf[0], uint[](0u, 0u, 0u), _70);
    float f32 = _70;
    tensorWriteARM(tb, uint[](0u, 0u), b);
    tensorWriteARM(tb, uint[](0u, 0u), barr);
    tensorWriteARM(t, uint[](4u, 3u, 2u, 1u), i32);
    tensorWriteARM(t, uint[](0u, 0u, 0u, 0u), vec, gl_TensorOperandsNonTemporalARM);
    tensorWriteARM(tf[3], uint[](0u, 0u, 0u), f32);
}

