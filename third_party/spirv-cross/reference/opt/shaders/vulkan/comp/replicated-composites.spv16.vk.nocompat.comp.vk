#version 450
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_shader_16bit_storage : require
#extension GL_KHR_cooperative_matrix : require
#extension GL_KHR_memory_scope_semantics : require
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(constant_id = 0) const float spec_const = 0.0;
const vec4 _29 = vec4(spec_const);
float _53;

layout(set = 0, binding = 0, std140) uniform UBO
{
    float uniform_float;
} ubo;

void main()
{
    vec4 a = vec4(0.0);
    mat4 b = mat4(vec4(1.0), vec4(1.0), vec4(1.0), vec4(1.0));
    coopmat<float16_t, gl_ScopeWorkgroup, 16u, 16u, gl_MatrixUseAccumulator> matrix = coopmat<float16_t, gl_ScopeWorkgroup, 16u, 16u, gl_MatrixUseAccumulator>(float16_t(0.0));
    vec4 c = _29;
    vec4 _44 = vec4(ubo.uniform_float);
    vec4 d = _44;
    mat4 e = mat4(_44, _44, _44, _44);
    float16_t _51 = float16_t(ubo.uniform_float);
    coopmat<float16_t, gl_ScopeWorkgroup, 16u, 16u, gl_MatrixUseAccumulator> matrix2 = coopmat<float16_t, gl_ScopeWorkgroup, 16u, 16u, gl_MatrixUseAccumulator>(_51);
}

