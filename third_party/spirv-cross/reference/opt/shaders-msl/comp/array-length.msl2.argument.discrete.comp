#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct SSBO
{
    uint size;
    float4 v[1];
};

struct SSBO1
{
    float bz[1];
};

struct SSBO2
{
    uint size2;
    float4 w[1];
};

struct SSBO3
{
    float bz[1];
};

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(1u);

struct spvDescriptorSetBuffer0
{
    device SSBO* m_16 [[id(0)]];
    constant uint* spvBufferSizeConstants [[id(1)]];
};

struct spvDescriptorSetBuffer1
{
    device SSBO1* ssbos [[id(0)]][2];
    constant uint* spvBufferSizeConstants [[id(2)]];
};

kernel void main0(constant spvDescriptorSetBuffer0& spvDescriptorSet0 [[buffer(0)]], constant spvDescriptorSetBuffer1& spvDescriptorSet1 [[buffer(1)]], constant uint* spvBufferSizeConstants [[buffer(25)]], device SSBO2& _38 [[buffer(2)]], device SSBO3* ssbos2_0 [[buffer(3)]], device SSBO3* ssbos2_1 [[buffer(4)]])
{
    device SSBO3* ssbos2[] =
    {
        ssbos2_0,
        ssbos2_1,
    };

    constant uint& spvDescriptorSet0_m_16BufferSize = spvDescriptorSet0.spvBufferSizeConstants[0];
    constant uint* spvDescriptorSet1_ssbosBufferSize = &spvDescriptorSet1.spvBufferSizeConstants[0];
    constant uint& _38BufferSize = spvBufferSizeConstants[2];
    constant uint* ssbos2BufferSize = &spvBufferSizeConstants[3];
    (*spvDescriptorSet0.m_16).size = ((uint(int((spvDescriptorSet0_m_16BufferSize - 16) / 16)) + uint(int((spvDescriptorSet1_ssbosBufferSize[1] - 0) / 4))) + uint(int((_38BufferSize - 16) / 16))) + uint(int((ssbos2BufferSize[0] - 0) / 4));
}

