#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct SSBO
{
    float in_data[1];
};

struct SSBO2
{
    float out_data[1];
};

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(4u, 1u, 1u);

constant spvUnsafeArray<float, 4> _31 = spvUnsafeArray<float, 4>({ 0.0, 0.0, 0.0, 0.0 });

kernel void main0(const device SSBO& _22 [[buffer(0)]], device SSBO2& _48 [[buffer(1)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]], uint gl_LocalInvocationIndex [[thread_index_in_threadgroup]])
{
    threadgroup spvUnsafeArray<float, 4> sShared;
    {
        threadgroup uint *sShared_ptr = (threadgroup uint *)&sShared;
        uint sShared_sz = sizeof(sShared);
        uint sShared_pos = gl_LocalInvocationIndex;
        uint sShared_stride = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
        while (sizeof(uint) * sShared_pos < sShared_sz)
        {
            sShared_ptr[sShared_pos] = 0u;
            sShared_pos += sShared_stride;
        }
        if (gl_LocalInvocationIndex == 0)
        {
            sShared_pos = (sShared_sz / sizeof(uint)) * sizeof(uint);
            threadgroup uchar *sShared_ptr2 = (threadgroup uchar *)&sShared;
            while (sShared_pos < sShared_sz)
            {
                sShared_ptr2[sShared_pos] = '\0';
                sShared_pos++;
            }
        }
        threadgroup_barrier(mem_flags::mem_threadgroup);
    }
    uint ident = gl_GlobalInvocationID.x;
    float idata = _22.in_data[ident];
    sShared[gl_LocalInvocationIndex] += idata;
    threadgroup_barrier(mem_flags::mem_threadgroup);
    _48.out_data[ident] = sShared[(4u - gl_LocalInvocationIndex) - 1u];
}

