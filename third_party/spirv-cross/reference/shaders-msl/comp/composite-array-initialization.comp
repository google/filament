#pragma clang diagnostic ignored "-Wmissing-prototypes"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct Data
{
    float a;
    float b;
};

constant float X_tmp [[function_constant(0)]];
constant float X = is_function_constant_defined(X_tmp) ? X_tmp : 4.0;

struct Data_1
{
    float a;
    float b;
};

struct SSBO
{
    Data_1 outdata[1];
};

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(2u, 1u, 1u);

constant Data _25[2] = { Data{ 1.0, 2.0 }, Data{ 3.0, 4.0 } };

// Implementation of an array copy function to cover GLSL's ability to copy an array via assignment.
template<typename T, uint N>
void spvArrayCopyFromStack1(thread T (&dst)[N], thread const T (&src)[N])
{
    for (uint i = 0; i < N; dst[i] = src[i], i++);
}

template<typename T, uint N>
void spvArrayCopyFromConstant1(thread T (&dst)[N], constant T (&src)[N])
{
    for (uint i = 0; i < N; dst[i] = src[i], i++);
}

Data combine(thread const Data& a, thread const Data& b)
{
    return Data{ a.a + b.a, a.b + b.b };
}

kernel void main0(device SSBO& _53 [[buffer(0)]], uint3 gl_WorkGroupID [[threadgroup_position_in_grid]], uint3 gl_LocalInvocationID [[thread_position_in_threadgroup]])
{
    Data data[2] = { Data{ 1.0, 2.0 }, Data{ 3.0, 4.0 } };
    Data _31[2] = { Data{ X, 2.0 }, Data{ 3.0, 5.0 } };
    Data data2[2];
    spvArrayCopyFromStack1(data2, _31);
    Data param = data[gl_LocalInvocationID.x];
    Data param_1 = data2[gl_LocalInvocationID.x];
    Data _73 = combine(param, param_1);
    _53.outdata[gl_WorkGroupID.x].a = _73.a;
    _53.outdata[gl_WorkGroupID.x].b = _73.b;
}

