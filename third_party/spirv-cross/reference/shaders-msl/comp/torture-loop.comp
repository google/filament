#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct SSBO
{
    float4x4 mvp;
    float4 in_data[1];
};

struct SSBO2
{
    float4 out_data[1];
};

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(1u);

kernel void main0(const device SSBO& _24 [[buffer(0)]], device SSBO2& _89 [[buffer(1)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    uint ident = gl_GlobalInvocationID.x;
    float4 idat = _24.in_data[ident];
    int k = 0;
    for (;;)
    {
        int _39 = k;
        int _40 = _39 + 1;
        k = _40;
        if (_40 < 10)
        {
            idat *= 2.0;
            k++;
            continue;
        }
        else
        {
            break;
        }
    }
    for (uint i = 0u; i < 16u; i++, k++)
    {
        for (uint j = 0u; j < 30u; j++)
        {
            idat = _24.mvp * idat;
        }
    }
    do
    {
        k++;
    } while (k > 10);
    _89.out_data[ident] = idat;
}

