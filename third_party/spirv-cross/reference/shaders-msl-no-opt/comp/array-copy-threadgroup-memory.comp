#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(8u, 1u, 1u);

kernel void main0(uint gl_LocalInvocationIndex [[thread_index_in_threadgroup]])
{
    threadgroup spvUnsafeArray<spvUnsafeArray<float, 8>, 8> shared_group;
    threadgroup spvUnsafeArray<spvUnsafeArray<float, 8>, 8> shared_group_alt;
    spvUnsafeArray<float, 8> blob;
    for (int i = 0; i < 8; i++)
    {
        blob[i] = float(i);
    }
    shared_group[gl_LocalInvocationIndex] = blob;
    threadgroup_barrier(mem_flags::mem_threadgroup);
    spvUnsafeArray<float, 8> copied_blob = shared_group[gl_LocalInvocationIndex ^ 1u];
    shared_group_alt[gl_LocalInvocationIndex] = shared_group[gl_LocalInvocationIndex];
}

