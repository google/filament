#version 450
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_spirv_intrinsics : require

layout(location = 0) in vec4 A;
layout(location = 1) in vec4 B;
layout(location = 0) out vec4 SV_Target;

spirv_instruction(set = "GLSL.std.450", id = 79) float16_t spvNMin(float16_t, float16_t);
spirv_instruction(set = "GLSL.std.450", id = 79) f16vec2 spvNMin(f16vec2, f16vec2);
spirv_instruction(set = "GLSL.std.450", id = 79) f16vec3 spvNMin(f16vec3, f16vec3);
spirv_instruction(set = "GLSL.std.450", id = 79) f16vec4 spvNMin(f16vec4, f16vec4);
spirv_instruction(set = "GLSL.std.450", id = 79) float spvNMin(float, float);
spirv_instruction(set = "GLSL.std.450", id = 79) vec2 spvNMin(vec2, vec2);
spirv_instruction(set = "GLSL.std.450", id = 79) vec3 spvNMin(vec3, vec3);
spirv_instruction(set = "GLSL.std.450", id = 79) vec4 spvNMin(vec4, vec4);
spirv_instruction(set = "GLSL.std.450", id = 79) double spvNMin(double, double);
spirv_instruction(set = "GLSL.std.450", id = 79) dvec2 spvNMin(dvec2, dvec2);
spirv_instruction(set = "GLSL.std.450", id = 79) dvec3 spvNMin(dvec3, dvec3);
spirv_instruction(set = "GLSL.std.450", id = 79) dvec4 spvNMin(dvec4, dvec4);

void main()
{
    SV_Target.x = float(spvNMin(double(A.x), double(B.x)) + double(float(spvNMin(float16_t(A.x), float16_t(B.x))) + spvNMin(A.x, B.x)));
    SV_Target.y = float(spvNMin(double(A.y), double(B.y)) + double(float(spvNMin(float16_t(A.y), float16_t(B.y))) + spvNMin(A.y, B.y)));
    SV_Target.z = float(spvNMin(double(A.z), double(B.z)) + double(float(spvNMin(float16_t(A.z), float16_t(B.z))) + spvNMin(A.z, B.z)));
    SV_Target.w = float(spvNMin(double(A.w), double(B.w)) + double(float(spvNMin(float16_t(A.w), float16_t(B.w))) + spvNMin(A.w, B.w)));
}

