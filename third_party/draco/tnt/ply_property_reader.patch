diff --git a/third_party/draco/src/draco/io/ply_property_reader.h b/third_party/draco/src/draco/io/ply_property_reader.h
index efb8a3a1f..9869c550a 100644
--- a/third_party/draco/src/draco/io/ply_property_reader.h
+++ b/third_party/draco/src/draco/io/ply_property_reader.h
@@ -31,42 +31,42 @@ class PlyPropertyReader {
     // Find the suitable function for converting values.
     switch (property->data_type()) {
       case DT_UINT8:
-        convert_value_func_ = [=](int val_id) {
+        convert_value_func_ = [this](int val_id) {
           return this->ConvertValue<uint8_t>(val_id);
         };
         break;
       case DT_INT8:
-        convert_value_func_ = [=](int val_id) {
+        convert_value_func_ = [this](int val_id) {
           return this->ConvertValue<int8_t>(val_id);
         };
         break;
       case DT_UINT16:
-        convert_value_func_ = [=](int val_id) {
+        convert_value_func_ = [this](int val_id) {
           return this->ConvertValue<uint16_t>(val_id);
         };
         break;
       case DT_INT16:
-        convert_value_func_ = [=](int val_id) {
+        convert_value_func_ = [this](int val_id) {
           return this->ConvertValue<int16_t>(val_id);
         };
         break;
       case DT_UINT32:
-        convert_value_func_ = [=](int val_id) {
+        convert_value_func_ = [this](int val_id) {
           return this->ConvertValue<uint32_t>(val_id);
         };
         break;
       case DT_INT32:
-        convert_value_func_ = [=](int val_id) {
+        convert_value_func_ = [this](int val_id) {
           return this->ConvertValue<int32_t>(val_id);
         };
         break;
       case DT_FLOAT32:
-        convert_value_func_ = [=](int val_id) {
+        convert_value_func_ = [this](int val_id) {
           return this->ConvertValue<float>(val_id);
         };
         break;
       case DT_FLOAT64:
-        convert_value_func_ = [=](int val_id) {
+        convert_value_func_ = [this](int val_id) {
           return this->ConvertValue<double>(val_id);
         };
         break;
