material {
    name : sgsr1,
    parameters : [
        {
            type : sampler2d,
            name : color,
            precision: medium
        },
        {
            type : float4,
            name : viewport,
            precision: high
        }
    ],
    variables : [
        vertex
    ],
    depthWrite : false,
    depthCulling : false,
    domain: postprocess
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.normalizedUV = uvToRenderTargetUV(postProcess.normalizedUV);
        postProcess.vertex.xy = postProcess.normalizedUV;
    }
}

fragment {

    void dummy(){}

    precision mediump float;
    precision highp int;

#if defined(FILAMENT_HAS_FEATURE_TEXTURE_GATHER)
    #define gather textureGather
#else
    vec4 gather(const mediump sampler2D color, highp vec2 p, const int comp) {
        highp ivec2 i = ivec2(p * materialParams.viewport.zw - 0.5);
        vec4 d;
        d[0] = texelFetchOffset(color, i, 0, ivec2(0, 1))[comp];
        d[1] = texelFetchOffset(color, i, 0, ivec2(1, 1))[comp];
        d[2] = texelFetchOffset(color, i, 0, ivec2(1, 0))[comp];
        d[3] = texelFetchOffset(color, i, 0, ivec2(0, 0))[comp];
        return d;
    }
#endif

/*
* Operation modes:
* RGBA -> 1
* RGBY -> 3
* LERP -> 4
*/

// SGSR cannot support translucency;
// So we hijack the POST_PROCESS variant to select whether a luminance channel is present
#if POST_PROCESS_OPAQUE
#   define OperationMode 1
#else
#   define OperationMode 3
#endif

/*
* If set, will use edge direction to improve visual quality
* Expect a minimal cost increase
*/
#define UseEdgeDirection
#define EdgeThreshold 8.0 / 255.0
#define EdgeSharpness 2.0

#include "sgsr1_shader_mobile.fs"

    void postProcess(inout PostProcessInputs postProcess) {
        highp vec4 vp[1] = vec4[1]( materialParams.viewport );
        postProcess.color = sgsr(materialParams_color, variable_vertex.xy, vp);
    }
}
