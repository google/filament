material {
    name : colorGrading,
    parameters : [
        {
            type : sampler2d,
            name : colorBuffer,
            precision: medium
        },
        {
            type : sampler3d,
            name : lut,
            precision: medium
        },
        {
            type : sampler2d,
            name : bloomBuffer,
            precision: medium
        },
        {
            type : sampler2d,
            name : dirtBuffer,
            precision: medium
        },
        {
            type : int,
            name : dithering
        },
        {
            type : int,
            name : fxaa
        },
        {
            type : float4,
            name : bloom
        },
        {
            type : float4,
            name : vignette
        },
        {
            type : float4,
            name : vignetteColor
        }
    ],
    variables : [
        vertex
    ],
    depthWrite : false,
    depthCulling : false,
    domain: postprocess
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = postProcess.normalizedUV;
    }
}

fragment {

#include "../../../shaders/src/dithering.fs"
#include "../../../shaders/src/vignette.fs"
#include "../../../shaders/src/bloom.fs"

    vec3 colorGrade(mediump sampler3D lut, const vec3 x) {
        // Alexa LogC EI 1000
        const float a = 5.555556;
        const float b = 0.047996;
        const float c = 0.244161 / log2(10.0);
        const float d = 0.386036;
        vec3 logc = c * log2(a * x + b) + d;
        return textureLod(lut, logc, 0.0).rgb;
    }

    vec3 resolveFragment(const ivec2 uv) {
        return texelFetch(materialParams_colorBuffer, uv, 0).rgb;
    }

    vec4 resolveAlphaFragment(const ivec2 uv) {
        return texelFetch(materialParams_colorBuffer, uv, 0);
    }

    vec4 resolve() {
#if POST_PROCESS_OPAQUE
        vec4 color = vec4(resolveFragment(ivec2(getUV())), 1.0);
        if (materialParams.bloom.x > 0.0) {
            color.rgb = bloom(color.rgb);
        }
        if (materialParams.vignette.x < MEDIUMP_FLT_MAX) {
            highp vec2 uv = getUV() * frameUniforms.resolution.zw;
            color.rgb = vignette(color.rgb, uv, materialParams.vignette, materialParams.vignetteColor);
        }
        color.rgb  = colorGrade(materialParams_lut, color.rgb);
        if (materialParams.fxaa > 0) {
            color.a = luminance(color.rgb);
        }
#else
        vec4 color = resolveAlphaFragment(ivec2(getUV()));
        color.rgb /= color.a + FLT_EPS;
        if (materialParams.bloom.x > 0.0) {
            color.rgb = bloom(color.rgb);
        }
        if (materialParams.vignette.x < MEDIUMP_FLT_MAX) {
            highp vec2 uv = getUV() * frameUniforms.resolution.zw;
            color.rgb = vignette(color.rgb, uv, materialParams.vignette, materialParams.vignetteColor);
        }
        color.rgb  = colorGrade(materialParams_lut, color.rgb);
        color.rgb *= color.a + FLT_EPS;
#endif
        return color;
    }

    void postProcess(inout PostProcessInputs postProcess) {
        postProcess.color = resolve();
        if (materialParams.dithering > 0) {
            vec4 dithered = dither(postProcess.color);
#if POST_PROCESS_OPAQUE
            postProcess.color.rgb = dithered.rgb;
#else
            postProcess.color = dithered;
#endif
        }
    }

}
