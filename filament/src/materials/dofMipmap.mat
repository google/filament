material {
    name : DepthOfFieldMipmap,
    parameters : [
        {
            type : sampler2d,
            name : foreground,
            precision: medium
        },
        {
            type : sampler2d,
            name : background,
            precision: medium
        },
        {
            type : sampler2d,
            name : cocFgBg,
            precision: medium
        },
        {
            type : int,
            name : mip
        },
        {
            type : float,
            name : weightScale
        }
    ],
    variables : [
        vertex
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = postProcess.normalizedUV;
    }
}

fragment {

layout(location = 1) out vec4 outBackground;
layout(location = 2) out vec2 outCocFgBg;

#include "dofUtils.fs"

void dummy(){}

void postProcess(inout PostProcessInputs postProcess) {
    int mip = materialParams.mip;
    highp vec2 size = vec2(textureSize(materialParams_foreground, mip));
    highp vec2 uv = variable_vertex.xy;

    // Note: we can't assume bilinear weights of 0.25 because there is no guarantee that
    // each level is a multiple of two.

    // image coordinates
    vec2 coords = uv * size - 0.5;

    ivec2 i = ivec2(coords);    // floor

    // bilinear weights
    vec4  f = vec4(fract(coords), 1.0 - fract(coords));
    vec4 b = vec4(f.z * f.y, f.x * f.y, f.x * f.w, f.z * f.w);

    // the bilateral weights need to be scaled by to match the lower resolution
    float weightScale = materialParams.weightScale;

    // fetch the 4 corresponding CoC
    vec4 d0, d1;
    d0.xy = texelFetch(materialParams_cocFgBg, i + ivec2(0, 1), mip).rg;
    d0.zw = texelFetch(materialParams_cocFgBg, i + ivec2(1, 1), mip).rg;
    d1.xy = texelFetch(materialParams_cocFgBg, i + ivec2(1, 0), mip).rg;
    d1.zw = texelFetch(materialParams_cocFgBg, i,               mip).rg;
    vec4 fw = vec4(d0.xz, d1.xz);
    vec4 bw = vec4(d0.yw, d1.yw);

    vec4 hdr;

    /*
     * foreground
     */

    vec4 fg01 = texelFetch(materialParams_foreground, i + ivec2(0, 1), mip);
    vec4 fg11 = texelFetch(materialParams_foreground, i + ivec2(1, 1), mip);
    vec4 fg10 = texelFetch(materialParams_foreground, i + ivec2(1, 0), mip);
    vec4 fg00 = texelFetch(materialParams_foreground, i,               mip);

    // fireflies/flickering filtering
    hdr.x = 1.0 / (1.0 + max4(fg00));
    hdr.y = 1.0 / (1.0 + max4(fg11));
    hdr.z = 1.0 / (1.0 + max4(fg10));
    hdr.w = 1.0 / (1.0 + max4(fg00));

    // We calculates the downsampled CoC to be conservative, that is if any
    // of the 4 texels are foreground or background, then the whole new texel is too.
    float fgCoc = min4(fw);

    // The forground bilateral weight is calculated as saturate(1.0 - (fgCoc - w)), which always
    // yields 1.0. Note the "missing" abs(), this is because we want to let the background layer
    // leak into the foreground layer, to avoid aliasing artifacts.
    fw = hdr * b;
    float fgScale = 1.0 / (fw.x + fw.y + fw.z + fw.w);
    vec4 foreground = (fg01 * fw.x + fg11 * fw.y + fg10 * fw.z + fg00 * fw.w) * fgScale;

    /*
     * background
     */

    vec4 bg01 = texelFetch(materialParams_background, i + ivec2(0, 1), mip);
    vec4 bg11 = texelFetch(materialParams_background, i + ivec2(1, 1), mip);
    vec4 bg10 = texelFetch(materialParams_background, i + ivec2(1, 0), mip);
    vec4 bg00 = texelFetch(materialParams_background, i,               mip);

    // fireflies/flickering filtering
    hdr.x = 1.0 / (1.0 + max4(bg00));
    hdr.y = 1.0 / (1.0 + max4(bg11));
    hdr.z = 1.0 / (1.0 + max4(bg10));
    hdr.w = 1.0 / (1.0 + max4(bg00));

    float bgCoc = max4(bw);

    // The background bilateral weight is calculated as saturate(1.0 - abs(bgCoc - w)),
    // but the abs() is not needed since bgCoc - w is guaranteed to be >= 0.
    bw = saturate(1.0 - (bgCoc - bw) * weightScale) * hdr * b;
    float bgScale = 1.0 / (bw.x + bw.y + bw.z + bw.w);
    vec4 background = (bg01 * bw.x + bg11 * bw.y + bg10 * bw.z + bg00 * bw.w) * bgScale;

#if POST_PROCESS_OPAQUE
    // kill the work performed above
    foreground.a = 1.0;
    background.a = 1.0;
#endif

    // Output to MRTs
    postProcess.color   = foreground;
    outBackground       = background;
    outCocFgBg          = vec2(fgCoc, bgCoc);
}

}
