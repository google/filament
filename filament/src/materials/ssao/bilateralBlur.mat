material {
    name : bilateralBlur,
    parameters : [
        {
            type : sampler2d,
            name : ssao,
            precision: medium
        },
        {
            type : float2,
            name : axis,
            precision: high
        },
        {
            type : float,
            name : farPlaneOverEdgeDistance
        }
    ],
    variables : [
        vertex
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = postProcess.normalizedUV;
    }
}

fragment {
    const int kGaussianCount = 6;
    const float kGaussianSamples[] = float[](
            0.099736, 0.096667, 0.088016, 0.075284, 0.060493, 0.045662  // stdev = 4.0
    );

    float unpack(vec2 depth) {
        // this is equivalent to (x8 * 256 + y8) / 65535, which gives a value between 0 and 1
        return (depth.x * (256.0 / 257.0) + depth.y * (1.0 / 257.0));
    }

    float bilateralWeight(in float depth, in float sampleDepth) {
        float diff = (sampleDepth - depth) * materialParams.farPlaneOverEdgeDistance;
        return max(0.0, 1.0 - diff * diff);
    }

    void tap(inout float sum, inout float totalWeight, float weight, float depth, vec2 position) {
        // ambient occlusion sample
        vec3 data = textureLod(materialParams_ssao, position, 0.0).rgb;

        // bilateral sample
        float bilateral = bilateralWeight(depth, unpack(data.gb));
        bilateral *= weight;
        sum += data.r * bilateral;
        totalWeight += bilateral;
    }

    void postProcess(inout PostProcessInputs postProcess) {
        highp vec2 uv = variable_vertex.xy; // interpolated at pixel's center

        vec3 data = textureLod(materialParams_ssao, uv, 0.0).rgb;
        if (data.g * data.b == 1.0) {
            // This is the skybox, skip
            postProcess.color.rgb = data;
            return;
        }

        // we handle the center pixel separately because it doesn't participate in
        // bilateral filtering
        float depth = unpack(data.gb);
        float totalWeight = kGaussianSamples[0];
        float sum = data.r * totalWeight;

        vec2 offset = materialParams.axis;
        for (int i = 1; i < kGaussianCount; i++) {
            float weight = kGaussianSamples[i];
            tap(sum, totalWeight, weight, depth, uv + offset);
            tap(sum, totalWeight, weight, depth, uv - offset);
            offset += materialParams.axis;
        }

        postProcess.color.r = sum * (1.0 / totalWeight);
        postProcess.color.gb = data.gb;
    }
}
