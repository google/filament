material {
    name : bloomDownsample,
    parameters : [
        {
            type : sampler2d,
            name : source,
            precision: medium
        }
    ],
    variables : [
        vertex
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = uvToRenderTargetUV(postProcess.normalizedUV);
    }
}

fragment {

    void dummy(){}

    vec3 box4x4(vec3 s0, vec3 s1, vec3 s2, vec3 s3) {
        return (s0 + s1 + s2 + s3) * 0.25;
    }

    void postProcess(inout PostProcessInputs postProcess) {
        highp vec2 uv = variable_vertex.xy;

        // see SIGGRAPH 2014: Advances in Real-Time Rendering
        //     "Next Generation Post-Processing in Call of Duty Advanced Warfare"
        //      Jorge Jimenez
        vec3 c = textureLod(materialParams_source, uv, 0.0).rgb;

        // The offsets below are in "source" texture space
        vec3 lt  = textureLodOffset(materialParams_source, uv, 0.0, ivec2(-1, -1)).rgb;
        vec3 rt  = textureLodOffset(materialParams_source, uv, 0.0, ivec2( 1, -1)).rgb;
        vec3 rb  = textureLodOffset(materialParams_source, uv, 0.0, ivec2( 1,  1)).rgb;
        vec3 lb  = textureLodOffset(materialParams_source, uv, 0.0, ivec2(-1,  1)).rgb;

        vec3 lt2 = textureLodOffset(materialParams_source, uv, 0.0, ivec2(-2, -2)).rgb;
        vec3 rt2 = textureLodOffset(materialParams_source, uv, 0.0, ivec2( 2, -2)).rgb;
        vec3 rb2 = textureLodOffset(materialParams_source, uv, 0.0, ivec2( 2,  2)).rgb;
        vec3 lb2 = textureLodOffset(materialParams_source, uv, 0.0, ivec2(-2,  2)).rgb;

        vec3 l   = textureLodOffset(materialParams_source, uv, 0.0, ivec2(-2,  0)).rgb;
        vec3 t   = textureLodOffset(materialParams_source, uv, 0.0, ivec2( 0, -2)).rgb;
        vec3 r   = textureLodOffset(materialParams_source, uv, 0.0, ivec2( 2,  0)).rgb;
        vec3 b   = textureLodOffset(materialParams_source, uv, 0.0, ivec2( 0,  2)).rgb;

        // five h4x4 boxes
        vec3 c0, c1;

        // common case
        c0  = box4x4(lt, rt, rb, lb);
        c1  = box4x4(c, l, t, lt2);
        c1 += box4x4(c, r, t, rt2);
        c1 += box4x4(c, r, b, rb2);
        c1 += box4x4(c, l, b, lb2);

        // weighted average of the five boxes
        postProcess.color.rgb = c0 * 0.5 + c1 * 0.125;
    }
}
