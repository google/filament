material {
    name : bloomDownsample9,
    parameters : [
        {
            type : sampler2d,
            name : source,
            precision: medium
        }
    ],
    variables : [
        vertex
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = uvToRenderTargetUV(postProcess.normalizedUV);
    }
}

fragment {

    void dummy(){}

    // see https://www.shadertoy.com/view/cslczj
    // 6x6 downsampling kernel implemented via 9 bilinear samples

    void postProcess(inout PostProcessInputs postProcess) {
        highp vec2 uv = variable_vertex.xy;
        highp vec2 size = vec2(1.0) / vec2(textureSize(materialParams_source, 0));

        float o  = 1.5 + 0.261629;
        float wa = 7.46602 / 32.0;
        float wb = 1.0 - wa * 2.0;
        float wab = wa * wb;
        float waa = wa * wa;
        float wbb = wb * wb;

        size *= o;

        vec3 c  = textureLod(materialParams_source, uv + vec2(0.0)            , 0.0).rgb;
        vec3 l  = textureLod(materialParams_source, uv + vec2(-size.x,    0.0), 0.0).rgb;
        vec3 r  = textureLod(materialParams_source, uv + vec2( size.x,    0.0), 0.0).rgb;
        vec3 b  = textureLod(materialParams_source, uv + vec2(    0.0,-size.y), 0.0).rgb;
        vec3 t  = textureLod(materialParams_source, uv + vec2(    0.0, size.y), 0.0).rgb;
        vec3 lb = textureLod(materialParams_source, uv + vec2(-size.x,-size.y), 0.0).rgb;
        vec3 rb = textureLod(materialParams_source, uv + vec2( size.x,-size.y), 0.0).rgb;
        vec3 lt = textureLod(materialParams_source, uv + vec2(-size.x, size.y), 0.0).rgb;
        vec3 rt = textureLod(materialParams_source, uv + vec2( size.x, size.y), 0.0).rgb;

        postProcess.color.rgb =
                (c * wbb +
                (l * wab +
                (r * wab +
                (b * wab +
                (t * wab +
                (lb * waa +
                (rb * waa +
                (lt * waa +
                (rt * waa)))))))));
    }
}
