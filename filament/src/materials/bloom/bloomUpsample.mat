material {
    name : bloomUpsample,
    parameters : [
        {
            type : sampler2d,
            name : source,
            precision: medium
        },
        {
            type : float4,
            name : resolution,
            precision: high
        },
        {
            type : float,
            name : level
        }
    ],
    variables : [
        vertex
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = postProcess.normalizedUV;
    }
}

fragment {
    void postProcess(inout PostProcessInputs postProcess) {
        float lod = materialParams.level;
        highp vec2 uv = variable_vertex.xy;

#if FILAMENT_QUALITY < FILAMENT_QUALITY_HIGH
        highp vec4 d = vec4(materialParams.resolution.zw, -materialParams.resolution.zw) * 0.5;
        vec3 c;
        c  = textureLod(materialParams_source, uv + d.zw, lod).rgb;
        c += textureLod(materialParams_source, uv + d.xw, lod).rgb;
        c += textureLod(materialParams_source, uv + d.xy, lod).rgb;
        c += textureLod(materialParams_source, uv + d.zy, lod).rgb;
        postProcess.color.rgb = c * 0.25;
#else
        vec3 c0, c1;
        c0  = textureLodOffset(materialParams_source, uv, lod, ivec2(-1, -1)).rgb;
        c0 += textureLodOffset(materialParams_source, uv, lod, ivec2( 1, -1)).rgb;
        c0 += textureLodOffset(materialParams_source, uv, lod, ivec2( 1,  1)).rgb;
        c0 += textureLodOffset(materialParams_source, uv, lod, ivec2(-1,  1)).rgb;
        c0 += 4.0 * textureLod(materialParams_source, uv, lod).rgb;
        c1  = textureLodOffset(materialParams_source, uv, lod, ivec2(-1,  0)).rgb;
        c1 += textureLodOffset(materialParams_source, uv, lod, ivec2( 0, -1)).rgb;
        c1 += textureLodOffset(materialParams_source, uv, lod, ivec2( 1,  0)).rgb;
        c1 += textureLodOffset(materialParams_source, uv, lod, ivec2( 0,  1)).rgb;
        postProcess.color.rgb = (c0 + 2.0 * c1) * (1.0 / 16.0);
#endif
    }
}
