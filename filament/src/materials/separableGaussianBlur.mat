material {
    name : separableGaussianBlur,
    parameters : [
        {
            type : sampler2d,
            name : source,
            precision: medium
        },
        {
            type : float4,
            name : resolution,
            precision: high
        },
        {
            type : float2,
            name : axis
        },
        {
            type : float,
            name : level
        },
        {
            type : int,
            name : count
        },
        {
            type : int,
            name : reinhard
        },
        {
            type : float2[32],
            name : kernel
        }
    ],
    variables : [
        vertex
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        // in the fragment shader, this is interpolated to pixel centers, but since we use
        // texel-fetch, it's not what we want. Convert from screen uv to texture uv.
        vec2 size = vec2(textureSize(materialParams_source, int(materialParams.level)));
        postProcess.vertex.xy = (postProcess.normalizedUV - 0.5 * materialParams.resolution.zw) + 0.5 / size;
    }
}

fragment {
    
    float max4(const vec4 f) {
        vec2 t = max(f.xy, f.zw);
        return max(t.x, t.y);
    }
    
    void tap(inout highp vec4 sum, const float weight, const highp vec2 position) {
        vec4 s = textureLod(materialParams_source, position, materialParams.level);
        sum += s * weight;
    }

    void tapReinhard(inout highp vec4 sum, inout float totalWeight, const float weight, const highp vec2 position) {
        vec4 s = textureLod(materialParams_source, position, materialParams.level);
        float w = weight / (1.0 + max4(s));
        totalWeight += w;
        sum += s * w;
    }

    void postProcess(inout PostProcessInputs postProcess) {
        highp vec2 uv = variable_vertex.xy;

        // we handle the center pixel separately
        highp vec4 sum = vec4(0);

        if (materialParams.reinhard != 0) {
            float totalWeight = 0.0;
            tapReinhard(sum, totalWeight, materialParams.kernel[0].x, uv);
            vec2 offset = materialParams.axis;
            for (int i = 1; i < materialParams.count; i++, offset += materialParams.axis * 2.0) {
                float k = materialParams.kernel[i].x;
                vec2 o = offset + materialParams.axis * materialParams.kernel[i].y;
                tapReinhard(sum, totalWeight, k, uv + o);
                tapReinhard(sum, totalWeight, k, uv - o);
            }
            sum *= 1.0 / totalWeight;
        } else {
            tap(sum, materialParams.kernel[0].x, uv);
            vec2 offset = materialParams.axis;
            for (int i = 1; i < materialParams.count; i++, offset += materialParams.axis * 2.0) {
                float k = materialParams.kernel[i].x;
                vec2 o = offset + materialParams.axis * materialParams.kernel[i].y;
                tap(sum, k, uv + o);
                tap(sum, k, uv - o);
            }
        }

        postProcess.color = sum;
    }
}
