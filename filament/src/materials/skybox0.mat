material {
    name : Skybox,
    parameters : [
        {
           type : int,
           name : showSun
        },
        {
           type : int,
           name : constantColor
        },
        {
           type : samplerCubemap,
           name : skybox
        },
        {
           type : float4,
           name : color
        }
    ],
    variables : [
         eyeDirection
    ],
    vertexDomain : device,
    depthWrite : false,
    shadingModel : unlit,
    variantFilter : [ skinning, shadowReceiver, vsm ],
    culling: none,
    featureLevel: 0
}

fragment {
    void material(inout MaterialInputs material) {
        prepareMaterial(material);
        vec4 sky;
        if (materialParams.constantColor != 0) {
            sky = materialParams.color;
        } else {
            sky = vec4(textureCube(materialParams_skybox, variable_eyeDirection.xyz).rgb, 1.0);
            sky.rgb *= frameUniforms.iblLuminance;
        }
        if (materialParams.showSun != 0 && frameUniforms.sun.w >= 0.0) {
            vec3 direction = normalize(variable_eyeDirection.xyz);
            // Assume the sun is a sphere
            vec3 sun = frameUniforms.lightColorIntensity.rgb *
                    (frameUniforms.lightColorIntensity.a * (4.0 * PI));
            float cosAngle = dot(direction, frameUniforms.lightDirection);
            float x = (cosAngle - frameUniforms.sun.x) * frameUniforms.sun.z;
            float gradient = pow(1.0 - saturate(x), frameUniforms.sun.w);
            sky.rgb = sky.rgb + gradient * sun;
        }
        material.baseColor = sky;
    }
}

vertex {
    void materialVertex(inout MaterialVertexInputs material) {
        material.eyeDirection.xyz = material.worldPosition.xyz;
    }
}
