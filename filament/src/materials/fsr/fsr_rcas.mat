material {
    name : fsr_rcas,
    parameters : [
        {
            type : sampler2d,
            name : color,
            precision: medium
        },
        {
            type : float4,
            name : resolution,
            precision: high
        },
        {
            type : uint4,
            name : RcasCon,
            precision: high
        }
    ],
    variables : [
        vertex
    ],
    depthWrite : false,
    depthCulling : false,
    domain: postprocess
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.normalizedUV = uvToRenderTargetUV(postProcess.normalizedUV);
        postProcess.vertex.xy = postProcess.normalizedUV * materialParams.resolution.xy;
    }
}

fragment {

    precision mediump float;
    precision highp int;

    #define A_GPU 1
    #define A_GLSL 1
    #include "ffx_a.h"
    #define FSR_RCAS_F 1
    #if !POST_PROCESS_OPAQUE
    #   define FSR_RCAS_PASSTHROUGH_ALPHA
    #endif
    #include "ffx_fsr1.h"

    AF4 FsrRcasLoadF(ASU2 p) {
        return texelFetch(materialParams_color, p, 0);
    }

    void FsrRcasInputF(inout AF1 r, inout AF1 g, inout AF1 b) { }

    void postProcess(inout PostProcessInputs postProcess) {
        highp uvec2 p = uvec2(variable_vertex.xy);

        FsrRcasF(postProcess.color.r, postProcess.color.g, postProcess.color.b,
#if !POST_PROCESS_OPAQUE
            postProcess.color.a,
#endif
            p, materialParams.RcasCon);

#if POST_PROCESS_OPAQUE
        postProcess.color.a = 1.0;
#endif
    }
}
