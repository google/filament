material {
    name : blit,
    parameters : [
        {
            type : sampler2d,
            name : color,
            precision: medium
        },
        {
            type : float4,
            name : resolution,
            precision: high
        }
    ],
    variables : [
        vertex
    ],
    depthWrite : false,
    depthCulling : false,
    domain: postprocess
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = postProcess.normalizedUV;
    }
}

fragment {
    void postProcess(inout PostProcessInputs postProcess) {
        highp vec2 uv = variable_vertex.xy; // interpolated to pixel center
        highp float du = materialParams.resolution.z;
        highp float dv = materialParams.resolution.w;
        vec4 c0, c1;
        c0  = textureLod(materialParams_color, uv + vec2(-du, -dv), 0.0);
        c0 += textureLod(materialParams_color, uv + vec2( du, -dv), 0.0);
        c0 += textureLod(materialParams_color, uv + vec2( du,  dv), 0.0);
        c0 += textureLod(materialParams_color, uv + vec2(-du,  dv), 0.0);
        c0 += 4.0 * textureLod(materialParams_color, uv, 0.0);
        c1  = textureLod(materialParams_color, uv + vec2(-du,  0.0), 0.0);
        c1 += textureLod(materialParams_color, uv + vec2( 0.0, -dv), 0.0);
        c1 += textureLod(materialParams_color, uv + vec2( du,  0.0), 0.0);
        c1 += textureLod(materialParams_color, uv + vec2( 0.0,  dv), 0.0);
        postProcess.color = (c0 + 2.0 * c1) * (1.0 / 16.0);
    }
}

