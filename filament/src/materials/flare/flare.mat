material {
    name : flare,
    parameters : [
        {
            type : sampler2d,
            name : color,
            precision: medium
        },
        {
            type : float,
            name : level,
            precision: medium
        },
        {
            type : float2,
            name : aspectRatio,
            precision: medium
        },
        {
            type : float2,
            name : threshold,
            precision: medium
        },
        {
            type : float,
            name : chromaticAberration,
            precision: medium
        },
        {
            type : float,
            name : ghostCount,
            precision: medium
        },
        {
            type : float,
            name : ghostSpacing,
            precision: medium
        },
        {
            type : float,
            name : haloRadius,
            precision: medium
        },
        {
            type : float,
            name : haloThickness,
            precision: medium
        }
    ],
    variables : [
        vertex
    ],
    outputs : [
        {
            name : color,
            target : color,
            type : float4
        }
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}


vertex {

void dummy(){ }

void postProcessVertex(inout PostProcessVertexInputs postProcess) {
    postProcess.vertex.xy = uvToRenderTargetUV(postProcess.normalizedUV);
}

}


fragment {

void dummy(){ }

float smoothstep01(float t) {
    return t * t * (3.0 - 2.0 * t);
}

float ring(float x, float c, float r) {
    return 1.0 - smoothstep01(min(abs(x - c) / r, 1.0));
}

vec3 sampleColor(vec2 uv) {
    // because we work on reduced resolution, we assume mediump uv is enough.
    float level = materialParams.level;
    float chromaticAberration = materialParams.chromaticAberration;
    // make sure to avoid divide-by-zero in normalize
    vec2 offset = normalize(0.5001 - uv) * chromaticAberration;
    return vec3(
        textureLod(materialParams_color, uv + offset, level).r,
        textureLod(materialParams_color, uv,          level).g,
        textureLod(materialParams_color, uv - offset, level).b
    );
}

vec3 ghosts(vec2 vertex_uv) {
    // because we work on reduced resolution, we assume mediump uv is enough.
    float ghostSpacing = materialParams.ghostSpacing;
    float ghostCount = materialParams.ghostCount;
    float threshold = materialParams.threshold.x;
    vec2 uv = 1.0 - vertex_uv;
    vec2 v = (0.5 - uv) * ghostSpacing;
    vec3 color = vec3(0.0);
    for (float i = 0.0; i < ghostCount; i += 1.0) {
        vec2 suv = fract(uv + v * i);
        vec3 s = sampleColor(suv);
        s = clamp(s - threshold, 0.0, 1.0);
        color += s;
    }
    return color;
}

vec3 halo(vec2 uv) {
    float haloRadius = materialParams.haloRadius;
    float haloThickness = materialParams.haloThickness;
    float threshold = materialParams.threshold.y;
    float2 aspectRatio = materialParams.aspectRatio;

    // make sure to avoid divide-by-zero in normalize
    vec2 v = vec2(0.5001) - uv;
    // handle aspect ratio
    v.x *= aspectRatio.x;
    v = normalize(v);
    v.x *= aspectRatio.y;

    vec3 s = sampleColor(uv + v * haloRadius);
    s = clamp(s - threshold, 0.0, 1.0);

    vec2 uvWeight = (uv - vec2(0.5, 0.0)) * vec2(aspectRatio.x, 1.0) + vec2(0.5, 0.0);
    float d = distance(uvWeight, vec2(0.5));
    float weight = ring(d, haloRadius, haloThickness);
    return s * weight;
}

/*
 * Screen space lens flare, greatly inspired from John Chapman's 2017 blog post
 * https://john-chapman.github.io/2017/11/05/pseudo-lens-flare.html
 */
void postProcess(inout PostProcessInputs postProcess) {
    // because we work on reduced resolution, we assume mediump uv is enough.
    vec2 uv = variable_vertex.xy;
    vec3 color = vec3(0.0);
    if (materialParams.ghostCount > 0.0) {
        color += ghosts(uv);
    }
    if (materialParams.haloThickness > 0.0) {
        color += halo(uv);
    }
    postProcess.color = vec4(color, 1.0);
}

}