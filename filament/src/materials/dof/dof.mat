material {
    name : dof,
    parameters : [
        {
           type : sampler2d,
           name : color,
           precision: medium
        },
        {
           type : sampler2d,
           name : colorLinear,
           precision: medium
        },
        {
           type : sampler2d,
           name : coc,
           precision: medium
        },
        {
           type : sampler2d,
           name : tiles,
           precision: medium
        },
        {
           type : float2,
           name : cocToTexelScale,
           precision: high
        },
        {
           type : float,
           name : cocToPixelScale,
           precision: medium
        },
        {
            type : float,
            name : bokehAngle,
        },
        {
           type : float4,
           name : ringCounts,
           precision: medium
        }
    ],
    outputs : [
        {
            name : color,
            target : color,
            type : float4
        },
        {
            name : alpha,
            target : color,
            type : float
        }
    ],
    variables : [
        vertex
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = uvToRenderTargetUV(postProcess.normalizedUV);
    }
}

fragment {

#include "dofUtils.fs"

#define DOF_DIAPHRAGM_CIRCLE            0
#define DOF_DIAPHRAGM_STRAIGHT_BLADES   1
#define DOF_DIAPHRAGM                   DOF_DIAPHRAGM_CIRCLE

// Enabled by default. Mipmaped taps look a lot better, but do cause some
// aliasing issues which force us to set all sample weights to 1.0
// This is here mostly for debugging.
#define KERNEL_USE_MIPMAP     1

// Noise is necessary and even more so when KERNEL_USE_MIPMAP is enabled.
// This is here mostly for debugging.
#define KERNEL_USE_NOISE      1


void dummy(){}

struct NoiseState {
    float randomUniformDiskRadius;
    vec2  randomDisk;
};

// # of sample w.r.t. ring count and density of 8
//  3 rings :   25 ( 5^2 grid)
//  4 rings :   49 ( 7^2 grid)
//  5 rings :   81 ( 9^2 grid)
// 17 rings : 1089 (33^2 grid) -- maximum needed for a CoC of 32

float ringCountForeground() {
    return materialParams.ringCounts[0];
}
float ringCountBackground() {
    return materialParams.ringCounts[1];
}
float ringCountFast() {
    return materialParams.ringCounts[2];
}

float sampleCount(float ringCount) {
    float s = (ringCount * 2.0 - 1.0);
    return s * s;
}

float computeNeededRings(float kernelSizeInPixel) {
    return ceil(kernelSizeInPixel + 0.5);
}

float getMipLevel(float ringCount, float kernelSizeInPixels) {
#if KERNEL_USE_MIPMAP
    // note: the 0.5 is to convert from highres to our downslampled texture
    float ringDistanceInTexels = kernelSizeInPixels * rcp(ringCount - 0.5);
    float mip = log2(ringDistanceInTexels);

    // We should round-up to avoid too large gaps in the kernel. Small gaps are filled by the
    // median pass. With round() below + noise, most gaps are handled by the median pass,
    // and the quality is much better overall.

#if FILAMENT_QUALITY < FILAMENT_QUALITY_HIGH
    // on mobile, the mip level is not used in computations in the shader,
    // so we just let the texture unit pick the the "nearest" mipmap level.
#else
    mip = max(0.0, floor(mip + 0.5));
#endif

    return mip;
#else
    return 0.0;
#endif
}

float sampleWeight(float coc, float mip) {
    // The contribution of sample is inversely proportional to *its* area
    // (the larger area, the fainter it is).
    // In theory this factor should be 1 / pi * radius^2, however 1/pi is a constant, and
    // because we divide by the total weight eventually, it can be ommited, in fact, any
    // constant can be used. Here we use MAX_COC_RADIUS * MAX_COC_RADIUS instead of 1/pi,
    // because this allows us to fit in mediump precision.

    // The high resolution pixel radius is sqrt(2) * 0.5.
    // x2 to scale to 1/4 res, x 2^mip for the current mip.
    // ^2 for the area.
#if FILAMENT_QUALITY < FILAMENT_QUALITY_HIGH
    const float pixelRadiusSquared = 2.0;   // (sqrt(2) * 0.5 * 2.0)^2
#else
    float pixelRadiusSquared = 2.0 * pow(2.0, mip);     // 2^(mip+1)
#endif
    return (MAX_COC_RADIUS * MAX_COC_RADIUS) / (max(coc * coc, pixelRadiusSquared));
}

float intersection(float border, float absCoc, float mip) {
    // there is very little visible difference, so use the cheaper version on mobile
#if FILAMENT_QUALITY < FILAMENT_QUALITY_HIGH
    return saturate((absCoc - border) + 0.5);
#else
    return saturate((absCoc - border) * pow(0.5, mip) + 0.5);
#endif
}

highp vec2 diaphragm(highp vec2 center, vec2 offset) {
#if DOF_DIAPHRAGM == DOF_DIAPHRAGM_CIRCLE
    return center + offset;
#elif DOF_DIAPHRAGM == DOF_DIAPHRAGM_STRAIGHT_BLADES
    // this could be eliminated with a LUT
    const float bladeCount = 6.0;
    const float K = cos(0.5 / bladeCount * (2.0 * PI));
    float angle = atan(offset.y, offset.x) + materialParams.bokehAngle;
    float blade = floor(angle / (2.0 * PI) * bladeCount);
    float bladeAngle = (blade + 0.5) / bladeCount * (2.0 * PI);
    float s = K / cos(angle - bladeAngle);
    return center + s * offset;
#endif
}

/*
 * Background (CoC > 0) field
 *
 * We use a lot of techniques described in:
 * "Life of a Bokeh" by Guillaume Abadie, SIGGRAPH 2018
 */

// Adreno drivers don't seem to support precision qualifiers on member of a structure,
// they are simply ignored. On the other hand, Mali drivers don't seem to honor the precision
// qualifier around a struct -- so we need to do both.
precision highp float;

struct Bucket {
    highp vec4 c;     // accumulated, weighted color
    highp float cw;   // accumulated weight
    float o;          // # of miss for the ring
    float coc;        // accumulated, weighted coc
};

precision mediump float;

struct Sample {
    vec4 s;         // sample color
    float coc;      // sample coc
    float inLayer;  // whether is sample is in the considered layer
};

void initBucket(out Bucket ring) {
    ring.c = vec4(0.0);
    ring.cw = 0.0;
    ring.o = 0.0;
    ring.coc = 0.0;
}

void initRing(float i, float ringCount, float kernelSize, vec2 noise,
        out float offset, out float count, out mat2 r, out vec2 p) {
    float radius = (kernelSize / (ringCount - 0.5)) * i;

    // We want to create a (2k+1)(2k+1) box, that is a n*n grid with n odd.
    // Each "ring" is the outside layer of that box. So ring 0 obviously is the 1x1 box,
    // ring 1 is the 3x3 box, which has 8 samples on its outside layer. This is where the 8 below
    // comes from, then all subsequent rings, are built from ring 1.
    // Each box is then "morphed" to a circle, itself morphed to the shape we want for the bokeh
    // (see diaphragm()).
    count = 8.0 * i;    // this is never called with i == 0

    float inc = 2.0 * PI / count;
    vec2 t = vec2(cos(inc), sin(inc));
    r = mat2(t.x, t.y, -t.y, t.x);

    float firstSamplePosition = mod(i, 2.0) * 0.5 * inc;
    p = radius * vec2(cos(firstSamplePosition), sin(firstSamplePosition));

    // it might be okay to do this only for the center sample (i.e.: offset = radius instead)
    offset = length(p + noise);
}

void mergeRings(inout Bucket curr, inout Bucket prev, float count) {
    if (curr.cw >= MEDIUMP_FLT_MIN) {
        // "Life of a Bokeh", SIGGRAPH 2018 -- slide 32
        // How much the current ring is occluding the previous ring -- we estimate this based
        // on the average CoC of both rings.
        float currCocAverage = curr.coc * rcp(curr.cw);
        float prevCocAverage = prev.coc * rcp(prev.cw);
        float occluded = saturate(prevCocAverage - currCocAverage);

        // Average opacity of current ring is 1.0 - the average miss count
        float currentRingOpacity = 1.0 - curr.o * rcp(count);

        // Opacity of previous ring
        float previousRingWeight = 0.0;
        if (prev.cw > MEDIUMP_FLT_MIN) {
            previousRingWeight = 1.0 - currentRingOpacity * occluded;
        }

        // merge current ring into previous ring
        prev.c   = prev.c   * previousRingWeight + curr.c;
        prev.coc = prev.coc * previousRingWeight + curr.coc;
        prev.cw  = prev.cw  * previousRingWeight + curr.cw;
    }
}

void accumulate(inout Bucket curr, inout Bucket prev, Sample tap,
        float radius, float border, float mip, bool first) {
    float inLayer = tap.inLayer;
    float coc = abs(tap.coc);
    float w = inLayer * intersection(radius, coc, mip) * sampleWeight(coc, mip);

    // Samples that have a CoC larger than the ring radius belong to the previous ring.
    // Samples that have a CoC similar to the ring radius belong to the current ring.
    // Note: it's not possible to have a sample with CoC much smaller that the ring radius,
    //       because, by definition, it wouldn't intersect with the kernel center.
    float inPrevious = saturate(coc - border + 0.5);

    if (first) { // (this test is always inlined)
        // The outmost ring always accumulate to 'curr'.
        prev.c   += w * tap.s;
        prev.coc += w * coc;
        prev.cw  += w;
        prev.o   += inPrevious;
    } else {
        float inCurrent = 1.0 - inPrevious;
        float currWeight = w * inCurrent;
        float prevWeight = w * inPrevious;

        curr.c   += currWeight * tap.s;
        curr.coc += currWeight * coc;
        curr.cw  += currWeight;
        curr.o   += inPrevious;

        prev.c   += prevWeight * tap.s;
        prev.coc += prevWeight * coc;
        prev.cw  += prevWeight;
    }
}

void accumulateBackground(inout Bucket curr, inout Bucket prev, highp vec2 pos,
        float radius, float border, float mip, bool first) {
    Sample tap;
    tap.s = textureLod(materialParams_color, pos, mip);
    tap.coc = textureLod(materialParams_coc, pos, mip).r;
    tap.inLayer = isBackground(tap.coc);
    accumulate(curr, prev, tap, radius, border, mip, first);
}

void accumulateBackgroundMirror(inout Bucket curr, inout Bucket prev,
        highp vec2 center, vec2 offset,
        float radius, float border, float mip, bool first) {
    accumulateBackground(curr, prev, diaphragm(center,  offset), radius, border, mip, first);
    accumulateBackground(curr, prev, diaphragm(center, -offset), radius, border, mip, first);
}

void accumulateBackgroundCenter(inout Bucket prev,
        highp vec2 pos, float ringCount,
        float kernelSize, float noiseRadius, float mip) {
    Bucket curr;
    initBucket(curr);
    float border = (kernelSize / (ringCount - 0.5)) * 0.5;
    // the ring radius is zero here, but the intersection radius is not when we add noise, this
    // seems to make a visible difference on edges
    accumulateBackground(curr, prev, pos, noiseRadius, border, mip, false);
    mergeRings(curr, prev, 1.0);
}

void accumulateRing(inout Bucket prev, float index, float ringCount,
        float kernelSize, vec2 noise, highp vec2 uvCenter,
        highp vec2 cocToTexelScale, float mip, bool first) {

    // we accumulate the larger rings first
    float i = (ringCount - 1.0) - index;

    Bucket curr;
    if (!first) { // (this test is always inlined)
        // curr is not used for the first ring
        initBucket(curr);
    }

    float count;
    float radius;
    vec2 p;
    mat2 r;
    initRing(i, ringCount, kernelSize, noise, radius, count, r, p);

    float border = (kernelSize / (ringCount - 0.5)) * (i + 0.5);
    for (float j = 0.0; j < count; j += 2.0) {
        accumulateBackgroundMirror(curr, prev, uvCenter, p * cocToTexelScale, radius, border, mip, first);
        p = r * p;
    }

    if (!first) { // (this test is always inlined)
        // mergeRings just ends-up copying curr to prev the first time, so we skip that
        // entirely, and we fill prev directly.
        mergeRings(curr, prev, count);
    }
}

/*
 * Foreground (CoC < 0) field
 *
 * Here implement the 2-layer accumultaion technique described in
 * "Next Generation Post Processing in Call of Duty Advanced Warfare" by J. Jimenez
 * TODO: Adapt Unreal's ring binning for the foreground field
 */

struct Layer {
    vec4 color;
    float weight;
};

float computeLayer(float coc, vec2 tiles) {
    const float invTransitionSize = 1.0 / 2.0;
    const float frontLayerCocSize = 2.0;
    return 	saturate((coc - tiles.r - frontLayerCocSize) * invTransitionSize);
}

float foregroundFadding(float coc) {
    return saturate(abs(coc) - (MAX_IN_FOCUS_COC - 1.0));
}

void accumulateForeground(inout Layer layer[2], vec2 tiles,
        highp vec2 pos, float border, float mip) {
    float coc = textureLod(materialParams_coc, pos, mip).r;
    vec4 s = textureLod(materialParams_color, pos, mip);

    float inLayer = isForeground(coc) * foregroundFadding(coc);
    float i = intersection(border, abs(coc), mip) * sampleWeight(coc, mip);
    float w = i * inLayer;

    float inBackWeight  = w * computeLayer(coc, tiles);
    float inFrontWeight = w - inBackWeight;
    layer[0].color  += inFrontWeight * s;
    layer[0].weight += inFrontWeight;
    layer[1].color  += inBackWeight * s;
    layer[1].weight += inBackWeight;
}

void accumulateForegroundCenter(inout Layer layer[2], vec2 tiles,
        highp vec2 pos, float border, float mip) {
    accumulateForeground(layer, tiles, pos, border, mip);
}

void accumulateForegroundMirror(inout Layer layer[2], vec2 tiles,
        highp vec2 center, vec2 offset, float border, float mip) {
    // The code below is equivalent to:
    //  accumulateForeground(layer, tiles, diaphragm(center,  offset), border, mip);
    //  accumulateForeground(layer, tiles, diaphragm(center, -offset), border, mip);
    //  return;
    // but selects the min coc of opposite samples as a way to guess the color occluded by
    // the geometry.

    highp vec2 pos0 = diaphragm(center, offset);
    float coc0 = textureLod(materialParams_coc, pos0, mip).r;
    vec4 s0 = textureLod(materialParams_color, pos0, mip);

    highp vec2 pos1 = diaphragm(center, -offset);
    float coc1 = textureLod(materialParams_coc, pos1, mip).r;
    vec4 s1 = textureLod(materialParams_color, pos1, mip);

    float coc = min(coc0, coc1);
    float inLayer = isForeground(coc) * foregroundFadding(coc);
    float i = intersection(border, abs(coc), mip) * sampleWeight(coc, mip);
    float w = i * inLayer;

    // for better results in mediump it's better to add s0 amd s1 first
    float inBackWeight  = w * computeLayer(coc, tiles);
    float inFrontWeight = w - inBackWeight;
    layer[1].color  += inBackWeight  * (s0 + s1);
    layer[1].weight += inBackWeight  * 2.0;
    layer[0].color  += inFrontWeight * (s0 + s1);
    layer[0].weight += inFrontWeight * 2.0;
}

/*
 * Tile type processing
 */

void fastTile(inout vec4 color, inout float alpha,
        highp vec2 uv, vec2 tiles, NoiseState noiseState) {
    highp vec2 cocToTexelScale = materialParams.cocToTexelScale;
    float cocToPixelScale = materialParams.cocToPixelScale;

    // The whole tile has mostly the same CoC
    float kernelSize = (abs(tiles.r) + abs(tiles.g)) * 0.5;
    float ringCountFast = min(ringCountFast(), computeNeededRings(kernelSize * cocToPixelScale));
    float mip = getMipLevel(ringCountFast, kernelSize * cocToPixelScale);
    vec2 noise = vec2(0.0);

#if KERNEL_USE_NOISE
    noise = noiseState.randomDisk *
            (kernelSize * noiseState.randomUniformDiskRadius * rcp(ringCountFast - 0.5));
#endif

    highp vec2 uvCenter = uv + noise * cocToTexelScale;

    color = textureLod(materialParams_colorLinear, uvCenter, mip);
    for (float i = 1.0; i < ringCountFast; i += 1.0) {
        float radius;
        float count;
        vec2 p;
        mat2 r;
        initRing(i, ringCountFast, kernelSize, noise, radius, count, r, p);
        // we must use this temporary in order to accomodate mediump precision
        vec4 t = vec4(0.0);
        for (float j = 0.0; j < count; j += 2.0) {
            t += textureLod(materialParams_colorLinear,
                    diaphragm(uvCenter,  p * cocToTexelScale), mip)
               + textureLod(materialParams_colorLinear,
                    diaphragm(uvCenter, -p * cocToTexelScale), mip);
            p = r * p;
        }
        color += t;
    }
    alpha = cocToAlpha(kernelSize);
    color *= rcp(sampleCount(ringCountFast));
    color = min(vec4(MEDIUMP_FLT_MAX), color);
}

void foregroundTile(inout vec4 foreground, inout float fgOpacity,
        highp vec2 uv, vec2 tiles, NoiseState noiseState) {
    highp vec2 cocToTexelScale = materialParams.cocToTexelScale;
    float cocToPixelScale = materialParams.cocToPixelScale;

    // Here we know that tiles.r < 0, by definition of a foreground tile.
    // For a foreground tile, the kernel size is the largest CoC radius of the whole tile.
    float kernelSize = -tiles.r;
    float ringCountGather = min(ringCountForeground(), computeNeededRings(kernelSize * cocToPixelScale));
    float mip = getMipLevel(ringCountGather, kernelSize * cocToPixelScale);
    vec2 noise = vec2(0.0);

#if KERNEL_USE_NOISE
    noise = (noiseState.randomDisk) *
            (kernelSize * noiseState.randomUniformDiskRadius * rcp(ringCountGather - 0.5));
#endif

    highp vec2 uvCenter = uv + noise * cocToTexelScale;

    Layer layer[2];
    layer[0].color = vec4(0.0);
    layer[0].weight = 0.0;
    layer[1].color = vec4(0.0);
    layer[1].weight = 0.0;

    // the center sample is handled separately, since it's by itself
    accumulateForegroundCenter(layer, tiles, uvCenter, 0.0, mip);

    for (float i = 1.0; i < ringCountGather; i += 1.0) {

        float radius;
        float count;
        vec2 p;
        mat2 r;

        initRing(i, ringCountGather, kernelSize, noise, radius, count, r, p);

        for (float j = 0.0; j < count; j += 2.0) {
            accumulateForegroundMirror(layer, tiles,
            uvCenter, p * cocToTexelScale, radius, mip);
            p = r * p;
        }
    }

    // Area of all samples in the kernel
    float kernelArea = sampleWeight(kernelSize * ((ringCountGather + 0.5) / ringCountGather), mip);
    float frontLayerOpacity = saturate(layer[0].weight * rcp(kernelArea * sampleCount(ringCountGather)));
    float backLayerOpacity  = saturate(layer[1].weight * rcp(kernelArea * sampleCount(ringCountGather)));
    vec4 front = layer[0].color * rcpOrZero(layer[0].weight) * frontLayerOpacity;
    vec4 back  = layer[1].color * rcpOrZero(layer[1].weight) * backLayerOpacity;
    foreground = front + back * (1.0 - frontLayerOpacity);
    fgOpacity = 1.0 - (1.0 - frontLayerOpacity) * (1.0 - backLayerOpacity);
    // foreground here is already premultiplied by fgOpacity!
}

void backgroundTile(inout vec4 background, inout float bgOpacity,
        highp vec2 uv, vec2 tiles, NoiseState noiseState) {
    highp vec2 cocToTexelScale = materialParams.cocToTexelScale;
    float cocToPixelScale = materialParams.cocToPixelScale;

    // we select a ring cound per tile, to avoid divergence between pixels
    float ringCountGather = min(ringCountBackground(), computeNeededRings(tiles.g * cocToPixelScale));

    float centerCoc  = textureLod(materialParams_coc, uv, 0.0).r;
    float kernelSize = abs(centerCoc);
    float mip = getMipLevel(ringCountGather, kernelSize * cocToPixelScale);
    float noiseRadius = 0.0;
    vec2 noise = vec2(0.0);

#if KERNEL_USE_NOISE
    noiseRadius = kernelSize * noiseState.randomUniformDiskRadius * rcp(ringCountGather - 0.5);
    noise = noiseState.randomDisk * noiseRadius;
#endif

    highp vec2 uvCenter = uv + noise * cocToTexelScale;

    Bucket prev;
    initBucket(prev);

    accumulateRing(prev, 0.0, ringCountGather, kernelSize, noise, uvCenter, cocToTexelScale, mip, true);
    for (float i = 1.0; i < ringCountGather - 1.0 ; i += 1.0) {
        accumulateRing(prev, i, ringCountGather, kernelSize, noise, uvCenter, cocToTexelScale, mip, false);
    }
    accumulateBackgroundCenter(prev, uvCenter, ringCountGather, kernelSize, noiseRadius, mip);

    float kernelArea = sampleWeight(kernelSize * ((ringCountGather + 0.5) / ringCountGather), mip);
    bgOpacity = saturate(prev.cw * rcp(kernelArea));
#if FILAMENT_QUALITY == FILAMENT_QUALITY_HIGH
    bgOpacity *= smoothstep(MAX_IN_FOCUS_COC, 2.0, kernelSize);
#endif
    background = prev.c * (rcpOrZeroHighp(prev.cw) * bgOpacity);
}

void postProcess(inout PostProcessInputs postProcess) {
    vec2 tiles = textureLod(materialParams_tiles, variable_vertex.xy, 0.0).rg;

    /*
     * Tiles that are neither foreground or background (in focus) can be skipped
     */

    if (isTrivialTile(tiles)) {
        // The whole tile is is focus
        postProcess.color = vec4(0.0);
        postProcess.alpha = 0.0;
        return;
    }

    highp vec2 uv = variable_vertex.xy;
    vec4 foreground = vec4(0.0);
    vec4 background = vec4(0.0);
    NoiseState noiseState;

#if KERNEL_USE_NOISE
    // A good random generator is essential, this one is okay.
    highp vec2 fragCoords = gl_FragCoord.xy;
    float randomAngle = interleavedGradientNoise(fragCoords) * (2.0 * PI);
    float random01 = interleavedGradientNoise(fragCoords * vec2(5099.0, 3499.0)); // large primes seem to work ok
    noiseState.randomUniformDiskRadius = 0.5 * sqrt(random01);
    noiseState.randomDisk = vec2(cos(randomAngle), sin(randomAngle));
#endif

    /*
     * Fast tiles have the same CoC everywhere
     */

    if (isFastTile(tiles)) {
        vec4 color;
        float alpha;
        fastTile(color, alpha, uv, tiles, noiseState);
        //color.b += 0.1;

#if POST_PROCESS_OPAQUE
        // kill the work performed above
        color.a = 1.0;
#endif
        postProcess.color = color * alpha;
        postProcess.alpha = alpha;
        return;
    }

    /*
     * Then process the slow foreground / background tiles
     */

    float fgOpacity = 0.0;
    float bgOpacity = 0.0;

    if (isForegroundTile(tiles)) {
        foregroundTile(foreground, fgOpacity, uv, tiles, noiseState);
        //foreground.r += 0.1;
    }

    if (isBackgroundTile(tiles)) {
        backgroundTile(background, bgOpacity, uv, tiles, noiseState);
        //background.g += 0.1;
    }

    // "hole filling correction for in-focus" described in "Life of a Bokeh", on slide 80.
    // TODO: make this a quality setting
    if (fgOpacity > 0.0 && fgOpacity < 1.0 && bgOpacity == 0.0) {
        // this happens on very few pixels
        float centerCoc = textureLod(materialParams_coc, uv, 0.0).r;
        float correctedOpacity = max(fgOpacity, cocToAlpha(centerCoc));
        float updateOpacity = correctedOpacity / fgOpacity;
        foreground *= updateOpacity;
        fgOpacity = correctedOpacity;
        //foreground.rg += 0.1;
    }

#if POST_PROCESS_OPAQUE
    // kill the work performed above
    foreground.a = 1.0;
    background.a = 1.0;
#endif

    // composite the foreground and background layers together.
    // the downside of doing this is that we couldn't use a different upscaler for each
    // layer, but this is a lot less costly
    postProcess.color = foreground + (1.0 - fgOpacity) * background;
    postProcess.color = min(vec4(MEDIUMP_FLT_MAX), postProcess.color);
    postProcess.alpha = fgOpacity  + (1.0 - fgOpacity) * bgOpacity;
}

}
