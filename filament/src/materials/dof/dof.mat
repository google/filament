material {
    name : dof,
    parameters : [
        {
           type : sampler2d,
           name : foreground,
           precision: medium
        },
        {
           type : sampler2d,
           name : foregroundLinear,
           precision: medium
        },
        {
           type : sampler2d,
           name : background,
           precision: medium
        },
        {
           type : sampler2d,
           name : cocFgBg,
           precision: medium
        },
        {
           type : sampler2d,
           name : tiles,
           precision: medium
        },
        {
           type : float2,
           name : cocToTexelOffset,
           precision: high
        },
        {
           type : float4,
           name : uvscale,
           precision: high
        },
        {
           type : float,
           name : bokehAngle,
        }
    ],
    outputs : [
        {
            name : color,
            target : color,
            type : float4
        },
        {
            name : alpha,
            target : color,
            type : float
        }
    ],
    variables : [
        vertex
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex = postProcess.normalizedUV.xyxy * materialParams.uvscale;
    }
}

fragment {

#include "dofUtils.fs"

#define DOF_DIAPHRAGM_CIRCLE            0
#define DOF_DIAPHRAGM_STRAIGHT_BLADES   1
#define DOF_DIAPHRAGM                   DOF_DIAPHRAGM_CIRCLE

// # of sample w.r.t. ring count and density of 8
// 3 rings : 25
// 4 rings : 49
// 5 rings : 81

// don't change density
#define RING_DENSITY        8

#if defined(TARGET_MOBILE)
#define RING_COUNT_GATHER   3
#define RING_COUNT_FAST     3
#else
#define RING_COUNT_GATHER   4
#define RING_COUNT_FAST     4
#endif

// Enabled by default. Mipmaped taps look a lot better, but do cause some
// aliasing issues which force us to set all sample weights to 1.0
// This is here mostly for debugging.
#define KERNEL_USE_MIPMAP     1

// Noise is necessary and even more so when KERNEL_USE_MIPMAP is enabled.
// This is here mostly for debugging.
#define KERNEL_USE_NOISE      1


void dummy(){}

float sampleCount(const float ringCount) {
    const float ringDensity = float(RING_DENSITY);
    return (ringDensity * ringCount * (ringCount - 1.0)) * 0.5 + 1.0;
}

float sampleWeight(const float coc, const float mip) {
#if KERNEL_USE_MIPMAP
    // with mipmapping this creates severe aliasing artifacts
    return 1.0;
#else
    // The contribution of sample is inversely proportional to *it's* area
    // (the larger area, the fainter it is).
    // In theory this factor should be 1 / pi * radius^2, however 1/pi is a constant, and
    // because we divide by the total weight eventually, it can be ommited, in fact, any
    // constant can be used. Here we use MAX_COC_RADIUS * MAX_COC_RADIUS instead of 1/pi,
    // because this allows us to fit in mediump precision.

    // The high resolution pixel radius is sqrt(2) * 0.5.
    // x2 to scale to 1/4 res, x 2^mip for the current mip.
    // ^2 for the area.
#if defined(TARGET_MOBILE)
    const float pixelRadiusSquared = 2.0;   // (sqrt(2) * 0.5 * 2.0)^2
#else
    float pixelRadiusSquared = pow(2.0, mip);
#endif
    return (MAX_COC_RADIUS * MAX_COC_RADIUS) / (max(coc * coc, pixelRadiusSquared));
#endif
}

float intersection(const float border, const float absCoc, const float mip) {
    // there is very little visible difference, so use the cheaper version on mobile
#if defined(TARGET_MOBILE)
    return saturate((absCoc - border) + 0.5);
#else
    return saturate((absCoc - border) * pow(0.5, mip) + 0.5);
#endif
}

float rcp(const float x) {
    return 1.0 / x;
}

highp vec2 diaphragm(const highp vec2 center, const vec2 offset) {
#if DOF_DIAPHRAGM == DOF_DIAPHRAGM_CIRCLE
    return center + offset;
#elif DOF_DIAPHRAGM == DOF_DIAPHRAGM_STRAIGHT_BLADES
    // this could be eliminated with a LUT
    const float bladeCount = 6.0;
    const float K = cos(0.5 / bladeCount * (2.0 * PI));
    float angle = atan(offset.y, offset.x) + materialParams.bokehAngle;
    float blade = floor(angle / (2.0 * PI) * bladeCount);
    float bladeAngle = (blade + 0.5) / bladeCount * (2.0 * PI);
    float s = K / cos(angle - bladeAngle);
    return center + s * offset;
#endif
}

/*
 * We use a lot of techniques described in:
 * "Life of a Bokeh" by Guillaume Abadie, SIGGRAPH 2018
 */

struct Bucket {
    vec4 c;     // accumulated, weighted color
    float cw;   // accumulated weight
    float o;    // # of miss for the ring
    float coc;  // accumulated, weighted coc
};

struct Sample {
    vec4 s;                 // sample color
    float coc;              // sample coc
};

void initBucket(out Bucket ring) {
    ring.c = vec4(0.0);
    ring.cw = 0.0;
    ring.o = 0.0;
    ring.coc = 0.0;
}

void initRing(const float i, const float ringCount, const float kernelSize, const vec2 noise,
        out float offset, out float count, out mat2 r, out vec2 p) {
    const float ringDensity = float(RING_DENSITY);
    float radius = (kernelSize / (ringCount - 0.5)) * i;

    // this is never called with i == 0
    count = ringDensity * i;

    float inc = 2.0 * PI / count;
    vec2 t = vec2(cos(inc), sin(inc));
    r = mat2(t.x, t.y, -t.y, t.x);

    float firstSamplePosition = mod(i, 2.0) * 0.5 * inc;
    p = radius * vec2(cos(firstSamplePosition), sin(firstSamplePosition));

    // it might be okay to do this only for the center sample (i.e.: offset = radius instead)
    offset = length(p + noise * kernelSize);
}

/*
 * Backgorund accumulator
 */

void mergeRings(inout Bucket curr, inout Bucket prev, const float count) {
    if (curr.cw >= MEDIUMP_FLT_MIN) {
        // "Life of a Bokeh", SIGGRAPH 2018 -- slide 32
        // How much the current ring is occluding the previous ring -- we estimate this based
        // on the average CoC of both rings.
        float currCocAverage = curr.coc * rcp(curr.cw);
        float prevCocAverage = prev.coc * rcp(prev.cw);
        float occluded = saturate(prevCocAverage - currCocAverage);

        // Average opacity of current ring is 1.0 - the average miss count
        float currentRingOpacity = 1.0 - curr.o * rcp(count);

        // Opacity of previous ring
        float previousRingWeight = 0.0;
        if (prev.cw > MEDIUMP_FLT_MIN) {
            previousRingWeight = 1.0 - currentRingOpacity * occluded;
        }

        // merge current ring into previous ring
        prev.c   = prev.c   * previousRingWeight + curr.c;
        prev.coc = prev.coc * previousRingWeight + curr.coc;
        prev.cw  = prev.cw  * previousRingWeight + curr.cw;
    }
}

void accumulate(inout Bucket curr, inout Bucket prev, const Sample tap,
        const float radius, const float border, const float mip, const bool first) {
    float inLayer = isBackground(tap.coc);
    float coc = abs(tap.coc);
    float w = intersection(radius, coc, mip) * sampleWeight(coc, mip) * inLayer;

    // Samples that have a CoC larger than the ring radius belong to the previous ring.
    // Samples that have a CoC similar to the ring radius belong to the current ring.
    // Note: it's not possible to have a sample with CoC much smaller that the ring radius,
    //       because, by definition, it wouldn't intersect with the kernel center.
    float inPrevious = saturate(coc - border + 0.5);

    if (first) { // (this test is always inlined)
        // The outmost ring always accumulate to 'curr'.
        prev.c   += w * tap.s;
        prev.coc += w * coc;
        prev.cw  += w;
        prev.o   += inPrevious;
    } else {
        float inCurrent = 1.0 - inPrevious;
        float currWeight = w * inCurrent;
        float prevWeight = w * inPrevious;

        curr.c   += currWeight * tap.s;
        curr.coc += currWeight * coc;
        curr.cw  += currWeight;
        curr.o   += inPrevious;

        prev.c   += prevWeight * tap.s;
        prev.coc += prevWeight * coc;
        prev.cw  += prevWeight;
    }
}

void accumulateBackground(inout Bucket curr, inout Bucket prev, const highp vec2 pos,
        const float radius, const float border, const float mip, const bool first) {
    Sample tap;
    tap.s = textureLod(materialParams_foreground, pos, mip);
    tap.coc = textureLod(materialParams_cocFgBg, pos, mip).r;
    accumulate(curr, prev, tap, radius, border, mip, first);
}

void accumulateBackgroundMirror(inout Bucket curr, inout Bucket prev,
        const highp vec2 center, const vec2 offset,
        const float radius, const float border, const float mip, const bool first) {
    accumulateBackground(curr, prev, diaphragm(center,   offset), radius, border, mip, first);
    accumulateBackground(curr, prev, diaphragm(center,  -offset), radius, border, mip, first);
}

void accumulateBackgroundCenter(inout Bucket prev,
        const highp vec2 pos, const float ringCount, const float kernelSize, const float noiseRadius, const float mip) {
    Bucket curr;
    initBucket(curr);
    float border = (kernelSize / (ringCount - 0.5)) * 0.5;
    // the ring radius is zero here, but the intersection radius is not when we add noise, this
    // seems to make a visible difference on edges
    float radius = noiseRadius * kernelSize;
    accumulateBackground(curr, prev, pos, radius, border, mip, false);
    mergeRings(curr, prev, 1.0);
}

void accumulateRing(inout Bucket prev, const float index, const float ringCount, const float kernelSize, const vec2 noise,
        const highp vec2 uvCenter, const highp vec2 cocToTexelOffset, const float mip, const bool first) {

    // we accumulate the larger rings first
    float i = (ringCount - 1.0) - index;

    Bucket curr;
    if (!first) { // (this test is always inlined)
        // curr is not used for the first ring
        initBucket(curr);
    }

    float count;
    float radius;
    vec2 p;
    mat2 r;
    initRing(i, ringCount, kernelSize, noise, radius, count, r, p);

    float border = (kernelSize / (ringCount - 0.5)) * (i + 0.5);
    for (float j = 0.0; j < count; j += 2.0) {
        accumulateBackgroundMirror(curr, prev, uvCenter, p * cocToTexelOffset, radius, border, mip, first);
        p = r * p;
    }

    if (!first) { // (this test is always inlined)
        // mergeRings just ends-up copying curr to prev the first time, so we skip that
        // entirely, and we fill prev directly.
        mergeRings(curr, prev, count);
    }
}

/*
 * Foreground accumulator
 */

void accumulateForeground(inout vec4 foreground, inout float opacity, inout float i,
        const highp vec2 pos, const float border, const float mip) {
    float coc = textureLod(materialParams_cocFgBg, pos, mip).r;
    vec4 s = textureLod(materialParams_foreground, pos, mip);
    float inLayer = isForeground(coc);
    float o = cocToAlpha(coc) * inLayer;
    float w = intersection(border, abs(coc), mip) * sampleWeight(coc, mip) * inLayer;
    foreground += s * w;
    opacity += o;
    i += w;
}

void accumulateForegroundCenter(inout vec4 foreground, inout float opacity, inout float i,
        const highp vec2 pos, const float border, const float mip) {
    accumulateForeground(foreground, opacity, i, pos, border, mip);
}

void accumulateForegroundMirror(inout vec4 foreground, inout float opacity, inout float i,
        const highp vec2 center, const vec2 offset, const float border, const float mip) {
    // The code below is equivalent to:
    //  accumulateForeground(foreground, opacity, i, diaphragm(center,  offset), border, mip);
    //  accumulateForeground(foreground, opacity, i, diaphragm(center, -offset), border, mip);
    //  return;
    // but selects the min coc of opposite samples as a way to guess the color occluded by
    // the geometry.

    vec2 pos0 = diaphragm(center, offset);
    float coc0 = textureLod(materialParams_cocFgBg, pos0, mip).r;
    vec4 s0 = textureLod(materialParams_foreground, pos0, mip);
    vec2 pos1 = diaphragm(center, -offset);
    float coc1 = textureLod(materialParams_cocFgBg, pos1, mip).r;
    vec4 s1 = textureLod(materialParams_foreground, pos1, mip);
    float coc = min(coc0, coc1);
    float inLayer = isForeground(coc);
    float o = cocToAlpha(coc) * inLayer * 2.0;  // we're accumulating 2 samples
    float w = intersection(border, abs(coc), mip) * sampleWeight(coc, mip) * inLayer;
    foreground += s0 * w;
    foreground += s1 * w;
    opacity += o;
    i += w * 2.0;
}

float getMipLevel(const float ringCount, const float kernelSize) {
#if KERNEL_USE_MIPMAP
    // note: the 0.5 is to convert from highres to our downslampled texture
    float ringDistanceInTexels = 0.5 * kernelSize * rcp(ringCount - 0.5);
    float mip = log2(ringDistanceInTexels);

    // We should round-up to avoid too large gaps in the kernel. Small gaps are filled by the
    // median pass. With round() below + noise, most gaps are handled by the median pass,
    // and the quality is much better overall.

#if defined(TARGET_MOBILE)
    // on mobile, the mip level is not used in computations in the shader,
    // so we just let the texture unit pick the the "nearest" mipmap level.
#else
    mip = max(0.0, floor(mip + 0.5));
#endif

    return mip;
#else
    return 0.0;
#endif
}

void postProcess(inout PostProcessInputs postProcess) {
    const float ringCountGather = float(RING_COUNT_GATHER);
    const float ringCountFast   = float(RING_COUNT_FAST);
    vec2 tiles = textureLod(materialParams_tiles, variable_vertex.zw, 0.0).rg;

    /*
     * Tiles that are neither foreground or background (in focus) can be skipped
     */

    if (isTrivialTile(tiles)) {
        postProcess.color = vec4(0.0);
        postProcess.alpha = 0.0;
        return;
    }

    vec4 foreground = vec4(0.0);
    vec4 background = vec4(0.0);

    // we use the full resolution pixel size because that's the unit the CoC is in
    highp vec2 uv = variable_vertex.xy;
    highp vec2 cocToTexelOffset = materialParams.cocToTexelOffset;

#if KERNEL_USE_NOISE
    // When using mipmaping the noise seems to hurt more than it helps
    // A good random generator is essential, this one is okay.
    float randomAngle = random(gl_FragCoord.xy) * (2.0 * PI);
    float random01 = random(gl_FragCoord.xy * vec2(5099.0, 3499.0)); // large primes seem to work ok
    float randomUniformDiskRadius = 0.5 * sqrt(random01);
    vec2  randomDisk = vec2(cos(randomAngle), sin(randomAngle));
#else
    const vec2 noise = vec2(0.0);
#endif

    if (isFastTile(tiles)) {
        float kernelSize = (abs(tiles.r) + abs(tiles.g)) * 0.5;
        float mip = getMipLevel(ringCountFast, kernelSize);

#if KERNEL_USE_NOISE
        float noiseRadius = randomUniformDiskRadius * rcp(ringCountFast - 0.5);
        vec2  noise = noiseRadius * randomDisk;
#endif
        vec2 uvCenter = uv + noise * kernelSize * cocToTexelOffset;

        foreground = textureLod(materialParams_foregroundLinear, uvCenter, mip);
        for (float i = 1.0; i < ringCountFast; i += 1.0) {
            float radius;
            float count;
            vec2 p;
            mat2 r;
            initRing(i, ringCountFast, kernelSize, noise, radius, count, r, p);
            for (float j = 0.0; j < count; j += 2.0) {
                foreground += textureLod(materialParams_foregroundLinear,
                        diaphragm(uvCenter,  p * cocToTexelOffset), mip);
                foreground += textureLod(materialParams_foregroundLinear,
                        diaphragm(uvCenter, -p * cocToTexelOffset), mip);
                p = r * p;
            }
        }
        foreground *= rcp(sampleCount(ringCountFast));
        //foreground.b += 0.1;
#if POST_PROCESS_OPAQUE
        // kill the work performed above
        foreground.a = 1.0;
#endif
        postProcess.color = foreground;
        postProcess.alpha = 1.0;
        return;
    }

    /*
     * Then process the slow foreground / background tiles
     */

    float fgOpacity = 0.0;
    float bgOpacity = 0.0;
#if KERNEL_USE_NOISE
    float noiseRadius = randomUniformDiskRadius * rcp(ringCountGather - 0.5);
    vec2  noise = noiseRadius * randomDisk;
#else
    const float noiseRadius = 0.0;
#endif


    if (isForegroundTile(tiles)) {
        // for a foreground tile, the kernel size is the largest CoC radius
        float kernelSize = -tiles.g;
        float mip = getMipLevel(ringCountGather, kernelSize);
        vec2 uvCenter = uv + noise * kernelSize * cocToTexelOffset;
        float c = 0.0;

        // the center sample is handled separately, since it's by itself
        accumulateForegroundCenter(foreground, fgOpacity, c, uvCenter, 0.0, mip);

        for (float i = 1.0; i < ringCountGather; i += 1.0) {

            float radius;
            float count;
            vec2 p;
            mat2 r;

            initRing(i, ringCountGather, kernelSize, noise, radius, count, r, p);

            for (float j = 0.0; j < count; j += 2.0) {
                accumulateForegroundMirror(foreground, fgOpacity, c,
                        uvCenter, p * cocToTexelOffset, radius, mip);
                p = r * p;
            }
        }

        if (c < MEDIUMP_FLT_MIN) {
            foreground *= 0.0;
            fgOpacity  *= 0.0;
        } else {
            foreground *= rcp(c);
            fgOpacity  *= rcp(sampleCount(ringCountGather));
        }
        //foreground.r += 0.1;
    }


    if (isBackgroundTile(tiles)) {
        vec2 centerCoc  = textureLod(materialParams_cocFgBg, uv, 0.0).rg;
        float kernelSize = abs(centerCoc.g);
        float mip = getMipLevel(ringCountGather, kernelSize);
        vec2 uvCenter = uv + noise * kernelSize * cocToTexelOffset;

        Bucket prev;
        initBucket(prev);

        accumulateRing(prev, 0.0, ringCountGather, kernelSize, noise, uvCenter, cocToTexelOffset, mip, true);

        // the optimizer is not able to remove this loop when it has only one iteration
#if RING_COUNT_GATHER == 3
        accumulateRing(prev, 1.0, ringCountGather, kernelSize, noise, uvCenter, cocToTexelOffset, mip, false);
#else
        for (float i = 1.0; i < ringCountGather - 1.0 ; i += 1.0) {
            accumulateRing(prev, i, ringCountGather, kernelSize, noise, uvCenter, cocToTexelOffset, mip, false);
        }
#endif

        accumulateBackgroundCenter(prev, uvCenter, ringCountGather, kernelSize, noiseRadius, mip);

        background = prev.c;
        bgOpacity = cocToAlpha(prev.coc);
#if defined(TARGET_MOBILE)
        bgOpacity *= saturate((kernelSize - MAX_IN_FOCUS_COC) / (2.0 - MAX_IN_FOCUS_COC));
#else
        bgOpacity *= smoothstep(MAX_IN_FOCUS_COC, 2.0, kernelSize);
#endif

        if (prev.cw < MEDIUMP_FLT_MIN) {
            background *= 0.0;
        } else {
            background *= rcp(prev.cw);
        }
        //background.g += 0.1;
    }

#if POST_PROCESS_OPAQUE
    // kill the work performed above
    foreground.a = 1.0;
    background.a = 1.0;
#endif

    // composite the foreground and background layers together.
    // the downside of doing this is that we couldn't use a different upscaler for each
    // layer, but this is a lot less costly

    foreground *= fgOpacity;
    background *= bgOpacity;
    postProcess.color = foreground + (1.0 - fgOpacity) * background;
    postProcess.alpha = fgOpacity  + (1.0 - fgOpacity) * bgOpacity;
}

}
