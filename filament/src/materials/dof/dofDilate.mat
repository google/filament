material {
    name : dofDilate,
    parameters : [
        {
            type : sampler2d,
            name : tiles,
            precision: medium
        }
    ],
    variables : [
        vertex
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = uvToRenderTargetUV(postProcess.normalizedUV);
    }
}

fragment {

#include "dofUtils.fs"

void dummy(){}

// Size of a tile in full-resolution pixels -- must match tileSize in PostProcessManager.cpp
#define TILE_SIZE   16.0

vec2 tap(vec2 uv, vec2 offset) {
    return textureLod(materialParams_tiles, uv + offset, 0.0).rg;
}

vec2 dilate(inout vec2 center, vec2 tap) {
    // Tiles that can affect us need to transfer their CoC to us (for the foreground it's
    // min(ourCoc, theirCoc) because CoC are negative (the min is the larger radius).
    center.r = min(center.r, tap.r);
    center.g = max(center.g, tap.g);
    return center;
}

void postProcess(inout PostProcessInputs postProcess) {
    const float radius = 1.0;
    // we need highp here just to maintain precision of 1/x
    highp vec2 size = vec2(textureSize(materialParams_tiles, 0));
    highp vec2 isize = 1.0 / size;

    vec2 radii = float(radius) * isize;

    vec2 uv = variable_vertex.xy;

    // center
    vec2 center = tap(uv, vec2(0, 0));

    // horizontal sides
    for (float j = -radius ; j <= radius ; j += 1.0) {
        float y = j * isize.y;
        dilate(center, tap(uv, vec2(-radii.x, y)));
        dilate(center, tap(uv, vec2( radii.x, y)));
    }

    // vertical sides
    for (float i = -radius + 1.0 ; i <= radius - 1.0 ; i += 1.0) {
        float x = i * isize.x;
        dilate(center, tap(uv, vec2(x, -radii.y)));
        dilate(center, tap(uv, vec2(x,  radii.y)));
    }

    postProcess.color.rg = center;
}
}
