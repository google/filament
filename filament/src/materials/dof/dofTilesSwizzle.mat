material {
    name : dofTilesSwizzle,
    parameters : [
        {
            type : sampler2d,
            name : cocMinMax,
            precision: medium
        },
        {
            type : float2,
            name : texelSize,
            precision: high
        }
    ],
    variables : [
        vertex
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        // see explanation in dofDownSample.mat
        postProcess.normalizedUV = uvToRenderTargetUV(postProcess.normalizedUV);
        postProcess.vertex.xy = postProcess.normalizedUV - 0.5 * materialParams.texelSize;
    }
}

fragment {

void dummy(){}

float max4(vec4 f) {
    vec2 t = max(f.xy, f.zw);
    return max(t.x, t.y);
}

float min4(vec4 f) {
    vec2 t = min(f.xy, f.zw);
    return min(t.x, t.y);
}

void postProcess(inout PostProcessInputs postProcess) {
    highp vec2 uv = variable_vertex.xy;
    highp vec2 size = vec2(textureSize(materialParams_cocMinMax, 0));

    ivec2 i = ivec2(uv * size - 0.5);

#if defined(FILAMENT_HAS_FEATURE_TEXTURE_GATHER)
    vec4 mi = textureGather(materialParams_cocMinMax, uv, 0); // 01, 11, 10, 00
#else
    vec4 mi;
    mi[0] = texelFetchOffset(materialParams_cocMinMax, i, 0, ivec2(0, 1)).r;
    mi[1] = texelFetchOffset(materialParams_cocMinMax, i, 0, ivec2(1, 1)).r;
    mi[2] = texelFetchOffset(materialParams_cocMinMax, i, 0, ivec2(1, 0)).r;
    mi[3] = texelFetchOffset(materialParams_cocMinMax, i, 0, ivec2(0, 0)).r;
#endif

    // compute tile's min CoC
    postProcess.color.r = min4(mi);

    // compute tile's max CoC
    postProcess.color.g = max4(mi);
}

}
