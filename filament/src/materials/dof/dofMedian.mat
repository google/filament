material {
    name : dofMedian,
    parameters : [
        {
            type : sampler2d,
            name : dof,
            precision: medium
        },
        {
            type : sampler2d,
            name : alpha,
            precision: medium
        },
        {
            type : sampler2d,
            name : tiles,
            precision: medium
        }
    ],
    variables : [
        vertex
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = uvToRenderTargetUV(postProcess.normalizedUV);
    }
}

fragment {

#include "dofUtils.fs"

layout(location = 1) out float outAlpha;

/*
 * Based on "A Fast, Small-Radius GPU Median Filter"
 * by Morgan McGuire & Williams College
 * [https://casual-effects.com/research/McGuire2008Median/index.html]
 */

void sort2(inout vec4 a, inout vec4 b) {
    vec4 t = a;
    a = min(a, b);
    b = max(t, b);
}

void minLeft(inout vec4 a, inout vec4 b, inout vec4 c) {
    sort2(a, b);
    sort2(a, c);
}

void maxRight(inout vec4 a, inout vec4 b, inout vec4 c) {
    sort2(b, c);
    sort2(a, c);
}

void minLeftMaxRight(inout vec4 a, inout vec4 b, inout vec4 c) {
    maxRight(a, b, c);
    sort2(a, b);
}

void minLeftMaxRight(inout vec4 a, inout vec4 b, inout vec4 c, inout vec4 d) {
    sort2(a, b);
    sort2(c, d);
    sort2(a, c);
    sort2(b, d);
}

void minLeftMaxRight(inout vec4 a, inout vec4 b, inout vec4 c, inout vec4 d, inout vec4 e) {
    sort2(a, b);
    sort2(c, d);
    minLeft(a, c, e);
    maxRight(b, d, e);
}

void minLeftMaxRight(inout vec4 a, inout vec4 b, inout vec4 c, inout vec4 d, inout vec4 e, inout vec4 f) {
    sort2(a, d);
    sort2(b, e);
    sort2(c, f);
    minLeft(a, b, c);
    maxRight(d, e, f);
}

// - we can't use a function because offset must be a constant expression
// - we can't use line continuation because that's not supported on desktop
#define makeSample(ij, o) vec4(texelFetchOffset(materialParams_dof, ij, 0, o).rgb, texelFetchOffset(materialParams_alpha, ij, 0, o).r)

vec4 median(ivec2 ij) {
    vec4 v[9];
    v[0] = makeSample(ij, ivec2(-1, -1));
    v[1] = makeSample(ij, ivec2( 0, -1));
    v[2] = makeSample(ij, ivec2( 1, -1));
    v[3] = makeSample(ij, ivec2(-1,  0));
    v[4] = makeSample(ij, ivec2( 0,  0));
    v[5] = makeSample(ij, ivec2( 1,  0));
    v[6] = makeSample(ij, ivec2(-1,  1));
    v[7] = makeSample(ij, ivec2( 0,  1));
    v[8] = makeSample(ij, ivec2( 1,  1));

    // max() is a faster alternative to the median filter, but it looks pretty bad imho
    //return max(v[0], max(v[1], max(v[2], max(v[3], max(v[4], max(v[5], max(v[6], max(v[7], v[8]))))))));
    // it looks better (than max()) to skip this filter and keep the noise
    //return v[4];

    minLeftMaxRight(v[0], v[1], v[2], v[3], v[4], v[5]);
    minLeftMaxRight(v[1], v[2], v[3], v[4], v[6]);
    minLeftMaxRight(v[2], v[3], v[4], v[7]);
    minLeftMaxRight(v[3], v[4], v[8]);
    return v[4];
}

void postProcess(inout PostProcessInputs postProcess) {
    vec2 tiles = textureLod(materialParams_tiles, variable_vertex.xy, 0.0).rg;
    vec4 dof = vec4(0.0);

    if (!isTrivialTile(tiles)) {
        vec2 size = vec2(textureSize(materialParams_dof, 0));
        ivec2 ij = ivec2(variable_vertex.xy * size);
        dof = median(ij);
    }

    postProcess.color  = dof;
    outAlpha           = dof.a;
}

}
