material {
    name : dofMipmap,
    parameters : [
        {
            type : sampler2d,
            name : color,
            precision: medium
        },
        {
            type : sampler2d,
            name : coc,
            precision: medium
        },
        {
            type : int,
            name : mip
        },
        {
            type : float,
            name : weightScale
        },
        {
            type : float2,
            name : texelSize
        }
    ],
    variables : [
        vertex
    ],
    outputs : [
        {
            name : color,
            target : color,
            type : float4
        },
        {
            name : coc,
            target : color,
            type : float
        }
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        // see explanation in dofDownSample.mat
        postProcess.normalizedUV = uvToRenderTargetUV(postProcess.normalizedUV);
        postProcess.vertex.xy = postProcess.normalizedUV - 0.5 * materialParams.texelSize;
    }
}

fragment {

#include "dofUtils.fs"

void dummy(){}

void postProcess(inout PostProcessInputs postProcess) {
    highp vec2 uv = variable_vertex.xy;

    // the source is guaranteed to be a multiple of two, so we know the bilinear weights are 0.25

    // the bilateral weights need to be scaled by to match the lower resolution
    float weightScale = materialParams.weightScale;
    float mip = float(materialParams.mip);

    vec4 s01 = textureLodOffset(materialParams_color, uv, mip, ivec2(0, 1));
    vec4 s11 = textureLodOffset(materialParams_color, uv, mip, ivec2(1, 1));
    vec4 s10 = textureLodOffset(materialParams_color, uv, mip, ivec2(1, 0));
    vec4 s00 = textureLodOffset(materialParams_color, uv, mip, ivec2(0, 0));

    // fetch the 4 corresponding CoC (textureGather with LOD doesn't exist)
    vec4 c;
    c[0] = textureLodOffset(materialParams_coc, uv, mip, ivec2(0, 1)).r;
    c[1] = textureLodOffset(materialParams_coc, uv, mip, ivec2(1, 1)).r;
    c[2] = textureLodOffset(materialParams_coc, uv, mip, ivec2(1, 0)).r;
    c[3] = textureLodOffset(materialParams_coc, uv, mip, ivec2(0, 0)).r;

    float outCoc = downsampleCoC(c);
    vec4 w = downsampleCocWeights(c, outCoc, weightScale);
    vec4 outColor = (s01 * w[0] + s11 * w[1] + s10 * w[2] + s00 * w[3]) * rcp(dot(vec4(1.0), w));

#if POST_PROCESS_OPAQUE
    // kill the work performed above
    outColor.a = 1.0;
#endif

    // Output to MRTs
    postProcess.color = outColor;
    postProcess.coc   = outCoc;
}

}
