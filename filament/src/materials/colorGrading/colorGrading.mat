material {
    name : colorGrading,
    parameters : [
        {
            type : sampler2d,
            name : colorBuffer,
            precision: medium
        },
        {
            type : sampler3d,
            name : lut,
            precision: medium
        },
        {
            type : float2,
            name : lutSize
        },
        {
            type : sampler2d,
            name : bloomBuffer,
            precision: medium
        },
        {
            type : sampler2d,
            name : flareBuffer,
            precision: medium
        },
        {
            type : sampler2d,
            name : dirtBuffer,
            precision: medium
        },
        {
            type : sampler2d,
            name : starburstBuffer,
            precision: medium
        },
        {
            type : int,
            name : dithering
        },
        {
            type : int,
            name : fxaa
        },
        {
            type : float,
            name : temporalNoise,
            precision: high
        },
        {
            type : float4,
            name : bloom
        },
        {
            type : float4,
            name : vignette
        },
        {
            type : float4,
            name : vignetteColor
        },
        {
            type : float4,
            name : viewport,
            precision : high
        }
    ],
    variables : [
        vertex
    ],
    depthWrite : false,
    depthCulling : false,
    domain: postprocess
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = materialParams.viewport.xy + postProcess.normalizedUV * materialParams.viewport.zw;
        postProcess.vertex.xy = uvToRenderTargetUV(postProcess.vertex.xy);
    }
}

fragment {

#include "../../../../shaders/src/dithering.fs"
#include "../../../../shaders/src/vignette.fs"
#include "colorGrading.fs"

void dummy(){}

float starburst(vec2 uv) {
    // get an offset that continuously moves with the camera
    vec3 forward = getViewFromWorldMatrix()[2].xyz;
    float offset = forward.x + forward.y + forward.z;

    vec2 center = uv - vec2(0.5001);
    float d = length(center);
    float radial = acosFastPositive(center.x / d);
    float mask =
        textureLod(materialParams_starburstBuffer, fract(vec2(radial + offset * 1.0, 0.0)), 0.0).r *
        textureLod(materialParams_starburstBuffer, fract(vec2(radial - offset * 0.5, 0.0)), 0.0).r ;

    return saturate(mask + (1.0 - smoothstep(0.0, 0.3, d)));
}

vec3 bloom(highp vec2 uv, vec3 color) {
    vec3 result = vec3(0.0);

    if (materialParams.bloom.x > 0.0) {
        vec3 bloom = textureLod(materialParams_bloomBuffer, uv, 0.0).rgb;
        result += bloom * materialParams.bloom.x;
    }

    if (materialParams.bloom.w > 0.0) {
        float starburstMask = starburst(uv);
        vec3 flare = textureLod(materialParams_flareBuffer, uv, 0.0).rgb;
        result += flare * (materialParams.bloom.w * starburstMask);
    }

    if (materialParams.bloom.z > 0.0) {
        float dirtIntensity = materialParams.bloom.z;
        vec3 dirt = textureLod(materialParams_dirtBuffer, uv, 0.0).rgb;
        result *= dirt * dirtIntensity;
    }

    result += color * materialParams.bloom.y;
    return result;
}

vec4 resolveFragment(highp vec2 uv) {
#if POST_PROCESS_OPAQUE
    return vec4(textureLod(materialParams_colorBuffer, uv, 0.0).rgb, 1.0);
#else
    vec4 color = textureLod(materialParams_colorBuffer, uv, 0.0);
    color.rgb *= 1.0 / (color.a + FLT_EPS);
    return color;
#endif
}

void postProcess(inout PostProcessInputs postProcess) {
    highp vec2 uv = variable_vertex.xy;

    vec4 color = resolveFragment(uv);

    // Bloom
    if (materialParams.bloom.x > 0.0) {
        color.rgb = bloom(uv, color.rgb);
    }

    // Vignette
    if (materialParams.vignette.x < MEDIUMP_FLT_MAX) {
        color.rgb = vignette(color.rgb, uv, materialParams.vignette, materialParams.vignetteColor);
    }

    // Color grading
    color.rgb  = colorGrade(materialParams_lut, color.rgb);

    // output in premultiplied alpha
#if !POST_PROCESS_OPAQUE
    color.rgb *= color.a + FLT_EPS;
#endif

    // dithering
    if (materialParams.dithering > 0) {
        color = dither(color, materialParams.temporalNoise);
    }

    // kill alpha computations when opaque / fxaa luminance
#if POST_PROCESS_OPAQUE
    color.a = 1.0;
    if (materialParams.fxaa > 0) {
        color.a = luminance(color.rgb);
    }
#endif

    postProcess.color = color;
}

}
