material {
    name : colorGrading,
    parameters : [
        {
            type : sampler2d,
            name : colorBuffer,
            precision: medium
        },
        {
            type : sampler3d,
            name : lut,
            precision: medium
        },
        {
            type : sampler2d,
            name : bloomBuffer,
            precision: medium
        },
        {
            type : sampler2d,
            name : flareBuffer,
            precision: medium
        },
        {
            type : sampler2d,
            name : dirtBuffer,
            precision: medium
        },
        {
            type : sampler2d,
            name : starburstBuffer,
            precision: medium
        },
        {
            type : int,
            name : dithering
        },
        {
            type : int,
            name : fxaa
        },
        {
            type : float,
            name : temporalNoise,
            precision: high
        },
        {
            type : float4,
            name : bloom
        },
        {
            type : float4,
            name : vignette
        },
        {
            type : float4,
            name : vignetteColor
        }
    ],
    variables : [
        vertex
    ],
    depthWrite : false,
    depthCulling : false,
    domain: postprocess
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = postProcess.normalizedUV;
    }
}

fragment {

#include "../../../../shaders/src/dithering.fs"
#include "../../../../shaders/src/vignette.fs"

void dummy(){ }

float starburst(const vec2 uv) {
    // get an offset that continuously moves with the camera
    vec3 forward = getViewFromWorldMatrix()[2].xyz;
    float offset = forward.x + forward.y + forward.z;

    vec2 center = uv - vec2(0.5001);
    float d = length(center);
    float radial = acosFastPositive(center.x / d);
    float mask =
        textureLod(materialParams_starburstBuffer, fract(vec2(radial + offset * 1.0, 0.0)), 0.0).r *
        textureLod(materialParams_starburstBuffer, fract(vec2(radial - offset * 0.5, 0.0)), 0.0).r ;

    return saturate(mask + (1.0 - smoothstep(0.0, 0.3, d)));
}

vec3 bloom(const vec3 color) {
    highp vec2 uv = variable_vertex.xy;

    vec3 result = vec3(0.0);

    if (materialParams.bloom.x > 0.0) {
        vec3 bloom = textureLod(materialParams_bloomBuffer, uv, 0.0).rgb;
        result += bloom * materialParams.bloom.x;
    }

    if (materialParams.bloom.w > 0.0) {
        float starburstMask = starburst(uv);
        vec3 flare = textureLod(materialParams_flareBuffer, uv, 0.0).rgb;
        result += flare * (materialParams.bloom.w * starburstMask);
    }

    if (materialParams.bloom.z > 0.0) {
        float dirtIntensity = materialParams.bloom.z;
        vec3 dirt = textureLod(materialParams_dirtBuffer, uv, 0.0).rgb;
        result *= dirt * dirtIntensity;
    }

    result += color * materialParams.bloom.y;
    return result;
}

vec3 colorGrade(mediump sampler3D lut, const vec3 x) {
    // Alexa LogC EI 1000
    const float a = 5.555556;
    const float b = 0.047996;
    const float c = 0.244161 / log2(10.0);
    const float d = 0.386036;
    vec3 logc = c * log2(a * x + b) + d;
    return textureLod(lut, logc, 0.0).rgb;
}

vec3 resolveFragment(const ivec2 uv) {
    return texelFetch(materialParams_colorBuffer, uv, 0).rgb;
}

vec4 resolveAlphaFragment(const ivec2 uv) {
    return texelFetch(materialParams_colorBuffer, uv, 0);
}

vec4 resolve() {
#if POST_PROCESS_OPAQUE
    vec4 color = vec4(resolveFragment(ivec2(getUV())), 1.0);
    if (materialParams.bloom.x > 0.0) {
        color.rgb = bloom(color.rgb);
    }
    if (materialParams.vignette.x < MEDIUMP_FLT_MAX) {
        highp vec2 uv = getUV() * frameUniforms.resolution.zw;
        color.rgb = vignette(color.rgb, uv, materialParams.vignette, materialParams.vignetteColor);
    }
    color.rgb  = colorGrade(materialParams_lut, color.rgb);
    if (materialParams.fxaa > 0) {
        color.a = luminance(color.rgb);
    }
#else
    vec4 color = resolveAlphaFragment(ivec2(getUV()));
    color.rgb /= color.a + FLT_EPS;
    if (materialParams.bloom.x > 0.0) {
        color.rgb = bloom(color.rgb);
    }
    if (materialParams.vignette.x < MEDIUMP_FLT_MAX) {
        highp vec2 uv = getUV() * frameUniforms.resolution.zw;
        color.rgb = vignette(color.rgb, uv, materialParams.vignette, materialParams.vignetteColor);
    }
    color.rgb  = colorGrade(materialParams_lut, color.rgb);
    color.rgb *= color.a + FLT_EPS;
#endif
    return color;
}

void postProcess(inout PostProcessInputs postProcess) {
    postProcess.color = resolve();
    if (materialParams.dithering > 0) {
        vec4 dithered = dither(postProcess.color, materialParams.temporalNoise);
#if POST_PROCESS_OPAQUE
        postProcess.color.rgb = dithered.rgb;
#else
        postProcess.color = dithered;
#endif
    }
}

}
