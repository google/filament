material {
    name : curl,
    shadingModel : lit,
    doubleSided: true,
    parameters : [
        {
            type : sampler2d,
            name : IMAGE_A
        },
        {
            type : sampler2d,
            name : IMAGE_B
        },
        {
            type : float,
            name : APEX
        },
        {
            type : float,
            name : THETA
        },
        {
            type : float,
            name : ROUGHNESS
        },
        {
            type : bool,
            name : USE_CPU
        }
    ],
    requires: [
        uv0
    ]
}

vertex {

    // Applies the deformation described in "Deforming Pages of Electronic Books" by Hong et al.
    vec3 deformPoint(float theta, float apex, float u, float v) {
        float r = sqrt(u * u + (v - apex) * (v - apex));
        float d = r * sin(theta);
        float alpha = asin(u / r);
        float beta = alpha / sin(theta);
        float x = d * sin(beta);
        float y = r + apex - d * (1.0 - cos(beta)) * sin(theta);
        float z = d * (1.0 - cos(beta)) * cos(theta);
        return vec3(x, y, z);
    }

    void materialVertex(inout MaterialVertexInputs material) {
        if (materialParams.USE_CPU) {
            return;
        }
        float e = 0.01;
        float theta = materialParams.THETA;
        float apex = materialParams.APEX;
        vec2 uv = vec2(material.uv0.x, 1.0 - material.uv0.y);
        vec3 p = deformPoint(theta, apex, uv.s, uv.t);
        vec3 p1 = deformPoint(theta, apex, uv.s + e, uv.t);
        vec3 p2 = deformPoint(theta, apex, uv.s, uv.t + e);
        vec3 normal = normalize(cross(p1 - p, p2 - p));
        material.worldNormal = getWorldFromModelNormalMatrix() * normal;
        mat4 transform = getWorldFromModelMatrix();
        material.worldPosition = mulMat4x4Float3(transform, p);
    }
}

fragment {
    void material(inout MaterialInputs material) {
        prepareMaterial(material);

        vec2 uv = getUV0();

        vec4 c;
        if (gl_FrontFacing) {
            c = texture(materialParams_IMAGE_A, uv);
        } else {
            uv.x = 1.0 - uv.x;
            c = texture(materialParams_IMAGE_B, uv);
        }

        material.baseColor.rgb = inverseTonemapSRGB(c.rgb);
        material.roughness = materialParams.ROUGHNESS;
        material.metallic = 0.0;
    }
}
