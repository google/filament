// This script accepts the following parameters:
//
// filament_tools_dir
//     Path to the Filament distribution/install directory for desktop
//     (produced by make/ninja install). This directory must contain bin/matc
//
// Example:
//     ./gradlew -Pfilament_tools_dir=../../dist-release assembleDebug

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def filamentToolsPath = file("../../../../out/release/filament")
if (project.hasProperty("filament_tools_dir")) {
    filamentToolsPath = file("$filament_tools_dir")
}

// Custom task to compile material files using matc
// This task handles incremental builds
class MaterialCompiler extends DefaultTask {
    @Input
    File matcPath

    @SuppressWarnings("GroovyUnusedDeclaration")
    @InputDirectory
    File inputDir

    @OutputDirectory
    File outputDir

    @SuppressWarnings("GroovyUnusedDeclaration")
    @TaskAction
    void execute(IncrementalTaskInputs inputs) {
        if (!inputs.incremental) {
            project.delete(project.fileTree(outputDir).matching { include '*.filamat' })
        }

        inputs.outOfDate { InputFileDetails outOfDate ->
            def file = outOfDate.file
            project.exec {
                executable "${matcPath}/bin/matc"
                args('-O', '-p', 'mobile', '-o', getOutputFile(file), file)
            }
        }

        inputs.removed { InputFileDetails removed ->
            getOutputFile(removed.file).delete()
        }
    }

    File getOutputFile(final File file) {
        return new File(outputDir, file.name[0..file.name.lastIndexOf('.')] + 'filamat')
    }
}

task compileMaterials(type: MaterialCompiler) {
    group 'Filament'
    description 'Compile materials'

    inputDir = file("src/materials")
    outputDir = file("src/main/assets/materials")
    matcPath = filamentToolsPath
}
build.dependsOn compileMaterials

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.google.android.filament.hellotriangle"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Filament comes with native code, the following declarations
    // can be used to generate architecture specific APKs
    flavorDimensions 'cpuArch'
    productFlavors {
        arm8 {
            dimension 'cpuArch'
            ndk {
                abiFilters 'arm64-v8a'
            }
        }
        arm7 {
            dimension 'cpuArch'
            ndk {
                abiFilters 'armeabi-v7a'
            }
        }
        x86_64 {
            dimension 'cpuArch'
            ndk {
                abiFilters 'x86_64'
            }
        }
        x86 {
            dimension 'cpuArch'
            ndk {
                abiFilters 'x86'
            }
        }
        universal {
            dimension 'cpuArch'
        }
    }

    // We use the .filamat extension for materials compiled with matc
    // Telling aapt to not compress them allows to load them efficiently
    aaptOptions {
        noCompress 'filamat'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Depend on Filament
    implementation 'com.google.android.filament:filament-android'
}
