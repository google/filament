material {
    name : blur,
    shadingModel : unlit,
    depthWrite: false,
    depthCulling: false,
    parameters : [
        {
            type : sampler2d,
            name : color
        },
        {
            type : float4[9],
            name : weights
        },
        {
            type : int,
            name : passIndex
        }
    ],
    requires: [
        uv0
    ]

}
fragment {

    const int kGaussianSampleCount = 9;
    const float kReinhardWeight = 5.0;

    vec3 Tonemap_ReinhardWeighted(const vec3 x, float weight) {
        // Weighted Reinhard tone-mapping operator designed for post-processing
        // This tone-mapping operator is invertible
        return x * (weight / (max3(x) + 1.0));
    }

    void material(inout MaterialInputs material) {
        prepareMaterial(material);
        vec3 c = vec3(0);
        for (int i = 0; i < kGaussianSampleCount; i++) {
            float2 st = getUV0() + materialParams.weights[i].yz * getResolution().zw;
            vec3 color = texture(materialParams_color, st).rgb;
            if (materialParams.passIndex == 0) {
                color = Tonemap_ReinhardWeighted(color, kReinhardWeight);
            }
            c += color * materialParams.weights[i].x;
        }
        material.baseColor.rgb = c;
    }
}
